
IHateEverything3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006624  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08006760  08006760  00016760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067d4  080067d4  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  080067d4  080067d4  000167d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067dc  080067dc  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067dc  080067dc  000167dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067e0  080067e0  000167e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  080067e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f1c  200000b8  0800689c  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fd4  0800689c  00020fd4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016694  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003423  00000000  00000000  00036775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  00039b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  0003ada0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187a4  00000000  00000000  0003be88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c42  00000000  00000000  0005462c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fcb4  00000000  00000000  0006826e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7f22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aa8  00000000  00000000  000f7f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000b8 	.word	0x200000b8
 8000158:	00000000 	.word	0x00000000
 800015c:	08006748 	.word	0x08006748

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000bc 	.word	0x200000bc
 8000178:	08006748 	.word	0x08006748

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <InitButtons>:

TIM_HandleTypeDef* Button1DebounceTimer;
TIM_HandleTypeDef* Button2DebounceTimer;

void InitButtons(TIM_HandleTypeDef *button1DebounceTimer, TIM_HandleTypeDef *button2DebounceTimer)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
	Button1DebounceTimer = button1DebounceTimer;
 800047e:	4a05      	ldr	r2, [pc, #20]	; (8000494 <InitButtons+0x20>)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6013      	str	r3, [r2, #0]
	Button2DebounceTimer = button2DebounceTimer;
 8000484:	4a04      	ldr	r2, [pc, #16]	; (8000498 <InitButtons+0x24>)
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	6013      	str	r3, [r2, #0]
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	200006b4 	.word	0x200006b4
 8000498:	200006b8 	.word	0x200006b8

0800049c <Button1DebounceTimerCallback>:

void Button1DebounceTimerCallback()
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(Button1DebounceTimer);
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <Button1DebounceTimerCallback+0x28>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f004 ff03 	bl	80052b0 <HAL_TIM_Base_Stop_IT>
	if(HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_RESET)
 80004aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ae:	4806      	ldr	r0, [pc, #24]	; (80004c8 <Button1DebounceTimerCallback+0x2c>)
 80004b0:	f003 fc56 	bl	8003d60 <HAL_GPIO_ReadPin>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d101      	bne.n	80004be <Button1DebounceTimerCallback+0x22>
	{
		OnButton1Press();
 80004ba:	f000 f837 	bl	800052c <OnButton1Press>
	}
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	200006b4 	.word	0x200006b4
 80004c8:	40020c00 	.word	0x40020c00

080004cc <Button2DebounceTimerCallback>:

void Button2DebounceTimerCallback()
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(Button2DebounceTimer);
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <Button2DebounceTimerCallback+0x28>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4618      	mov	r0, r3
 80004d6:	f004 feeb 	bl	80052b0 <HAL_TIM_Base_Stop_IT>
	if(HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == GPIO_PIN_RESET)
 80004da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004de:	4806      	ldr	r0, [pc, #24]	; (80004f8 <Button2DebounceTimerCallback+0x2c>)
 80004e0:	f003 fc3e 	bl	8003d60 <HAL_GPIO_ReadPin>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d101      	bne.n	80004ee <Button2DebounceTimerCallback+0x22>
	{
		OnButton2Press();
 80004ea:	f000 f825 	bl	8000538 <OnButton2Press>
	}
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200006b8 	.word	0x200006b8
 80004f8:	40020c00 	.word	0x40020c00

080004fc <Button1Callback>:

void Button1Callback()
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(Button1DebounceTimer);
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <Button1Callback+0x14>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4618      	mov	r0, r3
 8000506:	f004 fe81 	bl	800520c <HAL_TIM_Base_Start_IT>
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200006b4 	.word	0x200006b4

08000514 <Button2Callback>:

void Button2Callback()
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(Button2DebounceTimer);
 8000518:	4b03      	ldr	r3, [pc, #12]	; (8000528 <Button2Callback+0x14>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4618      	mov	r0, r3
 800051e:	f004 fe75 	bl	800520c <HAL_TIM_Base_Start_IT>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	200006b8 	.word	0x200006b8

0800052c <OnButton1Press>:

static void OnButton1Press()
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0

}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <OnButton2Press>:

static void OnButton2Press()
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr

08000544 <setIntensity>:

void enableHex(SPI_HandleTypeDef * hspi){
	writeHexVal(hspi, LED_DECODE_MODE, 0xFF);
}

void setIntensity(SPI_HandleTypeDef * hspi, uint8_t val){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	70fb      	strb	r3, [r7, #3]
	writeHexVal(hspi, LED_INTENSITY, val);
 8000550:	78fb      	ldrb	r3, [r7, #3]
 8000552:	461a      	mov	r2, r3
 8000554:	2102      	movs	r1, #2
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f000 f9ae 	bl	80008b8 <writeHexVal>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <setScanLimit>:

void setScanLimit(SPI_HandleTypeDef * hspi, uint8_t val){
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	460b      	mov	r3, r1
 800056e:	70fb      	strb	r3, [r7, #3]
	writeHexVal(hspi, LED_SCAN_LIMIT, val);
 8000570:	78fb      	ldrb	r3, [r7, #3]
 8000572:	461a      	mov	r2, r3
 8000574:	2103      	movs	r1, #3
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f000 f99e 	bl	80008b8 <writeHexVal>
}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <enableOutput>:

void enableOutput(SPI_HandleTypeDef * hspi){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	writeHexVal(hspi, LED_CONFIGURATION, 0x01);
 800058c:	2201      	movs	r2, #1
 800058e:	2104      	movs	r1, #4
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f000 f991 	bl	80008b8 <writeHexVal>
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <writeTime>:

void disableOutput(SPI_HandleTypeDef * hspi){
	writeHexVal(hspi, LED_CONFIGURATION, 0x00);
}

void writeTime(SPI_HandleTypeDef * hspi, int time, int player){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
	int sec = time % 60;
 80005ac:	68ba      	ldr	r2, [r7, #8]
 80005ae:	4b4d      	ldr	r3, [pc, #308]	; (80006e4 <writeTime+0x144>)
 80005b0:	fb83 1302 	smull	r1, r3, r3, r2
 80005b4:	4413      	add	r3, r2
 80005b6:	1159      	asrs	r1, r3, #5
 80005b8:	17d3      	asrs	r3, r2, #31
 80005ba:	1ac9      	subs	r1, r1, r3
 80005bc:	460b      	mov	r3, r1
 80005be:	011b      	lsls	r3, r3, #4
 80005c0:	1a5b      	subs	r3, r3, r1
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	617b      	str	r3, [r7, #20]
	int min = time / 60;
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	4a46      	ldr	r2, [pc, #280]	; (80006e4 <writeTime+0x144>)
 80005cc:	fb82 1203 	smull	r1, r2, r2, r3
 80005d0:	441a      	add	r2, r3
 80005d2:	1152      	asrs	r2, r2, #5
 80005d4:	17db      	asrs	r3, r3, #31
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	613b      	str	r3, [r7, #16]
	if (!player){
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d13e      	bne.n	800065e <writeTime+0xbe>
		writeHexVal(hspi, LED_4, sec % 10);
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	4b41      	ldr	r3, [pc, #260]	; (80006e8 <writeTime+0x148>)
 80005e4:	fb83 1302 	smull	r1, r3, r3, r2
 80005e8:	1099      	asrs	r1, r3, #2
 80005ea:	17d3      	asrs	r3, r2, #31
 80005ec:	1ac9      	subs	r1, r1, r3
 80005ee:	460b      	mov	r3, r1
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	440b      	add	r3, r1
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	1ad1      	subs	r1, r2, r3
 80005f8:	b2cb      	uxtb	r3, r1
 80005fa:	461a      	mov	r2, r3
 80005fc:	2163      	movs	r1, #99	; 0x63
 80005fe:	68f8      	ldr	r0, [r7, #12]
 8000600:	f000 f95a 	bl	80008b8 <writeHexVal>
		writeHexVal(hspi, LED_3, sec / 10);
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	4a38      	ldr	r2, [pc, #224]	; (80006e8 <writeTime+0x148>)
 8000608:	fb82 1203 	smull	r1, r2, r2, r3
 800060c:	1092      	asrs	r2, r2, #2
 800060e:	17db      	asrs	r3, r3, #31
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	b2db      	uxtb	r3, r3
 8000614:	461a      	mov	r2, r3
 8000616:	2162      	movs	r1, #98	; 0x62
 8000618:	68f8      	ldr	r0, [r7, #12]
 800061a:	f000 f94d 	bl	80008b8 <writeHexVal>
		writeHexVal(hspi, LED_2, min % 10);
 800061e:	693a      	ldr	r2, [r7, #16]
 8000620:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <writeTime+0x148>)
 8000622:	fb83 1302 	smull	r1, r3, r3, r2
 8000626:	1099      	asrs	r1, r3, #2
 8000628:	17d3      	asrs	r3, r2, #31
 800062a:	1ac9      	subs	r1, r1, r3
 800062c:	460b      	mov	r3, r1
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	440b      	add	r3, r1
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	1ad1      	subs	r1, r2, r3
 8000636:	b2cb      	uxtb	r3, r1
 8000638:	461a      	mov	r2, r3
 800063a:	2161      	movs	r1, #97	; 0x61
 800063c:	68f8      	ldr	r0, [r7, #12]
 800063e:	f000 f93b 	bl	80008b8 <writeHexVal>
		writeHexVal(hspi, LED_1, min / 10);
 8000642:	693b      	ldr	r3, [r7, #16]
 8000644:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <writeTime+0x148>)
 8000646:	fb82 1203 	smull	r1, r2, r2, r3
 800064a:	1092      	asrs	r2, r2, #2
 800064c:	17db      	asrs	r3, r3, #31
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	b2db      	uxtb	r3, r3
 8000652:	461a      	mov	r2, r3
 8000654:	2160      	movs	r1, #96	; 0x60
 8000656:	68f8      	ldr	r0, [r7, #12]
 8000658:	f000 f92e 	bl	80008b8 <writeHexVal>
		writeHexVal(hspi, LED_8, sec % 10);
		writeHexVal(hspi, LED_7, sec / 10);
		writeHexVal(hspi, LED_6, min % 10);
		writeHexVal(hspi, LED_5, min / 10);
	}
}
 800065c:	e03d      	b.n	80006da <writeTime+0x13a>
		writeHexVal(hspi, LED_8, sec % 10);
 800065e:	697a      	ldr	r2, [r7, #20]
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <writeTime+0x148>)
 8000662:	fb83 1302 	smull	r1, r3, r3, r2
 8000666:	1099      	asrs	r1, r3, #2
 8000668:	17d3      	asrs	r3, r2, #31
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	460b      	mov	r3, r1
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	440b      	add	r3, r1
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	1ad1      	subs	r1, r2, r3
 8000676:	b2cb      	uxtb	r3, r1
 8000678:	461a      	mov	r2, r3
 800067a:	2167      	movs	r1, #103	; 0x67
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f000 f91b 	bl	80008b8 <writeHexVal>
		writeHexVal(hspi, LED_7, sec / 10);
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	4a18      	ldr	r2, [pc, #96]	; (80006e8 <writeTime+0x148>)
 8000686:	fb82 1203 	smull	r1, r2, r2, r3
 800068a:	1092      	asrs	r2, r2, #2
 800068c:	17db      	asrs	r3, r3, #31
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	b2db      	uxtb	r3, r3
 8000692:	461a      	mov	r2, r3
 8000694:	2166      	movs	r1, #102	; 0x66
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f000 f90e 	bl	80008b8 <writeHexVal>
		writeHexVal(hspi, LED_6, min % 10);
 800069c:	693a      	ldr	r2, [r7, #16]
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <writeTime+0x148>)
 80006a0:	fb83 1302 	smull	r1, r3, r3, r2
 80006a4:	1099      	asrs	r1, r3, #2
 80006a6:	17d3      	asrs	r3, r2, #31
 80006a8:	1ac9      	subs	r1, r1, r3
 80006aa:	460b      	mov	r3, r1
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	440b      	add	r3, r1
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	1ad1      	subs	r1, r2, r3
 80006b4:	b2cb      	uxtb	r3, r1
 80006b6:	461a      	mov	r2, r3
 80006b8:	2165      	movs	r1, #101	; 0x65
 80006ba:	68f8      	ldr	r0, [r7, #12]
 80006bc:	f000 f8fc 	bl	80008b8 <writeHexVal>
		writeHexVal(hspi, LED_5, min / 10);
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	4a09      	ldr	r2, [pc, #36]	; (80006e8 <writeTime+0x148>)
 80006c4:	fb82 1203 	smull	r1, r2, r2, r3
 80006c8:	1092      	asrs	r2, r2, #2
 80006ca:	17db      	asrs	r3, r3, #31
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	461a      	mov	r2, r3
 80006d2:	2164      	movs	r1, #100	; 0x64
 80006d4:	68f8      	ldr	r0, [r7, #12]
 80006d6:	f000 f8ef 	bl	80008b8 <writeHexVal>
}
 80006da:	bf00      	nop
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	88888889 	.word	0x88888889
 80006e8:	66666667 	.word	0x66666667

080006ec <LEDSInit>:

void LEDSInit(SPI_HandleTypeDef * hspi, uint8_t spi_num){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

	// SPI setup
	if (spi_num == 1){
 8000708:	78fb      	ldrb	r3, [r7, #3]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d124      	bne.n	8000758 <LEDSInit+0x6c>
		hspi->Instance = SPI1;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a3a      	ldr	r2, [pc, #232]	; (80007fc <LEDSInit+0x110>)
 8000712:	601a      	str	r2, [r3, #0]

		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000714:	4b3a      	ldr	r3, [pc, #232]	; (8000800 <LEDSInit+0x114>)
 8000716:	69db      	ldr	r3, [r3, #28]
 8000718:	4a39      	ldr	r2, [pc, #228]	; (8000800 <LEDSInit+0x114>)
 800071a:	f043 0310 	orr.w	r3, r3, #16
 800071e:	61d3      	str	r3, [r2, #28]
 8000720:	4b37      	ldr	r3, [pc, #220]	; (8000800 <LEDSInit+0x114>)
 8000722:	69db      	ldr	r3, [r3, #28]
 8000724:	f003 0310 	and.w	r3, r3, #16
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	693b      	ldr	r3, [r7, #16]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000732:	4834      	ldr	r0, [pc, #208]	; (8000804 <LEDSInit+0x118>)
 8000734:	f003 fb2b 	bl	8003d8e <HAL_GPIO_WritePin>

		GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 8000738:	f241 0304 	movw	r3, #4100	; 0x1004
 800073c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4619      	mov	r1, r3
 8000750:	482c      	ldr	r0, [pc, #176]	; (8000804 <LEDSInit+0x118>)
 8000752:	f003 f975 	bl	8003a40 <HAL_GPIO_Init>
 8000756:	e026      	b.n	80007a6 <LEDSInit+0xba>
	}
	else if (spi_num == 2){
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	2b02      	cmp	r3, #2
 800075c:	d123      	bne.n	80007a6 <LEDSInit+0xba>
		hspi->Instance = SPI2;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a29      	ldr	r2, [pc, #164]	; (8000808 <LEDSInit+0x11c>)
 8000762:	601a      	str	r2, [r3, #0]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000764:	4b26      	ldr	r3, [pc, #152]	; (8000800 <LEDSInit+0x114>)
 8000766:	69db      	ldr	r3, [r3, #28]
 8000768:	4a25      	ldr	r2, [pc, #148]	; (8000800 <LEDSInit+0x114>)
 800076a:	f043 0308 	orr.w	r3, r3, #8
 800076e:	61d3      	str	r3, [r2, #28]
 8000770:	4b23      	ldr	r3, [pc, #140]	; (8000800 <LEDSInit+0x114>)
 8000772:	69db      	ldr	r3, [r3, #28]
 8000774:	f003 0308 	and.w	r3, r3, #8
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	68fb      	ldr	r3, [r7, #12]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000782:	4822      	ldr	r0, [pc, #136]	; (800080c <LEDSInit+0x120>)
 8000784:	f003 fb03 	bl	8003d8e <HAL_GPIO_WritePin>

		GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800078c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	481a      	ldr	r0, [pc, #104]	; (800080c <LEDSInit+0x120>)
 80007a2:	f003 f94d 	bl	8003a40 <HAL_GPIO_Init>
	}
	hspi->Init.Mode = SPI_MODE_MASTER;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007ac:	605a      	str	r2, [r3, #4]
	hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
	hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
	hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
	hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
	hspi->Init.NSS = SPI_NSS_SOFT;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007cc:	619a      	str	r2, [r3, #24]
	hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2228      	movs	r2, #40	; 0x28
 80007d2:	61da      	str	r2, [r3, #28]
	hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
	hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	625a      	str	r2, [r3, #36]	; 0x24
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2200      	movs	r2, #0
 80007e4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi->Init.CRCPolynomial = 10;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	220a      	movs	r2, #10
 80007ea:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_SPI_Init(hspi);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f004 f89b 	bl	8004928 <HAL_SPI_Init>


}
 80007f2:	bf00      	nop
 80007f4:	3728      	adds	r7, #40	; 0x28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40013000 	.word	0x40013000
 8000800:	40023800 	.word	0x40023800
 8000804:	40021000 	.word	0x40021000
 8000808:	40003800 	.word	0x40003800
 800080c:	40020c00 	.word	0x40020c00

08000810 <BoardLEDInit>:
	setScanLimit(hspi, 0x07);
	setIntensity(hspi, 0x01);
	enableHex(hspi);
}

void BoardLEDInit(SPI_HandleTypeDef * hspi){
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	enableOutput(hspi);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff feb3 	bl	8000584 <enableOutput>
	setScanLimit(hspi, 0x07);
 800081e:	2107      	movs	r1, #7
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff fe9f 	bl	8000564 <setScanLimit>
	setIntensity(hspi, 0x01);
 8000826:	2101      	movs	r1, #1
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff fe8b 	bl	8000544 <setIntensity>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <writeBoardValue>:

void writeBoardValue(SPI_HandleTypeDef * hspi, uint8_t board[8][8]){
 8000836:	b580      	push	{r7, lr}
 8000838:	b086      	sub	sp, #24
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	6039      	str	r1, [r7, #0]
	for (int row = 0; row < 8; row++){
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	e030      	b.n	80008a8 <writeBoardValue+0x72>
		uint8_t val = 0x0;
 8000846:	2300      	movs	r3, #0
 8000848:	74fb      	strb	r3, [r7, #19]
		for (int col = 7; col > 0; col--){
 800084a:	2307      	movs	r3, #7
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	e010      	b.n	8000872 <writeBoardValue+0x3c>
			val = (val << 1) | board[row][col];
 8000850:	7cfb      	ldrb	r3, [r7, #19]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	b25a      	sxtb	r2, r3
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	6839      	ldr	r1, [r7, #0]
 800085c:	4419      	add	r1, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	440b      	add	r3, r1
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b25b      	sxtb	r3, r3
 8000866:	4313      	orrs	r3, r2
 8000868:	b25b      	sxtb	r3, r3
 800086a:	74fb      	strb	r3, [r7, #19]
		for (int col = 7; col > 0; col--){
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3b01      	subs	r3, #1
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2b00      	cmp	r3, #0
 8000876:	dceb      	bgt.n	8000850 <writeBoardValue+0x1a>
		}
		val |= board[row][0] << 7;
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	683a      	ldr	r2, [r7, #0]
 800087e:	4413      	add	r3, r2
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	01db      	lsls	r3, r3, #7
 8000884:	b25a      	sxtb	r2, r3
 8000886:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800088a:	4313      	orrs	r3, r2
 800088c:	b25b      	sxtb	r3, r3
 800088e:	74fb      	strb	r3, [r7, #19]

		writeHexVal(hspi, LED_1 + row, val);
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	3360      	adds	r3, #96	; 0x60
 8000896:	b2db      	uxtb	r3, r3
 8000898:	7cfa      	ldrb	r2, [r7, #19]
 800089a:	4619      	mov	r1, r3
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f000 f80b 	bl	80008b8 <writeHexVal>
	for (int row = 0; row < 8; row++){
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	3301      	adds	r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	2b07      	cmp	r3, #7
 80008ac:	ddcb      	ble.n	8000846 <writeBoardValue+0x10>
	}
}
 80008ae:	bf00      	nop
 80008b0:	bf00      	nop
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <writeHexVal>:

void writeHexVal(SPI_HandleTypeDef * hspi, uint8_t reg, uint8_t val){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	70fb      	strb	r3, [r7, #3]
 80008c4:	4613      	mov	r3, r2
 80008c6:	70bb      	strb	r3, [r7, #2]
	if (hspi->Instance == SPI2){
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a23      	ldr	r2, [pc, #140]	; (800095c <writeHexVal+0xa4>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d10c      	bne.n	80008ec <writeHexVal+0x34>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d8:	4821      	ldr	r0, [pc, #132]	; (8000960 <writeHexVal+0xa8>)
 80008da:	f003 fa58 	bl	8003d8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008e4:	481e      	ldr	r0, [pc, #120]	; (8000960 <writeHexVal+0xa8>)
 80008e6:	f003 fa52 	bl	8003d8e <HAL_GPIO_WritePin>
 80008ea:	e010      	b.n	800090e <writeHexVal+0x56>
	}
	else if (hspi->Instance == SPI1){
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a1c      	ldr	r2, [pc, #112]	; (8000964 <writeHexVal+0xac>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d10b      	bne.n	800090e <writeHexVal+0x56>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008fc:	481a      	ldr	r0, [pc, #104]	; (8000968 <writeHexVal+0xb0>)
 80008fe:	f003 fa46 	bl	8003d8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000908:	4817      	ldr	r0, [pc, #92]	; (8000968 <writeHexVal+0xb0>)
 800090a:	f003 fa40 	bl	8003d8e <HAL_GPIO_WritePin>
	}

	HAL_SPI_Transmit(hspi, &reg, 1, 100);
 800090e:	1cf9      	adds	r1, r7, #3
 8000910:	2364      	movs	r3, #100	; 0x64
 8000912:	2201      	movs	r2, #1
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f004 f890 	bl	8004a3a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &val, 1, 100);
 800091a:	1cb9      	adds	r1, r7, #2
 800091c:	2364      	movs	r3, #100	; 0x64
 800091e:	2201      	movs	r2, #1
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f004 f88a 	bl	8004a3a <HAL_SPI_Transmit>

	if (hspi->Instance == SPI2){
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a0c      	ldr	r2, [pc, #48]	; (800095c <writeHexVal+0xa4>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d106      	bne.n	800093e <writeHexVal+0x86>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000936:	480a      	ldr	r0, [pc, #40]	; (8000960 <writeHexVal+0xa8>)
 8000938:	f003 fa29 	bl	8003d8e <HAL_GPIO_WritePin>
	}
	else if (hspi->Instance == SPI1){
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
	}
}
 800093c:	e00a      	b.n	8000954 <writeHexVal+0x9c>
	else if (hspi->Instance == SPI1){
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a08      	ldr	r2, [pc, #32]	; (8000964 <writeHexVal+0xac>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d105      	bne.n	8000954 <writeHexVal+0x9c>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <writeHexVal+0xb0>)
 8000950:	f003 fa1d 	bl	8003d8e <HAL_GPIO_WritePin>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40003800 	.word	0x40003800
 8000960:	40020c00 	.word	0x40020c00
 8000964:	40013000 	.word	0x40013000
 8000968:	40021000 	.word	0x40021000

0800096c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b090      	sub	sp, #64	; 0x40
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000972:	f002 fd32 	bl	80033da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000976:	f000 f847 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097a:	f000 fadd 	bl	8000f38 <MX_GPIO_Init>
  MX_SPI2_Init();
 800097e:	f000 f8f1 	bl	8000b64 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000982:	f000 f9a7 	bl	8000cd4 <MX_TIM3_Init>
  MX_SPI1_Init();
 8000986:	f000 f8b7 	bl	8000af8 <MX_SPI1_Init>
  MX_SPI3_Init();
 800098a:	f000 f921 	bl	8000bd0 <MX_SPI3_Init>
  MX_DMA_Init();
 800098e:	f000 fab5 	bl	8000efc <MX_DMA_Init>
  MX_DAC_Init();
 8000992:	f000 f887 	bl	8000aa4 <MX_DAC_Init>
  MX_FATFS_Init();
 8000996:	f005 f90b 	bl	8005bb0 <MX_FATFS_Init>
  MX_TIM4_Init();
 800099a:	f000 f9e9 	bl	8000d70 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800099e:	f000 fa81 	bl	8000ea4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80009a2:	f000 f94b 	bl	8000c3c <MX_TIM2_Init>
  MX_TIM5_Init();
 80009a6:	f000 fa2f 	bl	8000e08 <MX_TIM5_Init>
  ChessTimerLEDInit(&hspi2);
  setIntensity(&hspi2, 0x0F);
  writeTime(&hspi2, timer1, 0);
  writeTime(&hspi2, timer2, 1);*/

  LEDSInit(&hspi1, 1);
 80009aa:	2101      	movs	r1, #1
 80009ac:	4813      	ldr	r0, [pc, #76]	; (80009fc <main+0x90>)
 80009ae:	f7ff fe9d 	bl	80006ec <LEDSInit>
  BoardLEDInit(&hspi1);
 80009b2:	4812      	ldr	r0, [pc, #72]	; (80009fc <main+0x90>)
 80009b4:	f7ff ff2c 	bl	8000810 <BoardLEDInit>
  uint8_t board[NUM_ROWS][NUM_COLS] = {0};
 80009b8:	463b      	mov	r3, r7
 80009ba:	2240      	movs	r2, #64	; 0x40
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f005 feba 	bl	8006738 <memset>
  writeBoardValue(&hspi1, board);
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	480c      	ldr	r0, [pc, #48]	; (80009fc <main+0x90>)
 80009ca:	f7ff ff34 	bl	8000836 <writeBoardValue>
  if (color){
	  receiveData(&huart1, recv);
  }*/

  // Initialize Buttons
  InitButtons(&htim2, &htim5);
 80009ce:	490c      	ldr	r1, [pc, #48]	; (8000a00 <main+0x94>)
 80009d0:	480c      	ldr	r0, [pc, #48]	; (8000a04 <main+0x98>)
 80009d2:	f7ff fd4f 	bl	8000474 <InitButtons>

  // Initialize Tracker component
  InitTracker();
 80009d6:	f001 fd83 	bl	80024e0 <InitTracker>
  if(!ValidateStartPositions())
 80009da:	f002 fb5b 	bl	8003094 <ValidateStartPositions>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d101      	bne.n	80009e8 <main+0x7c>
  {
	  /// @todo: play audio cue and invoke LEDs to put pieces in correct starting positions
	  return 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	e005      	b.n	80009f4 <main+0x88>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //TestLEDs();
	  Track();
 80009e8:	f001 fe70 	bl	80026cc <Track>
	  HAL_Delay(10);
 80009ec:	200a      	movs	r0, #10
 80009ee:	f002 fd63 	bl	80034b8 <HAL_Delay>
	  Track();
 80009f2:	e7f9      	b.n	80009e8 <main+0x7c>
    /* USER CODE BEGIN 3 */
	//sendMove(&huart1, send);
	//receiveData(&huart1, recv);
  }
  /* USER CODE END 3 */
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3740      	adds	r7, #64	; 0x40
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200008c8 	.word	0x200008c8
 8000a00:	20000754 	.word	0x20000754
 8000a04:	20000920 	.word	0x20000920

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b092      	sub	sp, #72	; 0x48
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	2234      	movs	r2, #52	; 0x34
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f005 fe8e 	bl	8006738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <SystemClock_Config+0x98>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000a32:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <SystemClock_Config+0x98>)
 8000a34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a38:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a42:	2310      	movs	r3, #16
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a46:	2302      	movs	r3, #2
 8000a48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000a4e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000a52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000a54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a58:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f003 f9c6 	bl	8003df0 <HAL_RCC_OscConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a6a:	f000 fb99 	bl	80011a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6e:	230f      	movs	r3, #15
 8000a70:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a72:	2303      	movs	r3, #3
 8000a74:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a82:	463b      	mov	r3, r7
 8000a84:	2101      	movs	r1, #1
 8000a86:	4618      	mov	r0, r3
 8000a88:	f003 fce2 	bl	8004450 <HAL_RCC_ClockConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a92:	f000 fb85 	bl	80011a0 <Error_Handler>
  }
}
 8000a96:	bf00      	nop
 8000a98:	3748      	adds	r7, #72	; 0x48
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40007000 	.word	0x40007000

08000aa4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000aaa:	463b      	mov	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_DAC_Init+0x4c>)
 8000ab4:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <MX_DAC_Init+0x50>)
 8000ab6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000ab8:	480d      	ldr	r0, [pc, #52]	; (8000af0 <MX_DAC_Init+0x4c>)
 8000aba:	f002 fe2c 	bl	8003716 <HAL_DAC_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ac4:	f000 fb6c 	bl	80011a0 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8000ac8:	232c      	movs	r3, #44	; 0x2c
 8000aca:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2210      	movs	r2, #16
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4806      	ldr	r0, [pc, #24]	; (8000af0 <MX_DAC_Init+0x4c>)
 8000ad8:	f002 fe3f 	bl	800375a <HAL_DAC_ConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000ae2:	f000 fb5d 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000870 	.word	0x20000870
 8000af4:	40007400 	.word	0x40007400

08000af8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000afe:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <MX_SPI1_Init+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b02:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b44:	220a      	movs	r2, #10
 8000b46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b48:	4804      	ldr	r0, [pc, #16]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b4a:	f003 feed 	bl	8004928 <HAL_SPI_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b54:	f000 fb24 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200008c8 	.word	0x200008c8
 8000b60:	40013000 	.word	0x40013000

08000b64 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <MX_SPI2_Init+0x64>)
 8000b6a:	4a18      	ldr	r2, [pc, #96]	; (8000bcc <MX_SPI2_Init+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <MX_SPI2_Init+0x64>)
 8000b70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_SPI2_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_SPI2_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_SPI2_Init+0x64>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_SPI2_Init+0x64>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_SPI2_Init+0x64>)
 8000b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b94:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_SPI2_Init+0x64>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <MX_SPI2_Init+0x64>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_SPI2_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <MX_SPI2_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_SPI2_Init+0x64>)
 8000bb0:	220a      	movs	r2, #10
 8000bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <MX_SPI2_Init+0x64>)
 8000bb6:	f003 feb7 	bl	8004928 <HAL_SPI_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000bc0:	f000 faee 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200006bc 	.word	0x200006bc
 8000bcc:	40003800 	.word	0x40003800

08000bd0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_SPI3_Init+0x64>)
 8000bd6:	4a18      	ldr	r2, [pc, #96]	; (8000c38 <MX_SPI3_Init+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <MX_SPI3_Init+0x64>)
 8000bdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000be0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_SPI3_Init+0x64>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <MX_SPI3_Init+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_SPI3_Init+0x64>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_SPI3_Init+0x64>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_SPI3_Init+0x64>)
 8000bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c00:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_SPI3_Init+0x64>)
 8000c04:	2230      	movs	r2, #48	; 0x30
 8000c06:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <MX_SPI3_Init+0x64>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_SPI3_Init+0x64>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <MX_SPI3_Init+0x64>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_SPI3_Init+0x64>)
 8000c1c:	220a      	movs	r2, #10
 8000c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_SPI3_Init+0x64>)
 8000c22:	f003 fe81 	bl	8004928 <HAL_SPI_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000c2c:	f000 fab8 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200007d4 	.word	0x200007d4
 8000c38:	40003c00 	.word	0x40003c00

08000c3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c42:	f107 0308 	add.w	r3, r7, #8
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c50:	463b      	mov	r3, r7
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3200;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c62:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000c66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c70:	2264      	movs	r2, #100	; 0x64
 8000c72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c80:	4813      	ldr	r0, [pc, #76]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c82:	f004 fa83 	bl	800518c <HAL_TIM_Base_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c8c:	f000 fa88 	bl	80011a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c9e:	f004 fc09 	bl	80054b4 <HAL_TIM_ConfigClockSource>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ca8:	f000 fa7a 	bl	80011a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cac:	2300      	movs	r3, #0
 8000cae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000cba:	f004 fde9 	bl	8005890 <HAL_TIMEx_MasterConfigSynchronization>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cc4:	f000 fa6c 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000920 	.word	0x20000920

08000cd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce8:	463b      	mov	r3, r7
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <MX_TIM3_Init+0x94>)
 8000cf2:	4a1e      	ldr	r2, [pc, #120]	; (8000d6c <MX_TIM3_Init+0x98>)
 8000cf4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000-1;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <MX_TIM3_Init+0x94>)
 8000cf8:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000cfc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <MX_TIM3_Init+0x94>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000d04:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <MX_TIM3_Init+0x94>)
 8000d06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <MX_TIM3_Init+0x94>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <MX_TIM3_Init+0x94>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d18:	4813      	ldr	r0, [pc, #76]	; (8000d68 <MX_TIM3_Init+0x94>)
 8000d1a:	f004 fa37 	bl	800518c <HAL_TIM_Base_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d24:	f000 fa3c 	bl	80011a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	4619      	mov	r1, r3
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <MX_TIM3_Init+0x94>)
 8000d36:	f004 fbbd 	bl	80054b4 <HAL_TIM_ConfigClockSource>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d40:	f000 fa2e 	bl	80011a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d44:	2300      	movs	r3, #0
 8000d46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_TIM3_Init+0x94>)
 8000d52:	f004 fd9d 	bl	8005890 <HAL_TIMEx_MasterConfigSynchronization>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d5c:	f000 fa20 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000794 	.word	0x20000794
 8000d6c:	40000400 	.word	0x40000400

08000d70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	463b      	mov	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <MX_TIM4_Init+0x90>)
 8000d8e:	4a1d      	ldr	r2, [pc, #116]	; (8000e04 <MX_TIM4_Init+0x94>)
 8000d90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <MX_TIM4_Init+0x90>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d98:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <MX_TIM4_Init+0x90>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 250-1;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <MX_TIM4_Init+0x90>)
 8000da0:	22f9      	movs	r2, #249	; 0xf9
 8000da2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <MX_TIM4_Init+0x90>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <MX_TIM4_Init+0x90>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000db0:	4813      	ldr	r0, [pc, #76]	; (8000e00 <MX_TIM4_Init+0x90>)
 8000db2:	f004 f9eb 	bl	800518c <HAL_TIM_Base_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8000dbc:	f000 f9f0 	bl	80011a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000dc6:	f107 0308 	add.w	r3, r7, #8
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <MX_TIM4_Init+0x90>)
 8000dce:	f004 fb71 	bl	80054b4 <HAL_TIM_ConfigClockSource>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8000dd8:	f000 f9e2 	bl	80011a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ddc:	2320      	movs	r3, #32
 8000dde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000de4:	463b      	mov	r3, r7
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_TIM4_Init+0x90>)
 8000dea:	f004 fd51 	bl	8005890 <HAL_TIMEx_MasterConfigSynchronization>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8000df4:	f000 f9d4 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000714 	.word	0x20000714
 8000e04:	40000800 	.word	0x40000800

08000e08 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e0e:	f107 0308 	add.w	r3, r7, #8
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <MX_TIM5_Init+0x94>)
 8000e26:	4a1e      	ldr	r2, [pc, #120]	; (8000ea0 <MX_TIM5_Init+0x98>)
 8000e28:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 3200;
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <MX_TIM5_Init+0x94>)
 8000e2c:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000e30:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_TIM5_Init+0x94>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <MX_TIM5_Init+0x94>)
 8000e3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e3e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <MX_TIM5_Init+0x94>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <MX_TIM5_Init+0x94>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e4c:	4813      	ldr	r0, [pc, #76]	; (8000e9c <MX_TIM5_Init+0x94>)
 8000e4e:	f004 f99d 	bl	800518c <HAL_TIM_Base_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000e58:	f000 f9a2 	bl	80011a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	4619      	mov	r1, r3
 8000e68:	480c      	ldr	r0, [pc, #48]	; (8000e9c <MX_TIM5_Init+0x94>)
 8000e6a:	f004 fb23 	bl	80054b4 <HAL_TIM_ConfigClockSource>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000e74:	f000 f994 	bl	80011a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e80:	463b      	mov	r3, r7
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_TIM5_Init+0x94>)
 8000e86:	f004 fd03 	bl	8005890 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000e90:	f000 f986 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000754 	.word	0x20000754
 8000ea0:	40000c00 	.word	0x40000c00

08000ea4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <MX_USART1_UART_Init+0x50>)
 8000eaa:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <MX_USART1_UART_Init+0x54>)
 8000eac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_USART1_UART_Init+0x50>)
 8000eb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000eb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <MX_USART1_UART_Init+0x50>)
 8000eb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ebc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <MX_USART1_UART_Init+0x50>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_USART1_UART_Init+0x50>)
 8000ec6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_USART1_UART_Init+0x50>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_USART1_UART_Init+0x50>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_USART1_UART_Init+0x50>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_USART1_UART_Init+0x50>)
 8000ee0:	f004 fd34 	bl	800594c <HAL_UART_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000eea:	f000 f959 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000082c 	.word	0x2000082c
 8000ef8:	40013800 	.word	0x40013800

08000efc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_DMA_Init+0x38>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <MX_DMA_Init+0x38>)
 8000f08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f0c:	61d3      	str	r3, [r2, #28]
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_DMA_Init+0x38>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	200d      	movs	r0, #13
 8000f20:	f002 fbc3 	bl	80036aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f24:	200d      	movs	r0, #13
 8000f26:	f002 fbdc 	bl	80036e2 <HAL_NVIC_EnableIRQ>

}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800

08000f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08c      	sub	sp, #48	; 0x30
 8000f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4e:	4b6b      	ldr	r3, [pc, #428]	; (80010fc <MX_GPIO_Init+0x1c4>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	4a6a      	ldr	r2, [pc, #424]	; (80010fc <MX_GPIO_Init+0x1c4>)
 8000f54:	f043 0310 	orr.w	r3, r3, #16
 8000f58:	61d3      	str	r3, [r2, #28]
 8000f5a:	4b68      	ldr	r3, [pc, #416]	; (80010fc <MX_GPIO_Init+0x1c4>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b65      	ldr	r3, [pc, #404]	; (80010fc <MX_GPIO_Init+0x1c4>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a64      	ldr	r2, [pc, #400]	; (80010fc <MX_GPIO_Init+0x1c4>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	61d3      	str	r3, [r2, #28]
 8000f72:	4b62      	ldr	r3, [pc, #392]	; (80010fc <MX_GPIO_Init+0x1c4>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f7e:	4b5f      	ldr	r3, [pc, #380]	; (80010fc <MX_GPIO_Init+0x1c4>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	4a5e      	ldr	r2, [pc, #376]	; (80010fc <MX_GPIO_Init+0x1c4>)
 8000f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f88:	61d3      	str	r3, [r2, #28]
 8000f8a:	4b5c      	ldr	r3, [pc, #368]	; (80010fc <MX_GPIO_Init+0x1c4>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f96:	4b59      	ldr	r3, [pc, #356]	; (80010fc <MX_GPIO_Init+0x1c4>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a58      	ldr	r2, [pc, #352]	; (80010fc <MX_GPIO_Init+0x1c4>)
 8000f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa0:	61d3      	str	r3, [r2, #28]
 8000fa2:	4b56      	ldr	r3, [pc, #344]	; (80010fc <MX_GPIO_Init+0x1c4>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	4b53      	ldr	r3, [pc, #332]	; (80010fc <MX_GPIO_Init+0x1c4>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a52      	ldr	r2, [pc, #328]	; (80010fc <MX_GPIO_Init+0x1c4>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	61d3      	str	r3, [r2, #28]
 8000fba:	4b50      	ldr	r3, [pc, #320]	; (80010fc <MX_GPIO_Init+0x1c4>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc6:	4b4d      	ldr	r3, [pc, #308]	; (80010fc <MX_GPIO_Init+0x1c4>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4a4c      	ldr	r2, [pc, #304]	; (80010fc <MX_GPIO_Init+0x1c4>)
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	61d3      	str	r3, [r2, #28]
 8000fd2:	4b4a      	ldr	r3, [pc, #296]	; (80010fc <MX_GPIO_Init+0x1c4>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b47      	ldr	r3, [pc, #284]	; (80010fc <MX_GPIO_Init+0x1c4>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a46      	ldr	r2, [pc, #280]	; (80010fc <MX_GPIO_Init+0x1c4>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	61d3      	str	r3, [r2, #28]
 8000fea:	4b44      	ldr	r3, [pc, #272]	; (80010fc <MX_GPIO_Init+0x1c4>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEARTBEAT_LED_GPIO_Port, HEARTBEAT_LED_Pin, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2104      	movs	r1, #4
 8000ffa:	4841      	ldr	r0, [pc, #260]	; (8001100 <MX_GPIO_Init+0x1c8>)
 8000ffc:	f002 fec7 	bl	8003d8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HALLSEL0_Pin|HALLSEL1_Pin|HALLSEL2_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2107      	movs	r1, #7
 8001004:	483f      	ldr	r0, [pc, #252]	; (8001104 <MX_GPIO_Init+0x1cc>)
 8001006:	f002 fec2 	bl	8003d8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001010:	483b      	ldr	r0, [pc, #236]	; (8001100 <MX_GPIO_Init+0x1c8>)
 8001012:	f002 febc 	bl	8003d8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|SD_CS_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f240 1101 	movw	r1, #257	; 0x101
 800101c:	483a      	ldr	r0, [pc, #232]	; (8001108 <MX_GPIO_Init+0x1d0>)
 800101e:	f002 feb6 	bl	8003d8e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HEARTBEAT_LED_Pin PE12 */
  GPIO_InitStruct.Pin = HEARTBEAT_LED_Pin|GPIO_PIN_12;
 8001022:	f241 0304 	movw	r3, #4100	; 0x1004
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	2301      	movs	r3, #1
 800102a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	4831      	ldr	r0, [pc, #196]	; (8001100 <MX_GPIO_Init+0x1c8>)
 800103c:	f002 fd00 	bl	8003a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALLSEL0_Pin HALLSEL1_Pin HALLSEL2_Pin */
  GPIO_InitStruct.Pin = HALLSEL0_Pin|HALLSEL1_Pin|HALLSEL2_Pin;
 8001040:	2307      	movs	r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4619      	mov	r1, r3
 8001056:	482b      	ldr	r0, [pc, #172]	; (8001104 <MX_GPIO_Init+0x1cc>)
 8001058:	f002 fcf2 	bl	8003a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALLOUT0_Pin HALLOUT1_Pin HALLOUT2_Pin */
  GPIO_InitStruct.Pin = HALLOUT0_Pin|HALLOUT1_Pin|HALLOUT2_Pin;
 800105c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	4826      	ldr	r0, [pc, #152]	; (800110c <MX_GPIO_Init+0x1d4>)
 8001072:	f002 fce5 	bl	8003a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALLOUT3_Pin HALLOUT4_Pin */
  GPIO_InitStruct.Pin = HALLOUT3_Pin|HALLOUT4_Pin;
 8001076:	2303      	movs	r3, #3
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	4821      	ldr	r0, [pc, #132]	; (8001110 <MX_GPIO_Init+0x1d8>)
 800108a:	f002 fcd9 	bl	8003a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALLOUT5_Pin HALLOUT6_Pin HALLOUT7_Pin */
  GPIO_InitStruct.Pin = HALLOUT5_Pin|HALLOUT6_Pin|HALLOUT7_Pin;
 800108e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	4619      	mov	r1, r3
 80010a2:	4817      	ldr	r0, [pc, #92]	; (8001100 <MX_GPIO_Init+0x1c8>)
 80010a4:	f002 fccc 	bl	8003a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 SD_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|SD_CS_Pin;
 80010a8:	f240 1301 	movw	r3, #257	; 0x101
 80010ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	4811      	ldr	r0, [pc, #68]	; (8001108 <MX_GPIO_Init+0x1d0>)
 80010c2:	f002 fcbd 	bl	8003a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 80010c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010cc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4619      	mov	r1, r3
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <MX_GPIO_Init+0x1d0>)
 80010de:	f002 fcaf 	bl	8003a40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	2028      	movs	r0, #40	; 0x28
 80010e8:	f002 fadf 	bl	80036aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010ec:	2028      	movs	r0, #40	; 0x28
 80010ee:	f002 faf8 	bl	80036e2 <HAL_NVIC_EnableIRQ>

}
 80010f2:	bf00      	nop
 80010f4:	3730      	adds	r7, #48	; 0x30
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40021000 	.word	0x40021000
 8001104:	40020000 	.word	0x40020000
 8001108:	40020c00 	.word	0x40020c00
 800110c:	40021800 	.word	0x40021800
 8001110:	40021c00 	.word	0x40021c00

08001114 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Chess clock callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a10      	ldr	r2, [pc, #64]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d10c      	bne.n	8001140 <HAL_TIM_PeriodElapsedCallback+0x2c>
	  timer1--;
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	3b01      	subs	r3, #1
 800112c:	b29a      	uxth	r2, r3
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001130:	801a      	strh	r2, [r3, #0]
	  writeTime(&hspi2, timer1, 0);
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	2200      	movs	r2, #0
 8001138:	4619      	mov	r1, r3
 800113a:	480c      	ldr	r0, [pc, #48]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800113c:	f7ff fa30 	bl	80005a0 <writeTime>
  }
  if (htim->Instance == TIM2) {
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001148:	d101      	bne.n	800114e <HAL_TIM_PeriodElapsedCallback+0x3a>
	  Button1DebounceTimerCallback();
 800114a:	f7ff f9a7 	bl	800049c <Button1DebounceTimerCallback>
  }
  if (htim->Instance == TIM5) {
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d101      	bne.n	800115c <HAL_TIM_PeriodElapsedCallback+0x48>
	  Button2DebounceTimerCallback();
 8001158:	f7ff f9b8 	bl	80004cc <Button2DebounceTimerCallback>
  }
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40000400 	.word	0x40000400
 8001168:	20000000 	.word	0x20000000
 800116c:	200006bc 	.word	0x200006bc
 8001170:	40000c00 	.word	0x40000c00

08001174 <HAL_GPIO_EXTI_Callback>:

// Button0 and Button1 callbacks
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON1_Pin)
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001184:	d102      	bne.n	800118c <HAL_GPIO_EXTI_Callback+0x18>
	{
		Button1Callback();
 8001186:	f7ff f9b9 	bl	80004fc <Button1Callback>
	}
	else if(GPIO_Pin == BUTTON2_Pin)
	{
		Button2Callback();
	}
}
 800118a:	e005      	b.n	8001198 <HAL_GPIO_EXTI_Callback+0x24>
	else if(GPIO_Pin == BUTTON2_Pin)
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001192:	d101      	bne.n	8001198 <HAL_GPIO_EXTI_Callback+0x24>
		Button2Callback();
 8001194:	f7ff f9be 	bl	8000514 <Button2Callback>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a4:	b672      	cpsid	i
}
 80011a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <Error_Handler+0x8>
	...

080011ac <CalculateTeamsLegalMoves>:

// All legal moves for the current team - calculated at the beginning of each turn
static struct Moves LegalMoveSet[PIECES_PER_TEAM];

void CalculateTeamsLegalMoves(enum PieceOwner owner)
{
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b0a4      	sub	sp, #144	; 0x90
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
	// Initialize MockChessboard with current chessboard
	for (uint8_t row = 0; row < NUM_ROWS; row++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80011bc:	e023      	b.n	8001206 <CalculateTeamsLegalMoves+0x5a>
	{
		for (uint8_t column = 0; column < NUM_COLS; column++)
 80011be:	2300      	movs	r3, #0
 80011c0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 80011c4:	e016      	b.n	80011f4 <CalculateTeamsLegalMoves+0x48>
		{
			MockChessboard[row][column] = GetPiece(row, column);
 80011c6:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80011ca:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80011ce:	4d47      	ldr	r5, [pc, #284]	; (80012ec <CalculateTeamsLegalMoves+0x140>)
 80011d0:	00d2      	lsls	r2, r2, #3
 80011d2:	18d4      	adds	r4, r2, r3
 80011d4:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 80011d8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f002 f82e 	bl	8003240 <GetPiece>
 80011e4:	4603      	mov	r3, r0
 80011e6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		for (uint8_t column = 0; column < NUM_COLS; column++)
 80011ea:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80011ee:	3301      	adds	r3, #1
 80011f0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 80011f4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80011f8:	2b07      	cmp	r3, #7
 80011fa:	d9e4      	bls.n	80011c6 <CalculateTeamsLegalMoves+0x1a>
	for (uint8_t row = 0; row < NUM_ROWS; row++)
 80011fc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001200:	3301      	adds	r3, #1
 8001202:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001206:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800120a:	2b07      	cmp	r3, #7
 800120c:	d9d7      	bls.n	80011be <CalculateTeamsLegalMoves+0x12>
	}

	// Get all pieces for this team
	uint8_t numTeamPieces;
	struct PieceCoordinate teamsPieces[PIECES_PER_TEAM];
	GetPiecesForTeam(owner, teamsPieces, &numTeamPieces);
 800120e:	f107 028b 	add.w	r2, r7, #139	; 0x8b
 8001212:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f000 fda5 	bl	8001d68 <GetPiecesForTeam>

	for (uint8_t i = 0; i < numTeamPieces; i++)
 800121e:	2300      	movs	r3, #0
 8001220:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8001224:	e057      	b.n	80012d6 <CalculateTeamsLegalMoves+0x12a>
	{
		struct PieceCoordinate teamPiece = teamsPieces[i];
 8001226:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001230:	4413      	add	r3, r2
 8001232:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001236:	647b      	str	r3, [r7, #68]	; 0x44

		// Get all legal paths for teamPiece
		uint8_t numLegalPaths;
		struct Coordinate allLegalPaths[MAX_LEGAL_MOVES];
		CalculateAllLegalPathsAndChecks(teamPiece, allLegalPaths, &numLegalPaths);
 8001238:	f107 0243 	add.w	r2, r7, #67	; 0x43
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	4619      	mov	r1, r3
 8001242:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001244:	f000 f8ce 	bl	80013e4 <CalculateAllLegalPathsAndChecks>

		// Add possible moves for this piece
		LegalMoveSet[i].from = teamPiece;
 8001248:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 800124c:	4928      	ldr	r1, [pc, #160]	; (80012f0 <CalculateTeamsLegalMoves+0x144>)
 800124e:	4613      	mov	r3, r2
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	1a9b      	subs	r3, r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	1a9b      	subs	r3, r3, r2
 8001258:	440b      	add	r3, r1
 800125a:	461a      	mov	r2, r3
 800125c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001260:	6818      	ldr	r0, [r3, #0]
 8001262:	6010      	str	r0, [r2, #0]
		LegalMoveSet[i].numMoves = numLegalPaths;
 8001264:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 8001268:	f897 0043 	ldrb.w	r0, [r7, #67]	; 0x43
 800126c:	4920      	ldr	r1, [pc, #128]	; (80012f0 <CalculateTeamsLegalMoves+0x144>)
 800126e:	4613      	mov	r3, r2
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	1a9b      	subs	r3, r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	1a9b      	subs	r3, r3, r2
 8001278:	440b      	add	r3, r1
 800127a:	333a      	adds	r3, #58	; 0x3a
 800127c:	4602      	mov	r2, r0
 800127e:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < numLegalPaths; j++)
 8001280:	2300      	movs	r3, #0
 8001282:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8001286:	e01b      	b.n	80012c0 <CalculateTeamsLegalMoves+0x114>
		{
			LegalMoveSet[i].moves[j] = allLegalPaths[j];
 8001288:	f897 108c 	ldrb.w	r1, [r7, #140]	; 0x8c
 800128c:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 8001290:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001294:	4c16      	ldr	r4, [pc, #88]	; (80012f0 <CalculateTeamsLegalMoves+0x144>)
 8001296:	0058      	lsls	r0, r3, #1
 8001298:	4613      	mov	r3, r2
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	1a9b      	subs	r3, r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	1a9b      	subs	r3, r3, r2
 80012a2:	4403      	add	r3, r0
 80012a4:	4423      	add	r3, r4
 80012a6:	1d1a      	adds	r2, r3, #4
 80012a8:	004b      	lsls	r3, r1, #1
 80012aa:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80012ae:	440b      	add	r3, r1
 80012b0:	3b84      	subs	r3, #132	; 0x84
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	8013      	strh	r3, [r2, #0]
		for (uint8_t j = 0; j < numLegalPaths; j++)
 80012b6:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80012ba:	3301      	adds	r3, #1
 80012bc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 80012c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80012c4:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d3dd      	bcc.n	8001288 <CalculateTeamsLegalMoves+0xdc>
	for (uint8_t i = 0; i < numTeamPieces; i++)
 80012cc:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80012d0:	3301      	adds	r3, #1
 80012d2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 80012d6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80012da:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 80012de:	429a      	cmp	r2, r3
 80012e0:	d3a1      	bcc.n	8001226 <CalculateTeamsLegalMoves+0x7a>
		}
	}
}
 80012e2:	bf00      	nop
 80012e4:	bf00      	nop
 80012e6:	3790      	adds	r7, #144	; 0x90
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bdb0      	pop	{r4, r5, r7, pc}
 80012ec:	200000d4 	.word	0x200000d4
 80012f0:	20000154 	.word	0x20000154

080012f4 <IsLegalMove>:

uint8_t IsLegalMove(struct PieceCoordinate from, struct PieceCoordinate to)
{
 80012f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f6:	b093      	sub	sp, #76	; 0x4c
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
	// Find the legal moves for "from"
	struct Moves legalMoves;
	for (uint8_t i = 0; i < PIECES_PER_TEAM; i++)
 80012fe:	2300      	movs	r3, #0
 8001300:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001304:	e03a      	b.n	800137c <IsLegalMove+0x88>
	{
		if (IsPieceCoordinateEqual(from, LegalMoveSet[i].from))
 8001306:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800130a:	4935      	ldr	r1, [pc, #212]	; (80013e0 <IsLegalMove+0xec>)
 800130c:	4613      	mov	r3, r2
 800130e:	011b      	lsls	r3, r3, #4
 8001310:	1a9b      	subs	r3, r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	1a9b      	subs	r3, r3, r2
 8001316:	440b      	add	r3, r1
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	2300      	movs	r3, #0
 800131c:	4613      	mov	r3, r2
 800131e:	4619      	mov	r1, r3
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f002 f803 	bl	800332c <IsPieceCoordinateEqual>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d022      	beq.n	8001372 <IsLegalMove+0x7e>
		{
			legalMoves = LegalMoveSet[i];
 800132c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001330:	492b      	ldr	r1, [pc, #172]	; (80013e0 <IsLegalMove+0xec>)
 8001332:	4613      	mov	r3, r2
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	1a9b      	subs	r3, r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	1a9b      	subs	r3, r3, r2
 800133c:	440b      	add	r3, r1
 800133e:	461c      	mov	r4, r3
 8001340:	f107 0608 	add.w	r6, r7, #8
 8001344:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8001348:	4635      	mov	r5, r6
 800134a:	4623      	mov	r3, r4
 800134c:	6818      	ldr	r0, [r3, #0]
 800134e:	6859      	ldr	r1, [r3, #4]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001356:	3410      	adds	r4, #16
 8001358:	3610      	adds	r6, #16
 800135a:	4564      	cmp	r4, ip
 800135c:	d1f4      	bne.n	8001348 <IsLegalMove+0x54>
 800135e:	4633      	mov	r3, r6
 8001360:	4622      	mov	r2, r4
 8001362:	6810      	ldr	r0, [r2, #0]
 8001364:	6851      	ldr	r1, [r2, #4]
 8001366:	c303      	stmia	r3!, {r0, r1}
 8001368:	8911      	ldrh	r1, [r2, #8]
 800136a:	7a92      	ldrb	r2, [r2, #10]
 800136c:	8019      	strh	r1, [r3, #0]
 800136e:	709a      	strb	r2, [r3, #2]
			break;
 8001370:	e008      	b.n	8001384 <IsLegalMove+0x90>
	for (uint8_t i = 0; i < PIECES_PER_TEAM; i++)
 8001372:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001376:	3301      	adds	r3, #1
 8001378:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800137c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001380:	2b0f      	cmp	r3, #15
 8001382:	d9c0      	bls.n	8001306 <IsLegalMove+0x12>
		}
	}

	// Go through all legal moves and make sure "to" is in there
	for (uint8_t i = 0; i < legalMoves.numMoves; i++)
 8001384:	2300      	movs	r3, #0
 8001386:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800138a:	e01e      	b.n	80013ca <IsLegalMove+0xd6>
	{
		if ((to.row == legalMoves.moves[i].row) && (to.column == legalMoves.moves[i].column))
 800138c:	78bb      	ldrb	r3, [r7, #2]
 800138e:	461a      	mov	r2, r3
 8001390:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800139a:	440b      	add	r3, r1
 800139c:	f913 3c3c 	ldrsb.w	r3, [r3, #-60]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d10d      	bne.n	80013c0 <IsLegalMove+0xcc>
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	461a      	mov	r2, r3
 80013a8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80013b2:	440b      	add	r3, r1
 80013b4:	f913 3c3b 	ldrsb.w	r3, [r3, #-59]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d101      	bne.n	80013c0 <IsLegalMove+0xcc>
		{
			return 1;
 80013bc:	2301      	movs	r3, #1
 80013be:	e00b      	b.n	80013d8 <IsLegalMove+0xe4>
	for (uint8_t i = 0; i < legalMoves.numMoves; i++)
 80013c0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80013c4:	3301      	adds	r3, #1
 80013c6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80013ca:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80013ce:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d3da      	bcc.n	800138c <IsLegalMove+0x98>
		}
	}
	return 0;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	374c      	adds	r7, #76	; 0x4c
 80013dc:	46bd      	mov	sp, r7
 80013de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e0:	20000154 	.word	0x20000154

080013e4 <CalculateAllLegalPathsAndChecks>:


void CalculateAllLegalPathsAndChecks(struct PieceCoordinate from, struct Coordinate* allLegalPaths, uint8_t* numLegalPaths)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]

	CalculateAllLegalPaths(from, allLegalPaths, numLegalPaths, 1);
 80013f0:	2301      	movs	r3, #1
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f000 f814 	bl	8001424 <CalculateAllLegalPaths>
}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <CalculateAllLegalPathsNoChecks>:

/**
 * @brief Calculates all legal paths but without regard for putting their own king in check. Used by WillResultInSelfCheck for each enemy piece.
 */
static void CalculateAllLegalPathsNoChecks(struct PieceCoordinate from, struct Coordinate* allLegalPaths, uint8_t* numLegalPaths)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
	CalculateAllLegalPaths(from, allLegalPaths, numLegalPaths, 0);
 8001410:	2300      	movs	r3, #0
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f000 f804 	bl	8001424 <CalculateAllLegalPaths>
}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <CalculateAllLegalPaths>:

/**
 * @brief Calculates all legal paths with trimming off moves that would put their king in check controlled by calculateCheck
 */
static void CalculateAllLegalPaths(struct PieceCoordinate from, struct Coordinate* allLegalPaths, uint8_t* numLegalPaths, uint8_t calculateCheck)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b094      	sub	sp, #80	; 0x50
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	70fb      	strb	r3, [r7, #3]
	*numLegalPaths = 0;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]

	// Get all paths
	uint8_t numPaths;
	struct Coordinate allPaths[MAX_LEGAL_MOVES] = { 0 };
 8001438:	f107 0318 	add.w	r3, r7, #24
 800143c:	2236      	movs	r2, #54	; 0x36
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f005 f979 	bl	8006738 <memset>
	CalculateAllPaths(from, &numPaths, allPaths);
 8001446:	f107 0218 	add.w	r2, r7, #24
 800144a:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 800144e:	4619      	mov	r1, r3
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f000 f889 	bl	8001568 <CalculateAllPaths>

	// Populate legal paths from all paths
	for (uint8_t i = 0; i < numPaths; i++)
 8001456:	2300      	movs	r3, #0
 8001458:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800145c:	e076      	b.n	800154c <CalculateAllLegalPaths+0x128>
	{
		struct Coordinate path = allPaths[i];
 800145e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001468:	4413      	add	r3, r2
 800146a:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 800146e:	82bb      	strh	r3, [r7, #20]
		struct PieceCoordinate to = { MockChessboard[path.row][path.column], path.row, path.column };
 8001470:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001474:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001478:	4611      	mov	r1, r2
 800147a:	4a3a      	ldr	r2, [pc, #232]	; (8001564 <CalculateAllLegalPaths+0x140>)
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	440b      	add	r3, r1
 8001480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001484:	823b      	strh	r3, [r7, #16]
 8001486:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	74bb      	strb	r3, [r7, #18]
 800148e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	74fb      	strb	r3, [r7, #19]

		if (IsPieceCoordinateSameTeam(from, to))
 8001496:	6939      	ldr	r1, [r7, #16]
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f000 fd87 	bl	8001fac <IsPieceCoordinateSameTeam>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d145      	bne.n	8001530 <CalculateAllLegalPaths+0x10c>
		{
			continue;
		}
		else if (IsPieceMovingStraight(from, to) && IsPieceBlockingStraight(from, to))
 80014a4:	6939      	ldr	r1, [r7, #16]
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 fd48 	bl	8001f3c <IsPieceMovingStraight>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d006      	beq.n	80014c0 <CalculateAllLegalPaths+0x9c>
 80014b2:	6939      	ldr	r1, [r7, #16]
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f000 fb4f 	bl	8001b58 <IsPieceBlockingStraight>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d139      	bne.n	8001534 <CalculateAllLegalPaths+0x110>
		{
			continue;
		}
		else if (IsPieceMovingDiagonal(from, to))
 80014c0:	6939      	ldr	r1, [r7, #16]
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f000 fd50 	bl	8001f68 <IsPieceMovingDiagonal>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d017      	beq.n	80014fe <CalculateAllLegalPaths+0xda>
		{
			// For pawn to move in diagonal line, it must have an enemy piece on the diagonal
			if ((from.piece.type == PAWN) && (to.piece.owner == NEUTRAL))
 80014ce:	7b3b      	ldrb	r3, [r7, #12]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d102      	bne.n	80014da <CalculateAllLegalPaths+0xb6>
 80014d4:	7c7b      	ldrb	r3, [r7, #17]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d02e      	beq.n	8001538 <CalculateAllLegalPaths+0x114>
			{
				continue;
			}
			else if (IsPieceBlockingDiagonal(from, to))
 80014da:	6939      	ldr	r1, [r7, #16]
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f000 fc85 	bl	8001dec <IsPieceBlockingDiagonal>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d129      	bne.n	800153c <CalculateAllLegalPaths+0x118>
			{
				continue;
			}
			else if (calculateCheck && WillResultInSelfCheck(from, to))
 80014e8:	78fb      	ldrb	r3, [r7, #3]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d011      	beq.n	8001512 <CalculateAllLegalPaths+0xee>
 80014ee:	6939      	ldr	r1, [r7, #16]
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f000 fb8d 	bl	8001c10 <WillResultInSelfCheck>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00a      	beq.n	8001512 <CalculateAllLegalPaths+0xee>
			{
				continue;
 80014fc:	e021      	b.n	8001542 <CalculateAllLegalPaths+0x11e>
			}
		}
		else if (calculateCheck && WillResultInSelfCheck(from, to))
 80014fe:	78fb      	ldrb	r3, [r7, #3]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d006      	beq.n	8001512 <CalculateAllLegalPaths+0xee>
 8001504:	6939      	ldr	r1, [r7, #16]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 fb82 	bl	8001c10 <WillResultInSelfCheck>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d116      	bne.n	8001540 <CalculateAllLegalPaths+0x11c>
		{
			continue;
		}
		allLegalPaths[(*numLegalPaths)++] = path;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	b2d1      	uxtb	r1, r2
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	7011      	strb	r1, [r2, #0]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	68ba      	ldr	r2, [r7, #8]
 8001522:	4413      	add	r3, r2
 8001524:	461a      	mov	r2, r3
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	8013      	strh	r3, [r2, #0]
 800152e:	e008      	b.n	8001542 <CalculateAllLegalPaths+0x11e>
			continue;
 8001530:	bf00      	nop
 8001532:	e006      	b.n	8001542 <CalculateAllLegalPaths+0x11e>
			continue;
 8001534:	bf00      	nop
 8001536:	e004      	b.n	8001542 <CalculateAllLegalPaths+0x11e>
				continue;
 8001538:	bf00      	nop
 800153a:	e002      	b.n	8001542 <CalculateAllLegalPaths+0x11e>
				continue;
 800153c:	bf00      	nop
 800153e:	e000      	b.n	8001542 <CalculateAllLegalPaths+0x11e>
			continue;
 8001540:	bf00      	nop
	for (uint8_t i = 0; i < numPaths; i++)
 8001542:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001546:	3301      	adds	r3, #1
 8001548:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800154c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001550:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001554:	429a      	cmp	r2, r3
 8001556:	d382      	bcc.n	800145e <CalculateAllLegalPaths+0x3a>
	}
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3750      	adds	r7, #80	; 0x50
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200000d4 	.word	0x200000d4

08001568 <CalculateAllPaths>:

static void CalculateAllPaths(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
	*numPaths = 0;
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]

	switch (pieceCoordinate.piece.type)
 800157a:	7b3b      	ldrb	r3, [r7, #12]
 800157c:	3b01      	subs	r3, #1
 800157e:	2b05      	cmp	r3, #5
 8001580:	d832      	bhi.n	80015e8 <CalculateAllPaths+0x80>
 8001582:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <CalculateAllPaths+0x20>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	080015a1 	.word	0x080015a1
 800158c:	080015c5 	.word	0x080015c5
 8001590:	080015b9 	.word	0x080015b9
 8001594:	080015ad 	.word	0x080015ad
 8001598:	080015d1 	.word	0x080015d1
 800159c:	080015dd 	.word	0x080015dd
	{
	case PAWN:
		CalculateAllPathsPawn(pieceCoordinate, numPaths, paths);
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	68b9      	ldr	r1, [r7, #8]
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f000 f825 	bl	80015f4 <CalculateAllPathsPawn>
		break;
 80015aa:	e01e      	b.n	80015ea <CalculateAllPaths+0x82>
	case ROOK:
		CalculateAllPathsRook(pieceCoordinate, numPaths, paths);
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	68b9      	ldr	r1, [r7, #8]
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f000 f89a 	bl	80016ea <CalculateAllPathsRook>
		break;
 80015b6:	e018      	b.n	80015ea <CalculateAllPaths+0x82>
	case BISHOP:
		CalculateAllPathsBishop(pieceCoordinate, numPaths, paths);
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f000 f8dd 	bl	800177c <CalculateAllPathsBishop>
		break;
 80015c2:	e012      	b.n	80015ea <CalculateAllPaths+0x82>
	case KNIGHT:
		CalculateAllPathsKnight(pieceCoordinate, numPaths, paths);
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	68b9      	ldr	r1, [r7, #8]
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f000 f999 	bl	8001900 <CalculateAllPathsKnight>
		break;
 80015ce:	e00c      	b.n	80015ea <CalculateAllPaths+0x82>
	case QUEEN:
		CalculateAllPathsQueen(pieceCoordinate, numPaths, paths);
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	68b9      	ldr	r1, [r7, #8]
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f000 f9f1 	bl	80019bc <CalculateAllPathsQueen>
		break;
 80015da:	e006      	b.n	80015ea <CalculateAllPaths+0x82>
	case KING:
		CalculateAllPathsKing(pieceCoordinate, numPaths, paths);
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	68b9      	ldr	r1, [r7, #8]
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 fa65 	bl	8001ab0 <CalculateAllPathsKing>
		break;
 80015e6:	e000      	b.n	80015ea <CalculateAllPaths+0x82>
	default:
		break;
 80015e8:	bf00      	nop
	}
}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop

080015f4 <CalculateAllPathsPawn>:

static void CalculateAllPathsPawn(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
	uint8_t row = pieceCoordinate.piece.owner == WHITE ? pieceCoordinate.row + 1 : pieceCoordinate.row - 1;
 8001600:	7b7b      	ldrb	r3, [r7, #13]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d103      	bne.n	800160e <CalculateAllPathsPawn+0x1a>
 8001606:	7bbb      	ldrb	r3, [r7, #14]
 8001608:	3301      	adds	r3, #1
 800160a:	b2db      	uxtb	r3, r3
 800160c:	e002      	b.n	8001614 <CalculateAllPathsPawn+0x20>
 800160e:	7bbb      	ldrb	r3, [r7, #14]
 8001610:	3b01      	subs	r3, #1
 8001612:	b2db      	uxtb	r3, r3
 8001614:	77bb      	strb	r3, [r7, #30]
	uint8_t column = pieceCoordinate.column;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	777b      	strb	r3, [r7, #29]

	for (int8_t i = -1; i <= 1; i++)
 800161a:	23ff      	movs	r3, #255	; 0xff
 800161c:	77fb      	strb	r3, [r7, #31]
 800161e:	e022      	b.n	8001666 <CalculateAllPathsPawn+0x72>
	{

		struct Coordinate path = { row, column + i };
 8001620:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001624:	763b      	strb	r3, [r7, #24]
 8001626:	7ffa      	ldrb	r2, [r7, #31]
 8001628:	7f7b      	ldrb	r3, [r7, #29]
 800162a:	4413      	add	r3, r2
 800162c:	b2db      	uxtb	r3, r3
 800162e:	b25b      	sxtb	r3, r3
 8001630:	767b      	strb	r3, [r7, #25]
		if (IsValidCoordinate(path))
 8001632:	69b8      	ldr	r0, [r7, #24]
 8001634:	f000 fc65 	bl	8001f02 <IsValidCoordinate>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00d      	beq.n	800165a <CalculateAllPathsPawn+0x66>
		{
			paths[(*numPaths)++] = path;
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	b2d1      	uxtb	r1, r2
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	7011      	strb	r1, [r2, #0]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	461a      	mov	r2, r3
 8001652:	f107 0318 	add.w	r3, r7, #24
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	8013      	strh	r3, [r2, #0]
	for (int8_t i = -1; i <= 1; i++)
 800165a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	3301      	adds	r3, #1
 8001662:	b2db      	uxtb	r3, r3
 8001664:	77fb      	strb	r3, [r7, #31]
 8001666:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800166a:	2b01      	cmp	r3, #1
 800166c:	ddd8      	ble.n	8001620 <CalculateAllPathsPawn+0x2c>
		}
	}

	if (pieceCoordinate.piece.owner == WHITE && pieceCoordinate.row == 1)
 800166e:	7b7b      	ldrb	r3, [r7, #13]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d11a      	bne.n	80016aa <CalculateAllPathsPawn+0xb6>
 8001674:	7bbb      	ldrb	r3, [r7, #14]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d117      	bne.n	80016aa <CalculateAllPathsPawn+0xb6>
	{
		struct Coordinate path = { row + 1, column };
 800167a:	7fbb      	ldrb	r3, [r7, #30]
 800167c:	3301      	adds	r3, #1
 800167e:	b2db      	uxtb	r3, r3
 8001680:	b25b      	sxtb	r3, r3
 8001682:	753b      	strb	r3, [r7, #20]
 8001684:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001688:	757b      	strb	r3, [r7, #21]
		paths[(*numPaths)++] = path;
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	b2d1      	uxtb	r1, r2
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	7011      	strb	r1, [r2, #0]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4413      	add	r3, r2
 800169c:	461a      	mov	r2, r3
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	8013      	strh	r3, [r2, #0]
	{
 80016a6:	bf00      	nop
	else if (pieceCoordinate.piece.owner == BLACK && pieceCoordinate.row == 6)
	{
		struct Coordinate path = { row - 1, column };
		paths[(*numPaths)++] = path;
	}
}
 80016a8:	e01b      	b.n	80016e2 <CalculateAllPathsPawn+0xee>
	else if (pieceCoordinate.piece.owner == BLACK && pieceCoordinate.row == 6)
 80016aa:	7b7b      	ldrb	r3, [r7, #13]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d118      	bne.n	80016e2 <CalculateAllPathsPawn+0xee>
 80016b0:	7bbb      	ldrb	r3, [r7, #14]
 80016b2:	2b06      	cmp	r3, #6
 80016b4:	d115      	bne.n	80016e2 <CalculateAllPathsPawn+0xee>
		struct Coordinate path = { row - 1, column };
 80016b6:	7fbb      	ldrb	r3, [r7, #30]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	743b      	strb	r3, [r7, #16]
 80016c0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80016c4:	747b      	strb	r3, [r7, #17]
		paths[(*numPaths)++] = path;
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	b2d1      	uxtb	r1, r2
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	7011      	strb	r1, [r2, #0]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	4413      	add	r3, r2
 80016d8:	461a      	mov	r2, r3
 80016da:	f107 0310 	add.w	r3, r7, #16
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	8013      	strh	r3, [r2, #0]
}
 80016e2:	bf00      	nop
 80016e4:	3720      	adds	r7, #32
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <CalculateAllPathsRook>:

static void CalculateAllPathsRook(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b089      	sub	sp, #36	; 0x24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
	uint8_t row = pieceCoordinate.row;
 80016f6:	7bbb      	ldrb	r3, [r7, #14]
 80016f8:	77bb      	strb	r3, [r7, #30]
	uint8_t column = pieceCoordinate.column;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	777b      	strb	r3, [r7, #29]

	for (uint8_t move = 0; move < 8; move++)
 80016fe:	2300      	movs	r3, #0
 8001700:	77fb      	strb	r3, [r7, #31]
 8001702:	e032      	b.n	800176a <CalculateAllPathsRook+0x80>
	{
		if (move != row)
 8001704:	7ffa      	ldrb	r2, [r7, #31]
 8001706:	7fbb      	ldrb	r3, [r7, #30]
 8001708:	429a      	cmp	r2, r3
 800170a:	d013      	beq.n	8001734 <CalculateAllPathsRook+0x4a>
		{
			struct Coordinate path = { move, column };
 800170c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001710:	763b      	strb	r3, [r7, #24]
 8001712:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001716:	767b      	strb	r3, [r7, #25]
			paths[(*numPaths)++] = path;
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	b2d1      	uxtb	r1, r2
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	7011      	strb	r1, [r2, #0]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	461a      	mov	r2, r3
 800172c:	f107 0318 	add.w	r3, r7, #24
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	8013      	strh	r3, [r2, #0]
		}

		if (move != column)
 8001734:	7ffa      	ldrb	r2, [r7, #31]
 8001736:	7f7b      	ldrb	r3, [r7, #29]
 8001738:	429a      	cmp	r2, r3
 800173a:	d013      	beq.n	8001764 <CalculateAllPathsRook+0x7a>
		{
			struct Coordinate path = { row, move };
 800173c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001740:	753b      	strb	r3, [r7, #20]
 8001742:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001746:	757b      	strb	r3, [r7, #21]
			paths[(*numPaths)++] = path;
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	b2d1      	uxtb	r1, r2
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	7011      	strb	r1, [r2, #0]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	461a      	mov	r2, r3
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	8013      	strh	r3, [r2, #0]
	for (uint8_t move = 0; move < 8; move++)
 8001764:	7ffb      	ldrb	r3, [r7, #31]
 8001766:	3301      	adds	r3, #1
 8001768:	77fb      	strb	r3, [r7, #31]
 800176a:	7ffb      	ldrb	r3, [r7, #31]
 800176c:	2b07      	cmp	r3, #7
 800176e:	d9c9      	bls.n	8001704 <CalculateAllPathsRook+0x1a>
		}
	}
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3724      	adds	r7, #36	; 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <CalculateAllPathsBishop>:

static void CalculateAllPathsBishop(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 800177c:	b480      	push	{r7}
 800177e:	b08b      	sub	sp, #44	; 0x2c
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
	uint8_t row = pieceCoordinate.row;
 8001788:	7bbb      	ldrb	r3, [r7, #14]
 800178a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t column = pieceCoordinate.column;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	for (uint8_t move = 1; move < 8; move++)
 8001794:	2301      	movs	r3, #1
 8001796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800179a:	e0a5      	b.n	80018e8 <CalculateAllPathsBishop+0x16c>
	{
		if (row + move < 8)
 800179c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80017a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017a4:	4413      	add	r3, r2
 80017a6:	2b07      	cmp	r3, #7
 80017a8:	dc4a      	bgt.n	8001840 <CalculateAllPathsBishop+0xc4>
		{
			if (column + move < 8)
 80017aa:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80017ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017b2:	4413      	add	r3, r2
 80017b4:	2b07      	cmp	r3, #7
 80017b6:	dc1f      	bgt.n	80017f8 <CalculateAllPathsBishop+0x7c>
			{
				struct Coordinate path = { row + move, column + move };
 80017b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80017bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017c0:	4413      	add	r3, r2
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	f887 3020 	strb.w	r3, [r7, #32]
 80017ca:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80017ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017d2:	4413      	add	r3, r2
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	b25b      	sxtb	r3, r3
 80017d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				paths[(*numPaths)++] = path;
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	b2d1      	uxtb	r1, r2
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	7011      	strb	r1, [r2, #0]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	461a      	mov	r2, r3
 80017f0:	f107 0320 	add.w	r3, r7, #32
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	8013      	strh	r3, [r2, #0]
			}
			if (column >= move)
 80017f8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80017fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001800:	429a      	cmp	r2, r3
 8001802:	d31d      	bcc.n	8001840 <CalculateAllPathsBishop+0xc4>
			{
				struct Coordinate path = { row + move, column - move };
 8001804:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800180c:	4413      	add	r3, r2
 800180e:	b2db      	uxtb	r3, r3
 8001810:	b25b      	sxtb	r3, r3
 8001812:	773b      	strb	r3, [r7, #28]
 8001814:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	b25b      	sxtb	r3, r3
 8001822:	777b      	strb	r3, [r7, #29]
				paths[(*numPaths)++] = path;
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	b2d1      	uxtb	r1, r2
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	7011      	strb	r1, [r2, #0]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	461a      	mov	r2, r3
 8001838:	f107 031c 	add.w	r3, r7, #28
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	8013      	strh	r3, [r2, #0]
			}

		}

		if (row >= move)
 8001840:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001848:	429a      	cmp	r2, r3
 800184a:	d348      	bcc.n	80018de <CalculateAllPathsBishop+0x162>
		{
			if (column + move < 8)
 800184c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001854:	4413      	add	r3, r2
 8001856:	2b07      	cmp	r3, #7
 8001858:	dc1d      	bgt.n	8001896 <CalculateAllPathsBishop+0x11a>
			{
				struct Coordinate path = { row - move, column + move };
 800185a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800185e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	b25b      	sxtb	r3, r3
 8001868:	763b      	strb	r3, [r7, #24]
 800186a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800186e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001872:	4413      	add	r3, r2
 8001874:	b2db      	uxtb	r3, r3
 8001876:	b25b      	sxtb	r3, r3
 8001878:	767b      	strb	r3, [r7, #25]
				paths[(*numPaths)++] = path;
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	b2d1      	uxtb	r1, r2
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	7011      	strb	r1, [r2, #0]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	4413      	add	r3, r2
 800188c:	461a      	mov	r2, r3
 800188e:	f107 0318 	add.w	r3, r7, #24
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	8013      	strh	r3, [r2, #0]
			}
			if (column >= move)
 8001896:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800189a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800189e:	429a      	cmp	r2, r3
 80018a0:	d31d      	bcc.n	80018de <CalculateAllPathsBishop+0x162>
			{
				struct Coordinate path = { row - move, column - move };
 80018a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80018a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	b25b      	sxtb	r3, r3
 80018b0:	753b      	strb	r3, [r7, #20]
 80018b2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80018b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	757b      	strb	r3, [r7, #21]
				paths[(*numPaths)++] = path;
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	b2d1      	uxtb	r1, r2
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	7011      	strb	r1, [r2, #0]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	4413      	add	r3, r2
 80018d4:	461a      	mov	r2, r3
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	8013      	strh	r3, [r2, #0]
	for (uint8_t move = 1; move < 8; move++)
 80018de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018e2:	3301      	adds	r3, #1
 80018e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018ec:	2b07      	cmp	r3, #7
 80018ee:	f67f af55 	bls.w	800179c <CalculateAllPathsBishop+0x20>
			}
		}
	}
}
 80018f2:	bf00      	nop
 80018f4:	bf00      	nop
 80018f6:	372c      	adds	r7, #44	; 0x2c
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
	...

08001900 <CalculateAllPathsKnight>:

static void CalculateAllPathsKnight(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b08d      	sub	sp, #52	; 0x34
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
	uint8_t row = pieceCoordinate.row;
 800190c:	7bbb      	ldrb	r3, [r7, #14]
 800190e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t column = pieceCoordinate.column;
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	const struct Coordinate adders[] = {
 8001918:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <CalculateAllPathsKnight+0xb8>)
 800191a:	f107 0418 	add.w	r4, r7, #24
 800191e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001920:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		{1, 2}, {-1, 2}, {1, -2}, {-1, -2},
		{2, 1}, {-2, 1}, {2, -1}, {-2, -1}
	};

	for (uint8_t move = 0; move < sizeof(adders) / sizeof(*adders); move++)
 8001924:	2300      	movs	r3, #0
 8001926:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800192a:	e03c      	b.n	80019a6 <CalculateAllPathsKnight+0xa6>
	{
		int8_t newRow = row + adders[move].row;
 800192c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001936:	4413      	add	r3, r2
 8001938:	f913 3c18 	ldrsb.w	r3, [r3, #-24]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001942:	4413      	add	r3, r2
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		int8_t newColumn = column + adders[move].column;
 800194a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001954:	4413      	add	r3, r2
 8001956:	f913 3c17 	ldrsb.w	r3, [r3, #-23]
 800195a:	b2da      	uxtb	r2, r3
 800195c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001960:	4413      	add	r3, r2
 8001962:	b2db      	uxtb	r3, r3
 8001964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		struct Coordinate path = { newRow, newColumn };
 8001968:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800196c:	753b      	strb	r3, [r7, #20]
 800196e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001972:	757b      	strb	r3, [r7, #21]
		if (IsValidCoordinate(path))
 8001974:	6978      	ldr	r0, [r7, #20]
 8001976:	f000 fac4 	bl	8001f02 <IsValidCoordinate>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00d      	beq.n	800199c <CalculateAllPathsKnight+0x9c>
		{
			paths[(*numPaths)++] = path;
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	b2d1      	uxtb	r1, r2
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	7011      	strb	r1, [r2, #0]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	461a      	mov	r2, r3
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	8013      	strh	r3, [r2, #0]
	for (uint8_t move = 0; move < sizeof(adders) / sizeof(*adders); move++)
 800199c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019a0:	3301      	adds	r3, #1
 80019a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80019a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019aa:	2b07      	cmp	r3, #7
 80019ac:	d9be      	bls.n	800192c <CalculateAllPathsKnight+0x2c>
		}
	}
}
 80019ae:	bf00      	nop
 80019b0:	bf00      	nop
 80019b2:	3734      	adds	r7, #52	; 0x34
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd90      	pop	{r4, r7, pc}
 80019b8:	08006760 	.word	0x08006760

080019bc <CalculateAllPathsQueen>:

static void CalculateAllPathsQueen(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b094      	sub	sp, #80	; 0x50
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
	uint8_t numRookPaths = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	struct Coordinate rookPaths[MAX_ROOK_MOVES] = { 0 };
 80019ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	611a      	str	r2, [r3, #16]
 80019de:	615a      	str	r2, [r3, #20]
 80019e0:	619a      	str	r2, [r3, #24]
	CalculateAllPathsRook(pieceCoordinate, &numRookPaths, rookPaths);
 80019e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80019e6:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 80019ea:	4619      	mov	r1, r3
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f7ff fe7c 	bl	80016ea <CalculateAllPathsRook>

	uint8_t numBishopPaths = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	struct Coordinate bishopPaths[MAX_BISHOP_MOVES] = { 0 };
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
 8001a08:	615a      	str	r2, [r3, #20]
 8001a0a:	831a      	strh	r2, [r3, #24]
	CalculateAllPathsBishop(pieceCoordinate, &numBishopPaths, bishopPaths);
 8001a0c:	f107 0214 	add.w	r2, r7, #20
 8001a10:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001a14:	4619      	mov	r1, r3
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f7ff feb0 	bl	800177c <CalculateAllPathsBishop>

	*numPaths = numRookPaths + numBishopPaths;
 8001a1c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001a20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a24:	4413      	add	r3, r2
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	701a      	strb	r2, [r3, #0]

	// Add in Rook paths
	for (uint8_t i = 0; i < numRookPaths; i++)
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001a32:	e012      	b.n	8001a5a <CalculateAllPathsQueen+0x9e>
	{
		paths[i] = rookPaths[i];
 8001a34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a38:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001a3c:	0052      	lsls	r2, r2, #1
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	440a      	add	r2, r1
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001a48:	440b      	add	r3, r1
 8001a4a:	3b20      	subs	r3, #32
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < numRookPaths; i++)
 8001a50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a54:	3301      	adds	r3, #1
 8001a56:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001a5a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a5e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d3e6      	bcc.n	8001a34 <CalculateAllPathsQueen+0x78>
	}

	// Append Bishop paths
	for (uint8_t i = 0; i < numBishopPaths; i++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001a6c:	e015      	b.n	8001a9a <CalculateAllPathsQueen+0xde>
	{
		paths[i + numRookPaths] = bishopPaths[i];
 8001a6e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001a72:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001a76:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 8001a7a:	440a      	add	r2, r1
 8001a7c:	0052      	lsls	r2, r2, #1
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	440a      	add	r2, r1
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001a88:	440b      	add	r3, r1
 8001a8a:	3b3c      	subs	r3, #60	; 0x3c
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < numBishopPaths; i++)
 8001a90:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001a94:	3301      	adds	r3, #1
 8001a96:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001a9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a9e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d3e3      	bcc.n	8001a6e <CalculateAllPathsQueen+0xb2>
	}
}
 8001aa6:	bf00      	nop
 8001aa8:	bf00      	nop
 8001aaa:	3750      	adds	r7, #80	; 0x50
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <CalculateAllPathsKing>:

static void CalculateAllPathsKing(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
	uint8_t row = pieceCoordinate.row;
 8001abc:	7bbb      	ldrb	r3, [r7, #14]
 8001abe:	757b      	strb	r3, [r7, #21]
	uint8_t column = pieceCoordinate.column;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	753b      	strb	r3, [r7, #20]

	for (int8_t i = -1; i <= 1; i++)
 8001ac4:	23ff      	movs	r3, #255	; 0xff
 8001ac6:	75fb      	strb	r3, [r7, #23]
 8001ac8:	e03c      	b.n	8001b44 <CalculateAllPathsKing+0x94>
	{
		for (int8_t j = -1; j <= 1; j++)
 8001aca:	23ff      	movs	r3, #255	; 0xff
 8001acc:	75bb      	strb	r3, [r7, #22]
 8001ace:	e02f      	b.n	8001b30 <CalculateAllPathsKing+0x80>
		{
			if (i == 0 && j == 0)
 8001ad0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d103      	bne.n	8001ae0 <CalculateAllPathsKing+0x30>
 8001ad8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d020      	beq.n	8001b22 <CalculateAllPathsKing+0x72>
			{
				continue;
			}

			struct Coordinate path = { row + i, column + j };
 8001ae0:	7dfa      	ldrb	r2, [r7, #23]
 8001ae2:	7d7b      	ldrb	r3, [r7, #21]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	b25b      	sxtb	r3, r3
 8001aea:	743b      	strb	r3, [r7, #16]
 8001aec:	7dba      	ldrb	r2, [r7, #22]
 8001aee:	7d3b      	ldrb	r3, [r7, #20]
 8001af0:	4413      	add	r3, r2
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	b25b      	sxtb	r3, r3
 8001af6:	747b      	strb	r3, [r7, #17]
			if (IsValidCoordinate(path))
 8001af8:	6938      	ldr	r0, [r7, #16]
 8001afa:	f000 fa02 	bl	8001f02 <IsValidCoordinate>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00f      	beq.n	8001b24 <CalculateAllPathsKing+0x74>
			{
				paths[(*numPaths)++] = path;
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	b2d1      	uxtb	r1, r2
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	7011      	strb	r1, [r2, #0]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	461a      	mov	r2, r3
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	8013      	strh	r3, [r2, #0]
 8001b20:	e000      	b.n	8001b24 <CalculateAllPathsKing+0x74>
				continue;
 8001b22:	bf00      	nop
		for (int8_t j = -1; j <= 1; j++)
 8001b24:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	75bb      	strb	r3, [r7, #22]
 8001b30:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	ddcb      	ble.n	8001ad0 <CalculateAllPathsKing+0x20>
	for (int8_t i = -1; i <= 1; i++)
 8001b38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	3301      	adds	r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	75fb      	strb	r3, [r7, #23]
 8001b44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	ddbe      	ble.n	8001aca <CalculateAllPathsKing+0x1a>
			}
		}
	}
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <IsPieceBlockingStraight>:

static uint8_t IsPieceBlockingStraight(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
	// If move is in same column
	if (from.column == to.column)
 8001b62:	79fa      	ldrb	r2, [r7, #7]
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d123      	bne.n	8001bb2 <IsPieceBlockingStraight+0x5a>
	{
		uint8_t startRow = from.row > to.row ? to.row : from.row;
 8001b6a:	79ba      	ldrb	r2, [r7, #6]
 8001b6c:	78bb      	ldrb	r3, [r7, #2]
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	bf28      	it	cs
 8001b72:	4613      	movcs	r3, r2
 8001b74:	72fb      	strb	r3, [r7, #11]
		uint8_t endRow = from.row > to.row ? from.row : to.row;
 8001b76:	78ba      	ldrb	r2, [r7, #2]
 8001b78:	79bb      	ldrb	r3, [r7, #6]
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	bf38      	it	cc
 8001b7e:	4613      	movcc	r3, r2
 8001b80:	72bb      	strb	r3, [r7, #10]

		for (uint8_t row = startRow + 1; row < endRow; row++)
 8001b82:	7afb      	ldrb	r3, [r7, #11]
 8001b84:	3301      	adds	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
 8001b88:	e00e      	b.n	8001ba8 <IsPieceBlockingStraight+0x50>
		{
			if (MockChessboard[row][from.column].type != NONE) // If piece in row between "from" and "to" then it is blocking it.
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	79fa      	ldrb	r2, [r7, #7]
 8001b8e:	4611      	mov	r1, r2
 8001b90:	4a1e      	ldr	r2, [pc, #120]	; (8001c0c <IsPieceBlockingStraight+0xb4>)
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <IsPieceBlockingStraight+0x4a>
			{
				return 1;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e02f      	b.n	8001c02 <IsPieceBlockingStraight+0xaa>
		for (uint8_t row = startRow + 1; row < endRow; row++)
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
 8001ba8:	7bfa      	ldrb	r2, [r7, #15]
 8001baa:	7abb      	ldrb	r3, [r7, #10]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d3ec      	bcc.n	8001b8a <IsPieceBlockingStraight+0x32>
 8001bb0:	e026      	b.n	8001c00 <IsPieceBlockingStraight+0xa8>
			}
		}
	}
	// If move is in same row
	else if (from.row == to.row)
 8001bb2:	79ba      	ldrb	r2, [r7, #6]
 8001bb4:	78bb      	ldrb	r3, [r7, #2]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d122      	bne.n	8001c00 <IsPieceBlockingStraight+0xa8>
	{
		uint8_t startColumn = from.column > to.column ? to.column : from.column;
 8001bba:	79fa      	ldrb	r2, [r7, #7]
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	bf28      	it	cs
 8001bc2:	4613      	movcs	r3, r2
 8001bc4:	737b      	strb	r3, [r7, #13]
		uint8_t endColumn = from.column > to.column ? from.column : to.column;
 8001bc6:	78fa      	ldrb	r2, [r7, #3]
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	bf38      	it	cc
 8001bce:	4613      	movcc	r3, r2
 8001bd0:	733b      	strb	r3, [r7, #12]
		for (uint8_t column = startColumn + 1; column < endColumn; column++)
 8001bd2:	7b7b      	ldrb	r3, [r7, #13]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	73bb      	strb	r3, [r7, #14]
 8001bd8:	e00e      	b.n	8001bf8 <IsPieceBlockingStraight+0xa0>
		{
			// If piece in column between "from" and "to" then it is blocking it.
			if (MockChessboard[from.row][column].type != NONE)
 8001bda:	79bb      	ldrb	r3, [r7, #6]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	7bbb      	ldrb	r3, [r7, #14]
 8001be0:	490a      	ldr	r1, [pc, #40]	; (8001c0c <IsPieceBlockingStraight+0xb4>)
 8001be2:	00d2      	lsls	r2, r2, #3
 8001be4:	4413      	add	r3, r2
 8001be6:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <IsPieceBlockingStraight+0x9a>
			{
				return 1;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e007      	b.n	8001c02 <IsPieceBlockingStraight+0xaa>
		for (uint8_t column = startColumn + 1; column < endColumn; column++)
 8001bf2:	7bbb      	ldrb	r3, [r7, #14]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	73bb      	strb	r3, [r7, #14]
 8001bf8:	7bba      	ldrb	r2, [r7, #14]
 8001bfa:	7b3b      	ldrb	r3, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d3ec      	bcc.n	8001bda <IsPieceBlockingStraight+0x82>
			}
		}
	}
	return 0;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	200000d4 	.word	0x200000d4

08001c10 <WillResultInSelfCheck>:

uint8_t WillResultInSelfCheck(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b0a4      	sub	sp, #144	; 0x90
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
	// Temporarily populate the chessboard with this move to see if it causes a self check
	MockChessboard[from.row][from.column] = EMPTY_PIECE;
 8001c1a:	79bb      	ldrb	r3, [r7, #6]
 8001c1c:	79fa      	ldrb	r2, [r7, #7]
 8001c1e:	4950      	ldr	r1, [pc, #320]	; (8001d60 <WillResultInSelfCheck+0x150>)
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4413      	add	r3, r2
 8001c24:	4a4f      	ldr	r2, [pc, #316]	; (8001d64 <WillResultInSelfCheck+0x154>)
 8001c26:	8812      	ldrh	r2, [r2, #0]
 8001c28:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	MockChessboard[to.row][to.column] = from.piece;
 8001c2c:	78bb      	ldrb	r3, [r7, #2]
 8001c2e:	78fa      	ldrb	r2, [r7, #3]
 8001c30:	494b      	ldr	r1, [pc, #300]	; (8001d60 <WillResultInSelfCheck+0x150>)
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4413      	add	r3, r2
 8001c36:	88ba      	ldrh	r2, [r7, #4]
 8001c38:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	enum PieceOwner enemyTeam = from.piece.owner == WHITE ? BLACK : WHITE;
 8001c3c:	797b      	ldrb	r3, [r7, #5]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <WillResultInSelfCheck+0x36>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e000      	b.n	8001c48 <WillResultInSelfCheck+0x38>
 8001c46:	2301      	movs	r3, #1
 8001c48:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
	uint8_t numEnemyPieces;
	struct PieceCoordinate enemyPieces[PIECES_PER_TEAM] = { 0 };
 8001c4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c50:	2240      	movs	r2, #64	; 0x40
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f004 fd6f 	bl	8006738 <memset>

	// For each enemy piece
	GetPiecesForTeam(enemyTeam, enemyPieces, &numEnemyPieces);
 8001c5a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001c5e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001c62:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f87e 	bl	8001d68 <GetPiecesForTeam>
	for (uint8_t i = 0; i < numEnemyPieces; i++)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001c72:	e059      	b.n	8001d28 <WillResultInSelfCheck+0x118>
	{
		uint8_t numEnemyPieceLegalPaths;
		struct Coordinate enemyPieceLegalPaths[MAX_LEGAL_MOVES] = { 0 };
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	2236      	movs	r2, #54	; 0x36
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f004 fd5b 	bl	8006738 <memset>

		// For each legal path this enemy piece can take
		CalculateAllLegalPathsNoChecks(enemyPieces[i], enemyPieceLegalPaths, &numEnemyPieceLegalPaths);
 8001c82:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001c86:	f107 024b 	add.w	r2, r7, #75	; 0x4b
 8001c8a:	f107 010c 	add.w	r1, r7, #12
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8001c94:	4403      	add	r3, r0
 8001c96:	f853 0c44 	ldr.w	r0, [r3, #-68]
 8001c9a:	f7ff fbb3 	bl	8001404 <CalculateAllLegalPathsNoChecks>
		for (uint8_t j = 0; j < numEnemyPieceLegalPaths; j++)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8001ca4:	e035      	b.n	8001d12 <WillResultInSelfCheck+0x102>
		{
			struct Coordinate enemyFinalLocation = enemyPieceLegalPaths[j];
 8001ca6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f833 3c84 	ldrh.w	r3, [r3, #-132]
 8001cb6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			struct Piece killedPiece = MockChessboard[enemyFinalLocation.row][enemyFinalLocation.column];
 8001cba:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 8001cbe:	f997 2049 	ldrsb.w	r2, [r7, #73]	; 0x49
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4a26      	ldr	r2, [pc, #152]	; (8001d60 <WillResultInSelfCheck+0x150>)
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	440b      	add	r3, r1
 8001cca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

			// If the enemy piece can take our king, this move (from -> to) will result in a check so it cannot be legal
			if ((killedPiece.type == KING) && (killedPiece.owner == from.piece.owner))
 8001cd2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d116      	bne.n	8001d08 <WillResultInSelfCheck+0xf8>
 8001cda:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001cde:	797b      	ldrb	r3, [r7, #5]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d111      	bne.n	8001d08 <WillResultInSelfCheck+0xf8>
			{
				// Undo temporary move
				MockChessboard[from.row][from.column] = from.piece;
 8001ce4:	79bb      	ldrb	r3, [r7, #6]
 8001ce6:	79fa      	ldrb	r2, [r7, #7]
 8001ce8:	491d      	ldr	r1, [pc, #116]	; (8001d60 <WillResultInSelfCheck+0x150>)
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	88ba      	ldrh	r2, [r7, #4]
 8001cf0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				MockChessboard[to.row][to.column] = to.piece;
 8001cf4:	78bb      	ldrb	r3, [r7, #2]
 8001cf6:	78fa      	ldrb	r2, [r7, #3]
 8001cf8:	4919      	ldr	r1, [pc, #100]	; (8001d60 <WillResultInSelfCheck+0x150>)
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	883a      	ldrh	r2, [r7, #0]
 8001d00:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				return 1;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e026      	b.n	8001d56 <WillResultInSelfCheck+0x146>
		for (uint8_t j = 0; j < numEnemyPieceLegalPaths; j++)
 8001d08:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8001d12:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001d16:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d3c3      	bcc.n	8001ca6 <WillResultInSelfCheck+0x96>
	for (uint8_t i = 0; i < numEnemyPieces; i++)
 8001d1e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001d22:	3301      	adds	r3, #1
 8001d24:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001d28:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001d2c:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d39f      	bcc.n	8001c74 <WillResultInSelfCheck+0x64>
			}
		}
	}

	// Undo temporary move
	MockChessboard[from.row][from.column] = from.piece;
 8001d34:	79bb      	ldrb	r3, [r7, #6]
 8001d36:	79fa      	ldrb	r2, [r7, #7]
 8001d38:	4909      	ldr	r1, [pc, #36]	; (8001d60 <WillResultInSelfCheck+0x150>)
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	88ba      	ldrh	r2, [r7, #4]
 8001d40:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	MockChessboard[to.row][to.column] = to.piece;
 8001d44:	78bb      	ldrb	r3, [r7, #2]
 8001d46:	78fa      	ldrb	r2, [r7, #3]
 8001d48:	4905      	ldr	r1, [pc, #20]	; (8001d60 <WillResultInSelfCheck+0x150>)
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	883a      	ldrh	r2, [r7, #0]
 8001d50:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	return 0;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3790      	adds	r7, #144	; 0x90
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200000d4 	.word	0x200000d4
 8001d64:	20000004 	.word	0x20000004

08001d68 <GetPiecesForTeam>:

void GetPiecesForTeam(enum PieceOwner owner, struct PieceCoordinate* pieces, uint8_t* numPieces)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	73fb      	strb	r3, [r7, #15]
	*numPieces = 0;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]

	for (uint8_t row = 0; row < NUM_ROWS; row++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	75fb      	strb	r3, [r7, #23]
 8001d80:	e029      	b.n	8001dd6 <GetPiecesForTeam+0x6e>
	{
		for (uint8_t column = 0; column < NUM_COLS; column++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	75bb      	strb	r3, [r7, #22]
 8001d86:	e020      	b.n	8001dca <GetPiecesForTeam+0x62>
		{
			struct PieceCoordinate piece = { MockChessboard[row][column], row, column };
 8001d88:	7dfa      	ldrb	r2, [r7, #23]
 8001d8a:	7dbb      	ldrb	r3, [r7, #22]
 8001d8c:	4916      	ldr	r1, [pc, #88]	; (8001de8 <GetPiecesForTeam+0x80>)
 8001d8e:	00d2      	lsls	r2, r2, #3
 8001d90:	4413      	add	r3, r2
 8001d92:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d96:	823b      	strh	r3, [r7, #16]
 8001d98:	7dfb      	ldrb	r3, [r7, #23]
 8001d9a:	74bb      	strb	r3, [r7, #18]
 8001d9c:	7dbb      	ldrb	r3, [r7, #22]
 8001d9e:	74fb      	strb	r3, [r7, #19]
			if (piece.piece.owner == owner)
 8001da0:	7c7b      	ldrb	r3, [r7, #17]
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d10d      	bne.n	8001dc4 <GetPiecesForTeam+0x5c>
			{
				pieces[(*numPieces)++] = piece;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	b2d1      	uxtb	r1, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	7011      	strb	r1, [r2, #0]
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	4413      	add	r3, r2
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f107 0310 	add.w	r3, r7, #16
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	6010      	str	r0, [r2, #0]
		for (uint8_t column = 0; column < NUM_COLS; column++)
 8001dc4:	7dbb      	ldrb	r3, [r7, #22]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	75bb      	strb	r3, [r7, #22]
 8001dca:	7dbb      	ldrb	r3, [r7, #22]
 8001dcc:	2b07      	cmp	r3, #7
 8001dce:	d9db      	bls.n	8001d88 <GetPiecesForTeam+0x20>
	for (uint8_t row = 0; row < NUM_ROWS; row++)
 8001dd0:	7dfb      	ldrb	r3, [r7, #23]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	75fb      	strb	r3, [r7, #23]
 8001dd6:	7dfb      	ldrb	r3, [r7, #23]
 8001dd8:	2b07      	cmp	r3, #7
 8001dda:	d9d2      	bls.n	8001d82 <GetPiecesForTeam+0x1a>
			}
		}
	}
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	371c      	adds	r7, #28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	200000d4 	.word	0x200000d4

08001dec <IsPieceBlockingDiagonal>:

static uint8_t IsPieceBlockingDiagonal(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
	uint8_t startRow;
	uint8_t startColumn;
	uint8_t endRow;
	uint8_t endColumn;

	if (from.row > to.row)
 8001df6:	79ba      	ldrb	r2, [r7, #6]
 8001df8:	78bb      	ldrb	r3, [r7, #2]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d908      	bls.n	8001e10 <IsPieceBlockingDiagonal+0x24>
	{
		startRow = to.row;
 8001dfe:	78bb      	ldrb	r3, [r7, #2]
 8001e00:	73fb      	strb	r3, [r7, #15]
		startColumn = to.column;
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	73bb      	strb	r3, [r7, #14]
		endRow = from.row;
 8001e06:	79bb      	ldrb	r3, [r7, #6]
 8001e08:	737b      	strb	r3, [r7, #13]
		endColumn = from.column;
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	733b      	strb	r3, [r7, #12]
 8001e0e:	e007      	b.n	8001e20 <IsPieceBlockingDiagonal+0x34>
	}
	else
	{
		startRow = from.row;
 8001e10:	79bb      	ldrb	r3, [r7, #6]
 8001e12:	73fb      	strb	r3, [r7, #15]
		startColumn = from.column;
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	73bb      	strb	r3, [r7, #14]
		endRow = to.row;
 8001e18:	78bb      	ldrb	r3, [r7, #2]
 8001e1a:	737b      	strb	r3, [r7, #13]
		endColumn = to.column;
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	733b      	strb	r3, [r7, #12]
	}

	int8_t columnIncrement = startColumn > endColumn ? -1 : 1;
 8001e20:	7bba      	ldrb	r2, [r7, #14]
 8001e22:	7b3b      	ldrb	r3, [r7, #12]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d902      	bls.n	8001e2e <IsPieceBlockingDiagonal+0x42>
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2c:	e000      	b.n	8001e30 <IsPieceBlockingDiagonal+0x44>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	727b      	strb	r3, [r7, #9]
	int8_t column = startColumn + columnIncrement;
 8001e32:	7a7a      	ldrb	r2, [r7, #9]
 8001e34:	7bbb      	ldrb	r3, [r7, #14]
 8001e36:	4413      	add	r3, r2
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	72fb      	strb	r3, [r7, #11]
	for (uint8_t row = startRow + 1; row < endRow; row++, column += columnIncrement)
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	72bb      	strb	r3, [r7, #10]
 8001e42:	e013      	b.n	8001e6c <IsPieceBlockingDiagonal+0x80>
	{
		// If piece is between "from" and "to" on the diagonal, it is blocking it
		if (MockChessboard[row][column].type != NONE)
 8001e44:	7aba      	ldrb	r2, [r7, #10]
 8001e46:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001e4a:	490d      	ldr	r1, [pc, #52]	; (8001e80 <IsPieceBlockingDiagonal+0x94>)
 8001e4c:	00d2      	lsls	r2, r2, #3
 8001e4e:	4413      	add	r3, r2
 8001e50:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <IsPieceBlockingDiagonal+0x70>
		{
			return 1;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e00c      	b.n	8001e76 <IsPieceBlockingDiagonal+0x8a>
	for (uint8_t row = startRow + 1; row < endRow; row++, column += columnIncrement)
 8001e5c:	7abb      	ldrb	r3, [r7, #10]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	72bb      	strb	r3, [r7, #10]
 8001e62:	7afa      	ldrb	r2, [r7, #11]
 8001e64:	7a7b      	ldrb	r3, [r7, #9]
 8001e66:	4413      	add	r3, r2
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	72fb      	strb	r3, [r7, #11]
 8001e6c:	7aba      	ldrb	r2, [r7, #10]
 8001e6e:	7b7b      	ldrb	r3, [r7, #13]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d3e7      	bcc.n	8001e44 <IsPieceBlockingDiagonal+0x58>
		}
	}
	return 0;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	200000d4 	.word	0x200000d4

08001e84 <CalculateCastlingPositions>:


void CalculateCastlingPositions(
	struct PieceCoordinate rookPieceCoordinate,
	struct PieceCoordinate* expectedKingPieceCoordinate, struct PieceCoordinate* expectedRookPieceCoordinate)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
	// Fill in the piece attributes
	expectedKingPieceCoordinate->piece.owner = rookPieceCoordinate.piece.owner;
 8001e90:	7b7a      	ldrb	r2, [r7, #13]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	705a      	strb	r2, [r3, #1]
	expectedRookPieceCoordinate->piece.owner = rookPieceCoordinate.piece.owner;
 8001e96:	7b7a      	ldrb	r2, [r7, #13]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	705a      	strb	r2, [r3, #1]
	expectedKingPieceCoordinate->piece.type = KING;
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2206      	movs	r2, #6
 8001ea0:	701a      	strb	r2, [r3, #0]
	expectedRookPieceCoordinate->piece.type = ROOK;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	701a      	strb	r2, [r3, #0]

	// Calculate expected ROOK and KING columns
	if (rookPieceCoordinate.column == 0)
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <CalculateCastlingPositions+0x38>
	{
		expectedKingPieceCoordinate->column = 2;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	70da      	strb	r2, [r3, #3]
		expectedRookPieceCoordinate->column = 3;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	70da      	strb	r2, [r3, #3]
 8001eba:	e008      	b.n	8001ece <CalculateCastlingPositions+0x4a>
	}
	else if (rookPieceCoordinate.column == 7)
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	2b07      	cmp	r3, #7
 8001ec0:	d105      	bne.n	8001ece <CalculateCastlingPositions+0x4a>
	{
		expectedKingPieceCoordinate->column = 6;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2206      	movs	r2, #6
 8001ec6:	70da      	strb	r2, [r3, #3]
		expectedRookPieceCoordinate->column = 5;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2205      	movs	r2, #5
 8001ecc:	70da      	strb	r2, [r3, #3]
	}

	// Calculate expected ROOK and KING rows
	if (rookPieceCoordinate.piece.owner == WHITE)
 8001ece:	7b7b      	ldrb	r3, [r7, #13]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d107      	bne.n	8001ee4 <CalculateCastlingPositions+0x60>
	{
		expectedKingPieceCoordinate->row = expectedRookPieceCoordinate->row = 0;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	709a      	strb	r2, [r3, #2]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	789a      	ldrb	r2, [r3, #2]
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	709a      	strb	r2, [r3, #2]
	}
	else if (rookPieceCoordinate.piece.owner == BLACK)
	{
		expectedKingPieceCoordinate->row = expectedRookPieceCoordinate->row = 7;
	}
}
 8001ee2:	e009      	b.n	8001ef8 <CalculateCastlingPositions+0x74>
	else if (rookPieceCoordinate.piece.owner == BLACK)
 8001ee4:	7b7b      	ldrb	r3, [r7, #13]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d106      	bne.n	8001ef8 <CalculateCastlingPositions+0x74>
		expectedKingPieceCoordinate->row = expectedRookPieceCoordinate->row = 7;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2207      	movs	r2, #7
 8001eee:	709a      	strb	r2, [r3, #2]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	789a      	ldrb	r2, [r3, #2]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	709a      	strb	r2, [r3, #2]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <IsValidCoordinate>:

static inline uint8_t IsValidCoordinate(struct Coordinate path)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	80b8      	strh	r0, [r7, #4]
	return path.row >= 0 && path.row < 8 && path.column >= 0 && path.column < 8;
 8001f0a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db0d      	blt.n	8001f2e <IsValidCoordinate+0x2c>
 8001f12:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001f16:	2b07      	cmp	r3, #7
 8001f18:	dc09      	bgt.n	8001f2e <IsValidCoordinate+0x2c>
 8001f1a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	db05      	blt.n	8001f2e <IsValidCoordinate+0x2c>
 8001f22:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f26:	2b07      	cmp	r3, #7
 8001f28:	dc01      	bgt.n	8001f2e <IsValidCoordinate+0x2c>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <IsValidCoordinate+0x2e>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <IsPieceMovingStraight>:

static inline uint8_t IsPieceMovingStraight(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
	return (from.column == to.column || from.row == to.row);
 8001f46:	79fa      	ldrb	r2, [r7, #7]
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d003      	beq.n	8001f56 <IsPieceMovingStraight+0x1a>
 8001f4e:	79ba      	ldrb	r2, [r7, #6]
 8001f50:	78bb      	ldrb	r3, [r7, #2]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d101      	bne.n	8001f5a <IsPieceMovingStraight+0x1e>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <IsPieceMovingStraight+0x20>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <IsPieceMovingDiagonal>:

static inline uint8_t IsPieceMovingDiagonal(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
	return abs((int8_t)from.column - (int8_t)to.column) == abs((int8_t)from.row - (int8_t)to.row);
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	b25b      	sxtb	r3, r3
 8001f76:	461a      	mov	r2, r3
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	b25b      	sxtb	r3, r3
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001f82:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001f86:	79bb      	ldrb	r3, [r7, #6]
 8001f88:	b25b      	sxtb	r3, r3
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	78bb      	ldrb	r3, [r7, #2]
 8001f8e:	b25b      	sxtb	r3, r3
 8001f90:	1acb      	subs	r3, r1, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	bfb8      	it	lt
 8001f96:	425b      	neglt	r3, r3
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	bf0c      	ite	eq
 8001f9c:	2301      	moveq	r3, #1
 8001f9e:	2300      	movne	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <IsPieceCoordinateSameTeam>:

static inline uint8_t IsPieceCoordinateSameTeam(struct PieceCoordinate pieceCoordinate1, struct PieceCoordinate pieceCoordinate2)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
	return pieceCoordinate1.piece.owner == pieceCoordinate2.piece.owner;
 8001fb6:	797a      	ldrb	r2, [r7, #5]
 8001fb8:	787b      	ldrb	r3, [r7, #1]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	bf0c      	ite	eq
 8001fbe:	2301      	moveq	r3, #1
 8001fc0:	2300      	movne	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr
	...

08001fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001fd6:	4b14      	ldr	r3, [pc, #80]	; (8002028 <HAL_MspInit+0x58>)
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	4a13      	ldr	r2, [pc, #76]	; (8002028 <HAL_MspInit+0x58>)
 8001fdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fe0:	6253      	str	r3, [r2, #36]	; 0x24
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_MspInit+0x58>)
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <HAL_MspInit+0x58>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <HAL_MspInit+0x58>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6213      	str	r3, [r2, #32]
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_MspInit+0x58>)
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	4b08      	ldr	r3, [pc, #32]	; (8002028 <HAL_MspInit+0x58>)
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	4a07      	ldr	r2, [pc, #28]	; (8002028 <HAL_MspInit+0x58>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002010:	6253      	str	r3, [r2, #36]	; 0x24
 8002012:	4b05      	ldr	r3, [pc, #20]	; (8002028 <HAL_MspInit+0x58>)
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800201e:	bf00      	nop
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	40023800 	.word	0x40023800

0800202c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	; 0x28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a28      	ldr	r2, [pc, #160]	; (80020ec <HAL_DAC_MspInit+0xc0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d14a      	bne.n	80020e4 <HAL_DAC_MspInit+0xb8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800204e:	4b28      	ldr	r3, [pc, #160]	; (80020f0 <HAL_DAC_MspInit+0xc4>)
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	4a27      	ldr	r2, [pc, #156]	; (80020f0 <HAL_DAC_MspInit+0xc4>)
 8002054:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002058:	6253      	str	r3, [r2, #36]	; 0x24
 800205a:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <HAL_DAC_MspInit+0xc4>)
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	4b22      	ldr	r3, [pc, #136]	; (80020f0 <HAL_DAC_MspInit+0xc4>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	4a21      	ldr	r2, [pc, #132]	; (80020f0 <HAL_DAC_MspInit+0xc4>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	61d3      	str	r3, [r2, #28]
 8002072:	4b1f      	ldr	r3, [pc, #124]	; (80020f0 <HAL_DAC_MspInit+0xc4>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800207e:	2320      	movs	r3, #32
 8002080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002082:	2303      	movs	r3, #3
 8002084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	4818      	ldr	r0, [pc, #96]	; (80020f4 <HAL_DAC_MspInit+0xc8>)
 8002092:	f001 fcd5 	bl	8003a40 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel3;
 8002096:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <HAL_DAC_MspInit+0xcc>)
 8002098:	4a18      	ldr	r2, [pc, #96]	; (80020fc <HAL_DAC_MspInit+0xd0>)
 800209a:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800209c:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_DAC_MspInit+0xcc>)
 800209e:	2210      	movs	r2, #16
 80020a0:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <HAL_DAC_MspInit+0xcc>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_DAC_MspInit+0xcc>)
 80020aa:	2280      	movs	r2, #128	; 0x80
 80020ac:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020ae:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <HAL_DAC_MspInit+0xcc>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020b4:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <HAL_DAC_MspInit+0xcc>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_DAC_MspInit+0xcc>)
 80020bc:	2220      	movs	r2, #32
 80020be:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <HAL_DAC_MspInit+0xcc>)
 80020c2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80020c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 80020c8:	480b      	ldr	r0, [pc, #44]	; (80020f8 <HAL_DAC_MspInit+0xcc>)
 80020ca:	f001 fb95 	bl	80037f8 <HAL_DMA_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_DAC_MspInit+0xac>
    {
      Error_Handler();
 80020d4:	f7ff f864 	bl	80011a0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a07      	ldr	r2, [pc, #28]	; (80020f8 <HAL_DAC_MspInit+0xcc>)
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <HAL_DAC_MspInit+0xcc>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80020e4:	bf00      	nop
 80020e6:	3728      	adds	r7, #40	; 0x28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40007400 	.word	0x40007400
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40020000 	.word	0x40020000
 80020f8:	20000884 	.word	0x20000884
 80020fc:	40026030 	.word	0x40026030

08002100 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08e      	sub	sp, #56	; 0x38
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a54      	ldr	r2, [pc, #336]	; (8002270 <HAL_SPI_MspInit+0x170>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d145      	bne.n	80021ae <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002122:	4b54      	ldr	r3, [pc, #336]	; (8002274 <HAL_SPI_MspInit+0x174>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4a53      	ldr	r2, [pc, #332]	; (8002274 <HAL_SPI_MspInit+0x174>)
 8002128:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800212c:	6213      	str	r3, [r2, #32]
 800212e:	4b51      	ldr	r3, [pc, #324]	; (8002274 <HAL_SPI_MspInit+0x174>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002136:	623b      	str	r3, [r7, #32]
 8002138:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213a:	4b4e      	ldr	r3, [pc, #312]	; (8002274 <HAL_SPI_MspInit+0x174>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	4a4d      	ldr	r2, [pc, #308]	; (8002274 <HAL_SPI_MspInit+0x174>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	61d3      	str	r3, [r2, #28]
 8002146:	4b4b      	ldr	r3, [pc, #300]	; (8002274 <HAL_SPI_MspInit+0x174>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	61fb      	str	r3, [r7, #28]
 8002150:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002152:	4b48      	ldr	r3, [pc, #288]	; (8002274 <HAL_SPI_MspInit+0x174>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	4a47      	ldr	r2, [pc, #284]	; (8002274 <HAL_SPI_MspInit+0x174>)
 8002158:	f043 0310 	orr.w	r3, r3, #16
 800215c:	61d3      	str	r3, [r2, #28]
 800215e:	4b45      	ldr	r3, [pc, #276]	; (8002274 <HAL_SPI_MspInit+0x174>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	61bb      	str	r3, [r7, #24]
 8002168:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PE13     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800216a:	23c0      	movs	r3, #192	; 0xc0
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002176:	2303      	movs	r3, #3
 8002178:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800217a:	2305      	movs	r3, #5
 800217c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002182:	4619      	mov	r1, r3
 8002184:	483c      	ldr	r0, [pc, #240]	; (8002278 <HAL_SPI_MspInit+0x178>)
 8002186:	f001 fc5b 	bl	8003a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800218a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002198:	2303      	movs	r3, #3
 800219a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800219c:	2305      	movs	r3, #5
 800219e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a4:	4619      	mov	r1, r3
 80021a6:	4835      	ldr	r0, [pc, #212]	; (800227c <HAL_SPI_MspInit+0x17c>)
 80021a8:	f001 fc4a 	bl	8003a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80021ac:	e05c      	b.n	8002268 <HAL_SPI_MspInit+0x168>
  else if(hspi->Instance==SPI2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a33      	ldr	r2, [pc, #204]	; (8002280 <HAL_SPI_MspInit+0x180>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d129      	bne.n	800220c <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021b8:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <HAL_SPI_MspInit+0x174>)
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	4a2d      	ldr	r2, [pc, #180]	; (8002274 <HAL_SPI_MspInit+0x174>)
 80021be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c2:	6253      	str	r3, [r2, #36]	; 0x24
 80021c4:	4b2b      	ldr	r3, [pc, #172]	; (8002274 <HAL_SPI_MspInit+0x174>)
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d0:	4b28      	ldr	r3, [pc, #160]	; (8002274 <HAL_SPI_MspInit+0x174>)
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	4a27      	ldr	r2, [pc, #156]	; (8002274 <HAL_SPI_MspInit+0x174>)
 80021d6:	f043 0302 	orr.w	r3, r3, #2
 80021da:	61d3      	str	r3, [r2, #28]
 80021dc:	4b25      	ldr	r3, [pc, #148]	; (8002274 <HAL_SPI_MspInit+0x174>)
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80021e8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f6:	2303      	movs	r3, #3
 80021f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021fa:	2305      	movs	r3, #5
 80021fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002202:	4619      	mov	r1, r3
 8002204:	481f      	ldr	r0, [pc, #124]	; (8002284 <HAL_SPI_MspInit+0x184>)
 8002206:	f001 fc1b 	bl	8003a40 <HAL_GPIO_Init>
}
 800220a:	e02d      	b.n	8002268 <HAL_SPI_MspInit+0x168>
  else if(hspi->Instance==SPI3)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a1d      	ldr	r2, [pc, #116]	; (8002288 <HAL_SPI_MspInit+0x188>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d128      	bne.n	8002268 <HAL_SPI_MspInit+0x168>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002216:	4b17      	ldr	r3, [pc, #92]	; (8002274 <HAL_SPI_MspInit+0x174>)
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	4a16      	ldr	r2, [pc, #88]	; (8002274 <HAL_SPI_MspInit+0x174>)
 800221c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002220:	6253      	str	r3, [r2, #36]	; 0x24
 8002222:	4b14      	ldr	r3, [pc, #80]	; (8002274 <HAL_SPI_MspInit+0x174>)
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800222e:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HAL_SPI_MspInit+0x174>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	4a10      	ldr	r2, [pc, #64]	; (8002274 <HAL_SPI_MspInit+0x174>)
 8002234:	f043 0304 	orr.w	r3, r3, #4
 8002238:	61d3      	str	r3, [r2, #28]
 800223a:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <HAL_SPI_MspInit+0x174>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002246:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224c:	2302      	movs	r3, #2
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002254:	2303      	movs	r3, #3
 8002256:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002258:	2306      	movs	r3, #6
 800225a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800225c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002260:	4619      	mov	r1, r3
 8002262:	480a      	ldr	r0, [pc, #40]	; (800228c <HAL_SPI_MspInit+0x18c>)
 8002264:	f001 fbec 	bl	8003a40 <HAL_GPIO_Init>
}
 8002268:	bf00      	nop
 800226a:	3738      	adds	r7, #56	; 0x38
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40013000 	.word	0x40013000
 8002274:	40023800 	.word	0x40023800
 8002278:	40020000 	.word	0x40020000
 800227c:	40021000 	.word	0x40021000
 8002280:	40003800 	.word	0x40003800
 8002284:	40020400 	.word	0x40020400
 8002288:	40003c00 	.word	0x40003c00
 800228c:	40020800 	.word	0x40020800

08002290 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a0:	d114      	bne.n	80022cc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022a2:	4b33      	ldr	r3, [pc, #204]	; (8002370 <HAL_TIM_Base_MspInit+0xe0>)
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	4a32      	ldr	r2, [pc, #200]	; (8002370 <HAL_TIM_Base_MspInit+0xe0>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6253      	str	r3, [r2, #36]	; 0x24
 80022ae:	4b30      	ldr	r3, [pc, #192]	; (8002370 <HAL_TIM_Base_MspInit+0xe0>)
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	201c      	movs	r0, #28
 80022c0:	f001 f9f3 	bl	80036aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022c4:	201c      	movs	r0, #28
 80022c6:	f001 fa0c 	bl	80036e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80022ca:	e04c      	b.n	8002366 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a28      	ldr	r2, [pc, #160]	; (8002374 <HAL_TIM_Base_MspInit+0xe4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d114      	bne.n	8002300 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022d6:	4b26      	ldr	r3, [pc, #152]	; (8002370 <HAL_TIM_Base_MspInit+0xe0>)
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	4a25      	ldr	r2, [pc, #148]	; (8002370 <HAL_TIM_Base_MspInit+0xe0>)
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	6253      	str	r3, [r2, #36]	; 0x24
 80022e2:	4b23      	ldr	r3, [pc, #140]	; (8002370 <HAL_TIM_Base_MspInit+0xe0>)
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2100      	movs	r1, #0
 80022f2:	201d      	movs	r0, #29
 80022f4:	f001 f9d9 	bl	80036aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022f8:	201d      	movs	r0, #29
 80022fa:	f001 f9f2 	bl	80036e2 <HAL_NVIC_EnableIRQ>
}
 80022fe:	e032      	b.n	8002366 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1c      	ldr	r2, [pc, #112]	; (8002378 <HAL_TIM_Base_MspInit+0xe8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d114      	bne.n	8002334 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800230a:	4b19      	ldr	r3, [pc, #100]	; (8002370 <HAL_TIM_Base_MspInit+0xe0>)
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	4a18      	ldr	r2, [pc, #96]	; (8002370 <HAL_TIM_Base_MspInit+0xe0>)
 8002310:	f043 0304 	orr.w	r3, r3, #4
 8002314:	6253      	str	r3, [r2, #36]	; 0x24
 8002316:	4b16      	ldr	r3, [pc, #88]	; (8002370 <HAL_TIM_Base_MspInit+0xe0>)
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	201e      	movs	r0, #30
 8002328:	f001 f9bf 	bl	80036aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800232c:	201e      	movs	r0, #30
 800232e:	f001 f9d8 	bl	80036e2 <HAL_NVIC_EnableIRQ>
}
 8002332:	e018      	b.n	8002366 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a10      	ldr	r2, [pc, #64]	; (800237c <HAL_TIM_Base_MspInit+0xec>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d113      	bne.n	8002366 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800233e:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <HAL_TIM_Base_MspInit+0xe0>)
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	4a0b      	ldr	r2, [pc, #44]	; (8002370 <HAL_TIM_Base_MspInit+0xe0>)
 8002344:	f043 0308 	orr.w	r3, r3, #8
 8002348:	6253      	str	r3, [r2, #36]	; 0x24
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_TIM_Base_MspInit+0xe0>)
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2100      	movs	r1, #0
 800235a:	202e      	movs	r0, #46	; 0x2e
 800235c:	f001 f9a5 	bl	80036aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002360:	202e      	movs	r0, #46	; 0x2e
 8002362:	f001 f9be 	bl	80036e2 <HAL_NVIC_EnableIRQ>
}
 8002366:	bf00      	nop
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800
 8002374:	40000400 	.word	0x40000400
 8002378:	40000800 	.word	0x40000800
 800237c:	40000c00 	.word	0x40000c00

08002380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	; 0x28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a17      	ldr	r2, [pc, #92]	; (80023fc <HAL_UART_MspInit+0x7c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d128      	bne.n	80023f4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023a2:	4b17      	ldr	r3, [pc, #92]	; (8002400 <HAL_UART_MspInit+0x80>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4a16      	ldr	r2, [pc, #88]	; (8002400 <HAL_UART_MspInit+0x80>)
 80023a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ac:	6213      	str	r3, [r2, #32]
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <HAL_UART_MspInit+0x80>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_UART_MspInit+0x80>)
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	4a10      	ldr	r2, [pc, #64]	; (8002400 <HAL_UART_MspInit+0x80>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	61d3      	str	r3, [r2, #28]
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_UART_MspInit+0x80>)
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d8:	2302      	movs	r3, #2
 80023da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e0:	2303      	movs	r3, #3
 80023e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023e4:	2307      	movs	r3, #7
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4619      	mov	r1, r3
 80023ee:	4805      	ldr	r0, [pc, #20]	; (8002404 <HAL_UART_MspInit+0x84>)
 80023f0:	f001 fb26 	bl	8003a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023f4:	bf00      	nop
 80023f6:	3728      	adds	r7, #40	; 0x28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40013800 	.word	0x40013800
 8002400:	40023800 	.word	0x40023800
 8002404:	40020000 	.word	0x40020000

08002408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800240c:	e7fe      	b.n	800240c <NMI_Handler+0x4>

0800240e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002412:	e7fe      	b.n	8002412 <HardFault_Handler+0x4>

08002414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002418:	e7fe      	b.n	8002418 <MemManage_Handler+0x4>

0800241a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800241e:	e7fe      	b.n	800241e <BusFault_Handler+0x4>

08002420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002424:	e7fe      	b.n	8002424 <UsageFault_Handler+0x4>

08002426 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr

0800243e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800244e:	f001 f817 	bl	8003480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 800245c:	4802      	ldr	r0, [pc, #8]	; (8002468 <DMA1_Channel3_IRQHandler+0x10>)
 800245e:	f001 fa3f 	bl	80038e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000884 	.word	0x20000884

0800246c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002470:	4802      	ldr	r0, [pc, #8]	; (800247c <TIM2_IRQHandler+0x10>)
 8002472:	f002 ff43 	bl	80052fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000920 	.word	0x20000920

08002480 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002484:	4802      	ldr	r0, [pc, #8]	; (8002490 <TIM3_IRQHandler+0x10>)
 8002486:	f002 ff39 	bl	80052fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000794 	.word	0x20000794

08002494 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002498:	4802      	ldr	r0, [pc, #8]	; (80024a4 <TIM4_IRQHandler+0x10>)
 800249a:	f002 ff2f 	bl	80052fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000714 	.word	0x20000714

080024a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80024ac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80024b0:	f001 fc86 	bl	8003dc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80024b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024b8:	f001 fc82 	bl	8003dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}

080024c0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <TIM5_IRQHandler+0x10>)
 80024c6:	f002 ff19 	bl	80052fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000754 	.word	0x20000754

080024d4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <InitTracker>:

// Integration //
extern SPI_HandleTypeDef hspi1; // LED matrix controller

void InitTracker()
{
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
	// Initialize globals
	LastTransitionType = PLACE;
 80024e6:	4b40      	ldr	r3, [pc, #256]	; (80025e8 <InitTracker+0x108>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]
	CurrentTurn = WHITE;
 80024ec:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <InitTracker+0x10c>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
	CanA1Castle = 1;
 80024f2:	4b3f      	ldr	r3, [pc, #252]	; (80025f0 <InitTracker+0x110>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	701a      	strb	r2, [r3, #0]
	CanH1Castle = 1;
 80024f8:	4b3e      	ldr	r3, [pc, #248]	; (80025f4 <InitTracker+0x114>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
	CanA8Castle = 1;
 80024fe:	4b3e      	ldr	r3, [pc, #248]	; (80025f8 <InitTracker+0x118>)
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
	CanH8Castle = 1;
 8002504:	4b3d      	ldr	r3, [pc, #244]	; (80025fc <InitTracker+0x11c>)
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]
	CanWhiteKingCastle = 1;
 800250a:	4b3d      	ldr	r3, [pc, #244]	; (8002600 <InitTracker+0x120>)
 800250c:	2201      	movs	r2, #1
 800250e:	701a      	strb	r2, [r3, #0]
	CanBlackKingCastle = 1;
 8002510:	4b3c      	ldr	r3, [pc, #240]	; (8002604 <InitTracker+0x124>)
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
	SwitchTurnsAfterLegalState = 0;
 8002516:	4b3c      	ldr	r3, [pc, #240]	; (8002608 <InitTracker+0x128>)
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]

	ClearPiece(&LastPickedUpPiece);
 800251c:	483b      	ldr	r0, [pc, #236]	; (800260c <InitTracker+0x12c>)
 800251e:	f000 fe53 	bl	80031c8 <ClearPiece>
	ClearPiece(&PieceToKill);
 8002522:	483b      	ldr	r0, [pc, #236]	; (8002610 <InitTracker+0x130>)
 8002524:	f000 fe50 	bl	80031c8 <ClearPiece>
	ClearPiece(&ExpectedKingCastleCoordinate);
 8002528:	483a      	ldr	r0, [pc, #232]	; (8002614 <InitTracker+0x134>)
 800252a:	f000 fe4d 	bl	80031c8 <ClearPiece>
	ClearPiece(&ExpectedRookCastleCoordinate);
 800252e:	483a      	ldr	r0, [pc, #232]	; (8002618 <InitTracker+0x138>)
 8002530:	f000 fe4a 	bl	80031c8 <ClearPiece>
	ClearPiece(&PawnToPromote);
 8002534:	4839      	ldr	r0, [pc, #228]	; (800261c <InitTracker+0x13c>)
 8002536:	f000 fe47 	bl	80031c8 <ClearPiece>

	// Initialize the Chessboard to the initial chessboard and zero the debouncing Histroy array
	for (uint8_t column = 0; column < NUM_COLS; column++)
 800253a:	2300      	movs	r3, #0
 800253c:	71fb      	strb	r3, [r7, #7]
 800253e:	e02d      	b.n	800259c <InitTracker+0xbc>
	{
		for (uint8_t row = 0; row < NUM_ROWS; row++)
 8002540:	2300      	movs	r3, #0
 8002542:	71bb      	strb	r3, [r7, #6]
 8002544:	e024      	b.n	8002590 <InitTracker+0xb0>
		{
			Chessboard[row][column] = INITIAL_CHESSBOARD[row][column];
 8002546:	79b9      	ldrb	r1, [r7, #6]
 8002548:	79fa      	ldrb	r2, [r7, #7]
 800254a:	79b8      	ldrb	r0, [r7, #6]
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	4c34      	ldr	r4, [pc, #208]	; (8002620 <InitTracker+0x140>)
 8002550:	00c0      	lsls	r0, r0, #3
 8002552:	4403      	add	r3, r0
 8002554:	4833      	ldr	r0, [pc, #204]	; (8002624 <InitTracker+0x144>)
 8002556:	00c9      	lsls	r1, r1, #3
 8002558:	440a      	add	r2, r1
 800255a:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 800255e:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]

			for(uint8_t i = 0; i < NUM_HISTORY_ENTRIES; i++)
 8002562:	2300      	movs	r3, #0
 8002564:	717b      	strb	r3, [r7, #5]
 8002566:	e00d      	b.n	8002584 <InitTracker+0xa4>
			{
				History[row][column][i] = 0;
 8002568:	79b9      	ldrb	r1, [r7, #6]
 800256a:	79fa      	ldrb	r2, [r7, #7]
 800256c:	797b      	ldrb	r3, [r7, #5]
 800256e:	482e      	ldr	r0, [pc, #184]	; (8002628 <InitTracker+0x148>)
 8002570:	00c9      	lsls	r1, r1, #3
 8002572:	440a      	add	r2, r1
 8002574:	00d2      	lsls	r2, r2, #3
 8002576:	4402      	add	r2, r0
 8002578:	4413      	add	r3, r2
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < NUM_HISTORY_ENTRIES; i++)
 800257e:	797b      	ldrb	r3, [r7, #5]
 8002580:	3301      	adds	r3, #1
 8002582:	717b      	strb	r3, [r7, #5]
 8002584:	797b      	ldrb	r3, [r7, #5]
 8002586:	2b07      	cmp	r3, #7
 8002588:	d9ee      	bls.n	8002568 <InitTracker+0x88>
		for (uint8_t row = 0; row < NUM_ROWS; row++)
 800258a:	79bb      	ldrb	r3, [r7, #6]
 800258c:	3301      	adds	r3, #1
 800258e:	71bb      	strb	r3, [r7, #6]
 8002590:	79bb      	ldrb	r3, [r7, #6]
 8002592:	2b07      	cmp	r3, #7
 8002594:	d9d7      	bls.n	8002546 <InitTracker+0x66>
	for (uint8_t column = 0; column < NUM_COLS; column++)
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	3301      	adds	r3, #1
 800259a:	71fb      	strb	r3, [r7, #7]
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	2b07      	cmp	r3, #7
 80025a0:	d9ce      	bls.n	8002540 <InitTracker+0x60>
			}
		}
	}

	// Initialize illegal piece destinations to empty pieces
	NumIllegalPieces = 0;
 80025a2:	4b22      	ldr	r3, [pc, #136]	; (800262c <InitTracker+0x14c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_ILLEGAL_PIECES; i++)
 80025a8:	2300      	movs	r3, #0
 80025aa:	713b      	strb	r3, [r7, #4]
 80025ac:	e00f      	b.n	80025ce <InitTracker+0xee>
	{
		IllegalPieces[i].destination = EMPTY_PIECE_COORDINATE;
 80025ae:	793b      	ldrb	r3, [r7, #4]
 80025b0:	491f      	ldr	r1, [pc, #124]	; (8002630 <InitTracker+0x150>)
 80025b2:	4a20      	ldr	r2, [pc, #128]	; (8002634 <InitTracker+0x154>)
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		IllegalPieces[i].current = EMPTY_PIECE_COORDINATE;
 80025ba:	793b      	ldrb	r3, [r7, #4]
 80025bc:	4a1c      	ldr	r2, [pc, #112]	; (8002630 <InitTracker+0x150>)
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	4a1c      	ldr	r2, [pc, #112]	; (8002634 <InitTracker+0x154>)
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	605a      	str	r2, [r3, #4]
	for (uint8_t i = 0; i < NUM_ILLEGAL_PIECES; i++)
 80025c8:	793b      	ldrb	r3, [r7, #4]
 80025ca:	3301      	adds	r3, #1
 80025cc:	713b      	strb	r3, [r7, #4]
 80025ce:	793b      	ldrb	r3, [r7, #4]
 80025d0:	2b1f      	cmp	r3, #31
 80025d2:	d9ec      	bls.n	80025ae <InitTracker+0xce>

	// Initialize debouncing history array


	// Initialize PathFinder
	CalculateTeamsLegalMoves(CurrentTurn);
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <InitTracker+0x10c>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe fde7 	bl	80011ac <CalculateTeamsLegalMoves>
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd90      	pop	{r4, r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000585 	.word	0x20000585
 80025ec:	20000584 	.word	0x20000584
 80025f0:	20000692 	.word	0x20000692
 80025f4:	20000693 	.word	0x20000693
 80025f8:	20000694 	.word	0x20000694
 80025fc:	20000695 	.word	0x20000695
 8002600:	20000696 	.word	0x20000696
 8002604:	20000697 	.word	0x20000697
 8002608:	20000691 	.word	0x20000691
 800260c:	20000588 	.word	0x20000588
 8002610:	2000058c 	.word	0x2000058c
 8002614:	20000698 	.word	0x20000698
 8002618:	2000069c 	.word	0x2000069c
 800261c:	200006a0 	.word	0x200006a0
 8002620:	20000504 	.word	0x20000504
 8002624:	20000018 	.word	0x20000018
 8002628:	20000960 	.word	0x20000960
 800262c:	20000690 	.word	0x20000690
 8002630:	20000590 	.word	0x20000590
 8002634:	20000010 	.word	0x20000010

08002638 <WriteColumn>:

static void WriteColumn(uint8_t column)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
	uint8_t columnBit0 = (column & 1) >> 0;
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
	uint8_t columnBit1 = (column & 2) >> 1;
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	105b      	asrs	r3, r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	73bb      	strb	r3, [r7, #14]
	uint8_t columnBit2 = (column & 4) >> 2;
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	109b      	asrs	r3, r3, #2
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(COLUMN_BIT_TO_PIN_TABLE[0].bus, COLUMN_BIT_TO_PIN_TABLE[0].pin, columnBit0);
 8002662:	480b      	ldr	r0, [pc, #44]	; (8002690 <WriteColumn+0x58>)
 8002664:	2101      	movs	r1, #1
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	461a      	mov	r2, r3
 800266a:	f001 fb90 	bl	8003d8e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COLUMN_BIT_TO_PIN_TABLE[1].bus, COLUMN_BIT_TO_PIN_TABLE[1].pin, columnBit1);
 800266e:	4808      	ldr	r0, [pc, #32]	; (8002690 <WriteColumn+0x58>)
 8002670:	2102      	movs	r1, #2
 8002672:	7bbb      	ldrb	r3, [r7, #14]
 8002674:	461a      	mov	r2, r3
 8002676:	f001 fb8a 	bl	8003d8e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COLUMN_BIT_TO_PIN_TABLE[2].bus, COLUMN_BIT_TO_PIN_TABLE[2].pin, columnBit2);
 800267a:	4805      	ldr	r0, [pc, #20]	; (8002690 <WriteColumn+0x58>)
 800267c:	2104      	movs	r1, #4
 800267e:	7b7b      	ldrb	r3, [r7, #13]
 8002680:	461a      	mov	r2, r3
 8002682:	f001 fb84 	bl	8003d8e <HAL_GPIO_WritePin>
}
 8002686:	bf00      	nop
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40020000 	.word	0x40020000

08002694 <ReadRow>:

static uint8_t ReadRow(uint8_t rowNumber)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
	struct GPIO_Pin rowPin = ROW_NUMBER_TO_PIN_TABLE[rowNumber];
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	4909      	ldr	r1, [pc, #36]	; (80026c8 <ReadRow+0x34>)
 80026a2:	f107 0208 	add.w	r2, r7, #8
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	440b      	add	r3, r1
 80026aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026ae:	e882 0003 	stmia.w	r2, {r0, r1}
	return HAL_GPIO_ReadPin(rowPin.bus, rowPin.pin);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	893a      	ldrh	r2, [r7, #8]
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f001 fb51 	bl	8003d60 <HAL_GPIO_ReadPin>
 80026be:	4603      	mov	r3, r0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	08006794 	.word	0x08006794

080026cc <Track>:

uint8_t Track()
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
	uint8_t transitionOccured = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	71fb      	strb	r3, [r7, #7]

	for (uint8_t column = 0; column < NUM_COLS; column++)
 80026d6:	2300      	movs	r3, #0
 80026d8:	71bb      	strb	r3, [r7, #6]
 80026da:	e043      	b.n	8002764 <Track+0x98>
	{
		WriteColumn(column);
 80026dc:	79bb      	ldrb	r3, [r7, #6]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff ffaa 	bl	8002638 <WriteColumn>

		for (uint8_t row = 0; row < NUM_ROWS; row++)
 80026e4:	2300      	movs	r3, #0
 80026e6:	717b      	strb	r3, [r7, #5]
 80026e8:	e036      	b.n	8002758 <Track+0x8c>
		{
			uint8_t cellValue = ReadRow(row);
 80026ea:	797b      	ldrb	r3, [r7, #5]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff ffd1 	bl	8002694 <ReadRow>
 80026f2:	4603      	mov	r3, r0
 80026f4:	713b      	strb	r3, [r7, #4]

			// Add cellValue to front of History array for this cell
			AppendHistory(row, column, cellValue);
 80026f6:	793a      	ldrb	r2, [r7, #4]
 80026f8:	79b9      	ldrb	r1, [r7, #6]
 80026fa:	797b      	ldrb	r3, [r7, #5]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 f839 	bl	8002774 <AppendHistory>

			// If the History of this cell is all the same value, then we can consider it for a transition
			if(IsHistoryConsensus(row, column))
 8002702:	79ba      	ldrb	r2, [r7, #6]
 8002704:	797b      	ldrb	r3, [r7, #5]
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f000 f871 	bl	80027f0 <IsHistoryConsensus>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01e      	beq.n	8002752 <Track+0x86>
			{
				struct PieceCoordinate currentPieceCoordinate = GetPieceCoordinate(row, column);
 8002714:	79ba      	ldrb	r2, [r7, #6]
 8002716:	797b      	ldrb	r3, [r7, #5]
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f000 fdae 	bl	800327c <GetPieceCoordinate>
 8002720:	4603      	mov	r3, r0
 8002722:	603b      	str	r3, [r7, #0]

				// If there was no piece here but the IO is HIGH, a piece was placed
				if ((currentPieceCoordinate.piece.type == NONE) && (cellValue == 1))
 8002724:	783b      	ldrb	r3, [r7, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d108      	bne.n	800273c <Track+0x70>
 800272a:	793b      	ldrb	r3, [r7, #4]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d105      	bne.n	800273c <Track+0x70>
				{
					HandlePlace(currentPieceCoordinate);
 8002730:	6838      	ldr	r0, [r7, #0]
 8002732:	f000 f88f 	bl	8002854 <HandlePlace>
					transitionOccured = 1;
 8002736:	2301      	movs	r3, #1
 8002738:	71fb      	strb	r3, [r7, #7]
 800273a:	e00a      	b.n	8002752 <Track+0x86>
				}

				// If there was a piece here but the IO is LOW, a piece has been picked up
				else if ((currentPieceCoordinate.piece.type != NONE) && (cellValue == 0))
 800273c:	783b      	ldrb	r3, [r7, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d007      	beq.n	8002752 <Track+0x86>
 8002742:	793b      	ldrb	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d104      	bne.n	8002752 <Track+0x86>
				{
					HandlePickup(currentPieceCoordinate);
 8002748:	6838      	ldr	r0, [r7, #0]
 800274a:	f000 fa25 	bl	8002b98 <HandlePickup>
					transitionOccured = 1;
 800274e:	2301      	movs	r3, #1
 8002750:	71fb      	strb	r3, [r7, #7]
		for (uint8_t row = 0; row < NUM_ROWS; row++)
 8002752:	797b      	ldrb	r3, [r7, #5]
 8002754:	3301      	adds	r3, #1
 8002756:	717b      	strb	r3, [r7, #5]
 8002758:	797b      	ldrb	r3, [r7, #5]
 800275a:	2b07      	cmp	r3, #7
 800275c:	d9c5      	bls.n	80026ea <Track+0x1e>
	for (uint8_t column = 0; column < NUM_COLS; column++)
 800275e:	79bb      	ldrb	r3, [r7, #6]
 8002760:	3301      	adds	r3, #1
 8002762:	71bb      	strb	r3, [r7, #6]
 8002764:	79bb      	ldrb	r3, [r7, #6]
 8002766:	2b07      	cmp	r3, #7
 8002768:	d9b8      	bls.n	80026dc <Track+0x10>
				}
			}
		}
	}

	return transitionOccured;
 800276a:	79fb      	ldrb	r3, [r7, #7]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <AppendHistory>:

static void AppendHistory(uint8_t row, uint8_t column, uint8_t cellValue)
{
 8002774:	b4f0      	push	{r4, r5, r6, r7}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
 800277e:	460b      	mov	r3, r1
 8002780:	71bb      	strb	r3, [r7, #6]
 8002782:	4613      	mov	r3, r2
 8002784:	717b      	strb	r3, [r7, #5]
	// Append cellValue to front of History array
	for(int8_t i = NUM_HISTORY_ENTRIES - 1; i > 0; i--)
 8002786:	2307      	movs	r3, #7
 8002788:	73fb      	strb	r3, [r7, #15]
 800278a:	e01d      	b.n	80027c8 <AppendHistory+0x54>
	{
		History[row][column][i] = History[row][column][i - 1];
 800278c:	79fd      	ldrb	r5, [r7, #7]
 800278e:	79bc      	ldrb	r4, [r7, #6]
 8002790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002794:	1e58      	subs	r0, r3, #1
 8002796:	79f9      	ldrb	r1, [r7, #7]
 8002798:	79ba      	ldrb	r2, [r7, #6]
 800279a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279e:	4e13      	ldr	r6, [pc, #76]	; (80027ec <AppendHistory+0x78>)
 80027a0:	00ed      	lsls	r5, r5, #3
 80027a2:	442c      	add	r4, r5
 80027a4:	00e4      	lsls	r4, r4, #3
 80027a6:	4434      	add	r4, r6
 80027a8:	4420      	add	r0, r4
 80027aa:	7804      	ldrb	r4, [r0, #0]
 80027ac:	480f      	ldr	r0, [pc, #60]	; (80027ec <AppendHistory+0x78>)
 80027ae:	00c9      	lsls	r1, r1, #3
 80027b0:	440a      	add	r2, r1
 80027b2:	00d2      	lsls	r2, r2, #3
 80027b4:	4402      	add	r2, r0
 80027b6:	4413      	add	r3, r2
 80027b8:	4622      	mov	r2, r4
 80027ba:	701a      	strb	r2, [r3, #0]
	for(int8_t i = NUM_HISTORY_ENTRIES - 1; i > 0; i--)
 80027bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	73fb      	strb	r3, [r7, #15]
 80027c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	dcdd      	bgt.n	800278c <AppendHistory+0x18>
	}
	History[row][column][0] = cellValue;
 80027d0:	79fa      	ldrb	r2, [r7, #7]
 80027d2:	79bb      	ldrb	r3, [r7, #6]
 80027d4:	4905      	ldr	r1, [pc, #20]	; (80027ec <AppendHistory+0x78>)
 80027d6:	00d2      	lsls	r2, r2, #3
 80027d8:	4413      	add	r3, r2
 80027da:	797a      	ldrb	r2, [r7, #5]
 80027dc:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
}
 80027e0:	bf00      	nop
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bcf0      	pop	{r4, r5, r6, r7}
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	20000960 	.word	0x20000960

080027f0 <IsHistoryConsensus>:

static uint8_t IsHistoryConsensus(uint8_t row, uint8_t column)
{
 80027f0:	b490      	push	{r4, r7}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	460a      	mov	r2, r1
 80027fa:	71fb      	strb	r3, [r7, #7]
 80027fc:	4613      	mov	r3, r2
 80027fe:	71bb      	strb	r3, [r7, #6]
	// If any two History values are the same, there is not a consensus
	for(uint8_t i = 0; i < NUM_HISTORY_ENTRIES - 1; i++)
 8002800:	2300      	movs	r3, #0
 8002802:	73fb      	strb	r3, [r7, #15]
 8002804:	e01b      	b.n	800283e <IsHistoryConsensus+0x4e>
	{
		if(History[row][column][i] != History[row][column][i + 1])
 8002806:	79f9      	ldrb	r1, [r7, #7]
 8002808:	79ba      	ldrb	r2, [r7, #6]
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	4810      	ldr	r0, [pc, #64]	; (8002850 <IsHistoryConsensus+0x60>)
 800280e:	00c9      	lsls	r1, r1, #3
 8002810:	440a      	add	r2, r1
 8002812:	00d2      	lsls	r2, r2, #3
 8002814:	4402      	add	r2, r0
 8002816:	4413      	add	r3, r2
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	79f8      	ldrb	r0, [r7, #7]
 800281c:	79b9      	ldrb	r1, [r7, #6]
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	3301      	adds	r3, #1
 8002822:	4c0b      	ldr	r4, [pc, #44]	; (8002850 <IsHistoryConsensus+0x60>)
 8002824:	00c0      	lsls	r0, r0, #3
 8002826:	4401      	add	r1, r0
 8002828:	00c9      	lsls	r1, r1, #3
 800282a:	4421      	add	r1, r4
 800282c:	440b      	add	r3, r1
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <IsHistoryConsensus+0x48>
		{
			return 0;
 8002834:	2300      	movs	r3, #0
 8002836:	e006      	b.n	8002846 <IsHistoryConsensus+0x56>
	for(uint8_t i = 0; i < NUM_HISTORY_ENTRIES - 1; i++)
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	3301      	adds	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	2b06      	cmp	r3, #6
 8002842:	d9e0      	bls.n	8002806 <IsHistoryConsensus+0x16>
		}
	}

	return 1;
 8002844:	2301      	movs	r3, #1
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bc90      	pop	{r4, r7}
 800284e:	4770      	bx	lr
 8002850:	20000960 	.word	0x20000960

08002854 <HandlePlace>:

static void HandlePlace(struct PieceCoordinate placedPiece)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
	// If board is in illegal state
	if (NumIllegalPieces > 0)
 800285c:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <HandlePlace+0x94>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HandlePlace+0x18>
	{
		HandlePlaceIllegalState(placedPiece);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f84d 	bl	8002904 <HandlePlaceIllegalState>
 800286a:	e036      	b.n	80028da <HandlePlace+0x86>
	}

	// If promotion is occurring, this placed piece must be a knight or queen placed into PawnToPromote's place
	else if (PieceExists(PawnToPromote))
 800286c:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <HandlePlace+0x98>)
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	f000 fc94 	bl	800319c <PieceExists>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HandlePlace+0x2e>
	{
		HandlePlacePromotion(placedPiece);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f962 	bl	8002b44 <HandlePlacePromotion>
 8002880:	e02b      	b.n	80028da <HandlePlace+0x86>
	}

	// If the piece lifted did not move, don't do anything except update Chessboard
	else if (IsPieceCoordinateSamePosition(placedPiece, LastPickedUpPiece))
 8002882:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <HandlePlace+0x9c>)
 8002884:	6819      	ldr	r1, [r3, #0]
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 fd6c 	bl	8003364 <IsPieceCoordinateSamePosition>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HandlePlace+0x46>
	{
		HandlePlaceNoMove(placedPiece);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f872 	bl	800297c <HandlePlaceNoMove>
 8002898:	e01f      	b.n	80028da <HandlePlace+0x86>
	}

	// If there's a piece being killed, this placement should be in its stead
	else if (PieceExists(PieceToKill))
 800289a:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <HandlePlace+0xa0>)
 800289c:	6818      	ldr	r0, [r3, #0]
 800289e:	f000 fc7d 	bl	800319c <PieceExists>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HandlePlace+0x5c>
	{
		HandlePlaceKill(placedPiece);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f887 	bl	80029bc <HandlePlaceKill>
 80028ae:	e014      	b.n	80028da <HandlePlace+0x86>
	}

	// If player is castling, this placement should be the king or rook being placed in the right spots
	else if (PieceExists(ExpectedKingCastleCoordinate) || PieceExists(ExpectedRookCastleCoordinate))
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <HandlePlace+0xa4>)
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	f000 fc72 	bl	800319c <PieceExists>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <HandlePlace+0x78>
 80028be:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <HandlePlace+0xa8>)
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	f000 fc6b 	bl	800319c <PieceExists>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HandlePlace+0x80>
	{
		HandlePlaceCastling(placedPiece);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f8a5 	bl	8002a1c <HandlePlaceCastling>
 80028d2:	e002      	b.n	80028da <HandlePlace+0x86>
	}

	// Any other move, the last picked up piece is set to this position
	else
	{
		HandlePlaceMove(placedPiece);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f911 	bl	8002afc <HandlePlaceMove>
	}

	LastTransitionType = PLACE;
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <HandlePlace+0xac>)
 80028dc:	2201      	movs	r2, #1
 80028de:	701a      	strb	r2, [r3, #0]
}
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000690 	.word	0x20000690
 80028ec:	200006a0 	.word	0x200006a0
 80028f0:	20000588 	.word	0x20000588
 80028f4:	2000058c 	.word	0x2000058c
 80028f8:	20000698 	.word	0x20000698
 80028fc:	2000069c 	.word	0x2000069c
 8002900:	20000585 	.word	0x20000585

08002904 <HandlePlaceIllegalState>:

static void HandlePlaceIllegalState(struct PieceCoordinate placedPiece)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < NumIllegalPieces; i++)
 800290c:	2300      	movs	r3, #0
 800290e:	73fb      	strb	r3, [r7, #15]
 8002910:	e01e      	b.n	8002950 <HandlePlaceIllegalState+0x4c>
	{
		// If placing an illegal piece in it's proper destination, remove it from the illegal pieces array
		if (IsPieceCoordinateSamePosition(IllegalPieces[i].destination, placedPiece))
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	4a15      	ldr	r2, [pc, #84]	; (800296c <HandlePlaceIllegalState+0x68>)
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800291c:	f000 fd22 	bl	8003364 <IsPieceCoordinateSamePosition>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d011      	beq.n	800294a <HandlePlaceIllegalState+0x46>
		{
			SetPiece(placedPiece.row, placedPiece.column, IllegalPieces[i].destination.piece);
 8002926:	79b8      	ldrb	r0, [r7, #6]
 8002928:	79f9      	ldrb	r1, [r7, #7]
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	4a0f      	ldr	r2, [pc, #60]	; (800296c <HandlePlaceIllegalState+0x68>)
 800292e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002932:	f000 fc59 	bl	80031e8 <SetPiece>

			// Remove from illegal pieces array
			RemoveIllegalPiece(i);
 8002936:	7bfb      	ldrb	r3, [r7, #15]
 8002938:	4618      	mov	r0, r3
 800293a:	f000 faed 	bl	8002f18 <RemoveIllegalPiece>

			// If chessboard is valid, switch turns if flagged to do so
			CheckChessboardValidity(SwitchTurnsAfterLegalState);
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <HandlePlaceIllegalState+0x6c>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fb16 	bl	8002f74 <CheckChessboardValidity>

			return;
 8002948:	e00c      	b.n	8002964 <HandlePlaceIllegalState+0x60>
	for (uint8_t i = 0; i < NumIllegalPieces; i++)
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	3301      	adds	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <HandlePlaceIllegalState+0x70>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	429a      	cmp	r2, r3
 8002958:	d3db      	bcc.n	8002912 <HandlePlaceIllegalState+0xe>
		}
	}

	// A piece was placed in an unexpected destination, add it as an illegal piece that must be removed from the board
	AddIllegalPiece(placedPiece, OFFBOARD_PIECE_COORDINATE);
 800295a:	4b07      	ldr	r3, [pc, #28]	; (8002978 <HandlePlaceIllegalState+0x74>)
 800295c:	6819      	ldr	r1, [r3, #0]
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fab6 	bl	8002ed0 <AddIllegalPiece>
}
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000590 	.word	0x20000590
 8002970:	20000691 	.word	0x20000691
 8002974:	20000690 	.word	0x20000690
 8002978:	20000014 	.word	0x20000014

0800297c <HandlePlaceNoMove>:

static void HandlePlaceNoMove(struct PieceCoordinate placedPiece)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b092      	sub	sp, #72	; 0x48
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
	SetPiece(placedPiece.row, placedPiece.column, LastPickedUpPiece.piece);
 8002984:	79bb      	ldrb	r3, [r7, #6]
 8002986:	79f9      	ldrb	r1, [r7, #7]
 8002988:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <HandlePlaceNoMove+0x38>)
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fc2b 	bl	80031e8 <SetPiece>
	uint8_t board[NUM_ROWS][NUM_COLS] = {0};
 8002992:	f107 0308 	add.w	r3, r7, #8
 8002996:	2240      	movs	r2, #64	; 0x40
 8002998:	2100      	movs	r1, #0
 800299a:	4618      	mov	r0, r3
 800299c:	f003 fecc 	bl	8006738 <memset>
	writeBoardValue(&hspi1, board);
 80029a0:	f107 0308 	add.w	r3, r7, #8
 80029a4:	4619      	mov	r1, r3
 80029a6:	4804      	ldr	r0, [pc, #16]	; (80029b8 <HandlePlaceNoMove+0x3c>)
 80029a8:	f7fd ff45 	bl	8000836 <writeBoardValue>
}
 80029ac:	bf00      	nop
 80029ae:	3748      	adds	r7, #72	; 0x48
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	20000588 	.word	0x20000588
 80029b8:	200008c8 	.word	0x200008c8

080029bc <HandlePlaceKill>:

static void HandlePlaceKill(struct PieceCoordinate placedPiece)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	SetPiece(placedPiece.row, placedPiece.column, LastPickedUpPiece.piece);
 80029c4:	79bb      	ldrb	r3, [r7, #6]
 80029c6:	79f9      	ldrb	r1, [r7, #7]
 80029c8:	4a11      	ldr	r2, [pc, #68]	; (8002a10 <HandlePlaceKill+0x54>)
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 fc0b 	bl	80031e8 <SetPiece>

	// If player put killer in victim's place, clear PieceToKill
	if (IsPieceCoordinateSamePosition(PieceToKill, placedPiece))
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <HandlePlaceKill+0x58>)
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	f000 fcc4 	bl	8003364 <IsPieceCoordinateSamePosition>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <HandlePlaceKill+0x32>
	{
		ClearPiece(&PieceToKill);
 80029e2:	480c      	ldr	r0, [pc, #48]	; (8002a14 <HandlePlaceKill+0x58>)
 80029e4:	f000 fbf0 	bl	80031c8 <ClearPiece>
		EndTurn();
 80029e8:	f000 fbbc 	bl	8003164 <EndTurn>
		struct PieceCoordinate killerDestination = PieceToKill;
		killerDestination.piece = LastPickedUpPiece.piece;
		AddIllegalPiece(placedPiece, killerDestination);
		SwitchTurnsAfterLegalState = 1;
	}
}
 80029ec:	e00c      	b.n	8002a08 <HandlePlaceKill+0x4c>
		struct PieceCoordinate killerDestination = PieceToKill;
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <HandlePlaceKill+0x58>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60fb      	str	r3, [r7, #12]
		killerDestination.piece = LastPickedUpPiece.piece;
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HandlePlaceKill+0x54>)
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	81bb      	strh	r3, [r7, #12]
		AddIllegalPiece(placedPiece, killerDestination);
 80029fa:	68f9      	ldr	r1, [r7, #12]
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 fa67 	bl	8002ed0 <AddIllegalPiece>
		SwitchTurnsAfterLegalState = 1;
 8002a02:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <HandlePlaceKill+0x5c>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	701a      	strb	r2, [r3, #0]
}
 8002a08:	bf00      	nop
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	20000588 	.word	0x20000588
 8002a14:	2000058c 	.word	0x2000058c
 8002a18:	20000691 	.word	0x20000691

08002a1c <HandlePlaceCastling>:

static void HandlePlaceCastling(struct PieceCoordinate placedPiece)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
	// If placing a piece in the King's expected location, assume it's a king and place it
	if (IsPieceCoordinateSamePosition(ExpectedKingCastleCoordinate, placedPiece))
 8002a24:	4b32      	ldr	r3, [pc, #200]	; (8002af0 <HandlePlaceCastling+0xd4>)
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	f000 fc9b 	bl	8003364 <IsPieceCoordinateSamePosition>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <HandlePlaceCastling+0x2e>
	{
		SetPiece(placedPiece.row, placedPiece.column, ExpectedKingCastleCoordinate.piece);
 8002a34:	79bb      	ldrb	r3, [r7, #6]
 8002a36:	79f9      	ldrb	r1, [r7, #7]
 8002a38:	4a2d      	ldr	r2, [pc, #180]	; (8002af0 <HandlePlaceCastling+0xd4>)
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fbd3 	bl	80031e8 <SetPiece>
		ClearPiece(&ExpectedKingCastleCoordinate);
 8002a42:	482b      	ldr	r0, [pc, #172]	; (8002af0 <HandlePlaceCastling+0xd4>)
 8002a44:	f000 fbc0 	bl	80031c8 <ClearPiece>
 8002a48:	e03e      	b.n	8002ac8 <HandlePlaceCastling+0xac>
	}
	// If placing a piece in the Rook's expected location, assume it's a rook and place it
	else if (IsPieceCoordinateSamePosition(ExpectedRookCastleCoordinate, placedPiece))
 8002a4a:	4b2a      	ldr	r3, [pc, #168]	; (8002af4 <HandlePlaceCastling+0xd8>)
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	f000 fc88 	bl	8003364 <IsPieceCoordinateSamePosition>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HandlePlaceCastling+0x54>
	{
		SetPiece(placedPiece.row, placedPiece.column, ExpectedRookCastleCoordinate.piece);
 8002a5a:	79bb      	ldrb	r3, [r7, #6]
 8002a5c:	79f9      	ldrb	r1, [r7, #7]
 8002a5e:	4a25      	ldr	r2, [pc, #148]	; (8002af4 <HandlePlaceCastling+0xd8>)
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fbc0 	bl	80031e8 <SetPiece>
		ClearPiece(&ExpectedRookCastleCoordinate);
 8002a68:	4822      	ldr	r0, [pc, #136]	; (8002af4 <HandlePlaceCastling+0xd8>)
 8002a6a:	f000 fbad 	bl	80031c8 <ClearPiece>
 8002a6e:	e02b      	b.n	8002ac8 <HandlePlaceCastling+0xac>
	}
	// If placing piece in wrong location
	else
	{
		// If King wasn't already placed in correct spot, put it in the correct spot
		if (PieceExists(ExpectedKingCastleCoordinate))
 8002a70:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <HandlePlaceCastling+0xd4>)
 8002a72:	6818      	ldr	r0, [r3, #0]
 8002a74:	f000 fb92 	bl	800319c <PieceExists>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00e      	beq.n	8002a9c <HandlePlaceCastling+0x80>
		{
			SetPiece(placedPiece.row, placedPiece.column, ExpectedKingCastleCoordinate.piece); // Assume the king was placed here (doesn't matter)
 8002a7e:	79bb      	ldrb	r3, [r7, #6]
 8002a80:	79f9      	ldrb	r1, [r7, #7]
 8002a82:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <HandlePlaceCastling+0xd4>)
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fbae 	bl	80031e8 <SetPiece>
			AddIllegalPiece(placedPiece, ExpectedKingCastleCoordinate);
 8002a8c:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <HandlePlaceCastling+0xd4>)
 8002a8e:	6819      	ldr	r1, [r3, #0]
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 fa1d 	bl	8002ed0 <AddIllegalPiece>
			SwitchTurnsAfterLegalState = 1;
 8002a96:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <HandlePlaceCastling+0xdc>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
		}

		// If Rook wasn't already placed in correct spot, put it in correct spot
		if (PieceExists(ExpectedRookCastleCoordinate))
 8002a9c:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HandlePlaceCastling+0xd8>)
 8002a9e:	6818      	ldr	r0, [r3, #0]
 8002aa0:	f000 fb7c 	bl	800319c <PieceExists>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00e      	beq.n	8002ac8 <HandlePlaceCastling+0xac>
		{
			SetPiece(placedPiece.row, placedPiece.column, ExpectedRookCastleCoordinate.piece); // Assume the rook was placed here (doesn't matter)
 8002aaa:	79bb      	ldrb	r3, [r7, #6]
 8002aac:	79f9      	ldrb	r1, [r7, #7]
 8002aae:	4a11      	ldr	r2, [pc, #68]	; (8002af4 <HandlePlaceCastling+0xd8>)
 8002ab0:	6812      	ldr	r2, [r2, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fb98 	bl	80031e8 <SetPiece>
			AddIllegalPiece(placedPiece, ExpectedRookCastleCoordinate);
 8002ab8:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <HandlePlaceCastling+0xd8>)
 8002aba:	6819      	ldr	r1, [r3, #0]
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 fa07 	bl	8002ed0 <AddIllegalPiece>
			SwitchTurnsAfterLegalState = 1;
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <HandlePlaceCastling+0xdc>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
		}
	}

	// If castling has been fulfilled
	if (!PieceExists(ExpectedKingCastleCoordinate) && !PieceExists(ExpectedRookCastleCoordinate))
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HandlePlaceCastling+0xd4>)
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	f000 fb66 	bl	800319c <PieceExists>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d108      	bne.n	8002ae8 <HandlePlaceCastling+0xcc>
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <HandlePlaceCastling+0xd8>)
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	f000 fb5f 	bl	800319c <PieceExists>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HandlePlaceCastling+0xcc>
	{
		EndTurn();
 8002ae4:	f000 fb3e 	bl	8003164 <EndTurn>
	}
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000698 	.word	0x20000698
 8002af4:	2000069c 	.word	0x2000069c
 8002af8:	20000691 	.word	0x20000691

08002afc <HandlePlaceMove>:

static void HandlePlaceMove(struct PieceCoordinate placedPiece)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
	uint8_t isMoveValid = ValidateMove(LastPickedUpPiece, placedPiece);
 8002b04:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <HandlePlaceMove+0x44>)
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	f000 fa63 	bl	8002fd4 <ValidateMove>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	73fb      	strb	r3, [r7, #15]
	SetPiece(placedPiece.row, placedPiece.column, LastPickedUpPiece.piece);
 8002b12:	79bb      	ldrb	r3, [r7, #6]
 8002b14:	79f9      	ldrb	r1, [r7, #7]
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <HandlePlaceMove+0x44>)
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 fb64 	bl	80031e8 <SetPiece>

	if (isMoveValid)
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <HandlePlaceMove+0x30>
	{
		EndTurn();
 8002b26:	f000 fb1d 	bl	8003164 <EndTurn>
	// If move was invalid, put piece back
	else
	{
		AddIllegalPiece(placedPiece, LastPickedUpPiece);
	}
}
 8002b2a:	e004      	b.n	8002b36 <HandlePlaceMove+0x3a>
		AddIllegalPiece(placedPiece, LastPickedUpPiece);
 8002b2c:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <HandlePlaceMove+0x44>)
 8002b2e:	6819      	ldr	r1, [r3, #0]
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f9cd 	bl	8002ed0 <AddIllegalPiece>
}
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000588 	.word	0x20000588

08002b44 <HandlePlacePromotion>:
{
	PawnToPromote = placedPiece;
}

static void HandlePlacePromotion(struct PieceCoordinate placedPiece)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	// If placed the promoted piece back into the pawn's old spot, get the PieceType (knight or queen) from the stored button state and set the piece as that type
	if (IsPieceCoordinateSamePosition(placedPiece, PawnToPromote))
 8002b4c:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <HandlePlacePromotion+0x4c>)
 8002b4e:	6819      	ldr	r1, [r3, #0]
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 fc07 	bl	8003364 <IsPieceCoordinateSamePosition>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d010      	beq.n	8002b7e <HandlePlacePromotion+0x3a>
	{
		/// @todo get button data, and set the right piececoordinate to the right PieceType
		struct Piece promotedPiece = {QUEEN, CurrentTurn};
 8002b5c:	2305      	movs	r3, #5
 8002b5e:	733b      	strb	r3, [r7, #12]
 8002b60:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <HandlePlacePromotion+0x50>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	737b      	strb	r3, [r7, #13]
		SetPiece(placedPiece.row, placedPiece.column, promotedPiece);
 8002b66:	79bb      	ldrb	r3, [r7, #6]
 8002b68:	79f9      	ldrb	r1, [r7, #7]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fb3b 	bl	80031e8 <SetPiece>
		ClearPiece(&PawnToPromote);
 8002b72:	4807      	ldr	r0, [pc, #28]	; (8002b90 <HandlePlacePromotion+0x4c>)
 8002b74:	f000 fb28 	bl	80031c8 <ClearPiece>
		EndTurn();
 8002b78:	f000 faf4 	bl	8003164 <EndTurn>
	// If player doesn't place the promotion into the pawn's old spot, it must be placed in the right spot
	else
	{
		AddIllegalPiece(placedPiece, PawnToPromote);
	}
}
 8002b7c:	e004      	b.n	8002b88 <HandlePlacePromotion+0x44>
		AddIllegalPiece(placedPiece, PawnToPromote);
 8002b7e:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <HandlePlacePromotion+0x4c>)
 8002b80:	6819      	ldr	r1, [r3, #0]
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f9a4 	bl	8002ed0 <AddIllegalPiece>
}
 8002b88:	bf00      	nop
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	200006a0 	.word	0x200006a0
 8002b94:	20000584 	.word	0x20000584

08002b98 <HandlePickup>:



static void HandlePickup(struct PieceCoordinate pickedUpPiece)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	SetPiece(pickedUpPiece.row, pickedUpPiece.column, EMPTY_PIECE);
 8002ba0:	79bb      	ldrb	r3, [r7, #6]
 8002ba2:	79f9      	ldrb	r1, [r7, #7]
 8002ba4:	4a21      	ldr	r2, [pc, #132]	; (8002c2c <HandlePickup+0x94>)
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fb1d 	bl	80031e8 <SetPiece>

	// If a piece is picked up during an illegal state, if it's not an illegal piece it is NOW illegal
	if (NumIllegalPieces > 0)
 8002bae:	4b20      	ldr	r3, [pc, #128]	; (8002c30 <HandlePickup+0x98>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HandlePickup+0x26>
	{
		HandlePickupIllegalState(pickedUpPiece);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f846 	bl	8002c48 <HandlePickupIllegalState>
 8002bbc:	e02b      	b.n	8002c16 <HandlePickup+0x7e>
	}

	// If player picked up piece from other team, they will kill it
	else if (pickedUpPiece.piece.owner != CurrentTurn)
 8002bbe:	797a      	ldrb	r2, [r7, #5]
 8002bc0:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <HandlePickup+0x9c>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d003      	beq.n	8002bd0 <HandlePickup+0x38>
	{
		HandlePickupPreemptKill(pickedUpPiece);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f87f 	bl	8002ccc <HandlePickupPreemptKill>
 8002bce:	e022      	b.n	8002c16 <HandlePickup+0x7e>
	}

	// If there's a piece to kill, this picked up piece must be able to kill it
	else if (PieceExists(PieceToKill))
 8002bd0:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <HandlePickup+0xa0>)
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	f000 fae2 	bl	800319c <PieceExists>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HandlePickup+0x4e>
	{
		HandlePickupKill(pickedUpPiece);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f882 	bl	8002ce8 <HandlePickupKill>
 8002be4:	e017      	b.n	8002c16 <HandlePickup+0x7e>
	}

	// If there's a pawn to promote, the picked up piece must be this pawn
	else if (PieceExists(PawnToPromote))
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <HandlePickup+0xa4>)
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	f000 fad7 	bl	800319c <PieceExists>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HandlePickup+0x64>
	{
		HandlePickupPromotion(pickedUpPiece);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f8fd 	bl	8002df4 <HandlePickupPromotion>
 8002bfa:	e00c      	b.n	8002c16 <HandlePickup+0x7e>
	}

	// Same team picked up piece twice in a row, so castling is occurring
	else if (DidSameTeamPickupLast(pickedUpPiece.piece))
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fb65 	bl	80032cc <DidSameTeamPickupLast>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HandlePickup+0x78>
	{
		HandlePickupCastling(pickedUpPiece);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f88f 	bl	8002d2c <HandlePickupCastling>
 8002c0e:	e002      	b.n	8002c16 <HandlePickup+0x7e>
	}

	// If simple pickup
	else
	{
		HandlePickupMove(pickedUpPiece);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f909 	bl	8002e28 <HandlePickupMove>
	}

	LastPickedUpPiece = pickedUpPiece;
 8002c16:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <HandlePickup+0xa8>)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6013      	str	r3, [r2, #0]
	LastTransitionType = PICKUP;
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <HandlePickup+0xac>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	2000000c 	.word	0x2000000c
 8002c30:	20000690 	.word	0x20000690
 8002c34:	20000584 	.word	0x20000584
 8002c38:	2000058c 	.word	0x2000058c
 8002c3c:	200006a0 	.word	0x200006a0
 8002c40:	20000588 	.word	0x20000588
 8002c44:	20000585 	.word	0x20000585

08002c48 <HandlePickupIllegalState>:

static void HandlePickupIllegalState(struct PieceCoordinate pickedUpPiece)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < NumIllegalPieces; i++)
 8002c50:	2300      	movs	r3, #0
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	e022      	b.n	8002c9c <HandlePickupIllegalState+0x54>
	{
		// If pickup for illegal piece, let it slide
		if (IsPieceCoordinateEqual(IllegalPieces[i].current, pickedUpPiece))
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	4a18      	ldr	r2, [pc, #96]	; (8002cbc <HandlePickupIllegalState+0x74>)
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	6858      	ldr	r0, [r3, #4]
 8002c62:	f000 fb63 	bl	800332c <IsPieceCoordinateEqual>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d014      	beq.n	8002c96 <HandlePickupIllegalState+0x4e>
		{
			// If pickup an illegal piece which is to be removed from the board is picked up, it is no longer illegal
			if (IsPieceCoordinateEqual(IllegalPieces[i].destination, OFFBOARD_PIECE_COORDINATE))
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	4914      	ldr	r1, [pc, #80]	; (8002cc0 <HandlePickupIllegalState+0x78>)
 8002c70:	4a12      	ldr	r2, [pc, #72]	; (8002cbc <HandlePickupIllegalState+0x74>)
 8002c72:	6809      	ldr	r1, [r1, #0]
 8002c74:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002c78:	f000 fb58 	bl	800332c <IsPieceCoordinateEqual>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d017      	beq.n	8002cb2 <HandlePickupIllegalState+0x6a>
			{
				// Remove from illegal pieces array
				RemoveIllegalPiece(i);
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 f947 	bl	8002f18 <RemoveIllegalPiece>

				// If chessboard is valid, switch turns if flagged to do so
				CheckChessboardValidity(SwitchTurnsAfterLegalState);
 8002c8a:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <HandlePickupIllegalState+0x7c>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f970 	bl	8002f74 <CheckChessboardValidity>
			}
			return;
 8002c94:	e00d      	b.n	8002cb2 <HandlePickupIllegalState+0x6a>
	for (uint8_t i = 0; i < NumIllegalPieces; i++)
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <HandlePickupIllegalState+0x80>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d3d7      	bcc.n	8002c56 <HandlePickupIllegalState+0xe>
		}
	}

	// Player picked up a piece that wasn't illegal, so it must be added as an illegal piece which must be placed back
	AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HandlePickupIllegalState+0x78>)
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	f000 f910 	bl	8002ed0 <AddIllegalPiece>
 8002cb0:	e000      	b.n	8002cb4 <HandlePickupIllegalState+0x6c>
			return;
 8002cb2:	bf00      	nop
}
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000590 	.word	0x20000590
 8002cc0:	20000014 	.word	0x20000014
 8002cc4:	20000691 	.word	0x20000691
 8002cc8:	20000690 	.word	0x20000690

08002ccc <HandlePickupPreemptKill>:

static void HandlePickupPreemptKill(struct PieceCoordinate pickedUpPiece)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
	PieceToKill = pickedUpPiece;
 8002cd4:	4a03      	ldr	r2, [pc, #12]	; (8002ce4 <HandlePickupPreemptKill+0x18>)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6013      	str	r3, [r2, #0]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr
 8002ce4:	2000058c 	.word	0x2000058c

08002ce8 <HandlePickupKill>:

static void HandlePickupKill(struct PieceCoordinate pickedUpPiece)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	// If piece can't kill PieceToKill, they need to be put back to their initial positions, and PieceToKill is not a piece to kill anymore
	if (!ValidateKill(PieceToKill, pickedUpPiece))
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <HandlePickupKill+0x3c>)
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	f000 f951 	bl	8002f9c <ValidateKill>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10d      	bne.n	8002d1c <HandlePickupKill+0x34>
	{
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, PieceToKill);
 8002d00:	4a08      	ldr	r2, [pc, #32]	; (8002d24 <HandlePickupKill+0x3c>)
 8002d02:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HandlePickupKill+0x40>)
 8002d04:	6811      	ldr	r1, [r2, #0]
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	f000 f8e2 	bl	8002ed0 <AddIllegalPiece>
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HandlePickupKill+0x40>)
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	f000 f8dd 	bl	8002ed0 <AddIllegalPiece>
		ClearPiece(&PieceToKill);
 8002d16:	4803      	ldr	r0, [pc, #12]	; (8002d24 <HandlePickupKill+0x3c>)
 8002d18:	f000 fa56 	bl	80031c8 <ClearPiece>
	}
}
 8002d1c:	bf00      	nop
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	2000058c 	.word	0x2000058c
 8002d28:	20000014 	.word	0x20000014

08002d2c <HandlePickupCastling>:

static void HandlePickupCastling(struct PieceCoordinate pickedUpPiece)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
	struct PieceCoordinate rook;
	struct PieceCoordinate king;

	if (pickedUpPiece.piece.type == ROOK && LastPickedUpPiece.piece.type == KING)
 8002d34:	793b      	ldrb	r3, [r7, #4]
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d109      	bne.n	8002d4e <HandlePickupCastling+0x22>
 8002d3a:	4b2a      	ldr	r3, [pc, #168]	; (8002de4 <HandlePickupCastling+0xb8>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b06      	cmp	r3, #6
 8002d40:	d105      	bne.n	8002d4e <HandlePickupCastling+0x22>
	{
		rook = pickedUpPiece;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	617b      	str	r3, [r7, #20]
		king = LastPickedUpPiece;
 8002d46:	4b27      	ldr	r3, [pc, #156]	; (8002de4 <HandlePickupCastling+0xb8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	e018      	b.n	8002d80 <HandlePickupCastling+0x54>
	}
	else if (pickedUpPiece.piece.type == KING && LastPickedUpPiece.piece.type == ROOK)
 8002d4e:	793b      	ldrb	r3, [r7, #4]
 8002d50:	2b06      	cmp	r3, #6
 8002d52:	d109      	bne.n	8002d68 <HandlePickupCastling+0x3c>
 8002d54:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <HandlePickupCastling+0xb8>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d105      	bne.n	8002d68 <HandlePickupCastling+0x3c>
	{
		rook = LastPickedUpPiece;
 8002d5c:	4b21      	ldr	r3, [pc, #132]	; (8002de4 <HandlePickupCastling+0xb8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	617b      	str	r3, [r7, #20]
		king = pickedUpPiece;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	e00b      	b.n	8002d80 <HandlePickupCastling+0x54>
	}
	// If the past two picked up pieces aren't a king and rook, put them back
	else
	{
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
 8002d68:	4b1f      	ldr	r3, [pc, #124]	; (8002de8 <HandlePickupCastling+0xbc>)
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	f000 f8af 	bl	8002ed0 <AddIllegalPiece>
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, LastPickedUpPiece);
 8002d72:	4a1c      	ldr	r2, [pc, #112]	; (8002de4 <HandlePickupCastling+0xb8>)
 8002d74:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <HandlePickupCastling+0xbc>)
 8002d76:	6811      	ldr	r1, [r2, #0]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	f000 f8a9 	bl	8002ed0 <AddIllegalPiece>
		return;
 8002d7e:	e02e      	b.n	8002dde <HandlePickupCastling+0xb2>
	}

	if (ValidateCastling(rook, king))
 8002d80:	6939      	ldr	r1, [r7, #16]
 8002d82:	6978      	ldr	r0, [r7, #20]
 8002d84:	f000 f934 	bl	8002ff0 <ValidateCastling>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d01c      	beq.n	8002dc8 <HandlePickupCastling+0x9c>
	{
		struct PieceCoordinate expectedKingPieceCoordinate;
		struct PieceCoordinate expectedRookPieceCoordinate;
		CalculateCastlingPositions(rook, &expectedKingPieceCoordinate, &expectedRookPieceCoordinate);
 8002d8e:	f107 0208 	add.w	r2, r7, #8
 8002d92:	f107 030c 	add.w	r3, r7, #12
 8002d96:	4619      	mov	r1, r3
 8002d98:	6978      	ldr	r0, [r7, #20]
 8002d9a:	f7ff f873 	bl	8001e84 <CalculateCastlingPositions>

		// If castling won't result in a self-check then it's valid so copy to globals. Otherwise fall through to AddIllegalPiece.
		if (!WillResultInSelfCheck(rook, expectedRookPieceCoordinate) && !WillResultInSelfCheck(king, expectedKingPieceCoordinate))
 8002d9e:	68b9      	ldr	r1, [r7, #8]
 8002da0:	6978      	ldr	r0, [r7, #20]
 8002da2:	f7fe ff35 	bl	8001c10 <WillResultInSelfCheck>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10d      	bne.n	8002dc8 <HandlePickupCastling+0x9c>
 8002dac:	68f9      	ldr	r1, [r7, #12]
 8002dae:	6938      	ldr	r0, [r7, #16]
 8002db0:	f7fe ff2e 	bl	8001c10 <WillResultInSelfCheck>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <HandlePickupCastling+0x9c>
		{
			ExpectedKingCastleCoordinate = expectedKingPieceCoordinate;
 8002dba:	4a0c      	ldr	r2, [pc, #48]	; (8002dec <HandlePickupCastling+0xc0>)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6013      	str	r3, [r2, #0]
			ExpectedRookCastleCoordinate = expectedRookPieceCoordinate;
 8002dc0:	4a0b      	ldr	r2, [pc, #44]	; (8002df0 <HandlePickupCastling+0xc4>)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	e00a      	b.n	8002dde <HandlePickupCastling+0xb2>
			return;
		}
	}

	AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
 8002dc8:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <HandlePickupCastling+0xbc>)
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	f000 f87f 	bl	8002ed0 <AddIllegalPiece>
	AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, LastPickedUpPiece);
 8002dd2:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <HandlePickupCastling+0xb8>)
 8002dd4:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <HandlePickupCastling+0xbc>)
 8002dd6:	6811      	ldr	r1, [r2, #0]
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	f000 f879 	bl	8002ed0 <AddIllegalPiece>
}
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20000588 	.word	0x20000588
 8002de8:	20000014 	.word	0x20000014
 8002dec:	20000698 	.word	0x20000698
 8002df0:	2000069c 	.word	0x2000069c

08002df4 <HandlePickupPromotion>:

static void HandlePickupPromotion(struct PieceCoordinate pickedUpPiece)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	// All picked up pieces during a promotion must be the PawnToPromote, otherwise they must be placed back
	if (!IsPieceCoordinateEqual(pickedUpPiece, PawnToPromote))
 8002dfc:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <HandlePickupPromotion+0x2c>)
 8002dfe:	6819      	ldr	r1, [r3, #0]
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fa93 	bl	800332c <IsPieceCoordinateEqual>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d104      	bne.n	8002e16 <HandlePickupPromotion+0x22>
	{
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
 8002e0c:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HandlePickupPromotion+0x30>)
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	f000 f85d 	bl	8002ed0 <AddIllegalPiece>
	}
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	200006a0 	.word	0x200006a0
 8002e24:	20000014 	.word	0x20000014

08002e28 <HandlePickupMove>:

static void HandlePickupMove(struct PieceCoordinate pickedUpPiece)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b0a2      	sub	sp, #136	; 0x88
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
	// If this piece isn't owned by the current team, then they must put it back down
	if (pickedUpPiece.piece.owner != CurrentTurn)
 8002e30:	797a      	ldrb	r2, [r7, #5]
 8002e32:	4b24      	ldr	r3, [pc, #144]	; (8002ec4 <HandlePickupMove+0x9c>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d005      	beq.n	8002e46 <HandlePickupMove+0x1e>
	{
		AddIllegalPiece(EMPTY_PIECE_COORDINATE, pickedUpPiece);
 8002e3a:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <HandlePickupMove+0xa0>)
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	f000 f846 	bl	8002ed0 <AddIllegalPiece>
			struct Coordinate legalPath = allLegalPaths[i];
			board[legalPath.row][legalPath.column] = 1;
		}
		writeBoardValue(&hspi1, board);
	}
}
 8002e44:	e039      	b.n	8002eba <HandlePickupMove+0x92>
		CalculateAllLegalPathsAndChecks(pickedUpPiece, allLegalPaths, &numLegalPaths);
 8002e46:	f107 0286 	add.w	r2, r7, #134	; 0x86
 8002e4a:	f107 030c 	add.w	r3, r7, #12
 8002e4e:	4619      	mov	r1, r3
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f7fe fac7 	bl	80013e4 <CalculateAllLegalPathsAndChecks>
		uint8_t board[NUM_ROWS][NUM_COLS] = {0};
 8002e56:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e5a:	2240      	movs	r2, #64	; 0x40
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f003 fc6a 	bl	8006738 <memset>
		for(uint8_t i = 0; i < numLegalPaths; i++)
 8002e64:	2300      	movs	r3, #0
 8002e66:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002e6a:	e01a      	b.n	8002ea2 <HandlePickupMove+0x7a>
			struct Coordinate legalPath = allLegalPaths[i];
 8002e6c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e76:	4413      	add	r3, r2
 8002e78:	f833 3c7c 	ldrh.w	r3, [r3, #-124]
 8002e7c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
			board[legalPath.row][legalPath.column] = 1;
 8002e80:	f997 3084 	ldrsb.w	r3, [r7, #132]	; 0x84
 8002e84:	f997 2085 	ldrsb.w	r2, [r7, #133]	; 0x85
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002e8e:	440b      	add	r3, r1
 8002e90:	4413      	add	r3, r2
 8002e92:	3b44      	subs	r3, #68	; 0x44
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < numLegalPaths; i++)
 8002e98:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002ea2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8002ea6:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d3de      	bcc.n	8002e6c <HandlePickupMove+0x44>
		writeBoardValue(&hspi1, board);
 8002eae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4805      	ldr	r0, [pc, #20]	; (8002ecc <HandlePickupMove+0xa4>)
 8002eb6:	f7fd fcbe 	bl	8000836 <writeBoardValue>
}
 8002eba:	bf00      	nop
 8002ebc:	3788      	adds	r7, #136	; 0x88
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000584 	.word	0x20000584
 8002ec8:	20000010 	.word	0x20000010
 8002ecc:	200008c8 	.word	0x200008c8

08002ed0 <AddIllegalPiece>:

/**
 * @brief Put an illegal piece in the IllegalPieceDestinations array. Destination is the correct destination of the piece and Current is the current position of the piece.
 */
static void AddIllegalPiece(struct PieceCoordinate current, struct PieceCoordinate destination)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
	current.piece = destination.piece;
 8002eda:	883b      	ldrh	r3, [r7, #0]
 8002edc:	80bb      	strh	r3, [r7, #4]

	IllegalPieces[NumIllegalPieces].current = current;
 8002ede:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <AddIllegalPiece+0x40>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	4a0c      	ldr	r2, [pc, #48]	; (8002f14 <AddIllegalPiece+0x44>)
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	605a      	str	r2, [r3, #4]
	IllegalPieces[NumIllegalPieces].destination = destination;
 8002eec:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <AddIllegalPiece+0x40>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4a08      	ldr	r2, [pc, #32]	; (8002f14 <AddIllegalPiece+0x44>)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
	NumIllegalPieces++;
 8002efa:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <AddIllegalPiece+0x40>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	3301      	adds	r3, #1
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <AddIllegalPiece+0x40>)
 8002f04:	701a      	strb	r2, [r3, #0]
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	20000690 	.word	0x20000690
 8002f14:	20000590 	.word	0x20000590

08002f18 <RemoveIllegalPiece>:

/**
 * @brief Remove illegal piece from IllegalPieces array given its index
 */
static void RemoveIllegalPiece(uint8_t index)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	71fb      	strb	r3, [r7, #7]
	NumIllegalPieces--;
 8002f22:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <RemoveIllegalPiece+0x54>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <RemoveIllegalPiece+0x54>)
 8002f2c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = index; i < NumIllegalPieces; i++)
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	73fb      	strb	r3, [r7, #15]
 8002f32:	e00f      	b.n	8002f54 <RemoveIllegalPiece+0x3c>
	{
		IllegalPieces[i] = IllegalPieces[i + 1];
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	480d      	ldr	r0, [pc, #52]	; (8002f70 <RemoveIllegalPiece+0x58>)
 8002f3c:	490c      	ldr	r1, [pc, #48]	; (8002f70 <RemoveIllegalPiece+0x58>)
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4403      	add	r3, r0
 8002f42:	00d2      	lsls	r2, r2, #3
 8002f44:	440a      	add	r2, r1
 8002f46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f4a:	e883 0003 	stmia.w	r3, {r0, r1}
	for (uint8_t i = index; i < NumIllegalPieces; i++)
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	3301      	adds	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
 8002f54:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <RemoveIllegalPiece+0x54>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	7bfa      	ldrb	r2, [r7, #15]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d3ea      	bcc.n	8002f34 <RemoveIllegalPiece+0x1c>
	}
}
 8002f5e:	bf00      	nop
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	20000690 	.word	0x20000690
 8002f70:	20000590 	.word	0x20000590

08002f74 <CheckChessboardValidity>:

/**
 * @brief Check if chessboard is valid and switch turns if flagged to do so
 */
static void CheckChessboardValidity(uint8_t switchTurns)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	71fb      	strb	r3, [r7, #7]
	if (NumIllegalPieces == 0)
 8002f7e:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <CheckChessboardValidity+0x24>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d104      	bne.n	8002f90 <CheckChessboardValidity+0x1c>
	{
		if (switchTurns)
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <CheckChessboardValidity+0x1c>
		{
			EndTurn();
 8002f8c:	f000 f8ea 	bl	8003164 <EndTurn>
		}
	}
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20000690 	.word	0x20000690

08002f9c <ValidateKill>:
/**
 * @brief Return 1 if the given killer can take the victim, 0 otherwise. If the victim cannot be killed, then this is an illegal/impossible kill
 * so the victim and killer must return to their original spots, and a new move must be done.
 */
static uint8_t ValidateKill(struct PieceCoordinate victim, struct PieceCoordinate killer)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
	// Temporarily add back victim and then check if it can be killed (need to be done for PAWN)
	SetPieceCoordinate(victim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f936 	bl	8003218 <SetPieceCoordinate>

	uint8_t valid = ValidateMove(killer, victim);
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	6838      	ldr	r0, [r7, #0]
 8002fb0:	f000 f810 	bl	8002fd4 <ValidateMove>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	73fb      	strb	r3, [r7, #15]

	// Clear victim again
	victim.piece = EMPTY_PIECE;
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <ValidateKill+0x34>)
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	80bb      	strh	r3, [r7, #4]
	SetPieceCoordinate(victim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f92a 	bl	8003218 <SetPieceCoordinate>

	return valid;
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	2000000c 	.word	0x2000000c

08002fd4 <ValidateMove>:
/**
 * @brief Return 1 if the "to" is in the legal paths for "from", 0 otherwise. If the move is invalid, then the "from" must be placed back
 * in its original spot, and a new move must be done.
 */
static uint8_t ValidateMove(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
	return IsLegalMove(from, to);
 8002fde:	6839      	ldr	r1, [r7, #0]
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7fe f987 	bl	80012f4 <IsLegalMove>
 8002fe6:	4603      	mov	r3, r0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <ValidateCastling>:

/**
 * @brief Return 1 if the given rook can castle with the given king. If not, they should return to their original positions.
 */
static uint8_t ValidateCastling(struct PieceCoordinate rook, struct PieceCoordinate king)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
	// If white king can castle and the king and rook are in the starting row
	if (king.row == 0 && rook.row == 0 && CanWhiteKingCastle)
 8002ffa:	78bb      	ldrb	r3, [r7, #2]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d119      	bne.n	8003034 <ValidateCastling+0x44>
 8003000:	79bb      	ldrb	r3, [r7, #6]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d116      	bne.n	8003034 <ValidateCastling+0x44>
 8003006:	4b1d      	ldr	r3, [pc, #116]	; (800307c <ValidateCastling+0x8c>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d012      	beq.n	8003034 <ValidateCastling+0x44>
	{
		return (rook.column == 0 && CanA1Castle) || (rook.column == 7 && CanH1Castle);
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d103      	bne.n	800301c <ValidateCastling+0x2c>
 8003014:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <ValidateCastling+0x90>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d106      	bne.n	800302a <ValidateCastling+0x3a>
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	2b07      	cmp	r3, #7
 8003020:	d105      	bne.n	800302e <ValidateCastling+0x3e>
 8003022:	4b18      	ldr	r3, [pc, #96]	; (8003084 <ValidateCastling+0x94>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <ValidateCastling+0x3e>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <ValidateCastling+0x40>
 800302e:	2300      	movs	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e01d      	b.n	8003070 <ValidateCastling+0x80>
	}
	// If black king can castle and the king and rook are in the starting row
	else if (king.row == 7 && rook.row == 7 && CanBlackKingCastle)
 8003034:	78bb      	ldrb	r3, [r7, #2]
 8003036:	2b07      	cmp	r3, #7
 8003038:	d119      	bne.n	800306e <ValidateCastling+0x7e>
 800303a:	79bb      	ldrb	r3, [r7, #6]
 800303c:	2b07      	cmp	r3, #7
 800303e:	d116      	bne.n	800306e <ValidateCastling+0x7e>
 8003040:	4b11      	ldr	r3, [pc, #68]	; (8003088 <ValidateCastling+0x98>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d012      	beq.n	800306e <ValidateCastling+0x7e>
	{
		return (rook.column == 0 && CanA8Castle) || (rook.column == 7 && CanH8Castle);
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d103      	bne.n	8003056 <ValidateCastling+0x66>
 800304e:	4b0f      	ldr	r3, [pc, #60]	; (800308c <ValidateCastling+0x9c>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d106      	bne.n	8003064 <ValidateCastling+0x74>
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	2b07      	cmp	r3, #7
 800305a:	d105      	bne.n	8003068 <ValidateCastling+0x78>
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <ValidateCastling+0xa0>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <ValidateCastling+0x78>
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <ValidateCastling+0x7a>
 8003068:	2300      	movs	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	e000      	b.n	8003070 <ValidateCastling+0x80>
	}
	return 0;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20000696 	.word	0x20000696
 8003080:	20000692 	.word	0x20000692
 8003084:	20000693 	.word	0x20000693
 8003088:	20000697 	.word	0x20000697
 800308c:	20000694 	.word	0x20000694
 8003090:	20000695 	.word	0x20000695

08003094 <ValidateStartPositions>:

uint8_t ValidateStartPositions()
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b092      	sub	sp, #72	; 0x48
 8003098:	af00      	add	r7, sp, #0
	uint8_t thing[8][8] = {0};
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	2240      	movs	r2, #64	; 0x40
 800309e:	2100      	movs	r1, #0
 80030a0:	4618      	mov	r0, r3
 80030a2:	f003 fb49 	bl	8006738 <memset>
	for (uint8_t columnNumber = 0; columnNumber < NUM_COLS; columnNumber++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80030ac:	e04f      	b.n	800314e <ValidateStartPositions+0xba>
	{
		WriteColumn(columnNumber);
 80030ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fac0 	bl	8002638 <WriteColumn>
		for (uint8_t rowNumber = 0; rowNumber < NUM_ROWS; rowNumber++)
 80030b8:	2300      	movs	r3, #0
 80030ba:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80030be:	e03d      	b.n	800313c <ValidateStartPositions+0xa8>
		{
			GPIO_PinState cellValue = ReadRow(rowNumber);
 80030c0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fae5 	bl	8002694 <ReadRow>
 80030ca:	4603      	mov	r3, r0
 80030cc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
			thing[rowNumber][columnNumber] = cellValue;
 80030d0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80030d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030d8:	00d2      	lsls	r2, r2, #3
 80030da:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80030de:	440a      	add	r2, r1
 80030e0:	4413      	add	r3, r2
 80030e2:	3b44      	subs	r3, #68	; 0x44
 80030e4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80030e8:	701a      	strb	r2, [r3, #0]

			if(cellValue == GPIO_PIN_SET && INITIAL_CHESSBOARD[rowNumber][columnNumber].type == NONE)
 80030ea:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d10d      	bne.n	800310e <ValidateStartPositions+0x7a>
 80030f2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80030f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030fa:	4919      	ldr	r1, [pc, #100]	; (8003160 <ValidateStartPositions+0xcc>)
 80030fc:	00d2      	lsls	r2, r2, #3
 80030fe:	4413      	add	r3, r2
 8003100:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <ValidateStartPositions+0x7a>
			{
				return 0;
 800310a:	2300      	movs	r3, #0
 800310c:	e024      	b.n	8003158 <ValidateStartPositions+0xc4>
			}

			if(cellValue == GPIO_PIN_RESET && INITIAL_CHESSBOARD[rowNumber][columnNumber].type != NONE)
 800310e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10d      	bne.n	8003132 <ValidateStartPositions+0x9e>
 8003116:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800311a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800311e:	4910      	ldr	r1, [pc, #64]	; (8003160 <ValidateStartPositions+0xcc>)
 8003120:	00d2      	lsls	r2, r2, #3
 8003122:	4413      	add	r3, r2
 8003124:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <ValidateStartPositions+0x9e>
			{
				return 0;
 800312e:	2300      	movs	r3, #0
 8003130:	e012      	b.n	8003158 <ValidateStartPositions+0xc4>
		for (uint8_t rowNumber = 0; rowNumber < NUM_ROWS; rowNumber++)
 8003132:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003136:	3301      	adds	r3, #1
 8003138:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800313c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003140:	2b07      	cmp	r3, #7
 8003142:	d9bd      	bls.n	80030c0 <ValidateStartPositions+0x2c>
	for (uint8_t columnNumber = 0; columnNumber < NUM_COLS; columnNumber++)
 8003144:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003148:	3301      	adds	r3, #1
 800314a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800314e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003152:	2b07      	cmp	r3, #7
 8003154:	d9ab      	bls.n	80030ae <ValidateStartPositions+0x1a>
			}
		}
	}

	return 1;
 8003156:	2301      	movs	r3, #1
}
 8003158:	4618      	mov	r0, r3
 800315a:	3748      	adds	r7, #72	; 0x48
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20000018 	.word	0x20000018

08003164 <EndTurn>:

	writeBoardValue(&hspi1, board);
}

static void EndTurn()
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b090      	sub	sp, #64	; 0x40
 8003168:	af00      	add	r7, sp, #0
		return;
	}
#endif // !TEST

	// Turn LEDs off
	uint8_t LEDs[NUM_ROWS][NUM_COLS] = {0};
 800316a:	463b      	mov	r3, r7
 800316c:	2240      	movs	r2, #64	; 0x40
 800316e:	2100      	movs	r1, #0
 8003170:	4618      	mov	r0, r3
 8003172:	f003 fae1 	bl	8006738 <memset>
	writeBoardValue(&hspi1, LEDs);
 8003176:	463b      	mov	r3, r7
 8003178:	4619      	mov	r1, r3
 800317a:	4806      	ldr	r0, [pc, #24]	; (8003194 <EndTurn+0x30>)
 800317c:	f7fd fb5b 	bl	8000836 <writeBoardValue>
	// Switch teams
	CurrentTurn = CurrentTurn == WHITE ? BLACK : WHITE;
#endif // !TEST

	// Invoke PathFinder to store all legal moves for this team
	CalculateTeamsLegalMoves(CurrentTurn);
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <EndTurn+0x34>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7fe f811 	bl	80011ac <CalculateTeamsLegalMoves>
}
 800318a:	bf00      	nop
 800318c:	3740      	adds	r7, #64	; 0x40
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	200008c8 	.word	0x200008c8
 8003198:	20000584 	.word	0x20000584

0800319c <PieceExists>:
	uint8_t finalRow = CurrentTurn == WHITE ? 7 : 0;
	return (pieceCoordinate.piece.owner == CurrentTurn) && (pieceCoordinate.piece.type == PAWN) && (pieceCoordinate.row == finalRow);
}

inline uint8_t PieceExists(struct PieceCoordinate pieceCoordinate)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
	return !IsPieceCoordinateEqual(pieceCoordinate, EMPTY_PIECE_COORDINATE);
 80031a4:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <PieceExists+0x28>)
 80031a6:	6819      	ldr	r1, [r3, #0]
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f8bf 	bl	800332c <IsPieceCoordinateEqual>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bf0c      	ite	eq
 80031b4:	2301      	moveq	r3, #1
 80031b6:	2300      	movne	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000010 	.word	0x20000010

080031c8 <ClearPiece>:

inline void ClearPiece(struct PieceCoordinate* pieceCoordinate)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
	*pieceCoordinate = EMPTY_PIECE_COORDINATE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <ClearPiece+0x1c>)
 80031d4:	6810      	ldr	r0, [r2, #0]
 80031d6:	6018      	str	r0, [r3, #0]
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	20000010 	.word	0x20000010

080031e8 <SetPiece>:

inline void SetPiece(uint8_t row, uint8_t column, struct Piece piece)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	803a      	strh	r2, [r7, #0]
 80031f2:	71fb      	strb	r3, [r7, #7]
 80031f4:	460b      	mov	r3, r1
 80031f6:	71bb      	strb	r3, [r7, #6]
	Chessboard[row][column] = piece;
 80031f8:	79fa      	ldrb	r2, [r7, #7]
 80031fa:	79bb      	ldrb	r3, [r7, #6]
 80031fc:	4905      	ldr	r1, [pc, #20]	; (8003214 <SetPiece+0x2c>)
 80031fe:	00d2      	lsls	r2, r2, #3
 8003200:	4413      	add	r3, r2
 8003202:	883a      	ldrh	r2, [r7, #0]
 8003204:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000504 	.word	0x20000504

08003218 <SetPieceCoordinate>:

inline void SetPieceCoordinate(struct PieceCoordinate pieceCoordinate)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
	Chessboard[pieceCoordinate.row][pieceCoordinate.column] = pieceCoordinate.piece;
 8003220:	79bb      	ldrb	r3, [r7, #6]
 8003222:	79fa      	ldrb	r2, [r7, #7]
 8003224:	4905      	ldr	r1, [pc, #20]	; (800323c <SetPieceCoordinate+0x24>)
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4413      	add	r3, r2
 800322a:	88ba      	ldrh	r2, [r7, #4]
 800322c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000504 	.word	0x20000504

08003240 <GetPiece>:

inline struct Piece GetPiece(uint8_t row, uint8_t column)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	460a      	mov	r2, r1
 800324a:	71fb      	strb	r3, [r7, #7]
 800324c:	4613      	mov	r3, r2
 800324e:	71bb      	strb	r3, [r7, #6]
	return Chessboard[row][column];
 8003250:	79fa      	ldrb	r2, [r7, #7]
 8003252:	79bb      	ldrb	r3, [r7, #6]
 8003254:	4908      	ldr	r1, [pc, #32]	; (8003278 <GetPiece+0x38>)
 8003256:	00d2      	lsls	r2, r2, #3
 8003258:	4413      	add	r3, r2
 800325a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800325e:	81bb      	strh	r3, [r7, #12]
 8003260:	2300      	movs	r3, #0
 8003262:	7b3a      	ldrb	r2, [r7, #12]
 8003264:	f362 0307 	bfi	r3, r2, #0, #8
 8003268:	7b7a      	ldrb	r2, [r7, #13]
 800326a:	f362 230f 	bfi	r3, r2, #8, #8
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr
 8003278:	20000504 	.word	0x20000504

0800327c <GetPieceCoordinate>:

inline struct PieceCoordinate GetPieceCoordinate(uint8_t row, uint8_t column)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	460a      	mov	r2, r1
 8003286:	71fb      	strb	r3, [r7, #7]
 8003288:	4613      	mov	r3, r2
 800328a:	71bb      	strb	r3, [r7, #6]
	struct PieceCoordinate pieceCoordinate = { GetPiece(row, column), row, column };
 800328c:	79ba      	ldrb	r2, [r7, #6]
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff ffd4 	bl	8003240 <GetPiece>
 8003298:	4603      	mov	r3, r0
 800329a:	813b      	strh	r3, [r7, #8]
 800329c:	79fb      	ldrb	r3, [r7, #7]
 800329e:	72bb      	strb	r3, [r7, #10]
 80032a0:	79bb      	ldrb	r3, [r7, #6]
 80032a2:	72fb      	strb	r3, [r7, #11]
	return pieceCoordinate;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	2300      	movs	r3, #0
 80032aa:	7b3a      	ldrb	r2, [r7, #12]
 80032ac:	f362 0307 	bfi	r3, r2, #0, #8
 80032b0:	7b7a      	ldrb	r2, [r7, #13]
 80032b2:	f362 230f 	bfi	r3, r2, #8, #8
 80032b6:	7bba      	ldrb	r2, [r7, #14]
 80032b8:	f362 4317 	bfi	r3, r2, #16, #8
 80032bc:	7bfa      	ldrb	r2, [r7, #15]
 80032be:	f362 631f 	bfi	r3, r2, #24, #8
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <DidSameTeamPickupLast>:
{
	return LastTransitionType == PICKUP && LastPickedUpPiece.piece.owner != piece.owner;
}

inline uint8_t DidSameTeamPickupLast(struct Piece piece)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	80b8      	strh	r0, [r7, #4]
	return LastTransitionType == PICKUP && LastPickedUpPiece.piece.owner == piece.owner;
 80032d4:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <DidSameTeamPickupLast+0x2c>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d106      	bne.n	80032ea <DidSameTeamPickupLast+0x1e>
 80032dc:	4b07      	ldr	r3, [pc, #28]	; (80032fc <DidSameTeamPickupLast+0x30>)
 80032de:	785a      	ldrb	r2, [r3, #1]
 80032e0:	797b      	ldrb	r3, [r7, #5]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d101      	bne.n	80032ea <DidSameTeamPickupLast+0x1e>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <DidSameTeamPickupLast+0x20>
 80032ea:	2300      	movs	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr
 80032f8:	20000585 	.word	0x20000585
 80032fc:	20000588 	.word	0x20000588

08003300 <IsPieceEqual>:

inline uint8_t IsPieceEqual(struct Piece piece1, struct Piece piece2)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	80b8      	strh	r0, [r7, #4]
 8003308:	8039      	strh	r1, [r7, #0]
	return piece1.owner == piece2.owner
 800330a:	797a      	ldrb	r2, [r7, #5]
 800330c:	787b      	ldrb	r3, [r7, #1]
		&& piece1.type == piece2.type;
 800330e:	429a      	cmp	r2, r3
 8003310:	d105      	bne.n	800331e <IsPieceEqual+0x1e>
 8003312:	793a      	ldrb	r2, [r7, #4]
 8003314:	783b      	ldrb	r3, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d101      	bne.n	800331e <IsPieceEqual+0x1e>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <IsPieceEqual+0x20>
 800331e:	2300      	movs	r3, #0
 8003320:	b2db      	uxtb	r3, r3
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <IsPieceCoordinateEqual>:
{
	return Chessboard[row][column].type != NONE;
}

inline uint8_t IsPieceCoordinateEqual(struct PieceCoordinate pieceCoordinate1, struct PieceCoordinate pieceCoordinate2)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
	return IsPieceEqual(pieceCoordinate1.piece, pieceCoordinate2.piece)
 8003336:	6839      	ldr	r1, [r7, #0]
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ffe1 	bl	8003300 <IsPieceEqual>
 800333e:	4603      	mov	r3, r0
		&& pieceCoordinate1.row == pieceCoordinate2.row
		&& pieceCoordinate1.column == pieceCoordinate2.column;
 8003340:	2b00      	cmp	r3, #0
 8003342:	d009      	beq.n	8003358 <IsPieceCoordinateEqual+0x2c>
		&& pieceCoordinate1.row == pieceCoordinate2.row
 8003344:	79ba      	ldrb	r2, [r7, #6]
 8003346:	78bb      	ldrb	r3, [r7, #2]
 8003348:	429a      	cmp	r2, r3
 800334a:	d105      	bne.n	8003358 <IsPieceCoordinateEqual+0x2c>
		&& pieceCoordinate1.column == pieceCoordinate2.column;
 800334c:	79fa      	ldrb	r2, [r7, #7]
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	429a      	cmp	r2, r3
 8003352:	d101      	bne.n	8003358 <IsPieceCoordinateEqual+0x2c>
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <IsPieceCoordinateEqual+0x2e>
 8003358:	2300      	movs	r3, #0
 800335a:	b2db      	uxtb	r3, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <IsPieceCoordinateSamePosition>:

inline uint8_t IsPieceCoordinateSamePosition(struct PieceCoordinate pieceCoordinate1, struct PieceCoordinate pieceCoordinate2)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
	return pieceCoordinate1.row == pieceCoordinate2.row && pieceCoordinate1.column == pieceCoordinate2.column;
 800336e:	79ba      	ldrb	r2, [r7, #6]
 8003370:	78bb      	ldrb	r3, [r7, #2]
 8003372:	429a      	cmp	r2, r3
 8003374:	d105      	bne.n	8003382 <IsPieceCoordinateSamePosition+0x1e>
 8003376:	79fa      	ldrb	r2, [r7, #7]
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	429a      	cmp	r2, r3
 800337c:	d101      	bne.n	8003382 <IsPieceCoordinateSamePosition+0x1e>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <IsPieceCoordinateSamePosition+0x20>
 8003382:	2300      	movs	r3, #0
 8003384:	b2db      	uxtb	r3, r3
}
 8003386:	4618      	mov	r0, r3
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003390:	480c      	ldr	r0, [pc, #48]	; (80033c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003392:	490d      	ldr	r1, [pc, #52]	; (80033c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003394:	4a0d      	ldr	r2, [pc, #52]	; (80033cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003398:	e002      	b.n	80033a0 <LoopCopyDataInit>

0800339a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800339a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800339c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800339e:	3304      	adds	r3, #4

080033a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033a4:	d3f9      	bcc.n	800339a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033a6:	4a0a      	ldr	r2, [pc, #40]	; (80033d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80033a8:	4c0a      	ldr	r4, [pc, #40]	; (80033d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80033aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033ac:	e001      	b.n	80033b2 <LoopFillZerobss>

080033ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033b0:	3204      	adds	r2, #4

080033b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033b4:	d3fb      	bcc.n	80033ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80033b6:	f7ff f88d 	bl	80024d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033ba:	f003 f999 	bl	80066f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033be:	f7fd fad5 	bl	800096c <main>
  bx lr
 80033c2:	4770      	bx	lr
  ldr r0, =_sdata
 80033c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033c8:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80033cc:	080067e4 	.word	0x080067e4
  ldr r2, =_sbss
 80033d0:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80033d4:	20000fd4 	.word	0x20000fd4

080033d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033d8:	e7fe      	b.n	80033d8 <ADC1_IRQHandler>

080033da <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033e4:	2003      	movs	r0, #3
 80033e6:	f000 f955 	bl	8003694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033ea:	200f      	movs	r0, #15
 80033ec:	f000 f80e 	bl	800340c <HAL_InitTick>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	71fb      	strb	r3, [r7, #7]
 80033fa:	e001      	b.n	8003400 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033fc:	f7fe fde8 	bl	8001fd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003400:	79fb      	ldrb	r3, [r7, #7]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003418:	4b16      	ldr	r3, [pc, #88]	; (8003474 <HAL_InitTick+0x68>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d022      	beq.n	8003466 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003420:	4b15      	ldr	r3, [pc, #84]	; (8003478 <HAL_InitTick+0x6c>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4b13      	ldr	r3, [pc, #76]	; (8003474 <HAL_InitTick+0x68>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800342c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003430:	fbb2 f3f3 	udiv	r3, r2, r3
 8003434:	4618      	mov	r0, r3
 8003436:	f000 f962 	bl	80036fe <HAL_SYSTICK_Config>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10f      	bne.n	8003460 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b0f      	cmp	r3, #15
 8003444:	d809      	bhi.n	800345a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003446:	2200      	movs	r2, #0
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	f04f 30ff 	mov.w	r0, #4294967295
 800344e:	f000 f92c 	bl	80036aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003452:	4a0a      	ldr	r2, [pc, #40]	; (800347c <HAL_InitTick+0x70>)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	e007      	b.n	800346a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
 800345e:	e004      	b.n	800346a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
 8003464:	e001      	b.n	800346a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800346a:	7bfb      	ldrb	r3, [r7, #15]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	2000009c 	.word	0x2000009c
 8003478:	20000008 	.word	0x20000008
 800347c:	20000098 	.word	0x20000098

08003480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003484:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_IncTick+0x1c>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <HAL_IncTick+0x20>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4413      	add	r3, r2
 800348e:	4a03      	ldr	r2, [pc, #12]	; (800349c <HAL_IncTick+0x1c>)
 8003490:	6013      	str	r3, [r2, #0]
}
 8003492:	bf00      	nop
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000b60 	.word	0x20000b60
 80034a0:	2000009c 	.word	0x2000009c

080034a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  return uwTick;
 80034a8:	4b02      	ldr	r3, [pc, #8]	; (80034b4 <HAL_GetTick+0x10>)
 80034aa:	681b      	ldr	r3, [r3, #0]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr
 80034b4:	20000b60 	.word	0x20000b60

080034b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034c0:	f7ff fff0 	bl	80034a4 <HAL_GetTick>
 80034c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d004      	beq.n	80034dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80034d2:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <HAL_Delay+0x40>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4413      	add	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034dc:	bf00      	nop
 80034de:	f7ff ffe1 	bl	80034a4 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d8f7      	bhi.n	80034de <HAL_Delay+0x26>
  {
  }
}
 80034ee:	bf00      	nop
 80034f0:	bf00      	nop
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	2000009c 	.word	0x2000009c

080034fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800350c:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <__NVIC_SetPriorityGrouping+0x44>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003518:	4013      	ands	r3, r2
 800351a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800352e:	4a04      	ldr	r2, [pc, #16]	; (8003540 <__NVIC_SetPriorityGrouping+0x44>)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	60d3      	str	r3, [r2, #12]
}
 8003534:	bf00      	nop
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003548:	4b04      	ldr	r3, [pc, #16]	; (800355c <__NVIC_GetPriorityGrouping+0x18>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	0a1b      	lsrs	r3, r3, #8
 800354e:	f003 0307 	and.w	r3, r3, #7
}
 8003552:	4618      	mov	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	e000ed00 	.word	0xe000ed00

08003560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356e:	2b00      	cmp	r3, #0
 8003570:	db0b      	blt.n	800358a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	f003 021f 	and.w	r2, r3, #31
 8003578:	4906      	ldr	r1, [pc, #24]	; (8003594 <__NVIC_EnableIRQ+0x34>)
 800357a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	2001      	movs	r0, #1
 8003582:	fa00 f202 	lsl.w	r2, r0, r2
 8003586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr
 8003594:	e000e100 	.word	0xe000e100

08003598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	6039      	str	r1, [r7, #0]
 80035a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	db0a      	blt.n	80035c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	490c      	ldr	r1, [pc, #48]	; (80035e4 <__NVIC_SetPriority+0x4c>)
 80035b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b6:	0112      	lsls	r2, r2, #4
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	440b      	add	r3, r1
 80035bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035c0:	e00a      	b.n	80035d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	4908      	ldr	r1, [pc, #32]	; (80035e8 <__NVIC_SetPriority+0x50>)
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	3b04      	subs	r3, #4
 80035d0:	0112      	lsls	r2, r2, #4
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	440b      	add	r3, r1
 80035d6:	761a      	strb	r2, [r3, #24]
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	e000e100 	.word	0xe000e100
 80035e8:	e000ed00 	.word	0xe000ed00

080035ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b089      	sub	sp, #36	; 0x24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f1c3 0307 	rsb	r3, r3, #7
 8003606:	2b04      	cmp	r3, #4
 8003608:	bf28      	it	cs
 800360a:	2304      	movcs	r3, #4
 800360c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	3304      	adds	r3, #4
 8003612:	2b06      	cmp	r3, #6
 8003614:	d902      	bls.n	800361c <NVIC_EncodePriority+0x30>
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3b03      	subs	r3, #3
 800361a:	e000      	b.n	800361e <NVIC_EncodePriority+0x32>
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003620:	f04f 32ff 	mov.w	r2, #4294967295
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43da      	mvns	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	401a      	ands	r2, r3
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003634:	f04f 31ff 	mov.w	r1, #4294967295
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	fa01 f303 	lsl.w	r3, r1, r3
 800363e:	43d9      	mvns	r1, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003644:	4313      	orrs	r3, r2
         );
}
 8003646:	4618      	mov	r0, r3
 8003648:	3724      	adds	r7, #36	; 0x24
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3b01      	subs	r3, #1
 800365c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003660:	d301      	bcc.n	8003666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003662:	2301      	movs	r3, #1
 8003664:	e00f      	b.n	8003686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003666:	4a0a      	ldr	r2, [pc, #40]	; (8003690 <SysTick_Config+0x40>)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3b01      	subs	r3, #1
 800366c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800366e:	210f      	movs	r1, #15
 8003670:	f04f 30ff 	mov.w	r0, #4294967295
 8003674:	f7ff ff90 	bl	8003598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003678:	4b05      	ldr	r3, [pc, #20]	; (8003690 <SysTick_Config+0x40>)
 800367a:	2200      	movs	r2, #0
 800367c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800367e:	4b04      	ldr	r3, [pc, #16]	; (8003690 <SysTick_Config+0x40>)
 8003680:	2207      	movs	r2, #7
 8003682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	e000e010 	.word	0xe000e010

08003694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ff2d 	bl	80034fc <__NVIC_SetPriorityGrouping>
}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b086      	sub	sp, #24
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	4603      	mov	r3, r0
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	607a      	str	r2, [r7, #4]
 80036b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036bc:	f7ff ff42 	bl	8003544 <__NVIC_GetPriorityGrouping>
 80036c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	6978      	ldr	r0, [r7, #20]
 80036c8:	f7ff ff90 	bl	80035ec <NVIC_EncodePriority>
 80036cc:	4602      	mov	r2, r0
 80036ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d2:	4611      	mov	r1, r2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff5f 	bl	8003598 <__NVIC_SetPriority>
}
 80036da:	bf00      	nop
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	4603      	mov	r3, r0
 80036ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff ff35 	bl	8003560 <__NVIC_EnableIRQ>
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff ffa2 	bl	8003650 <SysTick_Config>
 800370c:	4603      	mov	r3, r0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e014      	b.n	8003752 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	791b      	ldrb	r3, [r3, #4]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d105      	bne.n	800373e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7fe fc77 	bl	800202c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2202      	movs	r2, #2
 8003742:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800375a:	b480      	push	{r7}
 800375c:	b087      	sub	sp, #28
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	795b      	ldrb	r3, [r3, #5]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_DAC_ConfigChannel+0x18>
 800376e:	2302      	movs	r3, #2
 8003770:	e03c      	b.n	80037ec <HAL_DAC_ConfigChannel+0x92>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2202      	movs	r2, #2
 800377c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	4013      	ands	r3, r2
 800379a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6819      	ldr	r1, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	22c0      	movs	r2, #192	; 0xc0
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43da      	mvns	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	400a      	ands	r2, r1
 80037dc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	371c      	adds	r7, #28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr
	...

080037f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e059      	b.n	80038be <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	4b2d      	ldr	r3, [pc, #180]	; (80038c8 <HAL_DMA_Init+0xd0>)
 8003812:	429a      	cmp	r2, r3
 8003814:	d80f      	bhi.n	8003836 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	4b2b      	ldr	r3, [pc, #172]	; (80038cc <HAL_DMA_Init+0xd4>)
 800381e:	4413      	add	r3, r2
 8003820:	4a2b      	ldr	r2, [pc, #172]	; (80038d0 <HAL_DMA_Init+0xd8>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	009a      	lsls	r2, r3, #2
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a28      	ldr	r2, [pc, #160]	; (80038d4 <HAL_DMA_Init+0xdc>)
 8003832:	63da      	str	r2, [r3, #60]	; 0x3c
 8003834:	e00e      	b.n	8003854 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	4b26      	ldr	r3, [pc, #152]	; (80038d8 <HAL_DMA_Init+0xe0>)
 800383e:	4413      	add	r3, r2
 8003840:	4a23      	ldr	r2, [pc, #140]	; (80038d0 <HAL_DMA_Init+0xd8>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	091b      	lsrs	r3, r3, #4
 8003848:	009a      	lsls	r2, r3, #2
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a22      	ldr	r2, [pc, #136]	; (80038dc <HAL_DMA_Init+0xe4>)
 8003852:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800386a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003878:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003884:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003890:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr
 80038c8:	40026407 	.word	0x40026407
 80038cc:	bffd9ff8 	.word	0xbffd9ff8
 80038d0:	cccccccd 	.word	0xcccccccd
 80038d4:	40026000 	.word	0x40026000
 80038d8:	bffd9bf8 	.word	0xbffd9bf8
 80038dc:	40026400 	.word	0x40026400

080038e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	f003 031c 	and.w	r3, r3, #28
 8003900:	2204      	movs	r2, #4
 8003902:	409a      	lsls	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4013      	ands	r3, r2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d026      	beq.n	800395a <HAL_DMA_IRQHandler+0x7a>
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	2b00      	cmp	r3, #0
 8003914:	d021      	beq.n	800395a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b00      	cmp	r3, #0
 8003922:	d107      	bne.n	8003934 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0204 	bic.w	r2, r2, #4
 8003932:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	f003 021c 	and.w	r2, r3, #28
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003940:	2104      	movs	r1, #4
 8003942:	fa01 f202 	lsl.w	r2, r1, r2
 8003946:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	2b00      	cmp	r3, #0
 800394e:	d071      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003958:	e06c      	b.n	8003a34 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f003 031c 	and.w	r3, r3, #28
 8003962:	2202      	movs	r2, #2
 8003964:	409a      	lsls	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4013      	ands	r3, r2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d02e      	beq.n	80039cc <HAL_DMA_IRQHandler+0xec>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d029      	beq.n	80039cc <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10b      	bne.n	800399e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 020a 	bic.w	r2, r2, #10
 8003994:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f003 021c 	and.w	r2, r3, #28
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	2102      	movs	r1, #2
 80039ac:	fa01 f202 	lsl.w	r2, r1, r2
 80039b0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d038      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80039ca:	e033      	b.n	8003a34 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	f003 031c 	and.w	r3, r3, #28
 80039d4:	2208      	movs	r2, #8
 80039d6:	409a      	lsls	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4013      	ands	r3, r2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d02a      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x156>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d025      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 020e 	bic.w	r2, r2, #14
 80039f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f003 021c 	and.w	r2, r3, #28
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a06:	2101      	movs	r1, #1
 8003a08:	fa01 f202 	lsl.w	r2, r1, r2
 8003a0c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d004      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a34:	bf00      	nop
 8003a36:	bf00      	nop
}
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8003a52:	2300      	movs	r3, #0
 8003a54:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003a56:	e160      	b.n	8003d1a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	fa01 f303 	lsl.w	r3, r1, r3
 8003a64:	4013      	ands	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 8152 	beq.w	8003d14 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d005      	beq.n	8003a88 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d130      	bne.n	8003aea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	2203      	movs	r2, #3
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003abe:	2201      	movs	r2, #1
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4013      	ands	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	091b      	lsrs	r3, r3, #4
 8003ad4:	f003 0201 	and.w	r2, r3, #1
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d017      	beq.n	8003b26 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	2203      	movs	r2, #3
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43db      	mvns	r3, r3
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d123      	bne.n	8003b7a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	08da      	lsrs	r2, r3, #3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3208      	adds	r2, #8
 8003b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b3e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	220f      	movs	r2, #15
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4013      	ands	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	08da      	lsrs	r2, r3, #3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3208      	adds	r2, #8
 8003b74:	6939      	ldr	r1, [r7, #16]
 8003b76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	2203      	movs	r2, #3
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 0203 	and.w	r2, r3, #3
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80ac 	beq.w	8003d14 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bbc:	4b5e      	ldr	r3, [pc, #376]	; (8003d38 <HAL_GPIO_Init+0x2f8>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	4a5d      	ldr	r2, [pc, #372]	; (8003d38 <HAL_GPIO_Init+0x2f8>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	6213      	str	r3, [r2, #32]
 8003bc8:	4b5b      	ldr	r3, [pc, #364]	; (8003d38 <HAL_GPIO_Init+0x2f8>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003bd4:	4a59      	ldr	r2, [pc, #356]	; (8003d3c <HAL_GPIO_Init+0x2fc>)
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	089b      	lsrs	r3, r3, #2
 8003bda:	3302      	adds	r3, #2
 8003bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f003 0303 	and.w	r3, r3, #3
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	220f      	movs	r2, #15
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a51      	ldr	r2, [pc, #324]	; (8003d40 <HAL_GPIO_Init+0x300>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d025      	beq.n	8003c4c <HAL_GPIO_Init+0x20c>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a50      	ldr	r2, [pc, #320]	; (8003d44 <HAL_GPIO_Init+0x304>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d01f      	beq.n	8003c48 <HAL_GPIO_Init+0x208>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a4f      	ldr	r2, [pc, #316]	; (8003d48 <HAL_GPIO_Init+0x308>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d019      	beq.n	8003c44 <HAL_GPIO_Init+0x204>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a4e      	ldr	r2, [pc, #312]	; (8003d4c <HAL_GPIO_Init+0x30c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d013      	beq.n	8003c40 <HAL_GPIO_Init+0x200>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a4d      	ldr	r2, [pc, #308]	; (8003d50 <HAL_GPIO_Init+0x310>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00d      	beq.n	8003c3c <HAL_GPIO_Init+0x1fc>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a4c      	ldr	r2, [pc, #304]	; (8003d54 <HAL_GPIO_Init+0x314>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d007      	beq.n	8003c38 <HAL_GPIO_Init+0x1f8>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a4b      	ldr	r2, [pc, #300]	; (8003d58 <HAL_GPIO_Init+0x318>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d101      	bne.n	8003c34 <HAL_GPIO_Init+0x1f4>
 8003c30:	2306      	movs	r3, #6
 8003c32:	e00c      	b.n	8003c4e <HAL_GPIO_Init+0x20e>
 8003c34:	2307      	movs	r3, #7
 8003c36:	e00a      	b.n	8003c4e <HAL_GPIO_Init+0x20e>
 8003c38:	2305      	movs	r3, #5
 8003c3a:	e008      	b.n	8003c4e <HAL_GPIO_Init+0x20e>
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	e006      	b.n	8003c4e <HAL_GPIO_Init+0x20e>
 8003c40:	2303      	movs	r3, #3
 8003c42:	e004      	b.n	8003c4e <HAL_GPIO_Init+0x20e>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e002      	b.n	8003c4e <HAL_GPIO_Init+0x20e>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <HAL_GPIO_Init+0x20e>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	f002 0203 	and.w	r2, r2, #3
 8003c54:	0092      	lsls	r2, r2, #2
 8003c56:	4093      	lsls	r3, r2
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c5e:	4937      	ldr	r1, [pc, #220]	; (8003d3c <HAL_GPIO_Init+0x2fc>)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	089b      	lsrs	r3, r3, #2
 8003c64:	3302      	adds	r3, #2
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c6c:	4b3b      	ldr	r3, [pc, #236]	; (8003d5c <HAL_GPIO_Init+0x31c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	43db      	mvns	r3, r3
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003c90:	4a32      	ldr	r2, [pc, #200]	; (8003d5c <HAL_GPIO_Init+0x31c>)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c96:	4b31      	ldr	r3, [pc, #196]	; (8003d5c <HAL_GPIO_Init+0x31c>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003cba:	4a28      	ldr	r2, [pc, #160]	; (8003d5c <HAL_GPIO_Init+0x31c>)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cc0:	4b26      	ldr	r3, [pc, #152]	; (8003d5c <HAL_GPIO_Init+0x31c>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ce4:	4a1d      	ldr	r2, [pc, #116]	; (8003d5c <HAL_GPIO_Init+0x31c>)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cea:	4b1c      	ldr	r3, [pc, #112]	; (8003d5c <HAL_GPIO_Init+0x31c>)
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003d0e:	4a13      	ldr	r2, [pc, #76]	; (8003d5c <HAL_GPIO_Init+0x31c>)
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	3301      	adds	r3, #1
 8003d18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	fa22 f303 	lsr.w	r3, r2, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f47f ae97 	bne.w	8003a58 <HAL_GPIO_Init+0x18>
  }
}
 8003d2a:	bf00      	nop
 8003d2c:	bf00      	nop
 8003d2e:	371c      	adds	r7, #28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	40010000 	.word	0x40010000
 8003d40:	40020000 	.word	0x40020000
 8003d44:	40020400 	.word	0x40020400
 8003d48:	40020800 	.word	0x40020800
 8003d4c:	40020c00 	.word	0x40020c00
 8003d50:	40021000 	.word	0x40021000
 8003d54:	40021400 	.word	0x40021400
 8003d58:	40021800 	.word	0x40021800
 8003d5c:	40010400 	.word	0x40010400

08003d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	887b      	ldrh	r3, [r7, #2]
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
 8003d7c:	e001      	b.n	8003d82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr

08003d8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	460b      	mov	r3, r1
 8003d98:	807b      	strh	r3, [r7, #2]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d9e:	787b      	ldrb	r3, [r7, #1]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003da4:	887a      	ldrh	r2, [r7, #2]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8003daa:	e003      	b.n	8003db4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8003dac:	887b      	ldrh	r3, [r7, #2]
 8003dae:	041a      	lsls	r2, r3, #16
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	619a      	str	r2, [r3, #24]
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr
	...

08003dc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003dca:	4b08      	ldr	r3, [pc, #32]	; (8003dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d006      	beq.n	8003de4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dd6:	4a05      	ldr	r2, [pc, #20]	; (8003dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dd8:	88fb      	ldrh	r3, [r7, #6]
 8003dda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fd f9c8 	bl	8001174 <HAL_GPIO_EXTI_Callback>
  }
}
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40010400 	.word	0x40010400

08003df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e31d      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e02:	4b94      	ldr	r3, [pc, #592]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 030c 	and.w	r3, r3, #12
 8003e0a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e0c:	4b91      	ldr	r3, [pc, #580]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e14:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d07b      	beq.n	8003f1a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d006      	beq.n	8003e36 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2b0c      	cmp	r3, #12
 8003e2c:	d10f      	bne.n	8003e4e <HAL_RCC_OscConfig+0x5e>
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e34:	d10b      	bne.n	8003e4e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e36:	4b87      	ldr	r3, [pc, #540]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d06a      	beq.n	8003f18 <HAL_RCC_OscConfig+0x128>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d166      	bne.n	8003f18 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e2f7      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d106      	bne.n	8003e64 <HAL_RCC_OscConfig+0x74>
 8003e56:	4b7f      	ldr	r3, [pc, #508]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a7e      	ldr	r2, [pc, #504]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	e02d      	b.n	8003ec0 <HAL_RCC_OscConfig+0xd0>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10c      	bne.n	8003e86 <HAL_RCC_OscConfig+0x96>
 8003e6c:	4b79      	ldr	r3, [pc, #484]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a78      	ldr	r2, [pc, #480]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	4b76      	ldr	r3, [pc, #472]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a75      	ldr	r2, [pc, #468]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	e01c      	b.n	8003ec0 <HAL_RCC_OscConfig+0xd0>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b05      	cmp	r3, #5
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_RCC_OscConfig+0xb8>
 8003e8e:	4b71      	ldr	r3, [pc, #452]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a70      	ldr	r2, [pc, #448]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	4b6e      	ldr	r3, [pc, #440]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a6d      	ldr	r2, [pc, #436]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	e00b      	b.n	8003ec0 <HAL_RCC_OscConfig+0xd0>
 8003ea8:	4b6a      	ldr	r3, [pc, #424]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a69      	ldr	r2, [pc, #420]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	4b67      	ldr	r3, [pc, #412]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a66      	ldr	r2, [pc, #408]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d013      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec8:	f7ff faec 	bl	80034a4 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ed0:	f7ff fae8 	bl	80034a4 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b64      	cmp	r3, #100	; 0x64
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e2ad      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ee2:	4b5c      	ldr	r3, [pc, #368]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0xe0>
 8003eee:	e014      	b.n	8003f1a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef0:	f7ff fad8 	bl	80034a4 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ef8:	f7ff fad4 	bl	80034a4 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b64      	cmp	r3, #100	; 0x64
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e299      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f0a:	4b52      	ldr	r3, [pc, #328]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x108>
 8003f16:	e000      	b.n	8003f1a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d05a      	beq.n	8003fdc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d005      	beq.n	8003f38 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	2b0c      	cmp	r3, #12
 8003f30:	d119      	bne.n	8003f66 <HAL_RCC_OscConfig+0x176>
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d116      	bne.n	8003f66 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f38:	4b46      	ldr	r3, [pc, #280]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_RCC_OscConfig+0x160>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d001      	beq.n	8003f50 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e276      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f50:	4b40      	ldr	r3, [pc, #256]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	493d      	ldr	r1, [pc, #244]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f64:	e03a      	b.n	8003fdc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d020      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f6e:	4b3a      	ldr	r3, [pc, #232]	; (8004058 <HAL_RCC_OscConfig+0x268>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f74:	f7ff fa96 	bl	80034a4 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f7c:	f7ff fa92 	bl	80034a4 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e257      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f8e:	4b31      	ldr	r3, [pc, #196]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f9a:	4b2e      	ldr	r3, [pc, #184]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	021b      	lsls	r3, r3, #8
 8003fa8:	492a      	ldr	r1, [pc, #168]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	604b      	str	r3, [r1, #4]
 8003fae:	e015      	b.n	8003fdc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fb0:	4b29      	ldr	r3, [pc, #164]	; (8004058 <HAL_RCC_OscConfig+0x268>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb6:	f7ff fa75 	bl	80034a4 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fbe:	f7ff fa71 	bl	80034a4 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e236      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fd0:	4b20      	ldr	r3, [pc, #128]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1f0      	bne.n	8003fbe <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 80b8 	beq.w	800415a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d170      	bne.n	80040d2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ff0:	4b18      	ldr	r3, [pc, #96]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_RCC_OscConfig+0x218>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e21a      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1a      	ldr	r2, [r3, #32]
 800400c:	4b11      	ldr	r3, [pc, #68]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004014:	429a      	cmp	r2, r3
 8004016:	d921      	bls.n	800405c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fc23 	bl	8004868 <RCC_SetFlashLatencyFromMSIRange>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e208      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800402c:	4b09      	ldr	r3, [pc, #36]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	4906      	ldr	r1, [pc, #24]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 800403a:	4313      	orrs	r3, r2
 800403c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800403e:	4b05      	ldr	r3, [pc, #20]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	061b      	lsls	r3, r3, #24
 800404c:	4901      	ldr	r1, [pc, #4]	; (8004054 <HAL_RCC_OscConfig+0x264>)
 800404e:	4313      	orrs	r3, r2
 8004050:	604b      	str	r3, [r1, #4]
 8004052:	e020      	b.n	8004096 <HAL_RCC_OscConfig+0x2a6>
 8004054:	40023800 	.word	0x40023800
 8004058:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800405c:	4ba4      	ldr	r3, [pc, #656]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	49a1      	ldr	r1, [pc, #644]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 800406a:	4313      	orrs	r3, r2
 800406c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800406e:	4ba0      	ldr	r3, [pc, #640]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	061b      	lsls	r3, r3, #24
 800407c:	499c      	ldr	r1, [pc, #624]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 800407e:	4313      	orrs	r3, r2
 8004080:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fbee 	bl	8004868 <RCC_SetFlashLatencyFromMSIRange>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e1d3      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	0b5b      	lsrs	r3, r3, #13
 800409c:	3301      	adds	r3, #1
 800409e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80040a6:	4a92      	ldr	r2, [pc, #584]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 80040a8:	6892      	ldr	r2, [r2, #8]
 80040aa:	0912      	lsrs	r2, r2, #4
 80040ac:	f002 020f 	and.w	r2, r2, #15
 80040b0:	4990      	ldr	r1, [pc, #576]	; (80042f4 <HAL_RCC_OscConfig+0x504>)
 80040b2:	5c8a      	ldrb	r2, [r1, r2]
 80040b4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80040b6:	4a90      	ldr	r2, [pc, #576]	; (80042f8 <HAL_RCC_OscConfig+0x508>)
 80040b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80040ba:	4b90      	ldr	r3, [pc, #576]	; (80042fc <HAL_RCC_OscConfig+0x50c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff f9a4 	bl	800340c <HAL_InitTick>
 80040c4:	4603      	mov	r3, r0
 80040c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d045      	beq.n	800415a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	e1b5      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d029      	beq.n	800412e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040da:	4b89      	ldr	r3, [pc, #548]	; (8004300 <HAL_RCC_OscConfig+0x510>)
 80040dc:	2201      	movs	r2, #1
 80040de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e0:	f7ff f9e0 	bl	80034a4 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040e8:	f7ff f9dc 	bl	80034a4 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e1a1      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040fa:	4b7d      	ldr	r3, [pc, #500]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0f0      	beq.n	80040e8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004106:	4b7a      	ldr	r3, [pc, #488]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	4977      	ldr	r1, [pc, #476]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 8004114:	4313      	orrs	r3, r2
 8004116:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004118:	4b75      	ldr	r3, [pc, #468]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	061b      	lsls	r3, r3, #24
 8004126:	4972      	ldr	r1, [pc, #456]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 8004128:	4313      	orrs	r3, r2
 800412a:	604b      	str	r3, [r1, #4]
 800412c:	e015      	b.n	800415a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800412e:	4b74      	ldr	r3, [pc, #464]	; (8004300 <HAL_RCC_OscConfig+0x510>)
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004134:	f7ff f9b6 	bl	80034a4 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800413c:	f7ff f9b2 	bl	80034a4 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e177      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800414e:	4b68      	ldr	r3, [pc, #416]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d030      	beq.n	80041c8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d016      	beq.n	800419c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800416e:	4b65      	ldr	r3, [pc, #404]	; (8004304 <HAL_RCC_OscConfig+0x514>)
 8004170:	2201      	movs	r2, #1
 8004172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004174:	f7ff f996 	bl	80034a4 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800417c:	f7ff f992 	bl	80034a4 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e157      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800418e:	4b58      	ldr	r3, [pc, #352]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 8004190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0f0      	beq.n	800417c <HAL_RCC_OscConfig+0x38c>
 800419a:	e015      	b.n	80041c8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800419c:	4b59      	ldr	r3, [pc, #356]	; (8004304 <HAL_RCC_OscConfig+0x514>)
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a2:	f7ff f97f 	bl	80034a4 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041aa:	f7ff f97b 	bl	80034a4 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e140      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041bc:	4b4c      	ldr	r3, [pc, #304]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 80041be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1f0      	bne.n	80041aa <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 80b5 	beq.w	8004340 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041d6:	2300      	movs	r3, #0
 80041d8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041da:	4b45      	ldr	r3, [pc, #276]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10d      	bne.n	8004202 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e6:	4b42      	ldr	r3, [pc, #264]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	4a41      	ldr	r2, [pc, #260]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 80041ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f0:	6253      	str	r3, [r2, #36]	; 0x24
 80041f2:	4b3f      	ldr	r3, [pc, #252]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fa:	60bb      	str	r3, [r7, #8]
 80041fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041fe:	2301      	movs	r3, #1
 8004200:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004202:	4b41      	ldr	r3, [pc, #260]	; (8004308 <HAL_RCC_OscConfig+0x518>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420a:	2b00      	cmp	r3, #0
 800420c:	d118      	bne.n	8004240 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800420e:	4b3e      	ldr	r3, [pc, #248]	; (8004308 <HAL_RCC_OscConfig+0x518>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a3d      	ldr	r2, [pc, #244]	; (8004308 <HAL_RCC_OscConfig+0x518>)
 8004214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800421a:	f7ff f943 	bl	80034a4 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004222:	f7ff f93f 	bl	80034a4 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b64      	cmp	r3, #100	; 0x64
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e104      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004234:	4b34      	ldr	r3, [pc, #208]	; (8004308 <HAL_RCC_OscConfig+0x518>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f0      	beq.n	8004222 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d106      	bne.n	8004256 <HAL_RCC_OscConfig+0x466>
 8004248:	4b29      	ldr	r3, [pc, #164]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 800424a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424c:	4a28      	ldr	r2, [pc, #160]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 800424e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004252:	6353      	str	r3, [r2, #52]	; 0x34
 8004254:	e02d      	b.n	80042b2 <HAL_RCC_OscConfig+0x4c2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10c      	bne.n	8004278 <HAL_RCC_OscConfig+0x488>
 800425e:	4b24      	ldr	r3, [pc, #144]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 8004260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004262:	4a23      	ldr	r2, [pc, #140]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 8004264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004268:	6353      	str	r3, [r2, #52]	; 0x34
 800426a:	4b21      	ldr	r3, [pc, #132]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 800426c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426e:	4a20      	ldr	r2, [pc, #128]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 8004270:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004274:	6353      	str	r3, [r2, #52]	; 0x34
 8004276:	e01c      	b.n	80042b2 <HAL_RCC_OscConfig+0x4c2>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b05      	cmp	r3, #5
 800427e:	d10c      	bne.n	800429a <HAL_RCC_OscConfig+0x4aa>
 8004280:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 8004282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004284:	4a1a      	ldr	r2, [pc, #104]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 8004286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800428a:	6353      	str	r3, [r2, #52]	; 0x34
 800428c:	4b18      	ldr	r3, [pc, #96]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 800428e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004290:	4a17      	ldr	r2, [pc, #92]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 8004292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004296:	6353      	str	r3, [r2, #52]	; 0x34
 8004298:	e00b      	b.n	80042b2 <HAL_RCC_OscConfig+0x4c2>
 800429a:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 800429c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429e:	4a14      	ldr	r2, [pc, #80]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 80042a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042a4:	6353      	str	r3, [r2, #52]	; 0x34
 80042a6:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 80042a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042aa:	4a11      	ldr	r2, [pc, #68]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 80042ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042b0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d015      	beq.n	80042e6 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ba:	f7ff f8f3 	bl	80034a4 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042c0:	e00a      	b.n	80042d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c2:	f7ff f8ef 	bl	80034a4 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e0b2      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042d8:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 80042da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0ee      	beq.n	80042c2 <HAL_RCC_OscConfig+0x4d2>
 80042e4:	e023      	b.n	800432e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042e6:	f7ff f8dd 	bl	80034a4 <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042ec:	e019      	b.n	8004322 <HAL_RCC_OscConfig+0x532>
 80042ee:	bf00      	nop
 80042f0:	40023800 	.word	0x40023800
 80042f4:	0800677c 	.word	0x0800677c
 80042f8:	20000008 	.word	0x20000008
 80042fc:	20000098 	.word	0x20000098
 8004300:	42470020 	.word	0x42470020
 8004304:	42470680 	.word	0x42470680
 8004308:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800430c:	f7ff f8ca 	bl	80034a4 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f241 3288 	movw	r2, #5000	; 0x1388
 800431a:	4293      	cmp	r3, r2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e08d      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004322:	4b49      	ldr	r3, [pc, #292]	; (8004448 <HAL_RCC_OscConfig+0x658>)
 8004324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1ee      	bne.n	800430c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800432e:	7ffb      	ldrb	r3, [r7, #31]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d105      	bne.n	8004340 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004334:	4b44      	ldr	r3, [pc, #272]	; (8004448 <HAL_RCC_OscConfig+0x658>)
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	4a43      	ldr	r2, [pc, #268]	; (8004448 <HAL_RCC_OscConfig+0x658>)
 800433a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800433e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	2b00      	cmp	r3, #0
 8004346:	d079      	beq.n	800443c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	2b0c      	cmp	r3, #12
 800434c:	d056      	beq.n	80043fc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	2b02      	cmp	r3, #2
 8004354:	d13b      	bne.n	80043ce <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004356:	4b3d      	ldr	r3, [pc, #244]	; (800444c <HAL_RCC_OscConfig+0x65c>)
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435c:	f7ff f8a2 	bl	80034a4 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004364:	f7ff f89e 	bl	80034a4 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e063      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004376:	4b34      	ldr	r3, [pc, #208]	; (8004448 <HAL_RCC_OscConfig+0x658>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f0      	bne.n	8004364 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004382:	4b31      	ldr	r3, [pc, #196]	; (8004448 <HAL_RCC_OscConfig+0x658>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004392:	4319      	orrs	r1, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	430b      	orrs	r3, r1
 800439a:	492b      	ldr	r1, [pc, #172]	; (8004448 <HAL_RCC_OscConfig+0x658>)
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043a0:	4b2a      	ldr	r3, [pc, #168]	; (800444c <HAL_RCC_OscConfig+0x65c>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a6:	f7ff f87d 	bl	80034a4 <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ae:	f7ff f879 	bl	80034a4 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e03e      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043c0:	4b21      	ldr	r3, [pc, #132]	; (8004448 <HAL_RCC_OscConfig+0x658>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0f0      	beq.n	80043ae <HAL_RCC_OscConfig+0x5be>
 80043cc:	e036      	b.n	800443c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ce:	4b1f      	ldr	r3, [pc, #124]	; (800444c <HAL_RCC_OscConfig+0x65c>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d4:	f7ff f866 	bl	80034a4 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043dc:	f7ff f862 	bl	80034a4 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e027      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043ee:	4b16      	ldr	r3, [pc, #88]	; (8004448 <HAL_RCC_OscConfig+0x658>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f0      	bne.n	80043dc <HAL_RCC_OscConfig+0x5ec>
 80043fa:	e01f      	b.n	800443c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e01a      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004408:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <HAL_RCC_OscConfig+0x658>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004418:	429a      	cmp	r2, r3
 800441a:	d10d      	bne.n	8004438 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004426:	429a      	cmp	r2, r3
 8004428:	d106      	bne.n	8004438 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004434:	429a      	cmp	r2, r3
 8004436:	d001      	beq.n	800443c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40023800 	.word	0x40023800
 800444c:	42470060 	.word	0x42470060

08004450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e11a      	b.n	800469a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004464:	4b8f      	ldr	r3, [pc, #572]	; (80046a4 <HAL_RCC_ClockConfig+0x254>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d919      	bls.n	80044a6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d105      	bne.n	8004484 <HAL_RCC_ClockConfig+0x34>
 8004478:	4b8a      	ldr	r3, [pc, #552]	; (80046a4 <HAL_RCC_ClockConfig+0x254>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a89      	ldr	r2, [pc, #548]	; (80046a4 <HAL_RCC_ClockConfig+0x254>)
 800447e:	f043 0304 	orr.w	r3, r3, #4
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	4b87      	ldr	r3, [pc, #540]	; (80046a4 <HAL_RCC_ClockConfig+0x254>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f023 0201 	bic.w	r2, r3, #1
 800448c:	4985      	ldr	r1, [pc, #532]	; (80046a4 <HAL_RCC_ClockConfig+0x254>)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	4313      	orrs	r3, r2
 8004492:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004494:	4b83      	ldr	r3, [pc, #524]	; (80046a4 <HAL_RCC_ClockConfig+0x254>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d001      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e0f9      	b.n	800469a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b2:	4b7d      	ldr	r3, [pc, #500]	; (80046a8 <HAL_RCC_ClockConfig+0x258>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	497a      	ldr	r1, [pc, #488]	; (80046a8 <HAL_RCC_ClockConfig+0x258>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 808e 	beq.w	80045ee <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d107      	bne.n	80044ea <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044da:	4b73      	ldr	r3, [pc, #460]	; (80046a8 <HAL_RCC_ClockConfig+0x258>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d121      	bne.n	800452a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e0d7      	b.n	800469a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044f2:	4b6d      	ldr	r3, [pc, #436]	; (80046a8 <HAL_RCC_ClockConfig+0x258>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d115      	bne.n	800452a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e0cb      	b.n	800469a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d107      	bne.n	800451a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800450a:	4b67      	ldr	r3, [pc, #412]	; (80046a8 <HAL_RCC_ClockConfig+0x258>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d109      	bne.n	800452a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e0bf      	b.n	800469a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800451a:	4b63      	ldr	r3, [pc, #396]	; (80046a8 <HAL_RCC_ClockConfig+0x258>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e0b7      	b.n	800469a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800452a:	4b5f      	ldr	r3, [pc, #380]	; (80046a8 <HAL_RCC_ClockConfig+0x258>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f023 0203 	bic.w	r2, r3, #3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	495c      	ldr	r1, [pc, #368]	; (80046a8 <HAL_RCC_ClockConfig+0x258>)
 8004538:	4313      	orrs	r3, r2
 800453a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800453c:	f7fe ffb2 	bl	80034a4 <HAL_GetTick>
 8004540:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d112      	bne.n	8004570 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800454a:	e00a      	b.n	8004562 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800454c:	f7fe ffaa 	bl	80034a4 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	; 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e09b      	b.n	800469a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004562:	4b51      	ldr	r3, [pc, #324]	; (80046a8 <HAL_RCC_ClockConfig+0x258>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b08      	cmp	r3, #8
 800456c:	d1ee      	bne.n	800454c <HAL_RCC_ClockConfig+0xfc>
 800456e:	e03e      	b.n	80045ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b03      	cmp	r3, #3
 8004576:	d112      	bne.n	800459e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004578:	e00a      	b.n	8004590 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800457a:	f7fe ff93 	bl	80034a4 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	f241 3288 	movw	r2, #5000	; 0x1388
 8004588:	4293      	cmp	r3, r2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e084      	b.n	800469a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004590:	4b45      	ldr	r3, [pc, #276]	; (80046a8 <HAL_RCC_ClockConfig+0x258>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 030c 	and.w	r3, r3, #12
 8004598:	2b0c      	cmp	r3, #12
 800459a:	d1ee      	bne.n	800457a <HAL_RCC_ClockConfig+0x12a>
 800459c:	e027      	b.n	80045ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d11d      	bne.n	80045e2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80045a6:	e00a      	b.n	80045be <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a8:	f7fe ff7c 	bl	80034a4 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e06d      	b.n	800469a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80045be:	4b3a      	ldr	r3, [pc, #232]	; (80046a8 <HAL_RCC_ClockConfig+0x258>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d1ee      	bne.n	80045a8 <HAL_RCC_ClockConfig+0x158>
 80045ca:	e010      	b.n	80045ee <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045cc:	f7fe ff6a 	bl	80034a4 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045da:	4293      	cmp	r3, r2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e05b      	b.n	800469a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80045e2:	4b31      	ldr	r3, [pc, #196]	; (80046a8 <HAL_RCC_ClockConfig+0x258>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1ee      	bne.n	80045cc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045ee:	4b2d      	ldr	r3, [pc, #180]	; (80046a4 <HAL_RCC_ClockConfig+0x254>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d219      	bcs.n	8004630 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d105      	bne.n	800460e <HAL_RCC_ClockConfig+0x1be>
 8004602:	4b28      	ldr	r3, [pc, #160]	; (80046a4 <HAL_RCC_ClockConfig+0x254>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a27      	ldr	r2, [pc, #156]	; (80046a4 <HAL_RCC_ClockConfig+0x254>)
 8004608:	f043 0304 	orr.w	r3, r3, #4
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	4b25      	ldr	r3, [pc, #148]	; (80046a4 <HAL_RCC_ClockConfig+0x254>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f023 0201 	bic.w	r2, r3, #1
 8004616:	4923      	ldr	r1, [pc, #140]	; (80046a4 <HAL_RCC_ClockConfig+0x254>)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	4313      	orrs	r3, r2
 800461c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800461e:	4b21      	ldr	r3, [pc, #132]	; (80046a4 <HAL_RCC_ClockConfig+0x254>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d001      	beq.n	8004630 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e034      	b.n	800469a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d008      	beq.n	800464e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800463c:	4b1a      	ldr	r3, [pc, #104]	; (80046a8 <HAL_RCC_ClockConfig+0x258>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4917      	ldr	r1, [pc, #92]	; (80046a8 <HAL_RCC_ClockConfig+0x258>)
 800464a:	4313      	orrs	r3, r2
 800464c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800465a:	4b13      	ldr	r3, [pc, #76]	; (80046a8 <HAL_RCC_ClockConfig+0x258>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	490f      	ldr	r1, [pc, #60]	; (80046a8 <HAL_RCC_ClockConfig+0x258>)
 800466a:	4313      	orrs	r3, r2
 800466c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800466e:	f000 f823 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8004672:	4602      	mov	r2, r0
 8004674:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <HAL_RCC_ClockConfig+0x258>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	490b      	ldr	r1, [pc, #44]	; (80046ac <HAL_RCC_ClockConfig+0x25c>)
 8004680:	5ccb      	ldrb	r3, [r1, r3]
 8004682:	fa22 f303 	lsr.w	r3, r2, r3
 8004686:	4a0a      	ldr	r2, [pc, #40]	; (80046b0 <HAL_RCC_ClockConfig+0x260>)
 8004688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800468a:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <HAL_RCC_ClockConfig+0x264>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7fe febc 	bl	800340c <HAL_InitTick>
 8004694:	4603      	mov	r3, r0
 8004696:	72fb      	strb	r3, [r7, #11]

  return status;
 8004698:	7afb      	ldrb	r3, [r7, #11]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40023c00 	.word	0x40023c00
 80046a8:	40023800 	.word	0x40023800
 80046ac:	0800677c 	.word	0x0800677c
 80046b0:	20000008 	.word	0x20000008
 80046b4:	20000098 	.word	0x20000098

080046b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b8:	b5b0      	push	{r4, r5, r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80046be:	4b4d      	ldr	r3, [pc, #308]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f003 030c 	and.w	r3, r3, #12
 80046ca:	2b0c      	cmp	r3, #12
 80046cc:	d00c      	beq.n	80046e8 <HAL_RCC_GetSysClockFreq+0x30>
 80046ce:	2b0c      	cmp	r3, #12
 80046d0:	d87c      	bhi.n	80047cc <HAL_RCC_GetSysClockFreq+0x114>
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d002      	beq.n	80046dc <HAL_RCC_GetSysClockFreq+0x24>
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d003      	beq.n	80046e2 <HAL_RCC_GetSysClockFreq+0x2a>
 80046da:	e077      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046dc:	4b46      	ldr	r3, [pc, #280]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x140>)
 80046de:	613b      	str	r3, [r7, #16]
      break;
 80046e0:	e082      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046e2:	4b46      	ldr	r3, [pc, #280]	; (80047fc <HAL_RCC_GetSysClockFreq+0x144>)
 80046e4:	613b      	str	r3, [r7, #16]
      break;
 80046e6:	e07f      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	0c9b      	lsrs	r3, r3, #18
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	4a43      	ldr	r2, [pc, #268]	; (8004800 <HAL_RCC_GetSysClockFreq+0x148>)
 80046f2:	5cd3      	ldrb	r3, [r2, r3]
 80046f4:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	0d9b      	lsrs	r3, r3, #22
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	3301      	adds	r3, #1
 8004700:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004702:	4b3c      	ldr	r3, [pc, #240]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d01a      	beq.n	8004744 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	461a      	mov	r2, r3
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	4939      	ldr	r1, [pc, #228]	; (80047fc <HAL_RCC_GetSysClockFreq+0x144>)
 8004718:	fb01 f003 	mul.w	r0, r1, r3
 800471c:	2100      	movs	r1, #0
 800471e:	fb01 f102 	mul.w	r1, r1, r2
 8004722:	1844      	adds	r4, r0, r1
 8004724:	4935      	ldr	r1, [pc, #212]	; (80047fc <HAL_RCC_GetSysClockFreq+0x144>)
 8004726:	fba2 0101 	umull	r0, r1, r2, r1
 800472a:	1863      	adds	r3, r4, r1
 800472c:	4619      	mov	r1, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	461a      	mov	r2, r3
 8004732:	f04f 0300 	mov.w	r3, #0
 8004736:	f7fb fd21 	bl	800017c <__aeabi_uldivmod>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4613      	mov	r3, r2
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	e040      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	461c      	mov	r4, r3
 8004748:	f04f 0500 	mov.w	r5, #0
 800474c:	4620      	mov	r0, r4
 800474e:	4629      	mov	r1, r5
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	014b      	lsls	r3, r1, #5
 800475a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800475e:	0142      	lsls	r2, r0, #5
 8004760:	4610      	mov	r0, r2
 8004762:	4619      	mov	r1, r3
 8004764:	1b00      	subs	r0, r0, r4
 8004766:	eb61 0105 	sbc.w	r1, r1, r5
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	f04f 0300 	mov.w	r3, #0
 8004772:	018b      	lsls	r3, r1, #6
 8004774:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004778:	0182      	lsls	r2, r0, #6
 800477a:	1a12      	subs	r2, r2, r0
 800477c:	eb63 0301 	sbc.w	r3, r3, r1
 8004780:	f04f 0000 	mov.w	r0, #0
 8004784:	f04f 0100 	mov.w	r1, #0
 8004788:	00d9      	lsls	r1, r3, #3
 800478a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800478e:	00d0      	lsls	r0, r2, #3
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	1912      	adds	r2, r2, r4
 8004796:	eb45 0303 	adc.w	r3, r5, r3
 800479a:	f04f 0000 	mov.w	r0, #0
 800479e:	f04f 0100 	mov.w	r1, #0
 80047a2:	0299      	lsls	r1, r3, #10
 80047a4:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80047a8:	0290      	lsls	r0, r2, #10
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4610      	mov	r0, r2
 80047b0:	4619      	mov	r1, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	461a      	mov	r2, r3
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	f7fb fcdf 	bl	800017c <__aeabi_uldivmod>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4613      	mov	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	613b      	str	r3, [r7, #16]
      break;
 80047ca:	e00d      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80047cc:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	0b5b      	lsrs	r3, r3, #13
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	3301      	adds	r3, #1
 80047dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	613b      	str	r3, [r7, #16]
      break;
 80047e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047e8:	693b      	ldr	r3, [r7, #16]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bdb0      	pop	{r4, r5, r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40023800 	.word	0x40023800
 80047f8:	00f42400 	.word	0x00f42400
 80047fc:	016e3600 	.word	0x016e3600
 8004800:	08006770 	.word	0x08006770

08004804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004808:	4b02      	ldr	r3, [pc, #8]	; (8004814 <HAL_RCC_GetHCLKFreq+0x10>)
 800480a:	681b      	ldr	r3, [r3, #0]
}
 800480c:	4618      	mov	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr
 8004814:	20000008 	.word	0x20000008

08004818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800481c:	f7ff fff2 	bl	8004804 <HAL_RCC_GetHCLKFreq>
 8004820:	4602      	mov	r2, r0
 8004822:	4b05      	ldr	r3, [pc, #20]	; (8004838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	0a1b      	lsrs	r3, r3, #8
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	4903      	ldr	r1, [pc, #12]	; (800483c <HAL_RCC_GetPCLK1Freq+0x24>)
 800482e:	5ccb      	ldrb	r3, [r1, r3]
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004834:	4618      	mov	r0, r3
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40023800 	.word	0x40023800
 800483c:	0800678c 	.word	0x0800678c

08004840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004844:	f7ff ffde 	bl	8004804 <HAL_RCC_GetHCLKFreq>
 8004848:	4602      	mov	r2, r0
 800484a:	4b05      	ldr	r3, [pc, #20]	; (8004860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	0adb      	lsrs	r3, r3, #11
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	4903      	ldr	r1, [pc, #12]	; (8004864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004856:	5ccb      	ldrb	r3, [r1, r3]
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40023800 	.word	0x40023800
 8004864:	0800678c 	.word	0x0800678c

08004868 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004870:	2300      	movs	r3, #0
 8004872:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004874:	4b29      	ldr	r3, [pc, #164]	; (800491c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d12c      	bne.n	80048da <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004880:	4b26      	ldr	r3, [pc, #152]	; (800491c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800488c:	4b24      	ldr	r3, [pc, #144]	; (8004920 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	e016      	b.n	80048c6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004898:	4b20      	ldr	r3, [pc, #128]	; (800491c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	4a1f      	ldr	r2, [pc, #124]	; (800491c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800489e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a2:	6253      	str	r3, [r2, #36]	; 0x24
 80048a4:	4b1d      	ldr	r3, [pc, #116]	; (800491c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80048b0:	4b1b      	ldr	r3, [pc, #108]	; (8004920 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80048b8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ba:	4b18      	ldr	r3, [pc, #96]	; (800491c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	4a17      	ldr	r2, [pc, #92]	; (800491c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80048c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80048cc:	d105      	bne.n	80048da <RCC_SetFlashLatencyFromMSIRange+0x72>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048d4:	d101      	bne.n	80048da <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80048d6:	2301      	movs	r3, #1
 80048d8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d105      	bne.n	80048ec <RCC_SetFlashLatencyFromMSIRange+0x84>
 80048e0:	4b10      	ldr	r3, [pc, #64]	; (8004924 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a0f      	ldr	r2, [pc, #60]	; (8004924 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048e6:	f043 0304 	orr.w	r3, r3, #4
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f023 0201 	bic.w	r2, r3, #1
 80048f4:	490b      	ldr	r1, [pc, #44]	; (8004924 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048fc:	4b09      	ldr	r3, [pc, #36]	; (8004924 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	429a      	cmp	r2, r3
 8004908:	d001      	beq.n	800490e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	371c      	adds	r7, #28
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40023800 	.word	0x40023800
 8004920:	40007000 	.word	0x40007000
 8004924:	40023c00 	.word	0x40023c00

08004928 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e07b      	b.n	8004a32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	2b00      	cmp	r3, #0
 8004940:	d108      	bne.n	8004954 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800494a:	d009      	beq.n	8004960 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	61da      	str	r2, [r3, #28]
 8004952:	e005      	b.n	8004960 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7fd fbc0 	bl	8002100 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004996:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d0:	431a      	orrs	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049da:	431a      	orrs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e4:	ea42 0103 	orr.w	r1, r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	0c1b      	lsrs	r3, r3, #16
 80049fe:	f003 0104 	and.w	r1, r3, #4
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	f003 0210 	and.w	r2, r3, #16
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69da      	ldr	r2, [r3, #28]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b088      	sub	sp, #32
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	603b      	str	r3, [r7, #0]
 8004a46:	4613      	mov	r3, r2
 8004a48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <HAL_SPI_Transmit+0x22>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	e126      	b.n	8004caa <HAL_SPI_Transmit+0x270>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a64:	f7fe fd1e 	bl	80034a4 <HAL_GetTick>
 8004a68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a6a:	88fb      	ldrh	r3, [r7, #6]
 8004a6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d002      	beq.n	8004a80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a7e:	e10b      	b.n	8004c98 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_SPI_Transmit+0x52>
 8004a86:	88fb      	ldrh	r3, [r7, #6]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d102      	bne.n	8004a92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a90:	e102      	b.n	8004c98 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2203      	movs	r2, #3
 8004a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	88fa      	ldrh	r2, [r7, #6]
 8004aaa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	88fa      	ldrh	r2, [r7, #6]
 8004ab0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad8:	d10f      	bne.n	8004afa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ae8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004af8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b04:	2b40      	cmp	r3, #64	; 0x40
 8004b06:	d007      	beq.n	8004b18 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b20:	d14b      	bne.n	8004bba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <HAL_SPI_Transmit+0xf6>
 8004b2a:	8afb      	ldrh	r3, [r7, #22]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d13e      	bne.n	8004bae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b34:	881a      	ldrh	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	1c9a      	adds	r2, r3, #2
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b54:	e02b      	b.n	8004bae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d112      	bne.n	8004b8a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	881a      	ldrh	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	1c9a      	adds	r2, r3, #2
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b88:	e011      	b.n	8004bae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b8a:	f7fe fc8b 	bl	80034a4 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d803      	bhi.n	8004ba2 <HAL_SPI_Transmit+0x168>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba0:	d102      	bne.n	8004ba8 <HAL_SPI_Transmit+0x16e>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d102      	bne.n	8004bae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bac:	e074      	b.n	8004c98 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1ce      	bne.n	8004b56 <HAL_SPI_Transmit+0x11c>
 8004bb8:	e04c      	b.n	8004c54 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <HAL_SPI_Transmit+0x18e>
 8004bc2:	8afb      	ldrh	r3, [r7, #22]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d140      	bne.n	8004c4a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	330c      	adds	r3, #12
 8004bd2:	7812      	ldrb	r2, [r2, #0]
 8004bd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004bee:	e02c      	b.n	8004c4a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d113      	bne.n	8004c26 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	330c      	adds	r3, #12
 8004c08:	7812      	ldrb	r2, [r2, #0]
 8004c0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c24:	e011      	b.n	8004c4a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c26:	f7fe fc3d 	bl	80034a4 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d803      	bhi.n	8004c3e <HAL_SPI_Transmit+0x204>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3c:	d102      	bne.n	8004c44 <HAL_SPI_Transmit+0x20a>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d102      	bne.n	8004c4a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c48:	e026      	b.n	8004c98 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1cd      	bne.n	8004bf0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	6839      	ldr	r1, [r7, #0]
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 fa55 	bl	8005108 <SPI_EndRxTxTransaction>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c72:	2300      	movs	r3, #0
 8004c74:	613b      	str	r3, [r7, #16]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	613b      	str	r3, [r7, #16]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	77fb      	strb	r3, [r7, #31]
 8004c94:	e000      	b.n	8004c98 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ca8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3720      	adds	r7, #32
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b08c      	sub	sp, #48	; 0x30
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	607a      	str	r2, [r7, #4]
 8004cbe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_SPI_TransmitReceive+0x26>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e18a      	b.n	8004fee <HAL_SPI_TransmitReceive+0x33c>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ce0:	f7fe fbe0 	bl	80034a4 <HAL_GetTick>
 8004ce4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004cf6:	887b      	ldrh	r3, [r7, #2]
 8004cf8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d00f      	beq.n	8004d22 <HAL_SPI_TransmitReceive+0x70>
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d08:	d107      	bne.n	8004d1a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d103      	bne.n	8004d1a <HAL_SPI_TransmitReceive+0x68>
 8004d12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d003      	beq.n	8004d22 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d20:	e15b      	b.n	8004fda <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <HAL_SPI_TransmitReceive+0x82>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <HAL_SPI_TransmitReceive+0x82>
 8004d2e:	887b      	ldrh	r3, [r7, #2]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d103      	bne.n	8004d3c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d3a:	e14e      	b.n	8004fda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b04      	cmp	r3, #4
 8004d46:	d003      	beq.n	8004d50 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2205      	movs	r2, #5
 8004d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	887a      	ldrh	r2, [r7, #2]
 8004d60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	887a      	ldrh	r2, [r7, #2]
 8004d66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	887a      	ldrh	r2, [r7, #2]
 8004d72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	887a      	ldrh	r2, [r7, #2]
 8004d78:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d90:	2b40      	cmp	r3, #64	; 0x40
 8004d92:	d007      	beq.n	8004da4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004da2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dac:	d178      	bne.n	8004ea0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <HAL_SPI_TransmitReceive+0x10a>
 8004db6:	8b7b      	ldrh	r3, [r7, #26]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d166      	bne.n	8004e8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	881a      	ldrh	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	1c9a      	adds	r2, r3, #2
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004de0:	e053      	b.n	8004e8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d11b      	bne.n	8004e28 <HAL_SPI_TransmitReceive+0x176>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d016      	beq.n	8004e28 <HAL_SPI_TransmitReceive+0x176>
 8004dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d113      	bne.n	8004e28 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	881a      	ldrh	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	1c9a      	adds	r2, r3, #2
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d119      	bne.n	8004e6a <HAL_SPI_TransmitReceive+0x1b8>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d014      	beq.n	8004e6a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	b292      	uxth	r2, r2
 8004e4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	1c9a      	adds	r2, r3, #2
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e66:	2301      	movs	r3, #1
 8004e68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e6a:	f7fe fb1b 	bl	80034a4 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d807      	bhi.n	8004e8a <HAL_SPI_TransmitReceive+0x1d8>
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e80:	d003      	beq.n	8004e8a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e88:	e0a7      	b.n	8004fda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1a6      	bne.n	8004de2 <HAL_SPI_TransmitReceive+0x130>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1a1      	bne.n	8004de2 <HAL_SPI_TransmitReceive+0x130>
 8004e9e:	e07c      	b.n	8004f9a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <HAL_SPI_TransmitReceive+0x1fc>
 8004ea8:	8b7b      	ldrh	r3, [r7, #26]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d16b      	bne.n	8004f86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	330c      	adds	r3, #12
 8004eb8:	7812      	ldrb	r2, [r2, #0]
 8004eba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ed4:	e057      	b.n	8004f86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d11c      	bne.n	8004f1e <HAL_SPI_TransmitReceive+0x26c>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d017      	beq.n	8004f1e <HAL_SPI_TransmitReceive+0x26c>
 8004eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d114      	bne.n	8004f1e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	330c      	adds	r3, #12
 8004efe:	7812      	ldrb	r2, [r2, #0]
 8004f00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d119      	bne.n	8004f60 <HAL_SPI_TransmitReceive+0x2ae>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d014      	beq.n	8004f60 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f60:	f7fe faa0 	bl	80034a4 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d803      	bhi.n	8004f78 <HAL_SPI_TransmitReceive+0x2c6>
 8004f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f76:	d102      	bne.n	8004f7e <HAL_SPI_TransmitReceive+0x2cc>
 8004f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d103      	bne.n	8004f86 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f84:	e029      	b.n	8004fda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1a2      	bne.n	8004ed6 <HAL_SPI_TransmitReceive+0x224>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d19d      	bne.n	8004ed6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 f8b2 	bl	8005108 <SPI_EndRxTxTransaction>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d006      	beq.n	8004fb8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004fb6:	e010      	b.n	8004fda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10b      	bne.n	8004fd8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	617b      	str	r3, [r7, #20]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	e000      	b.n	8004fda <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004fd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3730      	adds	r7, #48	; 0x30
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	603b      	str	r3, [r7, #0]
 8005004:	4613      	mov	r3, r2
 8005006:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005008:	f7fe fa4c 	bl	80034a4 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	1a9b      	subs	r3, r3, r2
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	4413      	add	r3, r2
 8005016:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005018:	f7fe fa44 	bl	80034a4 <HAL_GetTick>
 800501c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800501e:	4b39      	ldr	r3, [pc, #228]	; (8005104 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	015b      	lsls	r3, r3, #5
 8005024:	0d1b      	lsrs	r3, r3, #20
 8005026:	69fa      	ldr	r2, [r7, #28]
 8005028:	fb02 f303 	mul.w	r3, r2, r3
 800502c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800502e:	e054      	b.n	80050da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d050      	beq.n	80050da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005038:	f7fe fa34 	bl	80034a4 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	429a      	cmp	r2, r3
 8005046:	d902      	bls.n	800504e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d13d      	bne.n	80050ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800505c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005066:	d111      	bne.n	800508c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005070:	d004      	beq.n	800507c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800507a:	d107      	bne.n	800508c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800508a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005094:	d10f      	bne.n	80050b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e017      	b.n	80050fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4013      	ands	r3, r2
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	bf0c      	ite	eq
 80050ea:	2301      	moveq	r3, #1
 80050ec:	2300      	movne	r3, #0
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	461a      	mov	r2, r3
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d19b      	bne.n	8005030 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3720      	adds	r7, #32
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	20000008 	.word	0x20000008

08005108 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af02      	add	r7, sp, #8
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005114:	4b1b      	ldr	r3, [pc, #108]	; (8005184 <SPI_EndRxTxTransaction+0x7c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1b      	ldr	r2, [pc, #108]	; (8005188 <SPI_EndRxTxTransaction+0x80>)
 800511a:	fba2 2303 	umull	r2, r3, r2, r3
 800511e:	0d5b      	lsrs	r3, r3, #21
 8005120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005124:	fb02 f303 	mul.w	r3, r2, r3
 8005128:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005132:	d112      	bne.n	800515a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2200      	movs	r2, #0
 800513c:	2180      	movs	r1, #128	; 0x80
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f7ff ff5a 	bl	8004ff8 <SPI_WaitFlagStateUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d016      	beq.n	8005178 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514e:	f043 0220 	orr.w	r2, r3, #32
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e00f      	b.n	800517a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	3b01      	subs	r3, #1
 8005164:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005170:	2b80      	cmp	r3, #128	; 0x80
 8005172:	d0f2      	beq.n	800515a <SPI_EndRxTxTransaction+0x52>
 8005174:	e000      	b.n	8005178 <SPI_EndRxTxTransaction+0x70>
        break;
 8005176:	bf00      	nop
  }

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20000008 	.word	0x20000008
 8005188:	165e9f81 	.word	0x165e9f81

0800518c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e031      	b.n	8005202 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d106      	bne.n	80051b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fd f86c 	bl	8002290 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3304      	adds	r3, #4
 80051c8:	4619      	mov	r1, r3
 80051ca:	4610      	mov	r0, r2
 80051cc:	f000 fa5a 	bl	8005684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	d001      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e03a      	b.n	800529a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005244:	d00e      	beq.n	8005264 <HAL_TIM_Base_Start_IT+0x58>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a16      	ldr	r2, [pc, #88]	; (80052a4 <HAL_TIM_Base_Start_IT+0x98>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d009      	beq.n	8005264 <HAL_TIM_Base_Start_IT+0x58>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a14      	ldr	r2, [pc, #80]	; (80052a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d004      	beq.n	8005264 <HAL_TIM_Base_Start_IT+0x58>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a13      	ldr	r2, [pc, #76]	; (80052ac <HAL_TIM_Base_Start_IT+0xa0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d111      	bne.n	8005288 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b06      	cmp	r3, #6
 8005274:	d010      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0201 	orr.w	r2, r2, #1
 8005284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005286:	e007      	b.n	8005298 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0201 	orr.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	bc80      	pop	{r7}
 80052a2:	4770      	bx	lr
 80052a4:	40000400 	.word	0x40000400
 80052a8:	40000800 	.word	0x40000800
 80052ac:	40010800 	.word	0x40010800

080052b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0201 	bic.w	r2, r2, #1
 80052c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6a1a      	ldr	r2, [r3, #32]
 80052ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80052d2:	4013      	ands	r3, r2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d107      	bne.n	80052e8 <HAL_TIM_Base_Stop_IT+0x38>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0201 	bic.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr

080052fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b02      	cmp	r3, #2
 8005310:	d122      	bne.n	8005358 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b02      	cmp	r3, #2
 800531e:	d11b      	bne.n	8005358 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0202 	mvn.w	r2, #2
 8005328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f985 	bl	800564e <HAL_TIM_IC_CaptureCallback>
 8005344:	e005      	b.n	8005352 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f978 	bl	800563c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f987 	bl	8005660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b04      	cmp	r3, #4
 8005364:	d122      	bne.n	80053ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b04      	cmp	r3, #4
 8005372:	d11b      	bne.n	80053ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0204 	mvn.w	r2, #4
 800537c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2202      	movs	r2, #2
 8005382:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f95b 	bl	800564e <HAL_TIM_IC_CaptureCallback>
 8005398:	e005      	b.n	80053a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f94e 	bl	800563c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f95d 	bl	8005660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d122      	bne.n	8005400 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d11b      	bne.n	8005400 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0208 	mvn.w	r2, #8
 80053d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2204      	movs	r2, #4
 80053d6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f931 	bl	800564e <HAL_TIM_IC_CaptureCallback>
 80053ec:	e005      	b.n	80053fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f924 	bl	800563c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f933 	bl	8005660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f003 0310 	and.w	r3, r3, #16
 800540a:	2b10      	cmp	r3, #16
 800540c:	d122      	bne.n	8005454 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f003 0310 	and.w	r3, r3, #16
 8005418:	2b10      	cmp	r3, #16
 800541a:	d11b      	bne.n	8005454 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f06f 0210 	mvn.w	r2, #16
 8005424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2208      	movs	r2, #8
 800542a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f907 	bl	800564e <HAL_TIM_IC_CaptureCallback>
 8005440:	e005      	b.n	800544e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f8fa 	bl	800563c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f909 	bl	8005660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b01      	cmp	r3, #1
 8005460:	d10e      	bne.n	8005480 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b01      	cmp	r3, #1
 800546e:	d107      	bne.n	8005480 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0201 	mvn.w	r2, #1
 8005478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fb fe4a 	bl	8001114 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548a:	2b40      	cmp	r3, #64	; 0x40
 800548c:	d10e      	bne.n	80054ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005498:	2b40      	cmp	r3, #64	; 0x40
 800549a:	d107      	bne.n	80054ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f8e3 	bl	8005672 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054ac:	bf00      	nop
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_TIM_ConfigClockSource+0x18>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e0b3      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x180>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005504:	d03e      	beq.n	8005584 <HAL_TIM_ConfigClockSource+0xd0>
 8005506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800550a:	f200 8087 	bhi.w	800561c <HAL_TIM_ConfigClockSource+0x168>
 800550e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005512:	f000 8085 	beq.w	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551a:	d87f      	bhi.n	800561c <HAL_TIM_ConfigClockSource+0x168>
 800551c:	2b70      	cmp	r3, #112	; 0x70
 800551e:	d01a      	beq.n	8005556 <HAL_TIM_ConfigClockSource+0xa2>
 8005520:	2b70      	cmp	r3, #112	; 0x70
 8005522:	d87b      	bhi.n	800561c <HAL_TIM_ConfigClockSource+0x168>
 8005524:	2b60      	cmp	r3, #96	; 0x60
 8005526:	d050      	beq.n	80055ca <HAL_TIM_ConfigClockSource+0x116>
 8005528:	2b60      	cmp	r3, #96	; 0x60
 800552a:	d877      	bhi.n	800561c <HAL_TIM_ConfigClockSource+0x168>
 800552c:	2b50      	cmp	r3, #80	; 0x50
 800552e:	d03c      	beq.n	80055aa <HAL_TIM_ConfigClockSource+0xf6>
 8005530:	2b50      	cmp	r3, #80	; 0x50
 8005532:	d873      	bhi.n	800561c <HAL_TIM_ConfigClockSource+0x168>
 8005534:	2b40      	cmp	r3, #64	; 0x40
 8005536:	d058      	beq.n	80055ea <HAL_TIM_ConfigClockSource+0x136>
 8005538:	2b40      	cmp	r3, #64	; 0x40
 800553a:	d86f      	bhi.n	800561c <HAL_TIM_ConfigClockSource+0x168>
 800553c:	2b30      	cmp	r3, #48	; 0x30
 800553e:	d064      	beq.n	800560a <HAL_TIM_ConfigClockSource+0x156>
 8005540:	2b30      	cmp	r3, #48	; 0x30
 8005542:	d86b      	bhi.n	800561c <HAL_TIM_ConfigClockSource+0x168>
 8005544:	2b20      	cmp	r3, #32
 8005546:	d060      	beq.n	800560a <HAL_TIM_ConfigClockSource+0x156>
 8005548:	2b20      	cmp	r3, #32
 800554a:	d867      	bhi.n	800561c <HAL_TIM_ConfigClockSource+0x168>
 800554c:	2b00      	cmp	r3, #0
 800554e:	d05c      	beq.n	800560a <HAL_TIM_ConfigClockSource+0x156>
 8005550:	2b10      	cmp	r3, #16
 8005552:	d05a      	beq.n	800560a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005554:	e062      	b.n	800561c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6818      	ldr	r0, [r3, #0]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	6899      	ldr	r1, [r3, #8]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f000 f974 	bl	8005852 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005578:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	609a      	str	r2, [r3, #8]
      break;
 8005582:	e04e      	b.n	8005622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	6899      	ldr	r1, [r3, #8]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f000 f95d 	bl	8005852 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055a6:	609a      	str	r2, [r3, #8]
      break;
 80055a8:	e03b      	b.n	8005622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6818      	ldr	r0, [r3, #0]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	6859      	ldr	r1, [r3, #4]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	461a      	mov	r2, r3
 80055b8:	f000 f8d4 	bl	8005764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2150      	movs	r1, #80	; 0x50
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 f92b 	bl	800581e <TIM_ITRx_SetConfig>
      break;
 80055c8:	e02b      	b.n	8005622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6818      	ldr	r0, [r3, #0]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	6859      	ldr	r1, [r3, #4]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	461a      	mov	r2, r3
 80055d8:	f000 f8f2 	bl	80057c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2160      	movs	r1, #96	; 0x60
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 f91b 	bl	800581e <TIM_ITRx_SetConfig>
      break;
 80055e8:	e01b      	b.n	8005622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6818      	ldr	r0, [r3, #0]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	6859      	ldr	r1, [r3, #4]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	461a      	mov	r2, r3
 80055f8:	f000 f8b4 	bl	8005764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2140      	movs	r1, #64	; 0x40
 8005602:	4618      	mov	r0, r3
 8005604:	f000 f90b 	bl	800581e <TIM_ITRx_SetConfig>
      break;
 8005608:	e00b      	b.n	8005622 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4619      	mov	r1, r3
 8005614:	4610      	mov	r0, r2
 8005616:	f000 f902 	bl	800581e <TIM_ITRx_SetConfig>
        break;
 800561a:	e002      	b.n	8005622 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800561c:	bf00      	nop
 800561e:	e000      	b.n	8005622 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005620:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	bc80      	pop	{r7}
 800564c:	4770      	bx	lr

0800564e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005656:	bf00      	nop
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	bc80      	pop	{r7}
 800565e:	4770      	bx	lr

08005660 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	bc80      	pop	{r7}
 8005670:	4770      	bx	lr

08005672 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr

08005684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569a:	d00f      	beq.n	80056bc <TIM_Base_SetConfig+0x38>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a2b      	ldr	r2, [pc, #172]	; (800574c <TIM_Base_SetConfig+0xc8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00b      	beq.n	80056bc <TIM_Base_SetConfig+0x38>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a2a      	ldr	r2, [pc, #168]	; (8005750 <TIM_Base_SetConfig+0xcc>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d007      	beq.n	80056bc <TIM_Base_SetConfig+0x38>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a29      	ldr	r2, [pc, #164]	; (8005754 <TIM_Base_SetConfig+0xd0>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_Base_SetConfig+0x38>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a28      	ldr	r2, [pc, #160]	; (8005758 <TIM_Base_SetConfig+0xd4>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d108      	bne.n	80056ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d4:	d017      	beq.n	8005706 <TIM_Base_SetConfig+0x82>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a1c      	ldr	r2, [pc, #112]	; (800574c <TIM_Base_SetConfig+0xc8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d013      	beq.n	8005706 <TIM_Base_SetConfig+0x82>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a1b      	ldr	r2, [pc, #108]	; (8005750 <TIM_Base_SetConfig+0xcc>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00f      	beq.n	8005706 <TIM_Base_SetConfig+0x82>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a1a      	ldr	r2, [pc, #104]	; (8005754 <TIM_Base_SetConfig+0xd0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00b      	beq.n	8005706 <TIM_Base_SetConfig+0x82>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a19      	ldr	r2, [pc, #100]	; (8005758 <TIM_Base_SetConfig+0xd4>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d007      	beq.n	8005706 <TIM_Base_SetConfig+0x82>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a18      	ldr	r2, [pc, #96]	; (800575c <TIM_Base_SetConfig+0xd8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d003      	beq.n	8005706 <TIM_Base_SetConfig+0x82>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a17      	ldr	r2, [pc, #92]	; (8005760 <TIM_Base_SetConfig+0xdc>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d108      	bne.n	8005718 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4313      	orrs	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	615a      	str	r2, [r3, #20]
}
 8005742:	bf00      	nop
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr
 800574c:	40000400 	.word	0x40000400
 8005750:	40000800 	.word	0x40000800
 8005754:	40000c00 	.word	0x40000c00
 8005758:	40010800 	.word	0x40010800
 800575c:	40010c00 	.word	0x40010c00
 8005760:	40011000 	.word	0x40011000

08005764 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f023 0201 	bic.w	r2, r3, #1
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800578e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4313      	orrs	r3, r2
 8005798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f023 030a 	bic.w	r3, r3, #10
 80057a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	621a      	str	r2, [r3, #32]
}
 80057b6:	bf00      	nop
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr

080057c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	f023 0210 	bic.w	r2, r3, #16
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	031b      	lsls	r3, r3, #12
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	621a      	str	r2, [r3, #32]
}
 8005814:	bf00      	nop
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	bc80      	pop	{r7}
 800581c:	4770      	bx	lr

0800581e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800581e:	b480      	push	{r7}
 8005820:	b085      	sub	sp, #20
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005834:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4313      	orrs	r3, r2
 800583c:	f043 0307 	orr.w	r3, r3, #7
 8005840:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	609a      	str	r2, [r3, #8]
}
 8005848:	bf00      	nop
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr

08005852 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005852:	b480      	push	{r7}
 8005854:	b087      	sub	sp, #28
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	607a      	str	r2, [r7, #4]
 800585e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800586c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	021a      	lsls	r2, r3, #8
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	431a      	orrs	r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	4313      	orrs	r3, r2
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	609a      	str	r2, [r3, #8]
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	bc80      	pop	{r7}
 800588e:	4770      	bx	lr

08005890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d101      	bne.n	80058a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a4:	2302      	movs	r3, #2
 80058a6:	e046      	b.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ea:	d00e      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a13      	ldr	r2, [pc, #76]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d009      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a12      	ldr	r2, [pc, #72]	; (8005944 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d004      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a10      	ldr	r2, [pc, #64]	; (8005948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d10c      	bne.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005910:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	4313      	orrs	r3, r2
 800591a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr
 8005940:	40000400 	.word	0x40000400
 8005944:	40000800 	.word	0x40000800
 8005948:	40010800 	.word	0x40010800

0800594c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e03f      	b.n	80059de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fc fd04 	bl	8002380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2224      	movs	r2, #36	; 0x24
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800598e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f829 	bl	80059e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695a      	ldr	r2, [r3, #20]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	689a      	ldr	r2, [r3, #8]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	431a      	orrs	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005a28:	f023 030c 	bic.w	r3, r3, #12
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6812      	ldr	r2, [r2, #0]
 8005a30:	68b9      	ldr	r1, [r7, #8]
 8005a32:	430b      	orrs	r3, r1
 8005a34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699a      	ldr	r2, [r3, #24]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a55      	ldr	r2, [pc, #340]	; (8005ba8 <UART_SetConfig+0x1c0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d103      	bne.n	8005a5e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a56:	f7fe fef3 	bl	8004840 <HAL_RCC_GetPCLK2Freq>
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	e002      	b.n	8005a64 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a5e:	f7fe fedb 	bl	8004818 <HAL_RCC_GetPCLK1Freq>
 8005a62:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a6c:	d14c      	bne.n	8005b08 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	009a      	lsls	r2, r3, #2
 8005a78:	441a      	add	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a84:	4a49      	ldr	r2, [pc, #292]	; (8005bac <UART_SetConfig+0x1c4>)
 8005a86:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	0119      	lsls	r1, r3, #4
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4613      	mov	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	009a      	lsls	r2, r3, #2
 8005a98:	441a      	add	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005aa4:	4b41      	ldr	r3, [pc, #260]	; (8005bac <UART_SetConfig+0x1c4>)
 8005aa6:	fba3 0302 	umull	r0, r3, r3, r2
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	2064      	movs	r0, #100	; 0x64
 8005aae:	fb00 f303 	mul.w	r3, r0, r3
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	3332      	adds	r3, #50	; 0x32
 8005ab8:	4a3c      	ldr	r2, [pc, #240]	; (8005bac <UART_SetConfig+0x1c4>)
 8005aba:	fba2 2303 	umull	r2, r3, r2, r3
 8005abe:	095b      	lsrs	r3, r3, #5
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ac6:	4419      	add	r1, r3
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4613      	mov	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	009a      	lsls	r2, r3, #2
 8005ad2:	441a      	add	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ade:	4b33      	ldr	r3, [pc, #204]	; (8005bac <UART_SetConfig+0x1c4>)
 8005ae0:	fba3 0302 	umull	r0, r3, r3, r2
 8005ae4:	095b      	lsrs	r3, r3, #5
 8005ae6:	2064      	movs	r0, #100	; 0x64
 8005ae8:	fb00 f303 	mul.w	r3, r0, r3
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	3332      	adds	r3, #50	; 0x32
 8005af2:	4a2e      	ldr	r2, [pc, #184]	; (8005bac <UART_SetConfig+0x1c4>)
 8005af4:	fba2 2303 	umull	r2, r3, r2, r3
 8005af8:	095b      	lsrs	r3, r3, #5
 8005afa:	f003 0207 	and.w	r2, r3, #7
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	440a      	add	r2, r1
 8005b04:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b06:	e04a      	b.n	8005b9e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	009a      	lsls	r2, r3, #2
 8005b12:	441a      	add	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1e:	4a23      	ldr	r2, [pc, #140]	; (8005bac <UART_SetConfig+0x1c4>)
 8005b20:	fba2 2303 	umull	r2, r3, r2, r3
 8005b24:	095b      	lsrs	r3, r3, #5
 8005b26:	0119      	lsls	r1, r3, #4
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	009a      	lsls	r2, r3, #2
 8005b32:	441a      	add	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b3e:	4b1b      	ldr	r3, [pc, #108]	; (8005bac <UART_SetConfig+0x1c4>)
 8005b40:	fba3 0302 	umull	r0, r3, r3, r2
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	2064      	movs	r0, #100	; 0x64
 8005b48:	fb00 f303 	mul.w	r3, r0, r3
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	3332      	adds	r3, #50	; 0x32
 8005b52:	4a16      	ldr	r2, [pc, #88]	; (8005bac <UART_SetConfig+0x1c4>)
 8005b54:	fba2 2303 	umull	r2, r3, r2, r3
 8005b58:	095b      	lsrs	r3, r3, #5
 8005b5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b5e:	4419      	add	r1, r3
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	009a      	lsls	r2, r3, #2
 8005b6a:	441a      	add	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b76:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <UART_SetConfig+0x1c4>)
 8005b78:	fba3 0302 	umull	r0, r3, r3, r2
 8005b7c:	095b      	lsrs	r3, r3, #5
 8005b7e:	2064      	movs	r0, #100	; 0x64
 8005b80:	fb00 f303 	mul.w	r3, r0, r3
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	3332      	adds	r3, #50	; 0x32
 8005b8a:	4a08      	ldr	r2, [pc, #32]	; (8005bac <UART_SetConfig+0x1c4>)
 8005b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b90:	095b      	lsrs	r3, r3, #5
 8005b92:	f003 020f 	and.w	r2, r3, #15
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	440a      	add	r2, r1
 8005b9c:	609a      	str	r2, [r3, #8]
}
 8005b9e:	bf00      	nop
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	40013800 	.word	0x40013800
 8005bac:	51eb851f 	.word	0x51eb851f

08005bb0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005bb4:	4904      	ldr	r1, [pc, #16]	; (8005bc8 <MX_FATFS_Init+0x18>)
 8005bb6:	4805      	ldr	r0, [pc, #20]	; (8005bcc <MX_FATFS_Init+0x1c>)
 8005bb8:	f000 fd8a 	bl	80066d0 <FATFS_LinkDriver>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	4b03      	ldr	r3, [pc, #12]	; (8005bd0 <MX_FATFS_Init+0x20>)
 8005bc2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005bc4:	bf00      	nop
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	20000b64 	.word	0x20000b64
 8005bcc:	200000a0 	.word	0x200000a0
 8005bd0:	20000b68 	.word	0x20000b68

08005bd4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 f9d9 	bl	8005f98 <USER_SPI_initialize>
 8005be6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8005bfa:	79fb      	ldrb	r3, [r7, #7]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 fab7 	bl	8006170 <USER_SPI_status>
 8005c02:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60b9      	str	r1, [r7, #8]
 8005c14:	607a      	str	r2, [r7, #4]
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	4603      	mov	r3, r0
 8005c1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8005c1c:	7bf8      	ldrb	r0, [r7, #15]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	f000 fab8 	bl	8006198 <USER_SPI_read>
 8005c28:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	603b      	str	r3, [r7, #0]
 8005c3e:	4603      	mov	r3, r0
 8005c40:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8005c42:	7bf8      	ldrb	r0, [r7, #15]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	68b9      	ldr	r1, [r7, #8]
 8005c4a:	f000 fb0b 	bl	8006264 <USER_SPI_write>
 8005c4e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	4603      	mov	r3, r0
 8005c60:	603a      	str	r2, [r7, #0]
 8005c62:	71fb      	strb	r3, [r7, #7]
 8005c64:	460b      	mov	r3, r1
 8005c66:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8005c68:	79b9      	ldrb	r1, [r7, #6]
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 fb74 	bl	800635c <USER_SPI_ioctl>
 8005c74:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005c88:	f7fd fc0c 	bl	80034a4 <HAL_GetTick>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	4a04      	ldr	r2, [pc, #16]	; (8005ca0 <SPI_Timer_On+0x20>)
 8005c90:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8005c92:	4a04      	ldr	r2, [pc, #16]	; (8005ca4 <SPI_Timer_On+0x24>)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6013      	str	r3, [r2, #0]
}
 8005c98:	bf00      	nop
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	20000fcc 	.word	0x20000fcc
 8005ca4:	20000fd0 	.word	0x20000fd0

08005ca8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005cac:	f7fd fbfa 	bl	80034a4 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	4b06      	ldr	r3, [pc, #24]	; (8005ccc <SPI_Timer_Status+0x24>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	1ad2      	subs	r2, r2, r3
 8005cb8:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <SPI_Timer_Status+0x28>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	bf34      	ite	cc
 8005cc0:	2301      	movcc	r3, #1
 8005cc2:	2300      	movcs	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000fcc 	.word	0x20000fcc
 8005cd0:	20000fd0 	.word	0x20000fd0

08005cd4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af02      	add	r7, sp, #8
 8005cda:	4603      	mov	r3, r0
 8005cdc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005cde:	f107 020f 	add.w	r2, r7, #15
 8005ce2:	1df9      	adds	r1, r7, #7
 8005ce4:	2332      	movs	r3, #50	; 0x32
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	2301      	movs	r3, #1
 8005cea:	4804      	ldr	r0, [pc, #16]	; (8005cfc <xchg_spi+0x28>)
 8005cec:	f7fe ffe1 	bl	8004cb2 <HAL_SPI_TransmitReceive>
    return rxDat;
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	200007d4 	.word	0x200007d4

08005d00 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005d00:	b590      	push	{r4, r7, lr}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	e00a      	b.n	8005d26 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	18d4      	adds	r4, r2, r3
 8005d16:	20ff      	movs	r0, #255	; 0xff
 8005d18:	f7ff ffdc 	bl	8005cd4 <xchg_spi>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3301      	adds	r3, #1
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d3f0      	bcc.n	8005d10 <rcvr_spi_multi+0x10>
	}
}
 8005d2e:	bf00      	nop
 8005d30:	bf00      	nop
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd90      	pop	{r4, r7, pc}

08005d38 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	e009      	b.n	8005d5c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff ffbf 	bl	8005cd4 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d3f1      	bcc.n	8005d48 <xmit_spi_multi+0x10>
	}
}
 8005d64:	bf00      	nop
 8005d66:	bf00      	nop
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b086      	sub	sp, #24
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005d76:	f7fd fb95 	bl	80034a4 <HAL_GetTick>
 8005d7a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005d80:	20ff      	movs	r0, #255	; 0xff
 8005d82:	f7ff ffa7 	bl	8005cd4 <xchg_spi>
 8005d86:	4603      	mov	r3, r0
 8005d88:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	2bff      	cmp	r3, #255	; 0xff
 8005d8e:	d007      	beq.n	8005da0 <wait_ready+0x32>
 8005d90:	f7fd fb88 	bl	80034a4 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d8ef      	bhi.n	8005d80 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
 8005da2:	2bff      	cmp	r3, #255	; 0xff
 8005da4:	bf0c      	ite	eq
 8005da6:	2301      	moveq	r3, #1
 8005da8:	2300      	movne	r3, #0
 8005daa:	b2db      	uxtb	r3, r3
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005db8:	2201      	movs	r2, #1
 8005dba:	2101      	movs	r1, #1
 8005dbc:	4803      	ldr	r0, [pc, #12]	; (8005dcc <despiselect+0x18>)
 8005dbe:	f7fd ffe6 	bl	8003d8e <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005dc2:	20ff      	movs	r0, #255	; 0xff
 8005dc4:	f7ff ff86 	bl	8005cd4 <xchg_spi>

}
 8005dc8:	bf00      	nop
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	40020c00 	.word	0x40020c00

08005dd0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	4809      	ldr	r0, [pc, #36]	; (8005e00 <spiselect+0x30>)
 8005dda:	f7fd ffd8 	bl	8003d8e <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8005dde:	20ff      	movs	r0, #255	; 0xff
 8005de0:	f7ff ff78 	bl	8005cd4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005de4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005de8:	f7ff ffc1 	bl	8005d6e <wait_ready>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <spiselect+0x26>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e002      	b.n	8005dfc <spiselect+0x2c>

	despiselect();
 8005df6:	f7ff ffdd 	bl	8005db4 <despiselect>
	return 0;	/* Timeout */
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	40020c00 	.word	0x40020c00

08005e04 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8005e0e:	20c8      	movs	r0, #200	; 0xc8
 8005e10:	f7ff ff36 	bl	8005c80 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005e14:	20ff      	movs	r0, #255	; 0xff
 8005e16:	f7ff ff5d 	bl	8005cd4 <xchg_spi>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
 8005e20:	2bff      	cmp	r3, #255	; 0xff
 8005e22:	d104      	bne.n	8005e2e <rcvr_datablock+0x2a>
 8005e24:	f7ff ff40 	bl	8005ca8 <SPI_Timer_Status>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f2      	bne.n	8005e14 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	2bfe      	cmp	r3, #254	; 0xfe
 8005e32:	d001      	beq.n	8005e38 <rcvr_datablock+0x34>
 8005e34:	2300      	movs	r3, #0
 8005e36:	e00a      	b.n	8005e4e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7ff ff60 	bl	8005d00 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005e40:	20ff      	movs	r0, #255	; 0xff
 8005e42:	f7ff ff47 	bl	8005cd4 <xchg_spi>
 8005e46:	20ff      	movs	r0, #255	; 0xff
 8005e48:	f7ff ff44 	bl	8005cd4 <xchg_spi>

	return 1;						/* Function succeeded */
 8005e4c:	2301      	movs	r3, #1
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	460b      	mov	r3, r1
 8005e60:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8005e62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e66:	f7ff ff82 	bl	8005d6e <wait_ready>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <xmit_datablock+0x1e>
 8005e70:	2300      	movs	r3, #0
 8005e72:	e01e      	b.n	8005eb2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff ff2c 	bl	8005cd4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005e7c:	78fb      	ldrb	r3, [r7, #3]
 8005e7e:	2bfd      	cmp	r3, #253	; 0xfd
 8005e80:	d016      	beq.n	8005eb0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8005e82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff ff56 	bl	8005d38 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8005e8c:	20ff      	movs	r0, #255	; 0xff
 8005e8e:	f7ff ff21 	bl	8005cd4 <xchg_spi>
 8005e92:	20ff      	movs	r0, #255	; 0xff
 8005e94:	f7ff ff1e 	bl	8005cd4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005e98:	20ff      	movs	r0, #255	; 0xff
 8005e9a:	f7ff ff1b 	bl	8005cd4 <xchg_spi>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	f003 031f 	and.w	r3, r3, #31
 8005ea8:	2b05      	cmp	r3, #5
 8005eaa:	d001      	beq.n	8005eb0 <xmit_datablock+0x5a>
 8005eac:	2300      	movs	r3, #0
 8005eae:	e000      	b.n	8005eb2 <xmit_datablock+0x5c>
	}
	return 1;
 8005eb0:	2301      	movs	r3, #1
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	6039      	str	r1, [r7, #0]
 8005ec4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8005ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	da0e      	bge.n	8005eec <send_cmd+0x32>
		cmd &= 0x7F;
 8005ece:	79fb      	ldrb	r3, [r7, #7]
 8005ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ed4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	2037      	movs	r0, #55	; 0x37
 8005eda:	f7ff ffee 	bl	8005eba <send_cmd>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8005ee2:	7bbb      	ldrb	r3, [r7, #14]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d901      	bls.n	8005eec <send_cmd+0x32>
 8005ee8:	7bbb      	ldrb	r3, [r7, #14]
 8005eea:	e051      	b.n	8005f90 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005eec:	79fb      	ldrb	r3, [r7, #7]
 8005eee:	2b0c      	cmp	r3, #12
 8005ef0:	d008      	beq.n	8005f04 <send_cmd+0x4a>
		despiselect();
 8005ef2:	f7ff ff5f 	bl	8005db4 <despiselect>
		if (!spiselect()) return 0xFF;
 8005ef6:	f7ff ff6b 	bl	8005dd0 <spiselect>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <send_cmd+0x4a>
 8005f00:	23ff      	movs	r3, #255	; 0xff
 8005f02:	e045      	b.n	8005f90 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005f04:	79fb      	ldrb	r3, [r7, #7]
 8005f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff fee1 	bl	8005cd4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	0e1b      	lsrs	r3, r3, #24
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7ff fedb 	bl	8005cd4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	0c1b      	lsrs	r3, r3, #16
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff fed5 	bl	8005cd4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	0a1b      	lsrs	r3, r3, #8
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff fecf 	bl	8005cd4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7ff feca 	bl	8005cd4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005f40:	2301      	movs	r3, #1
 8005f42:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <send_cmd+0x94>
 8005f4a:	2395      	movs	r3, #149	; 0x95
 8005f4c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8005f4e:	79fb      	ldrb	r3, [r7, #7]
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d101      	bne.n	8005f58 <send_cmd+0x9e>
 8005f54:	2387      	movs	r3, #135	; 0x87
 8005f56:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff feba 	bl	8005cd4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005f60:	79fb      	ldrb	r3, [r7, #7]
 8005f62:	2b0c      	cmp	r3, #12
 8005f64:	d102      	bne.n	8005f6c <send_cmd+0xb2>
 8005f66:	20ff      	movs	r0, #255	; 0xff
 8005f68:	f7ff feb4 	bl	8005cd4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005f6c:	230a      	movs	r3, #10
 8005f6e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8005f70:	20ff      	movs	r0, #255	; 0xff
 8005f72:	f7ff feaf 	bl	8005cd4 <xchg_spi>
 8005f76:	4603      	mov	r3, r0
 8005f78:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8005f7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	da05      	bge.n	8005f8e <send_cmd+0xd4>
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
 8005f84:	3b01      	subs	r3, #1
 8005f86:	73fb      	strb	r3, [r7, #15]
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1f0      	bne.n	8005f70 <send_cmd+0xb6>

	return res;							/* Return received response */
 8005f8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005f98:	b590      	push	{r4, r7, lr}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8005fa2:	79fb      	ldrb	r3, [r7, #7]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <USER_SPI_initialize+0x14>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e0d6      	b.n	800615a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005fac:	4b6d      	ldr	r3, [pc, #436]	; (8006164 <USER_SPI_initialize+0x1cc>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <USER_SPI_initialize+0x2a>
 8005fba:	4b6a      	ldr	r3, [pc, #424]	; (8006164 <USER_SPI_initialize+0x1cc>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	e0cb      	b.n	800615a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8005fc2:	4b69      	ldr	r3, [pc, #420]	; (8006168 <USER_SPI_initialize+0x1d0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005fcc:	4b66      	ldr	r3, [pc, #408]	; (8006168 <USER_SPI_initialize+0x1d0>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8005fd4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8005fd6:	230a      	movs	r3, #10
 8005fd8:	73fb      	strb	r3, [r7, #15]
 8005fda:	e005      	b.n	8005fe8 <USER_SPI_initialize+0x50>
 8005fdc:	20ff      	movs	r0, #255	; 0xff
 8005fde:	f7ff fe79 	bl	8005cd4 <xchg_spi>
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	73fb      	strb	r3, [r7, #15]
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1f6      	bne.n	8005fdc <USER_SPI_initialize+0x44>

	ty = 0;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	f7ff ff60 	bl	8005eba <send_cmd>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	f040 808b 	bne.w	8006118 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006002:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006006:	f7ff fe3b 	bl	8005c80 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800600a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800600e:	2008      	movs	r0, #8
 8006010:	f7ff ff53 	bl	8005eba <send_cmd>
 8006014:	4603      	mov	r3, r0
 8006016:	2b01      	cmp	r3, #1
 8006018:	d151      	bne.n	80060be <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800601a:	2300      	movs	r3, #0
 800601c:	73fb      	strb	r3, [r7, #15]
 800601e:	e00d      	b.n	800603c <USER_SPI_initialize+0xa4>
 8006020:	7bfc      	ldrb	r4, [r7, #15]
 8006022:	20ff      	movs	r0, #255	; 0xff
 8006024:	f7ff fe56 	bl	8005cd4 <xchg_spi>
 8006028:	4603      	mov	r3, r0
 800602a:	461a      	mov	r2, r3
 800602c:	f107 0310 	add.w	r3, r7, #16
 8006030:	4423      	add	r3, r4
 8006032:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006036:	7bfb      	ldrb	r3, [r7, #15]
 8006038:	3301      	adds	r3, #1
 800603a:	73fb      	strb	r3, [r7, #15]
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	2b03      	cmp	r3, #3
 8006040:	d9ee      	bls.n	8006020 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006042:	7abb      	ldrb	r3, [r7, #10]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d167      	bne.n	8006118 <USER_SPI_initialize+0x180>
 8006048:	7afb      	ldrb	r3, [r7, #11]
 800604a:	2baa      	cmp	r3, #170	; 0xaa
 800604c:	d164      	bne.n	8006118 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800604e:	bf00      	nop
 8006050:	f7ff fe2a 	bl	8005ca8 <SPI_Timer_Status>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d007      	beq.n	800606a <USER_SPI_initialize+0xd2>
 800605a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800605e:	20a9      	movs	r0, #169	; 0xa9
 8006060:	f7ff ff2b 	bl	8005eba <send_cmd>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1f2      	bne.n	8006050 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800606a:	f7ff fe1d 	bl	8005ca8 <SPI_Timer_Status>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d051      	beq.n	8006118 <USER_SPI_initialize+0x180>
 8006074:	2100      	movs	r1, #0
 8006076:	203a      	movs	r0, #58	; 0x3a
 8006078:	f7ff ff1f 	bl	8005eba <send_cmd>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d14a      	bne.n	8006118 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006082:	2300      	movs	r3, #0
 8006084:	73fb      	strb	r3, [r7, #15]
 8006086:	e00d      	b.n	80060a4 <USER_SPI_initialize+0x10c>
 8006088:	7bfc      	ldrb	r4, [r7, #15]
 800608a:	20ff      	movs	r0, #255	; 0xff
 800608c:	f7ff fe22 	bl	8005cd4 <xchg_spi>
 8006090:	4603      	mov	r3, r0
 8006092:	461a      	mov	r2, r3
 8006094:	f107 0310 	add.w	r3, r7, #16
 8006098:	4423      	add	r3, r4
 800609a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800609e:	7bfb      	ldrb	r3, [r7, #15]
 80060a0:	3301      	adds	r3, #1
 80060a2:	73fb      	strb	r3, [r7, #15]
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	d9ee      	bls.n	8006088 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80060aa:	7a3b      	ldrb	r3, [r7, #8]
 80060ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <USER_SPI_initialize+0x120>
 80060b4:	230c      	movs	r3, #12
 80060b6:	e000      	b.n	80060ba <USER_SPI_initialize+0x122>
 80060b8:	2304      	movs	r3, #4
 80060ba:	737b      	strb	r3, [r7, #13]
 80060bc:	e02c      	b.n	8006118 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80060be:	2100      	movs	r1, #0
 80060c0:	20a9      	movs	r0, #169	; 0xa9
 80060c2:	f7ff fefa 	bl	8005eba <send_cmd>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d804      	bhi.n	80060d6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80060cc:	2302      	movs	r3, #2
 80060ce:	737b      	strb	r3, [r7, #13]
 80060d0:	23a9      	movs	r3, #169	; 0xa9
 80060d2:	73bb      	strb	r3, [r7, #14]
 80060d4:	e003      	b.n	80060de <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80060d6:	2301      	movs	r3, #1
 80060d8:	737b      	strb	r3, [r7, #13]
 80060da:	2301      	movs	r3, #1
 80060dc:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80060de:	bf00      	nop
 80060e0:	f7ff fde2 	bl	8005ca8 <SPI_Timer_Status>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d007      	beq.n	80060fa <USER_SPI_initialize+0x162>
 80060ea:	7bbb      	ldrb	r3, [r7, #14]
 80060ec:	2100      	movs	r1, #0
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff fee3 	bl	8005eba <send_cmd>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1f2      	bne.n	80060e0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80060fa:	f7ff fdd5 	bl	8005ca8 <SPI_Timer_Status>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d007      	beq.n	8006114 <USER_SPI_initialize+0x17c>
 8006104:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006108:	2010      	movs	r0, #16
 800610a:	f7ff fed6 	bl	8005eba <send_cmd>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <USER_SPI_initialize+0x180>
				ty = 0;
 8006114:	2300      	movs	r3, #0
 8006116:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006118:	4a14      	ldr	r2, [pc, #80]	; (800616c <USER_SPI_initialize+0x1d4>)
 800611a:	7b7b      	ldrb	r3, [r7, #13]
 800611c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800611e:	f7ff fe49 	bl	8005db4 <despiselect>

	if (ty) {			/* OK */
 8006122:	7b7b      	ldrb	r3, [r7, #13]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d012      	beq.n	800614e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006128:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <USER_SPI_initialize+0x1d0>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006132:	4b0d      	ldr	r3, [pc, #52]	; (8006168 <USER_SPI_initialize+0x1d0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0210 	orr.w	r2, r2, #16
 800613a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800613c:	4b09      	ldr	r3, [pc, #36]	; (8006164 <USER_SPI_initialize+0x1cc>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	b2db      	uxtb	r3, r3
 8006142:	f023 0301 	bic.w	r3, r3, #1
 8006146:	b2da      	uxtb	r2, r3
 8006148:	4b06      	ldr	r3, [pc, #24]	; (8006164 <USER_SPI_initialize+0x1cc>)
 800614a:	701a      	strb	r2, [r3, #0]
 800614c:	e002      	b.n	8006154 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800614e:	4b05      	ldr	r3, [pc, #20]	; (8006164 <USER_SPI_initialize+0x1cc>)
 8006150:	2201      	movs	r2, #1
 8006152:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006154:	4b03      	ldr	r3, [pc, #12]	; (8006164 <USER_SPI_initialize+0x1cc>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	b2db      	uxtb	r3, r3
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	bd90      	pop	{r4, r7, pc}
 8006162:	bf00      	nop
 8006164:	200000b4 	.word	0x200000b4
 8006168:	200007d4 	.word	0x200007d4
 800616c:	200006a4 	.word	0x200006a4

08006170 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	4603      	mov	r3, r0
 8006178:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800617a:	79fb      	ldrb	r3, [r7, #7]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <USER_SPI_status+0x14>
 8006180:	2301      	movs	r3, #1
 8006182:	e002      	b.n	800618a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006184:	4b03      	ldr	r3, [pc, #12]	; (8006194 <USER_SPI_status+0x24>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	b2db      	uxtb	r3, r3
}
 800618a:	4618      	mov	r0, r3
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	bc80      	pop	{r7}
 8006192:	4770      	bx	lr
 8006194:	200000b4 	.word	0x200000b4

08006198 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	60b9      	str	r1, [r7, #8]
 80061a0:	607a      	str	r2, [r7, #4]
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	4603      	mov	r3, r0
 80061a6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d102      	bne.n	80061b4 <USER_SPI_read+0x1c>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <USER_SPI_read+0x20>
 80061b4:	2304      	movs	r3, #4
 80061b6:	e04d      	b.n	8006254 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80061b8:	4b28      	ldr	r3, [pc, #160]	; (800625c <USER_SPI_read+0xc4>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <USER_SPI_read+0x32>
 80061c6:	2303      	movs	r3, #3
 80061c8:	e044      	b.n	8006254 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80061ca:	4b25      	ldr	r3, [pc, #148]	; (8006260 <USER_SPI_read+0xc8>)
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	f003 0308 	and.w	r3, r3, #8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d102      	bne.n	80061dc <USER_SPI_read+0x44>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	025b      	lsls	r3, r3, #9
 80061da:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d111      	bne.n	8006206 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	2011      	movs	r0, #17
 80061e6:	f7ff fe68 	bl	8005eba <send_cmd>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d129      	bne.n	8006244 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80061f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061f4:	68b8      	ldr	r0, [r7, #8]
 80061f6:	f7ff fe05 	bl	8005e04 <rcvr_datablock>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d021      	beq.n	8006244 <USER_SPI_read+0xac>
			count = 0;
 8006200:	2300      	movs	r3, #0
 8006202:	603b      	str	r3, [r7, #0]
 8006204:	e01e      	b.n	8006244 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006206:	6879      	ldr	r1, [r7, #4]
 8006208:	2012      	movs	r0, #18
 800620a:	f7ff fe56 	bl	8005eba <send_cmd>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d117      	bne.n	8006244 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006214:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006218:	68b8      	ldr	r0, [r7, #8]
 800621a:	f7ff fdf3 	bl	8005e04 <rcvr_datablock>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00a      	beq.n	800623a <USER_SPI_read+0xa2>
				buff += 512;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800622a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	3b01      	subs	r3, #1
 8006230:	603b      	str	r3, [r7, #0]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1ed      	bne.n	8006214 <USER_SPI_read+0x7c>
 8006238:	e000      	b.n	800623c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800623a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800623c:	2100      	movs	r1, #0
 800623e:	200c      	movs	r0, #12
 8006240:	f7ff fe3b 	bl	8005eba <send_cmd>
		}
	}
	despiselect();
 8006244:	f7ff fdb6 	bl	8005db4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	bf14      	ite	ne
 800624e:	2301      	movne	r3, #1
 8006250:	2300      	moveq	r3, #0
 8006252:	b2db      	uxtb	r3, r3
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	200000b4 	.word	0x200000b4
 8006260:	200006a4 	.word	0x200006a4

08006264 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	607a      	str	r2, [r7, #4]
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	4603      	mov	r3, r0
 8006272:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d102      	bne.n	8006280 <USER_SPI_write+0x1c>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <USER_SPI_write+0x20>
 8006280:	2304      	movs	r3, #4
 8006282:	e063      	b.n	800634c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006284:	4b33      	ldr	r3, [pc, #204]	; (8006354 <USER_SPI_write+0xf0>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <USER_SPI_write+0x32>
 8006292:	2303      	movs	r3, #3
 8006294:	e05a      	b.n	800634c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006296:	4b2f      	ldr	r3, [pc, #188]	; (8006354 <USER_SPI_write+0xf0>)
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	b2db      	uxtb	r3, r3
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <USER_SPI_write+0x44>
 80062a4:	2302      	movs	r3, #2
 80062a6:	e051      	b.n	800634c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80062a8:	4b2b      	ldr	r3, [pc, #172]	; (8006358 <USER_SPI_write+0xf4>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	f003 0308 	and.w	r3, r3, #8
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d102      	bne.n	80062ba <USER_SPI_write+0x56>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	025b      	lsls	r3, r3, #9
 80062b8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d110      	bne.n	80062e2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80062c0:	6879      	ldr	r1, [r7, #4]
 80062c2:	2018      	movs	r0, #24
 80062c4:	f7ff fdf9 	bl	8005eba <send_cmd>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d136      	bne.n	800633c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80062ce:	21fe      	movs	r1, #254	; 0xfe
 80062d0:	68b8      	ldr	r0, [r7, #8]
 80062d2:	f7ff fdc0 	bl	8005e56 <xmit_datablock>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d02f      	beq.n	800633c <USER_SPI_write+0xd8>
			count = 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	e02c      	b.n	800633c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80062e2:	4b1d      	ldr	r3, [pc, #116]	; (8006358 <USER_SPI_write+0xf4>)
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	f003 0306 	and.w	r3, r3, #6
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <USER_SPI_write+0x92>
 80062ee:	6839      	ldr	r1, [r7, #0]
 80062f0:	2097      	movs	r0, #151	; 0x97
 80062f2:	f7ff fde2 	bl	8005eba <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	2019      	movs	r0, #25
 80062fa:	f7ff fdde 	bl	8005eba <send_cmd>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d11b      	bne.n	800633c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006304:	21fc      	movs	r1, #252	; 0xfc
 8006306:	68b8      	ldr	r0, [r7, #8]
 8006308:	f7ff fda5 	bl	8005e56 <xmit_datablock>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <USER_SPI_write+0xc4>
				buff += 512;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006318:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	3b01      	subs	r3, #1
 800631e:	603b      	str	r3, [r7, #0]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1ee      	bne.n	8006304 <USER_SPI_write+0xa0>
 8006326:	e000      	b.n	800632a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006328:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800632a:	21fd      	movs	r1, #253	; 0xfd
 800632c:	2000      	movs	r0, #0
 800632e:	f7ff fd92 	bl	8005e56 <xmit_datablock>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <USER_SPI_write+0xd8>
 8006338:	2301      	movs	r3, #1
 800633a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800633c:	f7ff fd3a 	bl	8005db4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	bf14      	ite	ne
 8006346:	2301      	movne	r3, #1
 8006348:	2300      	moveq	r3, #0
 800634a:	b2db      	uxtb	r3, r3
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	200000b4 	.word	0x200000b4
 8006358:	200006a4 	.word	0x200006a4

0800635c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08c      	sub	sp, #48	; 0x30
 8006360:	af00      	add	r7, sp, #0
 8006362:	4603      	mov	r3, r0
 8006364:	603a      	str	r2, [r7, #0]
 8006366:	71fb      	strb	r3, [r7, #7]
 8006368:	460b      	mov	r3, r1
 800636a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800636c:	79fb      	ldrb	r3, [r7, #7]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <USER_SPI_ioctl+0x1a>
 8006372:	2304      	movs	r3, #4
 8006374:	e15a      	b.n	800662c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006376:	4baf      	ldr	r3, [pc, #700]	; (8006634 <USER_SPI_ioctl+0x2d8>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	b2db      	uxtb	r3, r3
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <USER_SPI_ioctl+0x2c>
 8006384:	2303      	movs	r3, #3
 8006386:	e151      	b.n	800662c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800638e:	79bb      	ldrb	r3, [r7, #6]
 8006390:	2b04      	cmp	r3, #4
 8006392:	f200 8136 	bhi.w	8006602 <USER_SPI_ioctl+0x2a6>
 8006396:	a201      	add	r2, pc, #4	; (adr r2, 800639c <USER_SPI_ioctl+0x40>)
 8006398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639c:	080063b1 	.word	0x080063b1
 80063a0:	080063c5 	.word	0x080063c5
 80063a4:	08006603 	.word	0x08006603
 80063a8:	08006471 	.word	0x08006471
 80063ac:	08006567 	.word	0x08006567
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80063b0:	f7ff fd0e 	bl	8005dd0 <spiselect>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f000 8127 	beq.w	800660a <USER_SPI_ioctl+0x2ae>
 80063bc:	2300      	movs	r3, #0
 80063be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80063c2:	e122      	b.n	800660a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80063c4:	2100      	movs	r1, #0
 80063c6:	2009      	movs	r0, #9
 80063c8:	f7ff fd77 	bl	8005eba <send_cmd>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f040 811d 	bne.w	800660e <USER_SPI_ioctl+0x2b2>
 80063d4:	f107 030c 	add.w	r3, r7, #12
 80063d8:	2110      	movs	r1, #16
 80063da:	4618      	mov	r0, r3
 80063dc:	f7ff fd12 	bl	8005e04 <rcvr_datablock>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 8113 	beq.w	800660e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80063e8:	7b3b      	ldrb	r3, [r7, #12]
 80063ea:	099b      	lsrs	r3, r3, #6
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d111      	bne.n	8006416 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80063f2:	7d7b      	ldrb	r3, [r7, #21]
 80063f4:	461a      	mov	r2, r3
 80063f6:	7d3b      	ldrb	r3, [r7, #20]
 80063f8:	021b      	lsls	r3, r3, #8
 80063fa:	4413      	add	r3, r2
 80063fc:	461a      	mov	r2, r3
 80063fe:	7cfb      	ldrb	r3, [r7, #19]
 8006400:	041b      	lsls	r3, r3, #16
 8006402:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006406:	4413      	add	r3, r2
 8006408:	3301      	adds	r3, #1
 800640a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	029a      	lsls	r2, r3, #10
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	e028      	b.n	8006468 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006416:	7c7b      	ldrb	r3, [r7, #17]
 8006418:	f003 030f 	and.w	r3, r3, #15
 800641c:	b2da      	uxtb	r2, r3
 800641e:	7dbb      	ldrb	r3, [r7, #22]
 8006420:	09db      	lsrs	r3, r3, #7
 8006422:	b2db      	uxtb	r3, r3
 8006424:	4413      	add	r3, r2
 8006426:	b2da      	uxtb	r2, r3
 8006428:	7d7b      	ldrb	r3, [r7, #21]
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	b2db      	uxtb	r3, r3
 800642e:	f003 0306 	and.w	r3, r3, #6
 8006432:	b2db      	uxtb	r3, r3
 8006434:	4413      	add	r3, r2
 8006436:	b2db      	uxtb	r3, r3
 8006438:	3302      	adds	r3, #2
 800643a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800643e:	7d3b      	ldrb	r3, [r7, #20]
 8006440:	099b      	lsrs	r3, r3, #6
 8006442:	b2db      	uxtb	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	7cfb      	ldrb	r3, [r7, #19]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	441a      	add	r2, r3
 800644c:	7cbb      	ldrb	r3, [r7, #18]
 800644e:	029b      	lsls	r3, r3, #10
 8006450:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006454:	4413      	add	r3, r2
 8006456:	3301      	adds	r3, #1
 8006458:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800645a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800645e:	3b09      	subs	r3, #9
 8006460:	69fa      	ldr	r2, [r7, #28]
 8006462:	409a      	lsls	r2, r3
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800646e:	e0ce      	b.n	800660e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006470:	4b71      	ldr	r3, [pc, #452]	; (8006638 <USER_SPI_ioctl+0x2dc>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b00      	cmp	r3, #0
 800647a:	d031      	beq.n	80064e0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800647c:	2100      	movs	r1, #0
 800647e:	208d      	movs	r0, #141	; 0x8d
 8006480:	f7ff fd1b 	bl	8005eba <send_cmd>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	f040 80c3 	bne.w	8006612 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800648c:	20ff      	movs	r0, #255	; 0xff
 800648e:	f7ff fc21 	bl	8005cd4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006492:	f107 030c 	add.w	r3, r7, #12
 8006496:	2110      	movs	r1, #16
 8006498:	4618      	mov	r0, r3
 800649a:	f7ff fcb3 	bl	8005e04 <rcvr_datablock>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 80b6 	beq.w	8006612 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80064a6:	2330      	movs	r3, #48	; 0x30
 80064a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80064ac:	e007      	b.n	80064be <USER_SPI_ioctl+0x162>
 80064ae:	20ff      	movs	r0, #255	; 0xff
 80064b0:	f7ff fc10 	bl	8005cd4 <xchg_spi>
 80064b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80064b8:	3b01      	subs	r3, #1
 80064ba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80064be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f3      	bne.n	80064ae <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80064c6:	7dbb      	ldrb	r3, [r7, #22]
 80064c8:	091b      	lsrs	r3, r3, #4
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	2310      	movs	r3, #16
 80064d0:	fa03 f202 	lsl.w	r2, r3, r2
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80064d8:	2300      	movs	r3, #0
 80064da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80064de:	e098      	b.n	8006612 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80064e0:	2100      	movs	r1, #0
 80064e2:	2009      	movs	r0, #9
 80064e4:	f7ff fce9 	bl	8005eba <send_cmd>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f040 8091 	bne.w	8006612 <USER_SPI_ioctl+0x2b6>
 80064f0:	f107 030c 	add.w	r3, r7, #12
 80064f4:	2110      	movs	r1, #16
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7ff fc84 	bl	8005e04 <rcvr_datablock>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 8087 	beq.w	8006612 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006504:	4b4c      	ldr	r3, [pc, #304]	; (8006638 <USER_SPI_ioctl+0x2dc>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d012      	beq.n	8006536 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006510:	7dbb      	ldrb	r3, [r7, #22]
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006518:	7dfa      	ldrb	r2, [r7, #23]
 800651a:	09d2      	lsrs	r2, r2, #7
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	4413      	add	r3, r2
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	7e7b      	ldrb	r3, [r7, #25]
 8006524:	099b      	lsrs	r3, r3, #6
 8006526:	b2db      	uxtb	r3, r3
 8006528:	3b01      	subs	r3, #1
 800652a:	fa02 f303 	lsl.w	r3, r2, r3
 800652e:	461a      	mov	r2, r3
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	e013      	b.n	800655e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006536:	7dbb      	ldrb	r3, [r7, #22]
 8006538:	109b      	asrs	r3, r3, #2
 800653a:	b29b      	uxth	r3, r3
 800653c:	f003 031f 	and.w	r3, r3, #31
 8006540:	3301      	adds	r3, #1
 8006542:	7dfa      	ldrb	r2, [r7, #23]
 8006544:	00d2      	lsls	r2, r2, #3
 8006546:	f002 0218 	and.w	r2, r2, #24
 800654a:	7df9      	ldrb	r1, [r7, #23]
 800654c:	0949      	lsrs	r1, r1, #5
 800654e:	b2c9      	uxtb	r1, r1
 8006550:	440a      	add	r2, r1
 8006552:	3201      	adds	r2, #1
 8006554:	fb02 f303 	mul.w	r3, r2, r3
 8006558:	461a      	mov	r2, r3
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006564:	e055      	b.n	8006612 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006566:	4b34      	ldr	r3, [pc, #208]	; (8006638 <USER_SPI_ioctl+0x2dc>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	f003 0306 	and.w	r3, r3, #6
 800656e:	2b00      	cmp	r3, #0
 8006570:	d051      	beq.n	8006616 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006572:	f107 020c 	add.w	r2, r7, #12
 8006576:	79fb      	ldrb	r3, [r7, #7]
 8006578:	210b      	movs	r1, #11
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff feee 	bl	800635c <USER_SPI_ioctl>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d149      	bne.n	800661a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006586:	7b3b      	ldrb	r3, [r7, #12]
 8006588:	099b      	lsrs	r3, r3, #6
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d104      	bne.n	800659a <USER_SPI_ioctl+0x23e>
 8006590:	7dbb      	ldrb	r3, [r7, #22]
 8006592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006596:	2b00      	cmp	r3, #0
 8006598:	d041      	beq.n	800661e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	623b      	str	r3, [r7, #32]
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80065aa:	4b23      	ldr	r3, [pc, #140]	; (8006638 <USER_SPI_ioctl+0x2dc>)
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	f003 0308 	and.w	r3, r3, #8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d105      	bne.n	80065c2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	025b      	lsls	r3, r3, #9
 80065ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	025b      	lsls	r3, r3, #9
 80065c0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80065c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065c4:	2020      	movs	r0, #32
 80065c6:	f7ff fc78 	bl	8005eba <send_cmd>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d128      	bne.n	8006622 <USER_SPI_ioctl+0x2c6>
 80065d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065d2:	2021      	movs	r0, #33	; 0x21
 80065d4:	f7ff fc71 	bl	8005eba <send_cmd>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d121      	bne.n	8006622 <USER_SPI_ioctl+0x2c6>
 80065de:	2100      	movs	r1, #0
 80065e0:	2026      	movs	r0, #38	; 0x26
 80065e2:	f7ff fc6a 	bl	8005eba <send_cmd>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d11a      	bne.n	8006622 <USER_SPI_ioctl+0x2c6>
 80065ec:	f247 5030 	movw	r0, #30000	; 0x7530
 80065f0:	f7ff fbbd 	bl	8005d6e <wait_ready>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d013      	beq.n	8006622 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80065fa:	2300      	movs	r3, #0
 80065fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006600:	e00f      	b.n	8006622 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006602:	2304      	movs	r3, #4
 8006604:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006608:	e00c      	b.n	8006624 <USER_SPI_ioctl+0x2c8>
		break;
 800660a:	bf00      	nop
 800660c:	e00a      	b.n	8006624 <USER_SPI_ioctl+0x2c8>
		break;
 800660e:	bf00      	nop
 8006610:	e008      	b.n	8006624 <USER_SPI_ioctl+0x2c8>
		break;
 8006612:	bf00      	nop
 8006614:	e006      	b.n	8006624 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006616:	bf00      	nop
 8006618:	e004      	b.n	8006624 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800661a:	bf00      	nop
 800661c:	e002      	b.n	8006624 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800661e:	bf00      	nop
 8006620:	e000      	b.n	8006624 <USER_SPI_ioctl+0x2c8>
		break;
 8006622:	bf00      	nop
	}

	despiselect();
 8006624:	f7ff fbc6 	bl	8005db4 <despiselect>

	return res;
 8006628:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800662c:	4618      	mov	r0, r3
 800662e:	3730      	adds	r7, #48	; 0x30
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	200000b4 	.word	0x200000b4
 8006638:	200006a4 	.word	0x200006a4

0800663c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	4613      	mov	r3, r2
 8006648:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800664a:	2301      	movs	r3, #1
 800664c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006652:	4b1e      	ldr	r3, [pc, #120]	; (80066cc <FATFS_LinkDriverEx+0x90>)
 8006654:	7a5b      	ldrb	r3, [r3, #9]
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	d131      	bne.n	80066c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800665c:	4b1b      	ldr	r3, [pc, #108]	; (80066cc <FATFS_LinkDriverEx+0x90>)
 800665e:	7a5b      	ldrb	r3, [r3, #9]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	461a      	mov	r2, r3
 8006664:	4b19      	ldr	r3, [pc, #100]	; (80066cc <FATFS_LinkDriverEx+0x90>)
 8006666:	2100      	movs	r1, #0
 8006668:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800666a:	4b18      	ldr	r3, [pc, #96]	; (80066cc <FATFS_LinkDriverEx+0x90>)
 800666c:	7a5b      	ldrb	r3, [r3, #9]
 800666e:	b2db      	uxtb	r3, r3
 8006670:	4a16      	ldr	r2, [pc, #88]	; (80066cc <FATFS_LinkDriverEx+0x90>)
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800667a:	4b14      	ldr	r3, [pc, #80]	; (80066cc <FATFS_LinkDriverEx+0x90>)
 800667c:	7a5b      	ldrb	r3, [r3, #9]
 800667e:	b2db      	uxtb	r3, r3
 8006680:	461a      	mov	r2, r3
 8006682:	4b12      	ldr	r3, [pc, #72]	; (80066cc <FATFS_LinkDriverEx+0x90>)
 8006684:	4413      	add	r3, r2
 8006686:	79fa      	ldrb	r2, [r7, #7]
 8006688:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800668a:	4b10      	ldr	r3, [pc, #64]	; (80066cc <FATFS_LinkDriverEx+0x90>)
 800668c:	7a5b      	ldrb	r3, [r3, #9]
 800668e:	b2db      	uxtb	r3, r3
 8006690:	1c5a      	adds	r2, r3, #1
 8006692:	b2d1      	uxtb	r1, r2
 8006694:	4a0d      	ldr	r2, [pc, #52]	; (80066cc <FATFS_LinkDriverEx+0x90>)
 8006696:	7251      	strb	r1, [r2, #9]
 8006698:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800669a:	7dbb      	ldrb	r3, [r7, #22]
 800669c:	3330      	adds	r3, #48	; 0x30
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	3301      	adds	r3, #1
 80066a8:	223a      	movs	r2, #58	; 0x3a
 80066aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	3302      	adds	r3, #2
 80066b0:	222f      	movs	r2, #47	; 0x2f
 80066b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	3303      	adds	r3, #3
 80066b8:	2200      	movs	r2, #0
 80066ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80066bc:	2300      	movs	r3, #0
 80066be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80066c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bc80      	pop	{r7}
 80066ca:	4770      	bx	lr
 80066cc:	200006a8 	.word	0x200006a8

080066d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80066da:	2200      	movs	r2, #0
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7ff ffac 	bl	800663c <FATFS_LinkDriverEx>
 80066e4:	4603      	mov	r3, r0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <__libc_init_array>:
 80066f0:	b570      	push	{r4, r5, r6, lr}
 80066f2:	2600      	movs	r6, #0
 80066f4:	4d0c      	ldr	r5, [pc, #48]	; (8006728 <__libc_init_array+0x38>)
 80066f6:	4c0d      	ldr	r4, [pc, #52]	; (800672c <__libc_init_array+0x3c>)
 80066f8:	1b64      	subs	r4, r4, r5
 80066fa:	10a4      	asrs	r4, r4, #2
 80066fc:	42a6      	cmp	r6, r4
 80066fe:	d109      	bne.n	8006714 <__libc_init_array+0x24>
 8006700:	f000 f822 	bl	8006748 <_init>
 8006704:	2600      	movs	r6, #0
 8006706:	4d0a      	ldr	r5, [pc, #40]	; (8006730 <__libc_init_array+0x40>)
 8006708:	4c0a      	ldr	r4, [pc, #40]	; (8006734 <__libc_init_array+0x44>)
 800670a:	1b64      	subs	r4, r4, r5
 800670c:	10a4      	asrs	r4, r4, #2
 800670e:	42a6      	cmp	r6, r4
 8006710:	d105      	bne.n	800671e <__libc_init_array+0x2e>
 8006712:	bd70      	pop	{r4, r5, r6, pc}
 8006714:	f855 3b04 	ldr.w	r3, [r5], #4
 8006718:	4798      	blx	r3
 800671a:	3601      	adds	r6, #1
 800671c:	e7ee      	b.n	80066fc <__libc_init_array+0xc>
 800671e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006722:	4798      	blx	r3
 8006724:	3601      	adds	r6, #1
 8006726:	e7f2      	b.n	800670e <__libc_init_array+0x1e>
 8006728:	080067dc 	.word	0x080067dc
 800672c:	080067dc 	.word	0x080067dc
 8006730:	080067dc 	.word	0x080067dc
 8006734:	080067e0 	.word	0x080067e0

08006738 <memset>:
 8006738:	4603      	mov	r3, r0
 800673a:	4402      	add	r2, r0
 800673c:	4293      	cmp	r3, r2
 800673e:	d100      	bne.n	8006742 <memset+0xa>
 8006740:	4770      	bx	lr
 8006742:	f803 1b01 	strb.w	r1, [r3], #1
 8006746:	e7f9      	b.n	800673c <memset+0x4>

08006748 <_init>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	bf00      	nop
 800674c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674e:	bc08      	pop	{r3}
 8006750:	469e      	mov	lr, r3
 8006752:	4770      	bx	lr

08006754 <_fini>:
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006756:	bf00      	nop
 8006758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675a:	bc08      	pop	{r3}
 800675c:	469e      	mov	lr, r3
 800675e:	4770      	bx	lr
