
IHateEverything3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000751c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08007658  08007658  00017658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007760  08007760  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08007760  08007760  00017760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007768  08007768  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007768  08007768  00017768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800776c  0800776c  0001776c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08007770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f4c  200000b4  08007824  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002000  08007824  00022000  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b178  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ccb  00000000  00000000  0003b255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  0003ef20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001220  00000000  00000000  000402a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194dc  00000000  00000000  000414c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016632  00000000  00000000  0005a99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090433  00000000  00000000  00070fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00101401  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fc8  00000000  00000000  00101454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000b4 	.word	0x200000b4
 8000158:	00000000 	.word	0x00000000
 800015c:	08007640 	.word	0x08007640

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000b8 	.word	0x200000b8
 8000178:	08007640 	.word	0x08007640

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <InitButtons>:
static TIM_HandleTypeDef* Button1DebounceTimer;
static TIM_HandleTypeDef* Button2DebounceTimer;
static enum ButtonType LastButtonPressed;

void InitButtons(TIM_HandleTypeDef *button1DebounceTimer, TIM_HandleTypeDef *button2DebounceTimer)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
	Button1DebounceTimer = button1DebounceTimer;
 800047e:	4a07      	ldr	r2, [pc, #28]	; (800049c <InitButtons+0x28>)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6013      	str	r3, [r2, #0]
	Button2DebounceTimer = button2DebounceTimer;
 8000484:	4a06      	ldr	r2, [pc, #24]	; (80004a0 <InitButtons+0x2c>)
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	6013      	str	r3, [r2, #0]
	LastButtonPressed = INVALID_BUTTON;
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <InitButtons+0x30>)
 800048c:	2200      	movs	r2, #0
 800048e:	701a      	strb	r2, [r3, #0]
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	200000d0 	.word	0x200000d0
 80004a0:	200000d4 	.word	0x200000d4
 80004a4:	200000d8 	.word	0x200000d8

080004a8 <GetGameModeSwitchState>:

enum GameMode GetGameModeSwitchState()
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(SWITCH1_1_GPIO_Port, SWITCH1_1_Pin) == GPIO_PIN_SET)
 80004ac:	2108      	movs	r1, #8
 80004ae:	480e      	ldr	r0, [pc, #56]	; (80004e8 <GetGameModeSwitchState+0x40>)
 80004b0:	f004 f9fc 	bl	80048ac <HAL_GPIO_ReadPin>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d101      	bne.n	80004be <GetGameModeSwitchState+0x16>
	{
		return EDUCATION;
 80004ba:	2301      	movs	r3, #1
 80004bc:	e012      	b.n	80004e4 <GetGameModeSwitchState+0x3c>
	}
	else if(HAL_GPIO_ReadPin(SWITCH1_2_GPIO_Port, SWITCH1_2_Pin) == GPIO_PIN_SET)
 80004be:	2110      	movs	r1, #16
 80004c0:	4809      	ldr	r0, [pc, #36]	; (80004e8 <GetGameModeSwitchState+0x40>)
 80004c2:	f004 f9f3 	bl	80048ac <HAL_GPIO_ReadPin>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d101      	bne.n	80004d0 <GetGameModeSwitchState+0x28>
	{
		return PRACTICE;
 80004cc:	2302      	movs	r3, #2
 80004ce:	e009      	b.n	80004e4 <GetGameModeSwitchState+0x3c>
	}
	else if(HAL_GPIO_ReadPin(SWITCH1_3_GPIO_Port, SWITCH1_3_Pin) == GPIO_PIN_SET)
 80004d0:	2120      	movs	r1, #32
 80004d2:	4805      	ldr	r0, [pc, #20]	; (80004e8 <GetGameModeSwitchState+0x40>)
 80004d4:	f004 f9ea 	bl	80048ac <HAL_GPIO_ReadPin>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d101      	bne.n	80004e2 <GetGameModeSwitchState+0x3a>
	{
		return COMPETITIVE;
 80004de:	2303      	movs	r3, #3
 80004e0:	e000      	b.n	80004e4 <GetGameModeSwitchState+0x3c>
	}
	else
	{
		return INVALID_GAMEMODE;
 80004e2:	2300      	movs	r3, #0
	}
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021c00 	.word	0x40021c00

080004ec <GetDifficultySwitchState>:

enum AiDifficulty GetDifficultySwitchState()
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(SWITCH2_1_GPIO_Port, SWITCH2_1_Pin) == GPIO_PIN_SET)
 80004f0:	2140      	movs	r1, #64	; 0x40
 80004f2:	480f      	ldr	r0, [pc, #60]	; (8000530 <GetDifficultySwitchState+0x44>)
 80004f4:	f004 f9da 	bl	80048ac <HAL_GPIO_ReadPin>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d101      	bne.n	8000502 <GetDifficultySwitchState+0x16>
	{
		return EASY;
 80004fe:	2301      	movs	r3, #1
 8000500:	e013      	b.n	800052a <GetDifficultySwitchState+0x3e>
	}
	else if(HAL_GPIO_ReadPin(SWITCH2_2_GPIO_Port, SWITCH2_2_Pin) == GPIO_PIN_SET)
 8000502:	2180      	movs	r1, #128	; 0x80
 8000504:	480a      	ldr	r0, [pc, #40]	; (8000530 <GetDifficultySwitchState+0x44>)
 8000506:	f004 f9d1 	bl	80048ac <HAL_GPIO_ReadPin>
 800050a:	4603      	mov	r3, r0
 800050c:	2b01      	cmp	r3, #1
 800050e:	d101      	bne.n	8000514 <GetDifficultySwitchState+0x28>
	{
		return MEDIUM;
 8000510:	2302      	movs	r3, #2
 8000512:	e00a      	b.n	800052a <GetDifficultySwitchState+0x3e>
	}
	else if(HAL_GPIO_ReadPin(SWITCH2_3_GPIO_Port, SWITCH2_3_Pin) == GPIO_PIN_SET)
 8000514:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000518:	4805      	ldr	r0, [pc, #20]	; (8000530 <GetDifficultySwitchState+0x44>)
 800051a:	f004 f9c7 	bl	80048ac <HAL_GPIO_ReadPin>
 800051e:	4603      	mov	r3, r0
 8000520:	2b01      	cmp	r3, #1
 8000522:	d101      	bne.n	8000528 <GetDifficultySwitchState+0x3c>
	{
		return HARD;
 8000524:	2303      	movs	r3, #3
 8000526:	e000      	b.n	800052a <GetDifficultySwitchState+0x3e>
	}
	else
	{
		return INVALID_AIDIFFICULTY;
 8000528:	2300      	movs	r3, #0
	}
}
 800052a:	4618      	mov	r0, r3
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40021c00 	.word	0x40021c00

08000534 <Button1DebounceTimerCallback>:

void Button1DebounceTimerCallback()
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(Button1DebounceTimer);
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <Button1DebounceTimerCallback+0x28>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f005 fca7 	bl	8005e90 <HAL_TIM_Base_Stop_IT>
	if(HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_RESET)
 8000542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000546:	4806      	ldr	r0, [pc, #24]	; (8000560 <Button1DebounceTimerCallback+0x2c>)
 8000548:	f004 f9b0 	bl	80048ac <HAL_GPIO_ReadPin>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d101      	bne.n	8000556 <Button1DebounceTimerCallback+0x22>
	{
		OnButton1Press();
 8000552:	f000 f837 	bl	80005c4 <OnButton1Press>
	}
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	200000d0 	.word	0x200000d0
 8000560:	40020c00 	.word	0x40020c00

08000564 <Button2DebounceTimerCallback>:

void Button2DebounceTimerCallback()
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(Button2DebounceTimer);
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <Button2DebounceTimerCallback+0x28>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f005 fc8f 	bl	8005e90 <HAL_TIM_Base_Stop_IT>
	if(HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == GPIO_PIN_RESET)
 8000572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000576:	4806      	ldr	r0, [pc, #24]	; (8000590 <Button2DebounceTimerCallback+0x2c>)
 8000578:	f004 f998 	bl	80048ac <HAL_GPIO_ReadPin>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d101      	bne.n	8000586 <Button2DebounceTimerCallback+0x22>
	{
		OnButton2Press();
 8000582:	f000 f82b 	bl	80005dc <OnButton2Press>
	}
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	200000d4 	.word	0x200000d4
 8000590:	40020c00 	.word	0x40020c00

08000594 <Button1Callback>:

void Button1Callback()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(Button1DebounceTimer);
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <Button1Callback+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4618      	mov	r0, r3
 800059e:	f005 fc25 	bl	8005dec <HAL_TIM_Base_Start_IT>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000d0 	.word	0x200000d0

080005ac <Button2Callback>:

void Button2Callback()
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(Button2DebounceTimer);
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <Button2Callback+0x14>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f005 fc19 	bl	8005dec <HAL_TIM_Base_Start_IT>
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200000d4 	.word	0x200000d4

080005c4 <OnButton1Press>:

static void OnButton1Press()
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
	LastButtonPressed = BUTTON1;
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <OnButton1Press+0x14>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	200000d8 	.word	0x200000d8

080005dc <OnButton2Press>:

static void OnButton2Press()
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	LastButtonPressed = BUTTON2;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <OnButton2Press+0x14>)
 80005e2:	2202      	movs	r2, #2
 80005e4:	701a      	strb	r2, [r3, #0]
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	200000d8 	.word	0x200000d8

080005f4 <GetLastButtonPressed>:

enum ButtonType GetLastButtonPressed()
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
	return LastButtonPressed;
 80005f8:	4b02      	ldr	r3, [pc, #8]	; (8000604 <GetLastButtonPressed+0x10>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	200000d8 	.word	0x200000d8

08000608 <InitChessClock>:
extern enum AiDifficulty difficulty;
extern enum GameMode gameMode;
uint8_t updateAiClock = 0;

void InitChessClock(SPI_HandleTypeDef* spiHandle, TIM_HandleTypeDef* timerHandle)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	SpiHandle = spiHandle;
 8000612:	4a12      	ldr	r2, [pc, #72]	; (800065c <InitChessClock+0x54>)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6013      	str	r3, [r2, #0]
	TimerHandle = timerHandle;
 8000618:	4a11      	ldr	r2, [pc, #68]	; (8000660 <InitChessClock+0x58>)
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	6013      	str	r3, [r2, #0]
	WhiteTime = 10 * 60;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <InitChessClock+0x5c>)
 8000620:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000624:	601a      	str	r2, [r3, #0]
	BlackTime = 10 * 60;
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <InitChessClock+0x60>)
 8000628:	f44f 7216 	mov.w	r2, #600	; 0x258
 800062c:	601a      	str	r2, [r3, #0]
	writeTime(SpiHandle, WhiteTime, 0);
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <InitChessClock+0x54>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <InitChessClock+0x5c>)
 8000634:	6812      	ldr	r2, [r2, #0]
 8000636:	4611      	mov	r1, r2
 8000638:	2200      	movs	r2, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f8d6 	bl	80007ec <writeTime>
	writeTime(SpiHandle, BlackTime, 1);
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <InitChessClock+0x54>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a08      	ldr	r2, [pc, #32]	; (8000668 <InitChessClock+0x60>)
 8000646:	6812      	ldr	r2, [r2, #0]
 8000648:	4611      	mov	r1, r2
 800064a:	2201      	movs	r2, #1
 800064c:	4618      	mov	r0, r3
 800064e:	f000 f8cd 	bl	80007ec <writeTime>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	200000dc 	.word	0x200000dc
 8000660:	200000e0 	.word	0x200000e0
 8000664:	200000e4 	.word	0x200000e4
 8000668:	200000e8 	.word	0x200000e8

0800066c <StartChessClock>:

void StartChessClock()
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(TimerHandle);
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <StartChessClock+0x14>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4618      	mov	r0, r3
 8000676:	f005 fbb9 	bl	8005dec <HAL_TIM_Base_Start_IT>
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200000e0 	.word	0x200000e0

08000684 <StopChessClock>:

void StopChessClock()
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(TimerHandle);
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <StopChessClock+0x14>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4618      	mov	r0, r3
 800068e:	f005 fbff 	bl	8005e90 <HAL_TIM_Base_Stop_IT>
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200000e0 	.word	0x200000e0

0800069c <ChessClockTimerCallback>:

void ChessClockTimerCallback(enum PieceOwner turn)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	if(turn == WHITE)
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d117      	bne.n	80006dc <ChessClockTimerCallback+0x40>
	{
		updateAiClock = 1;
 80006ac:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <ChessClockTimerCallback+0xc4>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
		writeTime(SpiHandle, WhiteTime, 0);
 80006b2:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <ChessClockTimerCallback+0xc8>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a2c      	ldr	r2, [pc, #176]	; (8000768 <ChessClockTimerCallback+0xcc>)
 80006b8:	6812      	ldr	r2, [r2, #0]
 80006ba:	4611      	mov	r1, r2
 80006bc:	2200      	movs	r2, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f894 	bl	80007ec <writeTime>
		if(WhiteTime == 0)
 80006c4:	4b28      	ldr	r3, [pc, #160]	; (8000768 <ChessClockTimerCallback+0xcc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d101      	bne.n	80006d0 <ChessClockTimerCallback+0x34>
		{
			StopChessClock();
 80006cc:	f7ff ffda 	bl	8000684 <StopChessClock>
		}

		WhiteTime--;
 80006d0:	4b25      	ldr	r3, [pc, #148]	; (8000768 <ChessClockTimerCallback+0xcc>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	4a24      	ldr	r2, [pc, #144]	; (8000768 <ChessClockTimerCallback+0xcc>)
 80006d8:	6013      	str	r3, [r2, #0]
		}
		else{
			BlackTime--;
		}
	}
}
 80006da:	e03c      	b.n	8000756 <ChessClockTimerCallback+0xba>
		writeTime(SpiHandle, BlackTime, 1);
 80006dc:	4b21      	ldr	r3, [pc, #132]	; (8000764 <ChessClockTimerCallback+0xc8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a22      	ldr	r2, [pc, #136]	; (800076c <ChessClockTimerCallback+0xd0>)
 80006e2:	6812      	ldr	r2, [r2, #0]
 80006e4:	4611      	mov	r1, r2
 80006e6:	2201      	movs	r2, #1
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 f87f 	bl	80007ec <writeTime>
		if(BlackTime <= 0)
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <ChessClockTimerCallback+0xd0>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d101      	bne.n	80006fa <ChessClockTimerCallback+0x5e>
			StopChessClock();
 80006f6:	f7ff ffc5 	bl	8000684 <StopChessClock>
		if (gameMode == PRACTICE){
 80006fa:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <ChessClockTimerCallback+0xd4>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b02      	cmp	r3, #2
 8000700:	d124      	bne.n	800074c <ChessClockTimerCallback+0xb0>
			if (updateAiClock){
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <ChessClockTimerCallback+0xc4>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d025      	beq.n	8000756 <ChessClockTimerCallback+0xba>
				updateAiClock = 0;
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <ChessClockTimerCallback+0xc4>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
				if (difficulty == EASY){
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <ChessClockTimerCallback+0xd8>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d105      	bne.n	8000724 <ChessClockTimerCallback+0x88>
					BlackTime -= 60;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <ChessClockTimerCallback+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3b3c      	subs	r3, #60	; 0x3c
 800071e:	4a13      	ldr	r2, [pc, #76]	; (800076c <ChessClockTimerCallback+0xd0>)
 8000720:	6013      	str	r3, [r2, #0]
}
 8000722:	e018      	b.n	8000756 <ChessClockTimerCallback+0xba>
				else if (difficulty == MEDIUM){
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <ChessClockTimerCallback+0xd8>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b02      	cmp	r3, #2
 800072a:	d105      	bne.n	8000738 <ChessClockTimerCallback+0x9c>
					BlackTime -= 30;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <ChessClockTimerCallback+0xd0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	3b1e      	subs	r3, #30
 8000732:	4a0e      	ldr	r2, [pc, #56]	; (800076c <ChessClockTimerCallback+0xd0>)
 8000734:	6013      	str	r3, [r2, #0]
}
 8000736:	e00e      	b.n	8000756 <ChessClockTimerCallback+0xba>
				else if (difficulty == HARD){
 8000738:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <ChessClockTimerCallback+0xd8>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b03      	cmp	r3, #3
 800073e:	d10a      	bne.n	8000756 <ChessClockTimerCallback+0xba>
					BlackTime -= 20;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <ChessClockTimerCallback+0xd0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	3b14      	subs	r3, #20
 8000746:	4a09      	ldr	r2, [pc, #36]	; (800076c <ChessClockTimerCallback+0xd0>)
 8000748:	6013      	str	r3, [r2, #0]
}
 800074a:	e004      	b.n	8000756 <ChessClockTimerCallback+0xba>
			BlackTime--;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <ChessClockTimerCallback+0xd0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	3b01      	subs	r3, #1
 8000752:	4a06      	ldr	r2, [pc, #24]	; (800076c <ChessClockTimerCallback+0xd0>)
 8000754:	6013      	str	r3, [r2, #0]
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000ec 	.word	0x200000ec
 8000764:	200000dc 	.word	0x200000dc
 8000768:	200000e4 	.word	0x200000e4
 800076c:	200000e8 	.word	0x200000e8
 8000770:	2000184c 	.word	0x2000184c
 8000774:	20001984 	.word	0x20001984

08000778 <enableHex>:
#include "leds.h"

void enableHex(SPI_HandleTypeDef * hspi){
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	writeHexVal(hspi, LED_DECODE_MODE, 0xFF);
 8000780:	22ff      	movs	r2, #255	; 0xff
 8000782:	2101      	movs	r1, #1
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f000 f9d3 	bl	8000b30 <writeHexVal>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <setIntensity>:

void setIntensity(SPI_HandleTypeDef * hspi, uint8_t val){
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	460b      	mov	r3, r1
 800079c:	70fb      	strb	r3, [r7, #3]
	writeHexVal(hspi, LED_INTENSITY, val);
 800079e:	78fb      	ldrb	r3, [r7, #3]
 80007a0:	461a      	mov	r2, r3
 80007a2:	2102      	movs	r1, #2
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 f9c3 	bl	8000b30 <writeHexVal>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <setScanLimit>:

void setScanLimit(SPI_HandleTypeDef * hspi, uint8_t val){
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	460b      	mov	r3, r1
 80007bc:	70fb      	strb	r3, [r7, #3]
	writeHexVal(hspi, LED_SCAN_LIMIT, val);
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	461a      	mov	r2, r3
 80007c2:	2103      	movs	r1, #3
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f000 f9b3 	bl	8000b30 <writeHexVal>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <enableOutput>:

void enableOutput(SPI_HandleTypeDef * hspi){
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
	writeHexVal(hspi, LED_CONFIGURATION, 0x01);
 80007da:	2201      	movs	r2, #1
 80007dc:	2104      	movs	r1, #4
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f000 f9a6 	bl	8000b30 <writeHexVal>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <writeTime>:

void disableOutput(SPI_HandleTypeDef * hspi){
	writeHexVal(hspi, LED_CONFIGURATION, 0x00);
}

void writeTime(SPI_HandleTypeDef * hspi, int time, int player){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
	int sec = time % 60;
 80007f8:	68ba      	ldr	r2, [r7, #8]
 80007fa:	4b4d      	ldr	r3, [pc, #308]	; (8000930 <writeTime+0x144>)
 80007fc:	fb83 1302 	smull	r1, r3, r3, r2
 8000800:	4413      	add	r3, r2
 8000802:	1159      	asrs	r1, r3, #5
 8000804:	17d3      	asrs	r3, r2, #31
 8000806:	1ac9      	subs	r1, r1, r3
 8000808:	460b      	mov	r3, r1
 800080a:	011b      	lsls	r3, r3, #4
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	617b      	str	r3, [r7, #20]
	int min = time / 60;
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	4a46      	ldr	r2, [pc, #280]	; (8000930 <writeTime+0x144>)
 8000818:	fb82 1203 	smull	r1, r2, r2, r3
 800081c:	441a      	add	r2, r3
 800081e:	1152      	asrs	r2, r2, #5
 8000820:	17db      	asrs	r3, r3, #31
 8000822:	1ad3      	subs	r3, r2, r3
 8000824:	613b      	str	r3, [r7, #16]
	if (!player){
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d13e      	bne.n	80008aa <writeTime+0xbe>
		writeHexVal(hspi, LED_4, sec % 10);
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	4b41      	ldr	r3, [pc, #260]	; (8000934 <writeTime+0x148>)
 8000830:	fb83 1302 	smull	r1, r3, r3, r2
 8000834:	1099      	asrs	r1, r3, #2
 8000836:	17d3      	asrs	r3, r2, #31
 8000838:	1ac9      	subs	r1, r1, r3
 800083a:	460b      	mov	r3, r1
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	440b      	add	r3, r1
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	1ad1      	subs	r1, r2, r3
 8000844:	b2cb      	uxtb	r3, r1
 8000846:	461a      	mov	r2, r3
 8000848:	2163      	movs	r1, #99	; 0x63
 800084a:	68f8      	ldr	r0, [r7, #12]
 800084c:	f000 f970 	bl	8000b30 <writeHexVal>
		writeHexVal(hspi, LED_3, sec / 10);
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	4a38      	ldr	r2, [pc, #224]	; (8000934 <writeTime+0x148>)
 8000854:	fb82 1203 	smull	r1, r2, r2, r3
 8000858:	1092      	asrs	r2, r2, #2
 800085a:	17db      	asrs	r3, r3, #31
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	b2db      	uxtb	r3, r3
 8000860:	461a      	mov	r2, r3
 8000862:	2162      	movs	r1, #98	; 0x62
 8000864:	68f8      	ldr	r0, [r7, #12]
 8000866:	f000 f963 	bl	8000b30 <writeHexVal>
		writeHexVal(hspi, LED_2, min % 10);
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	4b31      	ldr	r3, [pc, #196]	; (8000934 <writeTime+0x148>)
 800086e:	fb83 1302 	smull	r1, r3, r3, r2
 8000872:	1099      	asrs	r1, r3, #2
 8000874:	17d3      	asrs	r3, r2, #31
 8000876:	1ac9      	subs	r1, r1, r3
 8000878:	460b      	mov	r3, r1
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	440b      	add	r3, r1
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	1ad1      	subs	r1, r2, r3
 8000882:	b2cb      	uxtb	r3, r1
 8000884:	461a      	mov	r2, r3
 8000886:	2161      	movs	r1, #97	; 0x61
 8000888:	68f8      	ldr	r0, [r7, #12]
 800088a:	f000 f951 	bl	8000b30 <writeHexVal>
		writeHexVal(hspi, LED_1, min / 10);
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	4a28      	ldr	r2, [pc, #160]	; (8000934 <writeTime+0x148>)
 8000892:	fb82 1203 	smull	r1, r2, r2, r3
 8000896:	1092      	asrs	r2, r2, #2
 8000898:	17db      	asrs	r3, r3, #31
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	b2db      	uxtb	r3, r3
 800089e:	461a      	mov	r2, r3
 80008a0:	2160      	movs	r1, #96	; 0x60
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f000 f944 	bl	8000b30 <writeHexVal>
		writeHexVal(hspi, LED_8, sec % 10);
		writeHexVal(hspi, LED_7, sec / 10);
		writeHexVal(hspi, LED_6, min % 10);
		writeHexVal(hspi, LED_5, min / 10);
	}
}
 80008a8:	e03d      	b.n	8000926 <writeTime+0x13a>
		writeHexVal(hspi, LED_8, sec % 10);
 80008aa:	697a      	ldr	r2, [r7, #20]
 80008ac:	4b21      	ldr	r3, [pc, #132]	; (8000934 <writeTime+0x148>)
 80008ae:	fb83 1302 	smull	r1, r3, r3, r2
 80008b2:	1099      	asrs	r1, r3, #2
 80008b4:	17d3      	asrs	r3, r2, #31
 80008b6:	1ac9      	subs	r1, r1, r3
 80008b8:	460b      	mov	r3, r1
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	440b      	add	r3, r1
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	1ad1      	subs	r1, r2, r3
 80008c2:	b2cb      	uxtb	r3, r1
 80008c4:	461a      	mov	r2, r3
 80008c6:	2167      	movs	r1, #103	; 0x67
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f000 f931 	bl	8000b30 <writeHexVal>
		writeHexVal(hspi, LED_7, sec / 10);
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	4a18      	ldr	r2, [pc, #96]	; (8000934 <writeTime+0x148>)
 80008d2:	fb82 1203 	smull	r1, r2, r2, r3
 80008d6:	1092      	asrs	r2, r2, #2
 80008d8:	17db      	asrs	r3, r3, #31
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	461a      	mov	r2, r3
 80008e0:	2166      	movs	r1, #102	; 0x66
 80008e2:	68f8      	ldr	r0, [r7, #12]
 80008e4:	f000 f924 	bl	8000b30 <writeHexVal>
		writeHexVal(hspi, LED_6, min % 10);
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <writeTime+0x148>)
 80008ec:	fb83 1302 	smull	r1, r3, r3, r2
 80008f0:	1099      	asrs	r1, r3, #2
 80008f2:	17d3      	asrs	r3, r2, #31
 80008f4:	1ac9      	subs	r1, r1, r3
 80008f6:	460b      	mov	r3, r1
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	440b      	add	r3, r1
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	1ad1      	subs	r1, r2, r3
 8000900:	b2cb      	uxtb	r3, r1
 8000902:	461a      	mov	r2, r3
 8000904:	2165      	movs	r1, #101	; 0x65
 8000906:	68f8      	ldr	r0, [r7, #12]
 8000908:	f000 f912 	bl	8000b30 <writeHexVal>
		writeHexVal(hspi, LED_5, min / 10);
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	4a09      	ldr	r2, [pc, #36]	; (8000934 <writeTime+0x148>)
 8000910:	fb82 1203 	smull	r1, r2, r2, r3
 8000914:	1092      	asrs	r2, r2, #2
 8000916:	17db      	asrs	r3, r3, #31
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	b2db      	uxtb	r3, r3
 800091c:	461a      	mov	r2, r3
 800091e:	2164      	movs	r1, #100	; 0x64
 8000920:	68f8      	ldr	r0, [r7, #12]
 8000922:	f000 f905 	bl	8000b30 <writeHexVal>
}
 8000926:	bf00      	nop
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	88888889 	.word	0x88888889
 8000934:	66666667 	.word	0x66666667

08000938 <LEDSInit>:

void LEDSInit(SPI_HandleTypeDef * hspi, uint8_t spi_num){
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]

	// SPI setup
	if (spi_num == 1){
 8000954:	78fb      	ldrb	r3, [r7, #3]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d124      	bne.n	80009a4 <LEDSInit+0x6c>
		hspi->Instance = SPI1;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a3a      	ldr	r2, [pc, #232]	; (8000a48 <LEDSInit+0x110>)
 800095e:	601a      	str	r2, [r3, #0]

		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000960:	4b3a      	ldr	r3, [pc, #232]	; (8000a4c <LEDSInit+0x114>)
 8000962:	69db      	ldr	r3, [r3, #28]
 8000964:	4a39      	ldr	r2, [pc, #228]	; (8000a4c <LEDSInit+0x114>)
 8000966:	f043 0310 	orr.w	r3, r3, #16
 800096a:	61d3      	str	r3, [r2, #28]
 800096c:	4b37      	ldr	r3, [pc, #220]	; (8000a4c <LEDSInit+0x114>)
 800096e:	69db      	ldr	r3, [r3, #28]
 8000970:	f003 0310 	and.w	r3, r3, #16
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	693b      	ldr	r3, [r7, #16]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800097e:	4834      	ldr	r0, [pc, #208]	; (8000a50 <LEDSInit+0x118>)
 8000980:	f003 ffab 	bl	80048da <HAL_GPIO_WritePin>

		GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 8000984:	f241 0304 	movw	r3, #4100	; 0x1004
 8000988:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	482c      	ldr	r0, [pc, #176]	; (8000a50 <LEDSInit+0x118>)
 800099e:	f003 fdf5 	bl	800458c <HAL_GPIO_Init>
 80009a2:	e026      	b.n	80009f2 <LEDSInit+0xba>
	}
	else if (spi_num == 2){
 80009a4:	78fb      	ldrb	r3, [r7, #3]
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d123      	bne.n	80009f2 <LEDSInit+0xba>
		hspi->Instance = SPI2;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a29      	ldr	r2, [pc, #164]	; (8000a54 <LEDSInit+0x11c>)
 80009ae:	601a      	str	r2, [r3, #0]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 80009b0:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <LEDSInit+0x114>)
 80009b2:	69db      	ldr	r3, [r3, #28]
 80009b4:	4a25      	ldr	r2, [pc, #148]	; (8000a4c <LEDSInit+0x114>)
 80009b6:	f043 0308 	orr.w	r3, r3, #8
 80009ba:	61d3      	str	r3, [r2, #28]
 80009bc:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <LEDSInit+0x114>)
 80009be:	69db      	ldr	r3, [r3, #28]
 80009c0:	f003 0308 	and.w	r3, r3, #8
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ce:	4822      	ldr	r0, [pc, #136]	; (8000a58 <LEDSInit+0x120>)
 80009d0:	f003 ff83 	bl	80048da <HAL_GPIO_WritePin>

		GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	481a      	ldr	r0, [pc, #104]	; (8000a58 <LEDSInit+0x120>)
 80009ee:	f003 fdcd 	bl	800458c <HAL_GPIO_Init>
	}
	hspi->Init.Mode = SPI_MODE_MASTER;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009f8:	605a      	str	r2, [r3, #4]
	hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
	hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
	hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
	hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
	hspi->Init.NSS = SPI_NSS_SOFT;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a18:	619a      	str	r2, [r3, #24]
	hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2228      	movs	r2, #40	; 0x28
 8000a1e:	61da      	str	r2, [r3, #28]
	hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	621a      	str	r2, [r3, #32]
	hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	629a      	str	r2, [r3, #40]	; 0x28
	hspi->Init.CRCPolynomial = 10;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	220a      	movs	r2, #10
 8000a36:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_SPI_Init(hspi);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f004 fd1b 	bl	8005474 <HAL_SPI_Init>


}
 8000a3e:	bf00      	nop
 8000a40:	3728      	adds	r7, #40	; 0x28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40013000 	.word	0x40013000
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40003800 	.word	0x40003800
 8000a58:	40020c00 	.word	0x40020c00

08000a5c <ChessTimerLEDInit>:

void ChessTimerLEDInit(SPI_HandleTypeDef * hspi){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	enableOutput(hspi);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f7ff feb4 	bl	80007d2 <enableOutput>
	setScanLimit(hspi, 0x07);
 8000a6a:	2107      	movs	r1, #7
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff fea0 	bl	80007b2 <setScanLimit>
	setIntensity(hspi, 0x00);
 8000a72:	2100      	movs	r1, #0
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff fe8c 	bl	8000792 <setIntensity>
	enableHex(hspi);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff fe7c 	bl	8000778 <enableHex>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <BoardLEDInit>:

void BoardLEDInit(SPI_HandleTypeDef * hspi){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	enableOutput(hspi);
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff fe9e 	bl	80007d2 <enableOutput>
	setScanLimit(hspi, 0x07);
 8000a96:	2107      	movs	r1, #7
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff fe8a 	bl	80007b2 <setScanLimit>
	setIntensity(hspi, 0x05);
 8000a9e:	2105      	movs	r1, #5
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff fe76 	bl	8000792 <setIntensity>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <writeBoardValue>:

void writeBoardValue(SPI_HandleTypeDef * hspi, uint8_t board[8][8]){
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b086      	sub	sp, #24
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	6039      	str	r1, [r7, #0]
	for (int row = 0; row < 8; row++){
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	e030      	b.n	8000b20 <writeBoardValue+0x72>
		uint8_t val = 0x0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	74fb      	strb	r3, [r7, #19]
		for (int col = 7; col > 0; col--){
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	e010      	b.n	8000aea <writeBoardValue+0x3c>
			val = (val << 1) | board[row][col];
 8000ac8:	7cfb      	ldrb	r3, [r7, #19]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	b25a      	sxtb	r2, r3
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	6839      	ldr	r1, [r7, #0]
 8000ad4:	4419      	add	r1, r3
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	440b      	add	r3, r1
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	b25b      	sxtb	r3, r3
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	b25b      	sxtb	r3, r3
 8000ae2:	74fb      	strb	r3, [r7, #19]
		for (int col = 7; col > 0; col--){
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	dceb      	bgt.n	8000ac8 <writeBoardValue+0x1a>
		}
		val |= board[row][0] << 7;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	683a      	ldr	r2, [r7, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	01db      	lsls	r3, r3, #7
 8000afc:	b25a      	sxtb	r2, r3
 8000afe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	b25b      	sxtb	r3, r3
 8000b06:	74fb      	strb	r3, [r7, #19]

		writeHexVal(hspi, LED_1 + row, val);
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	3360      	adds	r3, #96	; 0x60
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	7cfa      	ldrb	r2, [r7, #19]
 8000b12:	4619      	mov	r1, r3
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f000 f80b 	bl	8000b30 <writeHexVal>
	for (int row = 0; row < 8; row++){
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	2b07      	cmp	r3, #7
 8000b24:	ddcb      	ble.n	8000abe <writeBoardValue+0x10>
	}
}
 8000b26:	bf00      	nop
 8000b28:	bf00      	nop
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <writeHexVal>:
	board[row2][col2] = 1;

	writeBoardValue(hspi, board);
}

void writeHexVal(SPI_HandleTypeDef * hspi, uint8_t reg, uint8_t val){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	70fb      	strb	r3, [r7, #3]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	70bb      	strb	r3, [r7, #2]
	if (hspi->Instance == SPI2){
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a23      	ldr	r2, [pc, #140]	; (8000bd4 <writeHexVal+0xa4>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d10c      	bne.n	8000b64 <writeHexVal+0x34>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b50:	4821      	ldr	r0, [pc, #132]	; (8000bd8 <writeHexVal+0xa8>)
 8000b52:	f003 fec2 	bl	80048da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5c:	481e      	ldr	r0, [pc, #120]	; (8000bd8 <writeHexVal+0xa8>)
 8000b5e:	f003 febc 	bl	80048da <HAL_GPIO_WritePin>
 8000b62:	e010      	b.n	8000b86 <writeHexVal+0x56>
	}
	else if (hspi->Instance == SPI1){
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a1c      	ldr	r2, [pc, #112]	; (8000bdc <writeHexVal+0xac>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d10b      	bne.n	8000b86 <writeHexVal+0x56>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b74:	481a      	ldr	r0, [pc, #104]	; (8000be0 <writeHexVal+0xb0>)
 8000b76:	f003 feb0 	bl	80048da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b80:	4817      	ldr	r0, [pc, #92]	; (8000be0 <writeHexVal+0xb0>)
 8000b82:	f003 feaa 	bl	80048da <HAL_GPIO_WritePin>
	}

	HAL_SPI_Transmit(hspi, &reg, 1, 100);
 8000b86:	1cf9      	adds	r1, r7, #3
 8000b88:	2364      	movs	r3, #100	; 0x64
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f004 fcfa 	bl	8005586 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &val, 1, 100);
 8000b92:	1cb9      	adds	r1, r7, #2
 8000b94:	2364      	movs	r3, #100	; 0x64
 8000b96:	2201      	movs	r2, #1
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f004 fcf4 	bl	8005586 <HAL_SPI_Transmit>

	if (hspi->Instance == SPI2){
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a0c      	ldr	r2, [pc, #48]	; (8000bd4 <writeHexVal+0xa4>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d106      	bne.n	8000bb6 <writeHexVal+0x86>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bae:	480a      	ldr	r0, [pc, #40]	; (8000bd8 <writeHexVal+0xa8>)
 8000bb0:	f003 fe93 	bl	80048da <HAL_GPIO_WritePin>
	}
	else if (hspi->Instance == SPI1){
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
	}
}
 8000bb4:	e00a      	b.n	8000bcc <writeHexVal+0x9c>
	else if (hspi->Instance == SPI1){
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <writeHexVal+0xac>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d105      	bne.n	8000bcc <writeHexVal+0x9c>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc6:	4806      	ldr	r0, [pc, #24]	; (8000be0 <writeHexVal+0xb0>)
 8000bc8:	f003 fe87 	bl	80048da <HAL_GPIO_WritePin>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40003800 	.word	0x40003800
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	40013000 	.word	0x40013000
 8000be0:	40021000 	.word	0x40021000

08000be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b092      	sub	sp, #72	; 0x48
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bea:	f003 f99c 	bl	8003f26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bee:	f000 f8b9 	bl	8000d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf2:	f000 f9ed 	bl	8000fd0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000bf6:	f000 f94f 	bl	8000e98 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000bfa:	f000 f901 	bl	8000e00 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000bfe:	f000 f999 	bl	8000f34 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // Initialize LEDs //
  LEDSInit(&hspi1, 1);
 8000c02:	2101      	movs	r1, #1
 8000c04:	484c      	ldr	r0, [pc, #304]	; (8000d38 <main+0x154>)
 8000c06:	f7ff fe97 	bl	8000938 <LEDSInit>
  BoardLEDInit(&hspi1);
 8000c0a:	484b      	ldr	r0, [pc, #300]	; (8000d38 <main+0x154>)
 8000c0c:	f7ff ff3c 	bl	8000a88 <BoardLEDInit>
  uint8_t board[NUM_ROWS][NUM_COLS] = {0};
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2240      	movs	r2, #64	; 0x40
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f006 fd0a 	bl	8007630 <memset>
  writeBoardValue(&hspi1, board);
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4845      	ldr	r0, [pc, #276]	; (8000d38 <main+0x154>)
 8000c22:	f7ff ff44 	bl	8000aae <writeBoardValue>

  // Initialize Chessclock //
  LEDSInit(&hspi2, 2);
 8000c26:	2102      	movs	r1, #2
 8000c28:	4844      	ldr	r0, [pc, #272]	; (8000d3c <main+0x158>)
 8000c2a:	f7ff fe85 	bl	8000938 <LEDSInit>
  ChessTimerLEDInit(&hspi2);
 8000c2e:	4843      	ldr	r0, [pc, #268]	; (8000d3c <main+0x158>)
 8000c30:	f7ff ff14 	bl	8000a5c <ChessTimerLEDInit>
  InitChessClock(&hspi2, &htim3);
 8000c34:	4942      	ldr	r1, [pc, #264]	; (8000d40 <main+0x15c>)
 8000c36:	4841      	ldr	r0, [pc, #260]	; (8000d3c <main+0x158>)
 8000c38:	f7ff fce6 	bl	8000608 <InitChessClock>

  // Initialize Audio //
  SpeakerInit(&hdac, &htim4);
 8000c3c:	4941      	ldr	r1, [pc, #260]	; (8000d44 <main+0x160>)
 8000c3e:	4842      	ldr	r0, [pc, #264]	; (8000d48 <main+0x164>)
 8000c40:	f001 faec 	bl	800221c <SpeakerInit>
  WaveplayerInit(&hspi3, &hdac);
 8000c44:	4940      	ldr	r1, [pc, #256]	; (8000d48 <main+0x164>)
 8000c46:	4841      	ldr	r0, [pc, #260]	; (8000d4c <main+0x168>)
 8000c48:	f003 f8de 	bl	8003e08 <WaveplayerInit>
	  receiveData(&huart1, recv);
  }*/


  // Initialize Buttons
  InitButtons(&htim2, &htim5);
 8000c4c:	4940      	ldr	r1, [pc, #256]	; (8000d50 <main+0x16c>)
 8000c4e:	4841      	ldr	r0, [pc, #260]	; (8000d54 <main+0x170>)
 8000c50:	f7ff fc10 	bl	8000474 <InitButtons>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Get GameMode //
  gameMode = GetGameModeSwitchState();
 8000c54:	f7ff fc28 	bl	80004a8 <GetGameModeSwitchState>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	4b3e      	ldr	r3, [pc, #248]	; (8000d58 <main+0x174>)
 8000c5e:	701a      	strb	r2, [r3, #0]
  difficulty = GetDifficultySwitchState();
 8000c60:	f7ff fc44 	bl	80004ec <GetDifficultySwitchState>
 8000c64:	4603      	mov	r3, r0
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <main+0x178>)
 8000c6a:	701a      	strb	r2, [r3, #0]

  // Initialize AI //
  if(gameMode == PRACTICE)
 8000c6c:	4b3a      	ldr	r3, [pc, #232]	; (8000d58 <main+0x174>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d116      	bne.n	8000ca2 <main+0xbe>
  {
	EnableUart(&huart1);
 8000c74:	483a      	ldr	r0, [pc, #232]	; (8000d60 <main+0x17c>)
 8000c76:	f003 f821 	bl	8003cbc <EnableUart>
	uint8_t color = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	uint8_t edum = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	sendStart(&huart1, color, edum);
 8000c86:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000c8a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4833      	ldr	r0, [pc, #204]	; (8000d60 <main+0x17c>)
 8000c92:	f003 f868 	bl	8003d66 <sendStart>
	sendDifficulty(&huart1, difficulty);
 8000c96:	4b31      	ldr	r3, [pc, #196]	; (8000d5c <main+0x178>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4830      	ldr	r0, [pc, #192]	; (8000d60 <main+0x17c>)
 8000c9e:	f003 f876 	bl	8003d8e <sendDifficulty>
  }

  // Initialize Tracker component
  InitTracker(gameMode);
 8000ca2:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <main+0x174>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 fd64 	bl	8002774 <InitTracker>
  while(!ValidateStartPositions())
 8000cac:	e002      	b.n	8000cb4 <main+0xd0>
  {
	  HAL_Delay(10);
 8000cae:	200a      	movs	r0, #10
 8000cb0:	f003 f9a8 	bl	8004004 <HAL_Delay>
  while(!ValidateStartPositions())
 8000cb4:	f002 fcd0 	bl	8003658 <ValidateStartPositions>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f7      	beq.n	8000cae <main+0xca>
  }

  // Splash LEDs
  for(uint8_t i = 0; i < 8; i++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000cc4:	e026      	b.n	8000d14 <main+0x130>
  {
	  board[i][0] = 1;
 8000cc6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000cd0:	4413      	add	r3, r2
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f803 2c44 	strb.w	r2, [r3, #-68]
	  board[i][7] = 1;
 8000cd8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000ce2:	4413      	add	r3, r2
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f803 2c3d 	strb.w	r2, [r3, #-61]
	  board[0][i] = 1;
 8000cea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000cee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000cf2:	4413      	add	r3, r2
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f803 2c44 	strb.w	r2, [r3, #-68]
	  board[7][i] = 1;
 8000cfa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000cfe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000d02:	4413      	add	r3, r2
 8000d04:	2201      	movs	r2, #1
 8000d06:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t i = 0; i < 8; i++)
 8000d0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d0e:	3301      	adds	r3, #1
 8000d10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000d14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d18:	2b07      	cmp	r3, #7
 8000d1a:	d9d4      	bls.n	8000cc6 <main+0xe2>
  }
  writeBoardValue(&hspi1, board);
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <main+0x154>)
 8000d22:	f7ff fec4 	bl	8000aae <writeBoardValue>

  // Start ChessClock
  StartChessClock();
 8000d26:	f7ff fca1 	bl	800066c <StartChessClock>

  while (1)
  {
	  //TestLEDs();
	  Track();
 8000d2a:	f001 fe1f 	bl	800296c <Track>
	  HAL_Delay(10);
 8000d2e:	200a      	movs	r0, #10
 8000d30:	f003 f968 	bl	8004004 <HAL_Delay>
	  Track();
 8000d34:	e7f9      	b.n	8000d2a <main+0x146>
 8000d36:	bf00      	nop
 8000d38:	200018ec 	.word	0x200018ec
 8000d3c:	200016dc 	.word	0x200016dc
 8000d40:	200017b4 	.word	0x200017b4
 8000d44:	20001734 	.word	0x20001734
 8000d48:	20001894 	.word	0x20001894
 8000d4c:	200017f4 	.word	0x200017f4
 8000d50:	20001774 	.word	0x20001774
 8000d54:	20001944 	.word	0x20001944
 8000d58:	2000184c 	.word	0x2000184c
 8000d5c:	20001984 	.word	0x20001984
 8000d60:	20001850 	.word	0x20001850

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b092      	sub	sp, #72	; 0x48
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	2234      	movs	r2, #52	; 0x34
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f006 fc5c 	bl	8007630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d86:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <SystemClock_Config+0x98>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000d8e:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <SystemClock_Config+0x98>)
 8000d90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d94:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d96:	2302      	movs	r3, #2
 8000d98:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d9e:	2310      	movs	r3, #16
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da2:	2302      	movs	r3, #2
 8000da4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000da6:	2300      	movs	r3, #0
 8000da8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000daa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000dae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000db0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000db4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f003 fdbe 	bl	800493c <HAL_RCC_OscConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000dc6:	f000 fa63 	bl	8001290 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dca:	230f      	movs	r3, #15
 8000dcc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dde:	463b      	mov	r3, r7
 8000de0:	2101      	movs	r1, #1
 8000de2:	4618      	mov	r0, r3
 8000de4:	f004 f8da 	bl	8004f9c <HAL_RCC_ClockConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000dee:	f000 fa4f 	bl	8001290 <Error_Handler>
  }
}
 8000df2:	bf00      	nop
 8000df4:	3748      	adds	r7, #72	; 0x48
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40007000 	.word	0x40007000

08000e00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e14:	463b      	mov	r3, r7
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3200;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e26:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000e2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e34:	2264      	movs	r2, #100	; 0x64
 8000e36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e44:	4813      	ldr	r0, [pc, #76]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e46:	f004 ff47 	bl	8005cd8 <HAL_TIM_Base_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e50:	f000 fa1e 	bl	8001290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480c      	ldr	r0, [pc, #48]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e62:	f005 f917 	bl	8006094 <HAL_TIM_ConfigClockSource>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e6c:	f000 fa10 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e7e:	f005 faf7 	bl	8006470 <HAL_TIMEx_MasterConfigSynchronization>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e88:	f000 fa02 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20001944 	.word	0x20001944

08000e98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eac:	463b      	mov	r3, r7
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <MX_TIM3_Init+0x94>)
 8000eb6:	4a1e      	ldr	r2, [pc, #120]	; (8000f30 <MX_TIM3_Init+0x98>)
 8000eb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000-1;
 8000eba:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <MX_TIM3_Init+0x94>)
 8000ebc:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000ec0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <MX_TIM3_Init+0x94>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000ec8:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <MX_TIM3_Init+0x94>)
 8000eca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ece:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <MX_TIM3_Init+0x94>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <MX_TIM3_Init+0x94>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000edc:	4813      	ldr	r0, [pc, #76]	; (8000f2c <MX_TIM3_Init+0x94>)
 8000ede:	f004 fefb 	bl	8005cd8 <HAL_TIM_Base_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ee8:	f000 f9d2 	bl	8001290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <MX_TIM3_Init+0x94>)
 8000efa:	f005 f8cb 	bl	8006094 <HAL_TIM_ConfigClockSource>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000f04:	f000 f9c4 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f10:	463b      	mov	r3, r7
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_TIM3_Init+0x94>)
 8000f16:	f005 faab 	bl	8006470 <HAL_TIMEx_MasterConfigSynchronization>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000f20:	f000 f9b6 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200017b4 	.word	0x200017b4
 8000f30:	40000400 	.word	0x40000400

08000f34 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f50:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <MX_TIM5_Init+0x94>)
 8000f52:	4a1e      	ldr	r2, [pc, #120]	; (8000fcc <MX_TIM5_Init+0x98>)
 8000f54:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 3200;
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <MX_TIM5_Init+0x94>)
 8000f58:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000f5c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <MX_TIM5_Init+0x94>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <MX_TIM5_Init+0x94>)
 8000f66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f6a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <MX_TIM5_Init+0x94>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <MX_TIM5_Init+0x94>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f78:	4813      	ldr	r0, [pc, #76]	; (8000fc8 <MX_TIM5_Init+0x94>)
 8000f7a:	f004 fead 	bl	8005cd8 <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000f84:	f000 f984 	bl	8001290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	4619      	mov	r1, r3
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <MX_TIM5_Init+0x94>)
 8000f96:	f005 f87d 	bl	8006094 <HAL_TIM_ConfigClockSource>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000fa0:	f000 f976 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fac:	463b      	mov	r3, r7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_TIM5_Init+0x94>)
 8000fb2:	f005 fa5d 	bl	8006470 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000fbc:	f000 f968 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20001774 	.word	0x20001774
 8000fcc:	40000c00 	.word	0x40000c00

08000fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08c      	sub	sp, #48	; 0x30
 8000fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fe6:	4b76      	ldr	r3, [pc, #472]	; (80011c0 <MX_GPIO_Init+0x1f0>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	4a75      	ldr	r2, [pc, #468]	; (80011c0 <MX_GPIO_Init+0x1f0>)
 8000fec:	f043 0310 	orr.w	r3, r3, #16
 8000ff0:	61d3      	str	r3, [r2, #28]
 8000ff2:	4b73      	ldr	r3, [pc, #460]	; (80011c0 <MX_GPIO_Init+0x1f0>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	61bb      	str	r3, [r7, #24]
 8000ffc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b70      	ldr	r3, [pc, #448]	; (80011c0 <MX_GPIO_Init+0x1f0>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4a6f      	ldr	r2, [pc, #444]	; (80011c0 <MX_GPIO_Init+0x1f0>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	61d3      	str	r3, [r2, #28]
 800100a:	4b6d      	ldr	r3, [pc, #436]	; (80011c0 <MX_GPIO_Init+0x1f0>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001016:	4b6a      	ldr	r3, [pc, #424]	; (80011c0 <MX_GPIO_Init+0x1f0>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4a69      	ldr	r2, [pc, #420]	; (80011c0 <MX_GPIO_Init+0x1f0>)
 800101c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001020:	61d3      	str	r3, [r2, #28]
 8001022:	4b67      	ldr	r3, [pc, #412]	; (80011c0 <MX_GPIO_Init+0x1f0>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800102e:	4b64      	ldr	r3, [pc, #400]	; (80011c0 <MX_GPIO_Init+0x1f0>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	4a63      	ldr	r2, [pc, #396]	; (80011c0 <MX_GPIO_Init+0x1f0>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001038:	61d3      	str	r3, [r2, #28]
 800103a:	4b61      	ldr	r3, [pc, #388]	; (80011c0 <MX_GPIO_Init+0x1f0>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	4b5e      	ldr	r3, [pc, #376]	; (80011c0 <MX_GPIO_Init+0x1f0>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	4a5d      	ldr	r2, [pc, #372]	; (80011c0 <MX_GPIO_Init+0x1f0>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	61d3      	str	r3, [r2, #28]
 8001052:	4b5b      	ldr	r3, [pc, #364]	; (80011c0 <MX_GPIO_Init+0x1f0>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800105e:	4b58      	ldr	r3, [pc, #352]	; (80011c0 <MX_GPIO_Init+0x1f0>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a57      	ldr	r2, [pc, #348]	; (80011c0 <MX_GPIO_Init+0x1f0>)
 8001064:	f043 0308 	orr.w	r3, r3, #8
 8001068:	61d3      	str	r3, [r2, #28]
 800106a:	4b55      	ldr	r3, [pc, #340]	; (80011c0 <MX_GPIO_Init+0x1f0>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 0308 	and.w	r3, r3, #8
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	4b52      	ldr	r3, [pc, #328]	; (80011c0 <MX_GPIO_Init+0x1f0>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	4a51      	ldr	r2, [pc, #324]	; (80011c0 <MX_GPIO_Init+0x1f0>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	61d3      	str	r3, [r2, #28]
 8001082:	4b4f      	ldr	r3, [pc, #316]	; (80011c0 <MX_GPIO_Init+0x1f0>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEARTBEAT_LED_GPIO_Port, HEARTBEAT_LED_Pin, GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	2104      	movs	r1, #4
 8001092:	484c      	ldr	r0, [pc, #304]	; (80011c4 <MX_GPIO_Init+0x1f4>)
 8001094:	f003 fc21 	bl	80048da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HALLSEL0_Pin|HALLSEL1_Pin|HALLSEL2_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2107      	movs	r1, #7
 800109c:	484a      	ldr	r0, [pc, #296]	; (80011c8 <MX_GPIO_Init+0x1f8>)
 800109e:	f003 fc1c 	bl	80048da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a8:	4846      	ldr	r0, [pc, #280]	; (80011c4 <MX_GPIO_Init+0x1f4>)
 80010aa:	f003 fc16 	bl	80048da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|SD_CS_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f240 1101 	movw	r1, #257	; 0x101
 80010b4:	4845      	ldr	r0, [pc, #276]	; (80011cc <MX_GPIO_Init+0x1fc>)
 80010b6:	f003 fc10 	bl	80048da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HEARTBEAT_LED_Pin PE12 */
  GPIO_InitStruct.Pin = HEARTBEAT_LED_Pin|GPIO_PIN_12;
 80010ba:	f241 0304 	movw	r3, #4100	; 0x1004
 80010be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	483c      	ldr	r0, [pc, #240]	; (80011c4 <MX_GPIO_Init+0x1f4>)
 80010d4:	f003 fa5a 	bl	800458c <HAL_GPIO_Init>

  /*Configure GPIO pins : HALLSEL0_Pin HALLSEL1_Pin HALLSEL2_Pin */
  GPIO_InitStruct.Pin = HALLSEL0_Pin|HALLSEL1_Pin|HALLSEL2_Pin;
 80010d8:	2307      	movs	r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	2301      	movs	r3, #1
 80010de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	4619      	mov	r1, r3
 80010ee:	4836      	ldr	r0, [pc, #216]	; (80011c8 <MX_GPIO_Init+0x1f8>)
 80010f0:	f003 fa4c 	bl	800458c <HAL_GPIO_Init>

  /*Configure GPIO pins : HALLOUT0_Pin HALLOUT1_Pin HALLOUT2_Pin */
  GPIO_InitStruct.Pin = HALLOUT0_Pin|HALLOUT1_Pin|HALLOUT2_Pin;
 80010f4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4619      	mov	r1, r3
 8001108:	4831      	ldr	r0, [pc, #196]	; (80011d0 <MX_GPIO_Init+0x200>)
 800110a:	f003 fa3f 	bl	800458c <HAL_GPIO_Init>

  /*Configure GPIO pins : HALLOUT3_Pin HALLOUT4_Pin SWITCH1_1_Pin SWITCH1_2_Pin
                           SWITCH1_3_Pin */
  GPIO_InitStruct.Pin = HALLOUT3_Pin|HALLOUT4_Pin|SWITCH1_1_Pin|SWITCH1_2_Pin
 800110e:	233b      	movs	r3, #59	; 0x3b
 8001110:	61fb      	str	r3, [r7, #28]
                          |SWITCH1_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4619      	mov	r1, r3
 8001120:	482c      	ldr	r0, [pc, #176]	; (80011d4 <MX_GPIO_Init+0x204>)
 8001122:	f003 fa33 	bl	800458c <HAL_GPIO_Init>

  /*Configure GPIO pins : HALLOUT5_Pin HALLOUT6_Pin HALLOUT7_Pin */
  GPIO_InitStruct.Pin = HALLOUT5_Pin|HALLOUT6_Pin|HALLOUT7_Pin;
 8001126:	f44f 7360 	mov.w	r3, #896	; 0x380
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4619      	mov	r1, r3
 800113a:	4822      	ldr	r0, [pc, #136]	; (80011c4 <MX_GPIO_Init+0x1f4>)
 800113c:	f003 fa26 	bl	800458c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 SD_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|SD_CS_Pin;
 8001140:	f240 1301 	movw	r3, #257	; 0x101
 8001144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2301      	movs	r3, #1
 8001148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	481c      	ldr	r0, [pc, #112]	; (80011cc <MX_GPIO_Init+0x1fc>)
 800115a:	f003 fa17 	bl	800458c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 800115e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001164:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4619      	mov	r1, r3
 8001174:	4815      	ldr	r0, [pc, #84]	; (80011cc <MX_GPIO_Init+0x1fc>)
 8001176:	f003 fa09 	bl	800458c <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH2_1_Pin SWITCH2_2_Pin SWITCH2_3_Pin */
  GPIO_InitStruct.Pin = SWITCH2_1_Pin|SWITCH2_2_Pin|SWITCH2_3_Pin;
 800117a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001180:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	4619      	mov	r1, r3
 8001190:	4810      	ldr	r0, [pc, #64]	; (80011d4 <MX_GPIO_Init+0x204>)
 8001192:	f003 f9fb 	bl	800458c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	2017      	movs	r0, #23
 800119c:	f003 f82b 	bl	80041f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011a0:	2017      	movs	r0, #23
 80011a2:	f003 f844 	bl	800422e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2028      	movs	r0, #40	; 0x28
 80011ac:	f003 f823 	bl	80041f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011b0:	2028      	movs	r0, #40	; 0x28
 80011b2:	f003 f83c 	bl	800422e <HAL_NVIC_EnableIRQ>

}
 80011b6:	bf00      	nop
 80011b8:	3730      	adds	r7, #48	; 0x30
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40020000 	.word	0x40020000
 80011cc:	40020c00 	.word	0x40020c00
 80011d0:	40021800 	.word	0x40021800
 80011d4:	40021c00 	.word	0x40021c00

080011d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Chess clock callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d105      	bne.n	80011f6 <HAL_TIM_PeriodElapsedCallback+0x1e>
	  ChessClockTimerCallback(GetCurrentTurn());
 80011ea:	f002 fd5d 	bl	8003ca8 <GetCurrentTurn>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fa53 	bl	800069c <ChessClockTimerCallback>
  }
  if (htim->Instance == TIM2) {
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011fe:	d101      	bne.n	8001204 <HAL_TIM_PeriodElapsedCallback+0x2c>
	  Button1DebounceTimerCallback();
 8001200:	f7ff f998 	bl	8000534 <Button1DebounceTimerCallback>
  }
  if (htim->Instance == TIM5) {
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a05      	ldr	r2, [pc, #20]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d101      	bne.n	8001212 <HAL_TIM_PeriodElapsedCallback+0x3a>
	  Button2DebounceTimerCallback();
 800120e:	f7ff f9a9 	bl	8000564 <Button2DebounceTimerCallback>
  }
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40000400 	.word	0x40000400
 8001220:	40000c00 	.word	0x40000c00

08001224 <HAL_GPIO_EXTI_Callback>:

// Button0 and Button1 callbacks
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON1_Pin)
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001234:	d102      	bne.n	800123c <HAL_GPIO_EXTI_Callback+0x18>
	{
		Button1Callback();
 8001236:	f7ff f9ad 	bl	8000594 <Button1Callback>
		if (diff != difficulty){
			sendDifficulty(&huart1, diff);
			difficulty = diff;
		}
	}
}
 800123a:	e021      	b.n	8001280 <HAL_GPIO_EXTI_Callback+0x5c>
	else if(GPIO_Pin == BUTTON2_Pin)
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001242:	d102      	bne.n	800124a <HAL_GPIO_EXTI_Callback+0x26>
		Button2Callback();
 8001244:	f7ff f9b2 	bl	80005ac <Button2Callback>
}
 8001248:	e01a      	b.n	8001280 <HAL_GPIO_EXTI_Callback+0x5c>
	else if (GPIO_Pin == SWITCH2_1_Pin ||
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	2b40      	cmp	r3, #64	; 0x40
 800124e:	d006      	beq.n	800125e <HAL_GPIO_EXTI_Callback+0x3a>
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	2b80      	cmp	r3, #128	; 0x80
 8001254:	d003      	beq.n	800125e <HAL_GPIO_EXTI_Callback+0x3a>
			 GPIO_Pin == SWITCH2_2_Pin ||
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800125c:	d110      	bne.n	8001280 <HAL_GPIO_EXTI_Callback+0x5c>
		enum AiDifficulty diff = GetDifficultySwitchState();
 800125e:	f7ff f945 	bl	80004ec <GetDifficultySwitchState>
 8001262:	4603      	mov	r3, r0
 8001264:	73fb      	strb	r3, [r7, #15]
		if (diff != difficulty){
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_GPIO_EXTI_Callback+0x64>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	7bfa      	ldrb	r2, [r7, #15]
 800126c:	429a      	cmp	r2, r3
 800126e:	d007      	beq.n	8001280 <HAL_GPIO_EXTI_Callback+0x5c>
			sendDifficulty(&huart1, diff);
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <HAL_GPIO_EXTI_Callback+0x68>)
 8001276:	f002 fd8a 	bl	8003d8e <sendDifficulty>
			difficulty = diff;
 800127a:	4a03      	ldr	r2, [pc, #12]	; (8001288 <HAL_GPIO_EXTI_Callback+0x64>)
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	7013      	strb	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20001984 	.word	0x20001984
 800128c:	20001850 	.word	0x20001850

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
}
 8001296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001298:	e7fe      	b.n	8001298 <Error_Handler+0x8>
	...

0800129c <CalculateTeamsLegalMoves>:

// All legal moves for the current team - calculated at the beginning of each turn
static struct Moves LegalMoveSet[PIECES_PER_TEAM];

void CalculateTeamsLegalMoves(enum PieceOwner owner)
{
 800129c:	b5b0      	push	{r4, r5, r7, lr}
 800129e:	b0a4      	sub	sp, #144	; 0x90
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
	// Initialize MockChessboard with current chessboard
	for (uint8_t row = 0; row < NUM_ROWS; row++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80012ac:	e023      	b.n	80012f6 <CalculateTeamsLegalMoves+0x5a>
	{
		for (uint8_t column = 0; column < NUM_COLS; column++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 80012b4:	e016      	b.n	80012e4 <CalculateTeamsLegalMoves+0x48>
		{
			MockChessboard[row][column] = GetPiece(row, column);
 80012b6:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80012ba:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80012be:	4d47      	ldr	r5, [pc, #284]	; (80013dc <CalculateTeamsLegalMoves+0x140>)
 80012c0:	00d2      	lsls	r2, r2, #3
 80012c2:	18d4      	adds	r4, r2, r3
 80012c4:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 80012c8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80012cc:	4611      	mov	r1, r2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 fc26 	bl	8003b20 <GetPiece>
 80012d4:	4603      	mov	r3, r0
 80012d6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		for (uint8_t column = 0; column < NUM_COLS; column++)
 80012da:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80012de:	3301      	adds	r3, #1
 80012e0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 80012e4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80012e8:	2b07      	cmp	r3, #7
 80012ea:	d9e4      	bls.n	80012b6 <CalculateTeamsLegalMoves+0x1a>
	for (uint8_t row = 0; row < NUM_ROWS; row++)
 80012ec:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80012f0:	3301      	adds	r3, #1
 80012f2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80012f6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80012fa:	2b07      	cmp	r3, #7
 80012fc:	d9d7      	bls.n	80012ae <CalculateTeamsLegalMoves+0x12>
	}

	// Get all pieces for this team
	uint8_t numTeamPieces;
	struct PieceCoordinate teamsPieces[PIECES_PER_TEAM];
	GetPiecesForTeam(owner, teamsPieces, &numTeamPieces);
 80012fe:	f107 028b 	add.w	r2, r7, #139	; 0x8b
 8001302:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	4618      	mov	r0, r3
 800130a:	f000 fda5 	bl	8001e58 <GetPiecesForTeam>

	for (uint8_t i = 0; i < numTeamPieces; i++)
 800130e:	2300      	movs	r3, #0
 8001310:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8001314:	e057      	b.n	80013c6 <CalculateTeamsLegalMoves+0x12a>
	{
		struct PieceCoordinate teamPiece = teamsPieces[i];
 8001316:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001320:	4413      	add	r3, r2
 8001322:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001326:	647b      	str	r3, [r7, #68]	; 0x44

		// Get all legal paths for teamPiece
		uint8_t numLegalPaths;
		struct Coordinate allLegalPaths[MAX_LEGAL_MOVES];
		CalculateAllLegalPathsAndChecks(teamPiece, allLegalPaths, &numLegalPaths);
 8001328:	f107 0243 	add.w	r2, r7, #67	; 0x43
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	4619      	mov	r1, r3
 8001332:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001334:	f000 f8ce 	bl	80014d4 <CalculateAllLegalPathsAndChecks>

		// Add possible moves for this piece
		LegalMoveSet[i].from = teamPiece;
 8001338:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 800133c:	4928      	ldr	r1, [pc, #160]	; (80013e0 <CalculateTeamsLegalMoves+0x144>)
 800133e:	4613      	mov	r3, r2
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	1a9b      	subs	r3, r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	1a9b      	subs	r3, r3, r2
 8001348:	440b      	add	r3, r1
 800134a:	461a      	mov	r2, r3
 800134c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	6010      	str	r0, [r2, #0]
		LegalMoveSet[i].numMoves = numLegalPaths;
 8001354:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 8001358:	f897 0043 	ldrb.w	r0, [r7, #67]	; 0x43
 800135c:	4920      	ldr	r1, [pc, #128]	; (80013e0 <CalculateTeamsLegalMoves+0x144>)
 800135e:	4613      	mov	r3, r2
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	1a9b      	subs	r3, r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	1a9b      	subs	r3, r3, r2
 8001368:	440b      	add	r3, r1
 800136a:	333a      	adds	r3, #58	; 0x3a
 800136c:	4602      	mov	r2, r0
 800136e:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < numLegalPaths; j++)
 8001370:	2300      	movs	r3, #0
 8001372:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8001376:	e01b      	b.n	80013b0 <CalculateTeamsLegalMoves+0x114>
		{
			LegalMoveSet[i].moves[j] = allLegalPaths[j];
 8001378:	f897 108c 	ldrb.w	r1, [r7, #140]	; 0x8c
 800137c:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 8001380:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001384:	4c16      	ldr	r4, [pc, #88]	; (80013e0 <CalculateTeamsLegalMoves+0x144>)
 8001386:	0058      	lsls	r0, r3, #1
 8001388:	4613      	mov	r3, r2
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	1a9b      	subs	r3, r3, r2
 8001392:	4403      	add	r3, r0
 8001394:	4423      	add	r3, r4
 8001396:	1d1a      	adds	r2, r3, #4
 8001398:	004b      	lsls	r3, r1, #1
 800139a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800139e:	440b      	add	r3, r1
 80013a0:	3b84      	subs	r3, #132	; 0x84
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	8013      	strh	r3, [r2, #0]
		for (uint8_t j = 0; j < numLegalPaths; j++)
 80013a6:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80013aa:	3301      	adds	r3, #1
 80013ac:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 80013b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80013b4:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d3dd      	bcc.n	8001378 <CalculateTeamsLegalMoves+0xdc>
	for (uint8_t i = 0; i < numTeamPieces; i++)
 80013bc:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80013c0:	3301      	adds	r3, #1
 80013c2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 80013c6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80013ca:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d3a1      	bcc.n	8001316 <CalculateTeamsLegalMoves+0x7a>
		}
	}
}
 80013d2:	bf00      	nop
 80013d4:	bf00      	nop
 80013d6:	3790      	adds	r7, #144	; 0x90
 80013d8:	46bd      	mov	sp, r7
 80013da:	bdb0      	pop	{r4, r5, r7, pc}
 80013dc:	200000f0 	.word	0x200000f0
 80013e0:	20000170 	.word	0x20000170

080013e4 <IsLegalMove>:

uint8_t IsLegalMove(struct PieceCoordinate from, struct PieceCoordinate to)
{
 80013e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e6:	b093      	sub	sp, #76	; 0x4c
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
	// Find the legal moves for "from"
	struct Moves legalMoves;
	for (uint8_t i = 0; i < PIECES_PER_TEAM; i++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80013f4:	e03a      	b.n	800146c <IsLegalMove+0x88>
	{
		if (IsPieceCoordinateEqual(from, LegalMoveSet[i].from))
 80013f6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80013fa:	4935      	ldr	r1, [pc, #212]	; (80014d0 <IsLegalMove+0xec>)
 80013fc:	4613      	mov	r3, r2
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	1a9b      	subs	r3, r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	1a9b      	subs	r3, r3, r2
 8001406:	440b      	add	r3, r1
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	2300      	movs	r3, #0
 800140c:	4613      	mov	r3, r2
 800140e:	4619      	mov	r1, r3
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f002 fc17 	bl	8003c44 <IsPieceCoordinateEqual>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d022      	beq.n	8001462 <IsLegalMove+0x7e>
		{
			legalMoves = LegalMoveSet[i];
 800141c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001420:	492b      	ldr	r1, [pc, #172]	; (80014d0 <IsLegalMove+0xec>)
 8001422:	4613      	mov	r3, r2
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	1a9b      	subs	r3, r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	1a9b      	subs	r3, r3, r2
 800142c:	440b      	add	r3, r1
 800142e:	461c      	mov	r4, r3
 8001430:	f107 0608 	add.w	r6, r7, #8
 8001434:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8001438:	4635      	mov	r5, r6
 800143a:	4623      	mov	r3, r4
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	6859      	ldr	r1, [r3, #4]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001446:	3410      	adds	r4, #16
 8001448:	3610      	adds	r6, #16
 800144a:	4564      	cmp	r4, ip
 800144c:	d1f4      	bne.n	8001438 <IsLegalMove+0x54>
 800144e:	4633      	mov	r3, r6
 8001450:	4622      	mov	r2, r4
 8001452:	6810      	ldr	r0, [r2, #0]
 8001454:	6851      	ldr	r1, [r2, #4]
 8001456:	c303      	stmia	r3!, {r0, r1}
 8001458:	8911      	ldrh	r1, [r2, #8]
 800145a:	7a92      	ldrb	r2, [r2, #10]
 800145c:	8019      	strh	r1, [r3, #0]
 800145e:	709a      	strb	r2, [r3, #2]
			break;
 8001460:	e008      	b.n	8001474 <IsLegalMove+0x90>
	for (uint8_t i = 0; i < PIECES_PER_TEAM; i++)
 8001462:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001466:	3301      	adds	r3, #1
 8001468:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800146c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d9c0      	bls.n	80013f6 <IsLegalMove+0x12>
		}
	}

	// Go through all legal moves and make sure "to" is in there
	for (uint8_t i = 0; i < legalMoves.numMoves; i++)
 8001474:	2300      	movs	r3, #0
 8001476:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800147a:	e01e      	b.n	80014ba <IsLegalMove+0xd6>
	{
		if ((to.row == legalMoves.moves[i].row) && (to.column == legalMoves.moves[i].column))
 800147c:	78bb      	ldrb	r3, [r7, #2]
 800147e:	461a      	mov	r2, r3
 8001480:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800148a:	440b      	add	r3, r1
 800148c:	f913 3c3c 	ldrsb.w	r3, [r3, #-60]
 8001490:	429a      	cmp	r2, r3
 8001492:	d10d      	bne.n	80014b0 <IsLegalMove+0xcc>
 8001494:	78fb      	ldrb	r3, [r7, #3]
 8001496:	461a      	mov	r2, r3
 8001498:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80014a2:	440b      	add	r3, r1
 80014a4:	f913 3c3b 	ldrsb.w	r3, [r3, #-59]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d101      	bne.n	80014b0 <IsLegalMove+0xcc>
		{
			return 1;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e00b      	b.n	80014c8 <IsLegalMove+0xe4>
	for (uint8_t i = 0; i < legalMoves.numMoves; i++)
 80014b0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80014b4:	3301      	adds	r3, #1
 80014b6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80014ba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80014be:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d3da      	bcc.n	800147c <IsLegalMove+0x98>
		}
	}
	return 0;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	374c      	adds	r7, #76	; 0x4c
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d0:	20000170 	.word	0x20000170

080014d4 <CalculateAllLegalPathsAndChecks>:


void CalculateAllLegalPathsAndChecks(struct PieceCoordinate from, struct Coordinate* allLegalPaths, uint8_t* numLegalPaths)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]

	CalculateAllLegalPaths(from, allLegalPaths, numLegalPaths, 1);
 80014e0:	2301      	movs	r3, #1
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f000 f814 	bl	8001514 <CalculateAllLegalPaths>
}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <CalculateAllLegalPathsNoChecks>:

/**
 * @brief Calculates all legal paths but without regard for putting their own king in check. Used by WillResultInSelfCheck for each enemy piece.
 */
static void CalculateAllLegalPathsNoChecks(struct PieceCoordinate from, struct Coordinate* allLegalPaths, uint8_t* numLegalPaths)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
	CalculateAllLegalPaths(from, allLegalPaths, numLegalPaths, 0);
 8001500:	2300      	movs	r3, #0
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f804 	bl	8001514 <CalculateAllLegalPaths>
}
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <CalculateAllLegalPaths>:

/**
 * @brief Calculates all legal paths with trimming off moves that would put their king in check controlled by calculateCheck
 */
static void CalculateAllLegalPaths(struct PieceCoordinate from, struct Coordinate* allLegalPaths, uint8_t* numLegalPaths, uint8_t calculateCheck)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b094      	sub	sp, #80	; 0x50
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	70fb      	strb	r3, [r7, #3]
	*numLegalPaths = 0;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]

	// Get all paths
	uint8_t numPaths;
	struct Coordinate allPaths[MAX_LEGAL_MOVES] = { 0 };
 8001528:	f107 0318 	add.w	r3, r7, #24
 800152c:	2236      	movs	r2, #54	; 0x36
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f006 f87d 	bl	8007630 <memset>
	CalculateAllPaths(from, &numPaths, allPaths);
 8001536:	f107 0218 	add.w	r2, r7, #24
 800153a:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 800153e:	4619      	mov	r1, r3
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f000 f889 	bl	8001658 <CalculateAllPaths>

	// Populate legal paths from all paths
	for (uint8_t i = 0; i < numPaths; i++)
 8001546:	2300      	movs	r3, #0
 8001548:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800154c:	e076      	b.n	800163c <CalculateAllLegalPaths+0x128>
	{
		struct Coordinate path = allPaths[i];
 800154e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001558:	4413      	add	r3, r2
 800155a:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 800155e:	82bb      	strh	r3, [r7, #20]
		struct PieceCoordinate to = { MockChessboard[path.row][path.column], path.row, path.column };
 8001560:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001564:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001568:	4611      	mov	r1, r2
 800156a:	4a3a      	ldr	r2, [pc, #232]	; (8001654 <CalculateAllLegalPaths+0x140>)
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	440b      	add	r3, r1
 8001570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001574:	823b      	strh	r3, [r7, #16]
 8001576:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	74bb      	strb	r3, [r7, #18]
 800157e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	74fb      	strb	r3, [r7, #19]

		if (IsPieceCoordinateSameTeam(from, to))
 8001586:	6939      	ldr	r1, [r7, #16]
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f000 fd87 	bl	800209c <IsPieceCoordinateSameTeam>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d145      	bne.n	8001620 <CalculateAllLegalPaths+0x10c>
		{
			continue;
		}
		else if (IsPieceMovingStraight(from, to) && IsPieceBlockingStraight(from, to))
 8001594:	6939      	ldr	r1, [r7, #16]
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f000 fd48 	bl	800202c <IsPieceMovingStraight>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d006      	beq.n	80015b0 <CalculateAllLegalPaths+0x9c>
 80015a2:	6939      	ldr	r1, [r7, #16]
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f000 fb4f 	bl	8001c48 <IsPieceBlockingStraight>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d139      	bne.n	8001624 <CalculateAllLegalPaths+0x110>
		{
			continue;
		}
		else if (IsPieceMovingDiagonal(from, to))
 80015b0:	6939      	ldr	r1, [r7, #16]
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f000 fd50 	bl	8002058 <IsPieceMovingDiagonal>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d017      	beq.n	80015ee <CalculateAllLegalPaths+0xda>
		{
			// For pawn to move in diagonal line, it must have an enemy piece on the diagonal
			if ((from.piece.type == PAWN) && (to.piece.owner == NEUTRAL))
 80015be:	7b3b      	ldrb	r3, [r7, #12]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d102      	bne.n	80015ca <CalculateAllLegalPaths+0xb6>
 80015c4:	7c7b      	ldrb	r3, [r7, #17]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d02e      	beq.n	8001628 <CalculateAllLegalPaths+0x114>
			{
				continue;
			}
			else if (IsPieceBlockingDiagonal(from, to))
 80015ca:	6939      	ldr	r1, [r7, #16]
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f000 fc85 	bl	8001edc <IsPieceBlockingDiagonal>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d129      	bne.n	800162c <CalculateAllLegalPaths+0x118>
			{
				continue;
			}
			else if (calculateCheck && WillResultInSelfCheck(from, to))
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d011      	beq.n	8001602 <CalculateAllLegalPaths+0xee>
 80015de:	6939      	ldr	r1, [r7, #16]
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 fb8d 	bl	8001d00 <WillResultInSelfCheck>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00a      	beq.n	8001602 <CalculateAllLegalPaths+0xee>
			{
				continue;
 80015ec:	e021      	b.n	8001632 <CalculateAllLegalPaths+0x11e>
			}
		}
		else if (calculateCheck && WillResultInSelfCheck(from, to))
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <CalculateAllLegalPaths+0xee>
 80015f4:	6939      	ldr	r1, [r7, #16]
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f000 fb82 	bl	8001d00 <WillResultInSelfCheck>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d116      	bne.n	8001630 <CalculateAllLegalPaths+0x11c>
		{
			continue;
		}
		allLegalPaths[(*numLegalPaths)++] = path;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	b2d1      	uxtb	r1, r2
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	7011      	strb	r1, [r2, #0]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	4413      	add	r3, r2
 8001614:	461a      	mov	r2, r3
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	8013      	strh	r3, [r2, #0]
 800161e:	e008      	b.n	8001632 <CalculateAllLegalPaths+0x11e>
			continue;
 8001620:	bf00      	nop
 8001622:	e006      	b.n	8001632 <CalculateAllLegalPaths+0x11e>
			continue;
 8001624:	bf00      	nop
 8001626:	e004      	b.n	8001632 <CalculateAllLegalPaths+0x11e>
				continue;
 8001628:	bf00      	nop
 800162a:	e002      	b.n	8001632 <CalculateAllLegalPaths+0x11e>
				continue;
 800162c:	bf00      	nop
 800162e:	e000      	b.n	8001632 <CalculateAllLegalPaths+0x11e>
			continue;
 8001630:	bf00      	nop
	for (uint8_t i = 0; i < numPaths; i++)
 8001632:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001636:	3301      	adds	r3, #1
 8001638:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800163c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001640:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001644:	429a      	cmp	r2, r3
 8001646:	d382      	bcc.n	800154e <CalculateAllLegalPaths+0x3a>
	}
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3750      	adds	r7, #80	; 0x50
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200000f0 	.word	0x200000f0

08001658 <CalculateAllPaths>:

static void CalculateAllPaths(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
	*numPaths = 0;
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]

	switch (pieceCoordinate.piece.type)
 800166a:	7b3b      	ldrb	r3, [r7, #12]
 800166c:	3b01      	subs	r3, #1
 800166e:	2b05      	cmp	r3, #5
 8001670:	d832      	bhi.n	80016d8 <CalculateAllPaths+0x80>
 8001672:	a201      	add	r2, pc, #4	; (adr r2, 8001678 <CalculateAllPaths+0x20>)
 8001674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001678:	08001691 	.word	0x08001691
 800167c:	080016b5 	.word	0x080016b5
 8001680:	080016a9 	.word	0x080016a9
 8001684:	0800169d 	.word	0x0800169d
 8001688:	080016c1 	.word	0x080016c1
 800168c:	080016cd 	.word	0x080016cd
	{
	case PAWN:
		CalculateAllPathsPawn(pieceCoordinate, numPaths, paths);
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	68b9      	ldr	r1, [r7, #8]
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f000 f825 	bl	80016e4 <CalculateAllPathsPawn>
		break;
 800169a:	e01e      	b.n	80016da <CalculateAllPaths+0x82>
	case ROOK:
		CalculateAllPathsRook(pieceCoordinate, numPaths, paths);
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	68b9      	ldr	r1, [r7, #8]
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 f89a 	bl	80017da <CalculateAllPathsRook>
		break;
 80016a6:	e018      	b.n	80016da <CalculateAllPaths+0x82>
	case BISHOP:
		CalculateAllPathsBishop(pieceCoordinate, numPaths, paths);
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	68b9      	ldr	r1, [r7, #8]
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 f8dd 	bl	800186c <CalculateAllPathsBishop>
		break;
 80016b2:	e012      	b.n	80016da <CalculateAllPaths+0x82>
	case KNIGHT:
		CalculateAllPathsKnight(pieceCoordinate, numPaths, paths);
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	68b9      	ldr	r1, [r7, #8]
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f000 f999 	bl	80019f0 <CalculateAllPathsKnight>
		break;
 80016be:	e00c      	b.n	80016da <CalculateAllPaths+0x82>
	case QUEEN:
		CalculateAllPathsQueen(pieceCoordinate, numPaths, paths);
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	68b9      	ldr	r1, [r7, #8]
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 f9f1 	bl	8001aac <CalculateAllPathsQueen>
		break;
 80016ca:	e006      	b.n	80016da <CalculateAllPaths+0x82>
	case KING:
		CalculateAllPathsKing(pieceCoordinate, numPaths, paths);
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	68b9      	ldr	r1, [r7, #8]
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f000 fa65 	bl	8001ba0 <CalculateAllPathsKing>
		break;
 80016d6:	e000      	b.n	80016da <CalculateAllPaths+0x82>
	default:
		break;
 80016d8:	bf00      	nop
	}
}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop

080016e4 <CalculateAllPathsPawn>:

static void CalculateAllPathsPawn(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
	uint8_t row = pieceCoordinate.piece.owner == WHITE ? pieceCoordinate.row + 1 : pieceCoordinate.row - 1;
 80016f0:	7b7b      	ldrb	r3, [r7, #13]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d103      	bne.n	80016fe <CalculateAllPathsPawn+0x1a>
 80016f6:	7bbb      	ldrb	r3, [r7, #14]
 80016f8:	3301      	adds	r3, #1
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	e002      	b.n	8001704 <CalculateAllPathsPawn+0x20>
 80016fe:	7bbb      	ldrb	r3, [r7, #14]
 8001700:	3b01      	subs	r3, #1
 8001702:	b2db      	uxtb	r3, r3
 8001704:	77bb      	strb	r3, [r7, #30]
	uint8_t column = pieceCoordinate.column;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	777b      	strb	r3, [r7, #29]

	for (int8_t i = -1; i <= 1; i++)
 800170a:	23ff      	movs	r3, #255	; 0xff
 800170c:	77fb      	strb	r3, [r7, #31]
 800170e:	e022      	b.n	8001756 <CalculateAllPathsPawn+0x72>
	{

		struct Coordinate path = { row, column + i };
 8001710:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001714:	763b      	strb	r3, [r7, #24]
 8001716:	7ffa      	ldrb	r2, [r7, #31]
 8001718:	7f7b      	ldrb	r3, [r7, #29]
 800171a:	4413      	add	r3, r2
 800171c:	b2db      	uxtb	r3, r3
 800171e:	b25b      	sxtb	r3, r3
 8001720:	767b      	strb	r3, [r7, #25]
		if (IsValidCoordinate(path))
 8001722:	69b8      	ldr	r0, [r7, #24]
 8001724:	f000 fc65 	bl	8001ff2 <IsValidCoordinate>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00d      	beq.n	800174a <CalculateAllPathsPawn+0x66>
		{
			paths[(*numPaths)++] = path;
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	b2d1      	uxtb	r1, r2
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	7011      	strb	r1, [r2, #0]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	4413      	add	r3, r2
 8001740:	461a      	mov	r2, r3
 8001742:	f107 0318 	add.w	r3, r7, #24
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	8013      	strh	r3, [r2, #0]
	for (int8_t i = -1; i <= 1; i++)
 800174a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	3301      	adds	r3, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	77fb      	strb	r3, [r7, #31]
 8001756:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800175a:	2b01      	cmp	r3, #1
 800175c:	ddd8      	ble.n	8001710 <CalculateAllPathsPawn+0x2c>
		}
	}

	if (pieceCoordinate.piece.owner == WHITE && pieceCoordinate.row == 1)
 800175e:	7b7b      	ldrb	r3, [r7, #13]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d11a      	bne.n	800179a <CalculateAllPathsPawn+0xb6>
 8001764:	7bbb      	ldrb	r3, [r7, #14]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d117      	bne.n	800179a <CalculateAllPathsPawn+0xb6>
	{
		struct Coordinate path = { row + 1, column };
 800176a:	7fbb      	ldrb	r3, [r7, #30]
 800176c:	3301      	adds	r3, #1
 800176e:	b2db      	uxtb	r3, r3
 8001770:	b25b      	sxtb	r3, r3
 8001772:	753b      	strb	r3, [r7, #20]
 8001774:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001778:	757b      	strb	r3, [r7, #21]
		paths[(*numPaths)++] = path;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	b2d1      	uxtb	r1, r2
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	7011      	strb	r1, [r2, #0]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	4413      	add	r3, r2
 800178c:	461a      	mov	r2, r3
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	8013      	strh	r3, [r2, #0]
	{
 8001796:	bf00      	nop
	else if (pieceCoordinate.piece.owner == BLACK && pieceCoordinate.row == 6)
	{
		struct Coordinate path = { row - 1, column };
		paths[(*numPaths)++] = path;
	}
}
 8001798:	e01b      	b.n	80017d2 <CalculateAllPathsPawn+0xee>
	else if (pieceCoordinate.piece.owner == BLACK && pieceCoordinate.row == 6)
 800179a:	7b7b      	ldrb	r3, [r7, #13]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d118      	bne.n	80017d2 <CalculateAllPathsPawn+0xee>
 80017a0:	7bbb      	ldrb	r3, [r7, #14]
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d115      	bne.n	80017d2 <CalculateAllPathsPawn+0xee>
		struct Coordinate path = { row - 1, column };
 80017a6:	7fbb      	ldrb	r3, [r7, #30]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	743b      	strb	r3, [r7, #16]
 80017b0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80017b4:	747b      	strb	r3, [r7, #17]
		paths[(*numPaths)++] = path;
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	b2d1      	uxtb	r1, r2
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	7011      	strb	r1, [r2, #0]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	4413      	add	r3, r2
 80017c8:	461a      	mov	r2, r3
 80017ca:	f107 0310 	add.w	r3, r7, #16
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	8013      	strh	r3, [r2, #0]
}
 80017d2:	bf00      	nop
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <CalculateAllPathsRook>:

static void CalculateAllPathsRook(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 80017da:	b480      	push	{r7}
 80017dc:	b089      	sub	sp, #36	; 0x24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
	uint8_t row = pieceCoordinate.row;
 80017e6:	7bbb      	ldrb	r3, [r7, #14]
 80017e8:	77bb      	strb	r3, [r7, #30]
	uint8_t column = pieceCoordinate.column;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	777b      	strb	r3, [r7, #29]

	for (uint8_t move = 0; move < 8; move++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	77fb      	strb	r3, [r7, #31]
 80017f2:	e032      	b.n	800185a <CalculateAllPathsRook+0x80>
	{
		if (move != row)
 80017f4:	7ffa      	ldrb	r2, [r7, #31]
 80017f6:	7fbb      	ldrb	r3, [r7, #30]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d013      	beq.n	8001824 <CalculateAllPathsRook+0x4a>
		{
			struct Coordinate path = { move, column };
 80017fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001800:	763b      	strb	r3, [r7, #24]
 8001802:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001806:	767b      	strb	r3, [r7, #25]
			paths[(*numPaths)++] = path;
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	b2d1      	uxtb	r1, r2
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	7011      	strb	r1, [r2, #0]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	461a      	mov	r2, r3
 800181c:	f107 0318 	add.w	r3, r7, #24
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	8013      	strh	r3, [r2, #0]
		}

		if (move != column)
 8001824:	7ffa      	ldrb	r2, [r7, #31]
 8001826:	7f7b      	ldrb	r3, [r7, #29]
 8001828:	429a      	cmp	r2, r3
 800182a:	d013      	beq.n	8001854 <CalculateAllPathsRook+0x7a>
		{
			struct Coordinate path = { row, move };
 800182c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001830:	753b      	strb	r3, [r7, #20]
 8001832:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001836:	757b      	strb	r3, [r7, #21]
			paths[(*numPaths)++] = path;
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	b2d1      	uxtb	r1, r2
 8001840:	68ba      	ldr	r2, [r7, #8]
 8001842:	7011      	strb	r1, [r2, #0]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	461a      	mov	r2, r3
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	8013      	strh	r3, [r2, #0]
	for (uint8_t move = 0; move < 8; move++)
 8001854:	7ffb      	ldrb	r3, [r7, #31]
 8001856:	3301      	adds	r3, #1
 8001858:	77fb      	strb	r3, [r7, #31]
 800185a:	7ffb      	ldrb	r3, [r7, #31]
 800185c:	2b07      	cmp	r3, #7
 800185e:	d9c9      	bls.n	80017f4 <CalculateAllPathsRook+0x1a>
		}
	}
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	3724      	adds	r7, #36	; 0x24
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <CalculateAllPathsBishop>:

static void CalculateAllPathsBishop(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 800186c:	b480      	push	{r7}
 800186e:	b08b      	sub	sp, #44	; 0x2c
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
	uint8_t row = pieceCoordinate.row;
 8001878:	7bbb      	ldrb	r3, [r7, #14]
 800187a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t column = pieceCoordinate.column;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	for (uint8_t move = 1; move < 8; move++)
 8001884:	2301      	movs	r3, #1
 8001886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800188a:	e0a5      	b.n	80019d8 <CalculateAllPathsBishop+0x16c>
	{
		if (row + move < 8)
 800188c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001894:	4413      	add	r3, r2
 8001896:	2b07      	cmp	r3, #7
 8001898:	dc4a      	bgt.n	8001930 <CalculateAllPathsBishop+0xc4>
		{
			if (column + move < 8)
 800189a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800189e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018a2:	4413      	add	r3, r2
 80018a4:	2b07      	cmp	r3, #7
 80018a6:	dc1f      	bgt.n	80018e8 <CalculateAllPathsBishop+0x7c>
			{
				struct Coordinate path = { row + move, column + move };
 80018a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80018ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018b0:	4413      	add	r3, r2
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	b25b      	sxtb	r3, r3
 80018b6:	f887 3020 	strb.w	r3, [r7, #32]
 80018ba:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80018be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018c2:	4413      	add	r3, r2
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	b25b      	sxtb	r3, r3
 80018c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				paths[(*numPaths)++] = path;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	1c5a      	adds	r2, r3, #1
 80018d2:	b2d1      	uxtb	r1, r2
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	7011      	strb	r1, [r2, #0]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	461a      	mov	r2, r3
 80018e0:	f107 0320 	add.w	r3, r7, #32
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	8013      	strh	r3, [r2, #0]
			}
			if (column >= move)
 80018e8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80018ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d31d      	bcc.n	8001930 <CalculateAllPathsBishop+0xc4>
			{
				struct Coordinate path = { row + move, column - move };
 80018f4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80018f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018fc:	4413      	add	r3, r2
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	b25b      	sxtb	r3, r3
 8001902:	773b      	strb	r3, [r7, #28]
 8001904:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	b25b      	sxtb	r3, r3
 8001912:	777b      	strb	r3, [r7, #29]
				paths[(*numPaths)++] = path;
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	b2d1      	uxtb	r1, r2
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	7011      	strb	r1, [r2, #0]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	461a      	mov	r2, r3
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	8013      	strh	r3, [r2, #0]
			}

		}

		if (row >= move)
 8001930:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001938:	429a      	cmp	r2, r3
 800193a:	d348      	bcc.n	80019ce <CalculateAllPathsBishop+0x162>
		{
			if (column + move < 8)
 800193c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001944:	4413      	add	r3, r2
 8001946:	2b07      	cmp	r3, #7
 8001948:	dc1d      	bgt.n	8001986 <CalculateAllPathsBishop+0x11a>
			{
				struct Coordinate path = { row - move, column + move };
 800194a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800194e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	b2db      	uxtb	r3, r3
 8001956:	b25b      	sxtb	r3, r3
 8001958:	763b      	strb	r3, [r7, #24]
 800195a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800195e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001962:	4413      	add	r3, r2
 8001964:	b2db      	uxtb	r3, r3
 8001966:	b25b      	sxtb	r3, r3
 8001968:	767b      	strb	r3, [r7, #25]
				paths[(*numPaths)++] = path;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	b2d1      	uxtb	r1, r2
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	7011      	strb	r1, [r2, #0]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	4413      	add	r3, r2
 800197c:	461a      	mov	r2, r3
 800197e:	f107 0318 	add.w	r3, r7, #24
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	8013      	strh	r3, [r2, #0]
			}
			if (column >= move)
 8001986:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800198a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800198e:	429a      	cmp	r2, r3
 8001990:	d31d      	bcc.n	80019ce <CalculateAllPathsBishop+0x162>
			{
				struct Coordinate path = { row - move, column - move };
 8001992:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	753b      	strb	r3, [r7, #20]
 80019a2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80019a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	b25b      	sxtb	r3, r3
 80019b0:	757b      	strb	r3, [r7, #21]
				paths[(*numPaths)++] = path;
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	b2d1      	uxtb	r1, r2
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	7011      	strb	r1, [r2, #0]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	461a      	mov	r2, r3
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	8013      	strh	r3, [r2, #0]
	for (uint8_t move = 1; move < 8; move++)
 80019ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019d2:	3301      	adds	r3, #1
 80019d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019dc:	2b07      	cmp	r3, #7
 80019de:	f67f af55 	bls.w	800188c <CalculateAllPathsBishop+0x20>
			}
		}
	}
}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	372c      	adds	r7, #44	; 0x2c
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
	...

080019f0 <CalculateAllPathsKnight>:

static void CalculateAllPathsKnight(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b08d      	sub	sp, #52	; 0x34
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
	uint8_t row = pieceCoordinate.row;
 80019fc:	7bbb      	ldrb	r3, [r7, #14]
 80019fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t column = pieceCoordinate.column;
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	const struct Coordinate adders[] = {
 8001a08:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <CalculateAllPathsKnight+0xb8>)
 8001a0a:	f107 0418 	add.w	r4, r7, #24
 8001a0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		{1, 2}, {-1, 2}, {1, -2}, {-1, -2},
		{2, 1}, {-2, 1}, {2, -1}, {-2, -1}
	};

	for (uint8_t move = 0; move < sizeof(adders) / sizeof(*adders); move++)
 8001a14:	2300      	movs	r3, #0
 8001a16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001a1a:	e03c      	b.n	8001a96 <CalculateAllPathsKnight+0xa6>
	{
		int8_t newRow = row + adders[move].row;
 8001a1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a26:	4413      	add	r3, r2
 8001a28:	f913 3c18 	ldrsb.w	r3, [r3, #-24]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a32:	4413      	add	r3, r2
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		int8_t newColumn = column + adders[move].column;
 8001a3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a44:	4413      	add	r3, r2
 8001a46:	f913 3c17 	ldrsb.w	r3, [r3, #-23]
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a50:	4413      	add	r3, r2
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		struct Coordinate path = { newRow, newColumn };
 8001a58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a5c:	753b      	strb	r3, [r7, #20]
 8001a5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a62:	757b      	strb	r3, [r7, #21]
		if (IsValidCoordinate(path))
 8001a64:	6978      	ldr	r0, [r7, #20]
 8001a66:	f000 fac4 	bl	8001ff2 <IsValidCoordinate>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00d      	beq.n	8001a8c <CalculateAllPathsKnight+0x9c>
		{
			paths[(*numPaths)++] = path;
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	b2d1      	uxtb	r1, r2
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	7011      	strb	r1, [r2, #0]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	461a      	mov	r2, r3
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	8013      	strh	r3, [r2, #0]
	for (uint8_t move = 0; move < sizeof(adders) / sizeof(*adders); move++)
 8001a8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a90:	3301      	adds	r3, #1
 8001a92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001a96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a9a:	2b07      	cmp	r3, #7
 8001a9c:	d9be      	bls.n	8001a1c <CalculateAllPathsKnight+0x2c>
		}
	}
}
 8001a9e:	bf00      	nop
 8001aa0:	bf00      	nop
 8001aa2:	3734      	adds	r7, #52	; 0x34
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd90      	pop	{r4, r7, pc}
 8001aa8:	08007658 	.word	0x08007658

08001aac <CalculateAllPathsQueen>:

static void CalculateAllPathsQueen(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b094      	sub	sp, #80	; 0x50
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
	uint8_t numRookPaths = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	struct Coordinate rookPaths[MAX_ROOK_MOVES] = { 0 };
 8001abe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]
 8001ace:	615a      	str	r2, [r3, #20]
 8001ad0:	619a      	str	r2, [r3, #24]
	CalculateAllPathsRook(pieceCoordinate, &numRookPaths, rookPaths);
 8001ad2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ad6:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 8001ada:	4619      	mov	r1, r3
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f7ff fe7c 	bl	80017da <CalculateAllPathsRook>

	uint8_t numBishopPaths = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	struct Coordinate bishopPaths[MAX_BISHOP_MOVES] = { 0 };
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
 8001af8:	615a      	str	r2, [r3, #20]
 8001afa:	831a      	strh	r2, [r3, #24]
	CalculateAllPathsBishop(pieceCoordinate, &numBishopPaths, bishopPaths);
 8001afc:	f107 0214 	add.w	r2, r7, #20
 8001b00:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001b04:	4619      	mov	r1, r3
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f7ff feb0 	bl	800186c <CalculateAllPathsBishop>

	*numPaths = numRookPaths + numBishopPaths;
 8001b0c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001b10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b14:	4413      	add	r3, r2
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	701a      	strb	r2, [r3, #0]

	// Add in Rook paths
	for (uint8_t i = 0; i < numRookPaths; i++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001b22:	e012      	b.n	8001b4a <CalculateAllPathsQueen+0x9e>
	{
		paths[i] = rookPaths[i];
 8001b24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b28:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001b2c:	0052      	lsls	r2, r2, #1
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	440a      	add	r2, r1
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001b38:	440b      	add	r3, r1
 8001b3a:	3b20      	subs	r3, #32
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < numRookPaths; i++)
 8001b40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b44:	3301      	adds	r3, #1
 8001b46:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001b4a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b4e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d3e6      	bcc.n	8001b24 <CalculateAllPathsQueen+0x78>
	}

	// Append Bishop paths
	for (uint8_t i = 0; i < numBishopPaths; i++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001b5c:	e015      	b.n	8001b8a <CalculateAllPathsQueen+0xde>
	{
		paths[i + numRookPaths] = bishopPaths[i];
 8001b5e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001b62:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001b66:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 8001b6a:	440a      	add	r2, r1
 8001b6c:	0052      	lsls	r2, r2, #1
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	440a      	add	r2, r1
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001b78:	440b      	add	r3, r1
 8001b7a:	3b3c      	subs	r3, #60	; 0x3c
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < numBishopPaths; i++)
 8001b80:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001b84:	3301      	adds	r3, #1
 8001b86:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b8e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d3e3      	bcc.n	8001b5e <CalculateAllPathsQueen+0xb2>
	}
}
 8001b96:	bf00      	nop
 8001b98:	bf00      	nop
 8001b9a:	3750      	adds	r7, #80	; 0x50
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <CalculateAllPathsKing>:

static void CalculateAllPathsKing(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
	uint8_t row = pieceCoordinate.row;
 8001bac:	7bbb      	ldrb	r3, [r7, #14]
 8001bae:	757b      	strb	r3, [r7, #21]
	uint8_t column = pieceCoordinate.column;
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	753b      	strb	r3, [r7, #20]

	for (int8_t i = -1; i <= 1; i++)
 8001bb4:	23ff      	movs	r3, #255	; 0xff
 8001bb6:	75fb      	strb	r3, [r7, #23]
 8001bb8:	e03c      	b.n	8001c34 <CalculateAllPathsKing+0x94>
	{
		for (int8_t j = -1; j <= 1; j++)
 8001bba:	23ff      	movs	r3, #255	; 0xff
 8001bbc:	75bb      	strb	r3, [r7, #22]
 8001bbe:	e02f      	b.n	8001c20 <CalculateAllPathsKing+0x80>
		{
			if (i == 0 && j == 0)
 8001bc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d103      	bne.n	8001bd0 <CalculateAllPathsKing+0x30>
 8001bc8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d020      	beq.n	8001c12 <CalculateAllPathsKing+0x72>
			{
				continue;
			}

			struct Coordinate path = { row + i, column + j };
 8001bd0:	7dfa      	ldrb	r2, [r7, #23]
 8001bd2:	7d7b      	ldrb	r3, [r7, #21]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	b25b      	sxtb	r3, r3
 8001bda:	743b      	strb	r3, [r7, #16]
 8001bdc:	7dba      	ldrb	r2, [r7, #22]
 8001bde:	7d3b      	ldrb	r3, [r7, #20]
 8001be0:	4413      	add	r3, r2
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	b25b      	sxtb	r3, r3
 8001be6:	747b      	strb	r3, [r7, #17]
			if (IsValidCoordinate(path))
 8001be8:	6938      	ldr	r0, [r7, #16]
 8001bea:	f000 fa02 	bl	8001ff2 <IsValidCoordinate>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00f      	beq.n	8001c14 <CalculateAllPathsKing+0x74>
			{
				paths[(*numPaths)++] = path;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	b2d1      	uxtb	r1, r2
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	7011      	strb	r1, [r2, #0]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	461a      	mov	r2, r3
 8001c08:	f107 0310 	add.w	r3, r7, #16
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	8013      	strh	r3, [r2, #0]
 8001c10:	e000      	b.n	8001c14 <CalculateAllPathsKing+0x74>
				continue;
 8001c12:	bf00      	nop
		for (int8_t j = -1; j <= 1; j++)
 8001c14:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	75bb      	strb	r3, [r7, #22]
 8001c20:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	ddcb      	ble.n	8001bc0 <CalculateAllPathsKing+0x20>
	for (int8_t i = -1; i <= 1; i++)
 8001c28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	75fb      	strb	r3, [r7, #23]
 8001c34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	ddbe      	ble.n	8001bba <CalculateAllPathsKing+0x1a>
			}
		}
	}
}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <IsPieceBlockingStraight>:

static uint8_t IsPieceBlockingStraight(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
	// If move is in same column
	if (from.column == to.column)
 8001c52:	79fa      	ldrb	r2, [r7, #7]
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d123      	bne.n	8001ca2 <IsPieceBlockingStraight+0x5a>
	{
		uint8_t startRow = from.row > to.row ? to.row : from.row;
 8001c5a:	79ba      	ldrb	r2, [r7, #6]
 8001c5c:	78bb      	ldrb	r3, [r7, #2]
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	bf28      	it	cs
 8001c62:	4613      	movcs	r3, r2
 8001c64:	72fb      	strb	r3, [r7, #11]
		uint8_t endRow = from.row > to.row ? from.row : to.row;
 8001c66:	78ba      	ldrb	r2, [r7, #2]
 8001c68:	79bb      	ldrb	r3, [r7, #6]
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	bf38      	it	cc
 8001c6e:	4613      	movcc	r3, r2
 8001c70:	72bb      	strb	r3, [r7, #10]

		for (uint8_t row = startRow + 1; row < endRow; row++)
 8001c72:	7afb      	ldrb	r3, [r7, #11]
 8001c74:	3301      	adds	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	e00e      	b.n	8001c98 <IsPieceBlockingStraight+0x50>
		{
			if (MockChessboard[row][from.column].type != NONE) // If piece in row between "from" and "to" then it is blocking it.
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	79fa      	ldrb	r2, [r7, #7]
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4a1e      	ldr	r2, [pc, #120]	; (8001cfc <IsPieceBlockingStraight+0xb4>)
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	440b      	add	r3, r1
 8001c86:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <IsPieceBlockingStraight+0x4a>
			{
				return 1;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e02f      	b.n	8001cf2 <IsPieceBlockingStraight+0xaa>
		for (uint8_t row = startRow + 1; row < endRow; row++)
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	3301      	adds	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	7abb      	ldrb	r3, [r7, #10]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d3ec      	bcc.n	8001c7a <IsPieceBlockingStraight+0x32>
 8001ca0:	e026      	b.n	8001cf0 <IsPieceBlockingStraight+0xa8>
			}
		}
	}
	// If move is in same row
	else if (from.row == to.row)
 8001ca2:	79ba      	ldrb	r2, [r7, #6]
 8001ca4:	78bb      	ldrb	r3, [r7, #2]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d122      	bne.n	8001cf0 <IsPieceBlockingStraight+0xa8>
	{
		uint8_t startColumn = from.column > to.column ? to.column : from.column;
 8001caa:	79fa      	ldrb	r2, [r7, #7]
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	bf28      	it	cs
 8001cb2:	4613      	movcs	r3, r2
 8001cb4:	737b      	strb	r3, [r7, #13]
		uint8_t endColumn = from.column > to.column ? from.column : to.column;
 8001cb6:	78fa      	ldrb	r2, [r7, #3]
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	bf38      	it	cc
 8001cbe:	4613      	movcc	r3, r2
 8001cc0:	733b      	strb	r3, [r7, #12]
		for (uint8_t column = startColumn + 1; column < endColumn; column++)
 8001cc2:	7b7b      	ldrb	r3, [r7, #13]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	73bb      	strb	r3, [r7, #14]
 8001cc8:	e00e      	b.n	8001ce8 <IsPieceBlockingStraight+0xa0>
		{
			// If piece in column between "from" and "to" then it is blocking it.
			if (MockChessboard[from.row][column].type != NONE)
 8001cca:	79bb      	ldrb	r3, [r7, #6]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	7bbb      	ldrb	r3, [r7, #14]
 8001cd0:	490a      	ldr	r1, [pc, #40]	; (8001cfc <IsPieceBlockingStraight+0xb4>)
 8001cd2:	00d2      	lsls	r2, r2, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <IsPieceBlockingStraight+0x9a>
			{
				return 1;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e007      	b.n	8001cf2 <IsPieceBlockingStraight+0xaa>
		for (uint8_t column = startColumn + 1; column < endColumn; column++)
 8001ce2:	7bbb      	ldrb	r3, [r7, #14]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	73bb      	strb	r3, [r7, #14]
 8001ce8:	7bba      	ldrb	r2, [r7, #14]
 8001cea:	7b3b      	ldrb	r3, [r7, #12]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d3ec      	bcc.n	8001cca <IsPieceBlockingStraight+0x82>
			}
		}
	}
	return 0;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	200000f0 	.word	0x200000f0

08001d00 <WillResultInSelfCheck>:

uint8_t WillResultInSelfCheck(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b0a4      	sub	sp, #144	; 0x90
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
	// Temporarily populate the chessboard with this move to see if it causes a self check
	MockChessboard[from.row][from.column] = EMPTY_PIECE;
 8001d0a:	79bb      	ldrb	r3, [r7, #6]
 8001d0c:	79fa      	ldrb	r2, [r7, #7]
 8001d0e:	4950      	ldr	r1, [pc, #320]	; (8001e50 <WillResultInSelfCheck+0x150>)
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4413      	add	r3, r2
 8001d14:	4a4f      	ldr	r2, [pc, #316]	; (8001e54 <WillResultInSelfCheck+0x154>)
 8001d16:	8812      	ldrh	r2, [r2, #0]
 8001d18:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	MockChessboard[to.row][to.column] = from.piece;
 8001d1c:	78bb      	ldrb	r3, [r7, #2]
 8001d1e:	78fa      	ldrb	r2, [r7, #3]
 8001d20:	494b      	ldr	r1, [pc, #300]	; (8001e50 <WillResultInSelfCheck+0x150>)
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	88ba      	ldrh	r2, [r7, #4]
 8001d28:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	enum PieceOwner enemyTeam = from.piece.owner == WHITE ? BLACK : WHITE;
 8001d2c:	797b      	ldrb	r3, [r7, #5]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <WillResultInSelfCheck+0x36>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e000      	b.n	8001d38 <WillResultInSelfCheck+0x38>
 8001d36:	2301      	movs	r3, #1
 8001d38:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
	uint8_t numEnemyPieces;
	struct PieceCoordinate enemyPieces[PIECES_PER_TEAM] = { 0 };
 8001d3c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d40:	2240      	movs	r2, #64	; 0x40
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f005 fc73 	bl	8007630 <memset>

	// For each enemy piece
	GetPiecesForTeam(enemyTeam, enemyPieces, &numEnemyPieces);
 8001d4a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001d4e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001d52:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 f87e 	bl	8001e58 <GetPiecesForTeam>
	for (uint8_t i = 0; i < numEnemyPieces; i++)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001d62:	e059      	b.n	8001e18 <WillResultInSelfCheck+0x118>
	{
		uint8_t numEnemyPieceLegalPaths;
		struct Coordinate enemyPieceLegalPaths[MAX_LEGAL_MOVES] = { 0 };
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	2236      	movs	r2, #54	; 0x36
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f005 fc5f 	bl	8007630 <memset>

		// For each legal path this enemy piece can take
		CalculateAllLegalPathsNoChecks(enemyPieces[i], enemyPieceLegalPaths, &numEnemyPieceLegalPaths);
 8001d72:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001d76:	f107 024b 	add.w	r2, r7, #75	; 0x4b
 8001d7a:	f107 010c 	add.w	r1, r7, #12
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8001d84:	4403      	add	r3, r0
 8001d86:	f853 0c44 	ldr.w	r0, [r3, #-68]
 8001d8a:	f7ff fbb3 	bl	80014f4 <CalculateAllLegalPathsNoChecks>
		for (uint8_t j = 0; j < numEnemyPieceLegalPaths; j++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8001d94:	e035      	b.n	8001e02 <WillResultInSelfCheck+0x102>
		{
			struct Coordinate enemyFinalLocation = enemyPieceLegalPaths[j];
 8001d96:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001da0:	4413      	add	r3, r2
 8001da2:	f833 3c84 	ldrh.w	r3, [r3, #-132]
 8001da6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			struct Piece killedPiece = MockChessboard[enemyFinalLocation.row][enemyFinalLocation.column];
 8001daa:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 8001dae:	f997 2049 	ldrsb.w	r2, [r7, #73]	; 0x49
 8001db2:	4611      	mov	r1, r2
 8001db4:	4a26      	ldr	r2, [pc, #152]	; (8001e50 <WillResultInSelfCheck+0x150>)
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	440b      	add	r3, r1
 8001dba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dbe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

			// If the enemy piece can take our king, this move (from -> to) will result in a check so it cannot be legal
			if ((killedPiece.type == KING) && (killedPiece.owner == from.piece.owner))
 8001dc2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d116      	bne.n	8001df8 <WillResultInSelfCheck+0xf8>
 8001dca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001dce:	797b      	ldrb	r3, [r7, #5]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d111      	bne.n	8001df8 <WillResultInSelfCheck+0xf8>
			{
				// Undo temporary move
				MockChessboard[from.row][from.column] = from.piece;
 8001dd4:	79bb      	ldrb	r3, [r7, #6]
 8001dd6:	79fa      	ldrb	r2, [r7, #7]
 8001dd8:	491d      	ldr	r1, [pc, #116]	; (8001e50 <WillResultInSelfCheck+0x150>)
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4413      	add	r3, r2
 8001dde:	88ba      	ldrh	r2, [r7, #4]
 8001de0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				MockChessboard[to.row][to.column] = to.piece;
 8001de4:	78bb      	ldrb	r3, [r7, #2]
 8001de6:	78fa      	ldrb	r2, [r7, #3]
 8001de8:	4919      	ldr	r1, [pc, #100]	; (8001e50 <WillResultInSelfCheck+0x150>)
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4413      	add	r3, r2
 8001dee:	883a      	ldrh	r2, [r7, #0]
 8001df0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				return 1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e026      	b.n	8001e46 <WillResultInSelfCheck+0x146>
		for (uint8_t j = 0; j < numEnemyPieceLegalPaths; j++)
 8001df8:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8001e02:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001e06:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d3c3      	bcc.n	8001d96 <WillResultInSelfCheck+0x96>
	for (uint8_t i = 0; i < numEnemyPieces; i++)
 8001e0e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001e12:	3301      	adds	r3, #1
 8001e14:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001e18:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001e1c:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d39f      	bcc.n	8001d64 <WillResultInSelfCheck+0x64>
			}
		}
	}

	// Undo temporary move
	MockChessboard[from.row][from.column] = from.piece;
 8001e24:	79bb      	ldrb	r3, [r7, #6]
 8001e26:	79fa      	ldrb	r2, [r7, #7]
 8001e28:	4909      	ldr	r1, [pc, #36]	; (8001e50 <WillResultInSelfCheck+0x150>)
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	88ba      	ldrh	r2, [r7, #4]
 8001e30:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	MockChessboard[to.row][to.column] = to.piece;
 8001e34:	78bb      	ldrb	r3, [r7, #2]
 8001e36:	78fa      	ldrb	r2, [r7, #3]
 8001e38:	4905      	ldr	r1, [pc, #20]	; (8001e50 <WillResultInSelfCheck+0x150>)
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	883a      	ldrh	r2, [r7, #0]
 8001e40:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	return 0;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3790      	adds	r7, #144	; 0x90
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200000f0 	.word	0x200000f0
 8001e54:	20000000 	.word	0x20000000

08001e58 <GetPiecesForTeam>:

void GetPiecesForTeam(enum PieceOwner owner, struct PieceCoordinate* pieces, uint8_t* numPieces)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b087      	sub	sp, #28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	73fb      	strb	r3, [r7, #15]
	*numPieces = 0;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]

	for (uint8_t row = 0; row < NUM_ROWS; row++)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	75fb      	strb	r3, [r7, #23]
 8001e70:	e029      	b.n	8001ec6 <GetPiecesForTeam+0x6e>
	{
		for (uint8_t column = 0; column < NUM_COLS; column++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	75bb      	strb	r3, [r7, #22]
 8001e76:	e020      	b.n	8001eba <GetPiecesForTeam+0x62>
		{
			struct PieceCoordinate piece = { MockChessboard[row][column], row, column };
 8001e78:	7dfa      	ldrb	r2, [r7, #23]
 8001e7a:	7dbb      	ldrb	r3, [r7, #22]
 8001e7c:	4916      	ldr	r1, [pc, #88]	; (8001ed8 <GetPiecesForTeam+0x80>)
 8001e7e:	00d2      	lsls	r2, r2, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001e86:	823b      	strh	r3, [r7, #16]
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
 8001e8a:	74bb      	strb	r3, [r7, #18]
 8001e8c:	7dbb      	ldrb	r3, [r7, #22]
 8001e8e:	74fb      	strb	r3, [r7, #19]
			if (piece.piece.owner == owner)
 8001e90:	7c7b      	ldrb	r3, [r7, #17]
 8001e92:	7bfa      	ldrb	r2, [r7, #15]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d10d      	bne.n	8001eb4 <GetPiecesForTeam+0x5c>
			{
				pieces[(*numPieces)++] = piece;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	b2d1      	uxtb	r1, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	7011      	strb	r1, [r2, #0]
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f107 0310 	add.w	r3, r7, #16
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	6010      	str	r0, [r2, #0]
		for (uint8_t column = 0; column < NUM_COLS; column++)
 8001eb4:	7dbb      	ldrb	r3, [r7, #22]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	75bb      	strb	r3, [r7, #22]
 8001eba:	7dbb      	ldrb	r3, [r7, #22]
 8001ebc:	2b07      	cmp	r3, #7
 8001ebe:	d9db      	bls.n	8001e78 <GetPiecesForTeam+0x20>
	for (uint8_t row = 0; row < NUM_ROWS; row++)
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	75fb      	strb	r3, [r7, #23]
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	2b07      	cmp	r3, #7
 8001eca:	d9d2      	bls.n	8001e72 <GetPiecesForTeam+0x1a>
			}
		}
	}
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	371c      	adds	r7, #28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	200000f0 	.word	0x200000f0

08001edc <IsPieceBlockingDiagonal>:

static uint8_t IsPieceBlockingDiagonal(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
	uint8_t startRow;
	uint8_t startColumn;
	uint8_t endRow;
	uint8_t endColumn;

	if (from.row > to.row)
 8001ee6:	79ba      	ldrb	r2, [r7, #6]
 8001ee8:	78bb      	ldrb	r3, [r7, #2]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d908      	bls.n	8001f00 <IsPieceBlockingDiagonal+0x24>
	{
		startRow = to.row;
 8001eee:	78bb      	ldrb	r3, [r7, #2]
 8001ef0:	73fb      	strb	r3, [r7, #15]
		startColumn = to.column;
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	73bb      	strb	r3, [r7, #14]
		endRow = from.row;
 8001ef6:	79bb      	ldrb	r3, [r7, #6]
 8001ef8:	737b      	strb	r3, [r7, #13]
		endColumn = from.column;
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	733b      	strb	r3, [r7, #12]
 8001efe:	e007      	b.n	8001f10 <IsPieceBlockingDiagonal+0x34>
	}
	else
	{
		startRow = from.row;
 8001f00:	79bb      	ldrb	r3, [r7, #6]
 8001f02:	73fb      	strb	r3, [r7, #15]
		startColumn = from.column;
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	73bb      	strb	r3, [r7, #14]
		endRow = to.row;
 8001f08:	78bb      	ldrb	r3, [r7, #2]
 8001f0a:	737b      	strb	r3, [r7, #13]
		endColumn = to.column;
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	733b      	strb	r3, [r7, #12]
	}

	int8_t columnIncrement = startColumn > endColumn ? -1 : 1;
 8001f10:	7bba      	ldrb	r2, [r7, #14]
 8001f12:	7b3b      	ldrb	r3, [r7, #12]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d902      	bls.n	8001f1e <IsPieceBlockingDiagonal+0x42>
 8001f18:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1c:	e000      	b.n	8001f20 <IsPieceBlockingDiagonal+0x44>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	727b      	strb	r3, [r7, #9]
	int8_t column = startColumn + columnIncrement;
 8001f22:	7a7a      	ldrb	r2, [r7, #9]
 8001f24:	7bbb      	ldrb	r3, [r7, #14]
 8001f26:	4413      	add	r3, r2
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	72fb      	strb	r3, [r7, #11]
	for (uint8_t row = startRow + 1; row < endRow; row++, column += columnIncrement)
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	72bb      	strb	r3, [r7, #10]
 8001f32:	e013      	b.n	8001f5c <IsPieceBlockingDiagonal+0x80>
	{
		// If piece is between "from" and "to" on the diagonal, it is blocking it
		if (MockChessboard[row][column].type != NONE)
 8001f34:	7aba      	ldrb	r2, [r7, #10]
 8001f36:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001f3a:	490d      	ldr	r1, [pc, #52]	; (8001f70 <IsPieceBlockingDiagonal+0x94>)
 8001f3c:	00d2      	lsls	r2, r2, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <IsPieceBlockingDiagonal+0x70>
		{
			return 1;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e00c      	b.n	8001f66 <IsPieceBlockingDiagonal+0x8a>
	for (uint8_t row = startRow + 1; row < endRow; row++, column += columnIncrement)
 8001f4c:	7abb      	ldrb	r3, [r7, #10]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	72bb      	strb	r3, [r7, #10]
 8001f52:	7afa      	ldrb	r2, [r7, #11]
 8001f54:	7a7b      	ldrb	r3, [r7, #9]
 8001f56:	4413      	add	r3, r2
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	72fb      	strb	r3, [r7, #11]
 8001f5c:	7aba      	ldrb	r2, [r7, #10]
 8001f5e:	7b7b      	ldrb	r3, [r7, #13]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d3e7      	bcc.n	8001f34 <IsPieceBlockingDiagonal+0x58>
		}
	}
	return 0;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	200000f0 	.word	0x200000f0

08001f74 <CalculateCastlingPositions>:


void CalculateCastlingPositions(
	struct PieceCoordinate rookPieceCoordinate,
	struct PieceCoordinate* expectedKingPieceCoordinate, struct PieceCoordinate* expectedRookPieceCoordinate)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
	// Fill in the piece attributes
	expectedKingPieceCoordinate->piece.owner = rookPieceCoordinate.piece.owner;
 8001f80:	7b7a      	ldrb	r2, [r7, #13]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	705a      	strb	r2, [r3, #1]
	expectedRookPieceCoordinate->piece.owner = rookPieceCoordinate.piece.owner;
 8001f86:	7b7a      	ldrb	r2, [r7, #13]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	705a      	strb	r2, [r3, #1]
	expectedKingPieceCoordinate->piece.type = KING;
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2206      	movs	r2, #6
 8001f90:	701a      	strb	r2, [r3, #0]
	expectedRookPieceCoordinate->piece.type = ROOK;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2204      	movs	r2, #4
 8001f96:	701a      	strb	r2, [r3, #0]

	// Calculate expected ROOK and KING columns
	if (rookPieceCoordinate.column == 0)
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <CalculateCastlingPositions+0x38>
	{
		expectedKingPieceCoordinate->column = 1;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	70da      	strb	r2, [r3, #3]
		expectedRookPieceCoordinate->column = 2;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	70da      	strb	r2, [r3, #3]
 8001faa:	e008      	b.n	8001fbe <CalculateCastlingPositions+0x4a>
	}
	else if (rookPieceCoordinate.column == 7)
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	2b07      	cmp	r3, #7
 8001fb0:	d105      	bne.n	8001fbe <CalculateCastlingPositions+0x4a>
	{
		expectedKingPieceCoordinate->column = 6;
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2206      	movs	r2, #6
 8001fb6:	70da      	strb	r2, [r3, #3]
		expectedRookPieceCoordinate->column = 5;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2205      	movs	r2, #5
 8001fbc:	70da      	strb	r2, [r3, #3]
	}

	// Calculate expected ROOK and KING rows
	if (rookPieceCoordinate.piece.owner == WHITE)
 8001fbe:	7b7b      	ldrb	r3, [r7, #13]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d107      	bne.n	8001fd4 <CalculateCastlingPositions+0x60>
	{
		expectedKingPieceCoordinate->row = expectedRookPieceCoordinate->row = 0;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	709a      	strb	r2, [r3, #2]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	789a      	ldrb	r2, [r3, #2]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	709a      	strb	r2, [r3, #2]
	}
	else if (rookPieceCoordinate.piece.owner == BLACK)
	{
		expectedKingPieceCoordinate->row = expectedRookPieceCoordinate->row = 7;
	}
}
 8001fd2:	e009      	b.n	8001fe8 <CalculateCastlingPositions+0x74>
	else if (rookPieceCoordinate.piece.owner == BLACK)
 8001fd4:	7b7b      	ldrb	r3, [r7, #13]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d106      	bne.n	8001fe8 <CalculateCastlingPositions+0x74>
		expectedKingPieceCoordinate->row = expectedRookPieceCoordinate->row = 7;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2207      	movs	r2, #7
 8001fde:	709a      	strb	r2, [r3, #2]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	789a      	ldrb	r2, [r3, #2]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	709a      	strb	r2, [r3, #2]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <IsValidCoordinate>:

static inline uint8_t IsValidCoordinate(struct Coordinate path)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	80b8      	strh	r0, [r7, #4]
	return path.row >= 0 && path.row < 8 && path.column >= 0 && path.column < 8;
 8001ffa:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	db0d      	blt.n	800201e <IsValidCoordinate+0x2c>
 8002002:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002006:	2b07      	cmp	r3, #7
 8002008:	dc09      	bgt.n	800201e <IsValidCoordinate+0x2c>
 800200a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800200e:	2b00      	cmp	r3, #0
 8002010:	db05      	blt.n	800201e <IsValidCoordinate+0x2c>
 8002012:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002016:	2b07      	cmp	r3, #7
 8002018:	dc01      	bgt.n	800201e <IsValidCoordinate+0x2c>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <IsValidCoordinate+0x2e>
 800201e:	2300      	movs	r3, #0
 8002020:	b2db      	uxtb	r3, r3
}
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr

0800202c <IsPieceMovingStraight>:

static inline uint8_t IsPieceMovingStraight(struct PieceCoordinate from, struct PieceCoordinate to)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
	return (from.column == to.column || from.row == to.row);
 8002036:	79fa      	ldrb	r2, [r7, #7]
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	429a      	cmp	r2, r3
 800203c:	d003      	beq.n	8002046 <IsPieceMovingStraight+0x1a>
 800203e:	79ba      	ldrb	r2, [r7, #6]
 8002040:	78bb      	ldrb	r3, [r7, #2]
 8002042:	429a      	cmp	r2, r3
 8002044:	d101      	bne.n	800204a <IsPieceMovingStraight+0x1e>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <IsPieceMovingStraight+0x20>
 800204a:	2300      	movs	r3, #0
 800204c:	b2db      	uxtb	r3, r3
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <IsPieceMovingDiagonal>:

static inline uint8_t IsPieceMovingDiagonal(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
	return abs((int8_t)from.column - (int8_t)to.column) == abs((int8_t)from.row - (int8_t)to.row);
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	b25b      	sxtb	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	b25b      	sxtb	r3, r3
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002072:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002076:	79bb      	ldrb	r3, [r7, #6]
 8002078:	b25b      	sxtb	r3, r3
 800207a:	4619      	mov	r1, r3
 800207c:	78bb      	ldrb	r3, [r7, #2]
 800207e:	b25b      	sxtb	r3, r3
 8002080:	1acb      	subs	r3, r1, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	bfb8      	it	lt
 8002086:	425b      	neglt	r3, r3
 8002088:	429a      	cmp	r2, r3
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <IsPieceCoordinateSameTeam>:

static inline uint8_t IsPieceCoordinateSameTeam(struct PieceCoordinate pieceCoordinate1, struct PieceCoordinate pieceCoordinate2)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
	return pieceCoordinate1.piece.owner == pieceCoordinate2.piece.owner;
 80020a6:	797a      	ldrb	r2, [r7, #5]
 80020a8:	787b      	ldrb	r3, [r7, #1]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	bf0c      	ite	eq
 80020ae:	2301      	moveq	r3, #1
 80020b0:	2300      	movne	r3, #0
 80020b2:	b2db      	uxtb	r3, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr
	...

080020c0 <SpeakerGPIOInit>:
#include "speaker.h"

void SpeakerGPIOInit(){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	// Enable Analog Output
	SPEARER_GPIO_BUS_ENABLE_FUNCTION;
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <SpeakerGPIOInit+0x3c>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	4a0c      	ldr	r2, [pc, #48]	; (80020fc <SpeakerGPIOInit+0x3c>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	61d3      	str	r3, [r2, #28]
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <SpeakerGPIOInit+0x3c>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = SPEAKER_GPIO_PIN;
 80020de:	2320      	movs	r3, #32
 80020e0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020e2:	2303      	movs	r3, #3
 80020e4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(SPEAKER_GPIO_BUS, &GPIO_InitStruct);
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	4619      	mov	r1, r3
 80020ee:	4804      	ldr	r0, [pc, #16]	; (8002100 <SpeakerGPIOInit+0x40>)
 80020f0:	f002 fa4c 	bl	800458c <HAL_GPIO_Init>
}
 80020f4:	bf00      	nop
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020000 	.word	0x40020000

08002104 <DACInit>:

void DACInit(DAC_HandleTypeDef * hdac){
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	DAC_ChannelConfTypeDef sConfig = {0};
 800210c:	f107 0310 	add.w	r3, r7, #16
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]

	// Enable DAC clock
	__HAL_RCC_DAC_CLK_ENABLE();
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <DACInit+0x54>)
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	4a0f      	ldr	r2, [pc, #60]	; (8002158 <DACInit+0x54>)
 800211c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002120:	6253      	str	r3, [r2, #36]	; 0x24
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <DACInit+0x54>)
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
	hdac->Instance = DAC;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a0a      	ldr	r2, [pc, #40]	; (800215c <DACInit+0x58>)
 8002132:	601a      	str	r2, [r3, #0]
	HAL_DAC_Init(hdac);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f002 f894 	bl	8004262 <HAL_DAC_Init>

	// DAC Setup Settings of Timer 2 Trigger
	sConfig.DAC_Trigger = DAC_DMA_TRIGGER;
 800213a:	232c      	movs	r3, #44	; 0x2c
 800213c:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
	HAL_DAC_ConfigChannel(hdac, &sConfig, DAC_CHANNEL);
 8002142:	f107 0310 	add.w	r3, r7, #16
 8002146:	2210      	movs	r2, #16
 8002148:	4619      	mov	r1, r3
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f002 f8ab 	bl	80042a6 <HAL_DAC_ConfigChannel>
}
 8002150:	bf00      	nop
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40023800 	.word	0x40023800
 800215c:	40007400 	.word	0x40007400

08002160 <DMAInit>:

void DMAInit(){
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
	// DMA controller clock enable
	DMA_CLOCK_ENABLE_FUNCTION;
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <DMAInit+0x38>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	4a0b      	ldr	r2, [pc, #44]	; (8002198 <DMAInit+0x38>)
 800216c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002170:	61d3      	str	r3, [r2, #28]
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <DMAInit+0x38>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]

	// DMA interrupt init
	// DMA1_Channel2_IRQn interrupt configuration
	HAL_NVIC_SetPriority(DMA_IRQ, 0, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2100      	movs	r1, #0
 8002182:	200d      	movs	r0, #13
 8002184:	f002 f837 	bl	80041f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA_IRQ);
 8002188:	200d      	movs	r0, #13
 800218a:	f002 f850 	bl	800422e <HAL_NVIC_EnableIRQ>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800

0800219c <TimerInit>:

void TimerInit(TIM_HandleTypeDef * htim){
 800219c:	b580      	push	{r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021a4:	f107 0310 	add.w	r3, r7, #16
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b2:	f107 0308 	add.w	r3, r7, #8
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]

	htim->Instance = TIMER_NAME;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a16      	ldr	r2, [pc, #88]	; (8002218 <TimerInit+0x7c>)
 80021c0:	601a      	str	r2, [r3, #0]
	htim->Init.Prescaler = TIMER_PSC;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	605a      	str	r2, [r3, #4]
	htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
	htim->Init.Period = TIMER_ARR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f240 22d5 	movw	r2, #725	; 0x2d5
 80021d4:	60da      	str	r2, [r3, #12]
	htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
	htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Init(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f003 fd78 	bl	8005cd8 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ec:	613b      	str	r3, [r7, #16]
	HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig);
 80021ee:	f107 0310 	add.w	r3, r7, #16
 80021f2:	4619      	mov	r1, r3
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f003 ff4d 	bl	8006094 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021fa:	2320      	movs	r3, #32
 80021fc:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
	HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig);
 8002202:	f107 0308 	add.w	r3, r7, #8
 8002206:	4619      	mov	r1, r3
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f004 f931 	bl	8006470 <HAL_TIMEx_MasterConfigSynchronization>
}
 800220e:	bf00      	nop
 8002210:	3720      	adds	r7, #32
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40000800 	.word	0x40000800

0800221c <SpeakerInit>:

void SpeakerInit(DAC_HandleTypeDef * hdac, TIM_HandleTypeDef * htim){
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
	SpeakerGPIOInit();
 8002226:	f7ff ff4b 	bl	80020c0 <SpeakerGPIOInit>
	DMAInit();
 800222a:	f7ff ff99 	bl	8002160 <DMAInit>
	DACInit(hdac);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff ff68 	bl	8002104 <DACInit>
	TimerInit(htim);
 8002234:	6838      	ldr	r0, [r7, #0]
 8002236:	f7ff ffb1 	bl	800219c <TimerInit>
	HAL_TIM_Base_Start(htim);
 800223a:	6838      	ldr	r0, [r7, #0]
 800223c:	f003 fd8c 	bl	8005d58 <HAL_TIM_Base_Start>
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <HAL_MspInit+0x58>)
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <HAL_MspInit+0x58>)
 8002254:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002258:	6253      	str	r3, [r2, #36]	; 0x24
 800225a:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <HAL_MspInit+0x58>)
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <HAL_MspInit+0x58>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	4a0d      	ldr	r2, [pc, #52]	; (80022a0 <HAL_MspInit+0x58>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6213      	str	r3, [r2, #32]
 8002272:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_MspInit+0x58>)
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800227e:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <HAL_MspInit+0x58>)
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <HAL_MspInit+0x58>)
 8002284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002288:	6253      	str	r3, [r2, #36]	; 0x24
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_MspInit+0x58>)
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	40023800 	.word	0x40023800

080022a4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a28      	ldr	r2, [pc, #160]	; (8002364 <HAL_DAC_MspInit+0xc0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d14a      	bne.n	800235c <HAL_DAC_MspInit+0xb8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80022c6:	4b28      	ldr	r3, [pc, #160]	; (8002368 <HAL_DAC_MspInit+0xc4>)
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	4a27      	ldr	r2, [pc, #156]	; (8002368 <HAL_DAC_MspInit+0xc4>)
 80022cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022d0:	6253      	str	r3, [r2, #36]	; 0x24
 80022d2:	4b25      	ldr	r3, [pc, #148]	; (8002368 <HAL_DAC_MspInit+0xc4>)
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022de:	4b22      	ldr	r3, [pc, #136]	; (8002368 <HAL_DAC_MspInit+0xc4>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	4a21      	ldr	r2, [pc, #132]	; (8002368 <HAL_DAC_MspInit+0xc4>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	61d3      	str	r3, [r2, #28]
 80022ea:	4b1f      	ldr	r3, [pc, #124]	; (8002368 <HAL_DAC_MspInit+0xc4>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80022f6:	2320      	movs	r3, #32
 80022f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022fa:	2303      	movs	r3, #3
 80022fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	4818      	ldr	r0, [pc, #96]	; (800236c <HAL_DAC_MspInit+0xc8>)
 800230a:	f002 f93f 	bl	800458c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel3;
 800230e:	4b18      	ldr	r3, [pc, #96]	; (8002370 <HAL_DAC_MspInit+0xcc>)
 8002310:	4a18      	ldr	r2, [pc, #96]	; (8002374 <HAL_DAC_MspInit+0xd0>)
 8002312:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002314:	4b16      	ldr	r3, [pc, #88]	; (8002370 <HAL_DAC_MspInit+0xcc>)
 8002316:	2210      	movs	r2, #16
 8002318:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_DAC_MspInit+0xcc>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002320:	4b13      	ldr	r3, [pc, #76]	; (8002370 <HAL_DAC_MspInit+0xcc>)
 8002322:	2280      	movs	r2, #128	; 0x80
 8002324:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_DAC_MspInit+0xcc>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800232c:	4b10      	ldr	r3, [pc, #64]	; (8002370 <HAL_DAC_MspInit+0xcc>)
 800232e:	2200      	movs	r2, #0
 8002330:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8002332:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <HAL_DAC_MspInit+0xcc>)
 8002334:	2220      	movs	r2, #32
 8002336:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002338:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <HAL_DAC_MspInit+0xcc>)
 800233a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800233e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8002340:	480b      	ldr	r0, [pc, #44]	; (8002370 <HAL_DAC_MspInit+0xcc>)
 8002342:	f001 ffff 	bl	8004344 <HAL_DMA_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_DAC_MspInit+0xac>
    {
      Error_Handler();
 800234c:	f7fe ffa0 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a07      	ldr	r2, [pc, #28]	; (8002370 <HAL_DAC_MspInit+0xcc>)
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	4a06      	ldr	r2, [pc, #24]	; (8002370 <HAL_DAC_MspInit+0xcc>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800235c:	bf00      	nop
 800235e:	3728      	adds	r7, #40	; 0x28
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40007400 	.word	0x40007400
 8002368:	40023800 	.word	0x40023800
 800236c:	40020000 	.word	0x40020000
 8002370:	200018a8 	.word	0x200018a8
 8002374:	40026030 	.word	0x40026030

08002378 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08e      	sub	sp, #56	; 0x38
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a54      	ldr	r2, [pc, #336]	; (80024e8 <HAL_SPI_MspInit+0x170>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d145      	bne.n	8002426 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800239a:	4b54      	ldr	r3, [pc, #336]	; (80024ec <HAL_SPI_MspInit+0x174>)
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	4a53      	ldr	r2, [pc, #332]	; (80024ec <HAL_SPI_MspInit+0x174>)
 80023a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023a4:	6213      	str	r3, [r2, #32]
 80023a6:	4b51      	ldr	r3, [pc, #324]	; (80024ec <HAL_SPI_MspInit+0x174>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ae:	623b      	str	r3, [r7, #32]
 80023b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b2:	4b4e      	ldr	r3, [pc, #312]	; (80024ec <HAL_SPI_MspInit+0x174>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	4a4d      	ldr	r2, [pc, #308]	; (80024ec <HAL_SPI_MspInit+0x174>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	61d3      	str	r3, [r2, #28]
 80023be:	4b4b      	ldr	r3, [pc, #300]	; (80024ec <HAL_SPI_MspInit+0x174>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	61fb      	str	r3, [r7, #28]
 80023c8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ca:	4b48      	ldr	r3, [pc, #288]	; (80024ec <HAL_SPI_MspInit+0x174>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	4a47      	ldr	r2, [pc, #284]	; (80024ec <HAL_SPI_MspInit+0x174>)
 80023d0:	f043 0310 	orr.w	r3, r3, #16
 80023d4:	61d3      	str	r3, [r2, #28]
 80023d6:	4b45      	ldr	r3, [pc, #276]	; (80024ec <HAL_SPI_MspInit+0x174>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PE13     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023e2:	23c0      	movs	r3, #192	; 0xc0
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ee:	2303      	movs	r3, #3
 80023f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023f2:	2305      	movs	r3, #5
 80023f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023fa:	4619      	mov	r1, r3
 80023fc:	483c      	ldr	r0, [pc, #240]	; (80024f0 <HAL_SPI_MspInit+0x178>)
 80023fe:	f002 f8c5 	bl	800458c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002402:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002408:	2302      	movs	r3, #2
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002410:	2303      	movs	r3, #3
 8002412:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002414:	2305      	movs	r3, #5
 8002416:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800241c:	4619      	mov	r1, r3
 800241e:	4835      	ldr	r0, [pc, #212]	; (80024f4 <HAL_SPI_MspInit+0x17c>)
 8002420:	f002 f8b4 	bl	800458c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002424:	e05c      	b.n	80024e0 <HAL_SPI_MspInit+0x168>
  else if(hspi->Instance==SPI2)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a33      	ldr	r2, [pc, #204]	; (80024f8 <HAL_SPI_MspInit+0x180>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d129      	bne.n	8002484 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002430:	4b2e      	ldr	r3, [pc, #184]	; (80024ec <HAL_SPI_MspInit+0x174>)
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	4a2d      	ldr	r2, [pc, #180]	; (80024ec <HAL_SPI_MspInit+0x174>)
 8002436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800243a:	6253      	str	r3, [r2, #36]	; 0x24
 800243c:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <HAL_SPI_MspInit+0x174>)
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002448:	4b28      	ldr	r3, [pc, #160]	; (80024ec <HAL_SPI_MspInit+0x174>)
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	4a27      	ldr	r2, [pc, #156]	; (80024ec <HAL_SPI_MspInit+0x174>)
 800244e:	f043 0302 	orr.w	r3, r3, #2
 8002452:	61d3      	str	r3, [r2, #28]
 8002454:	4b25      	ldr	r3, [pc, #148]	; (80024ec <HAL_SPI_MspInit+0x174>)
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002460:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246e:	2303      	movs	r3, #3
 8002470:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002472:	2305      	movs	r3, #5
 8002474:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800247a:	4619      	mov	r1, r3
 800247c:	481f      	ldr	r0, [pc, #124]	; (80024fc <HAL_SPI_MspInit+0x184>)
 800247e:	f002 f885 	bl	800458c <HAL_GPIO_Init>
}
 8002482:	e02d      	b.n	80024e0 <HAL_SPI_MspInit+0x168>
  else if(hspi->Instance==SPI3)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a1d      	ldr	r2, [pc, #116]	; (8002500 <HAL_SPI_MspInit+0x188>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d128      	bne.n	80024e0 <HAL_SPI_MspInit+0x168>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800248e:	4b17      	ldr	r3, [pc, #92]	; (80024ec <HAL_SPI_MspInit+0x174>)
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	4a16      	ldr	r2, [pc, #88]	; (80024ec <HAL_SPI_MspInit+0x174>)
 8002494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002498:	6253      	str	r3, [r2, #36]	; 0x24
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <HAL_SPI_MspInit+0x174>)
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <HAL_SPI_MspInit+0x174>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	4a10      	ldr	r2, [pc, #64]	; (80024ec <HAL_SPI_MspInit+0x174>)
 80024ac:	f043 0304 	orr.w	r3, r3, #4
 80024b0:	61d3      	str	r3, [r2, #28]
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <HAL_SPI_MspInit+0x174>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80024be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c4:	2302      	movs	r3, #2
 80024c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024cc:	2303      	movs	r3, #3
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024d0:	2306      	movs	r3, #6
 80024d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d8:	4619      	mov	r1, r3
 80024da:	480a      	ldr	r0, [pc, #40]	; (8002504 <HAL_SPI_MspInit+0x18c>)
 80024dc:	f002 f856 	bl	800458c <HAL_GPIO_Init>
}
 80024e0:	bf00      	nop
 80024e2:	3738      	adds	r7, #56	; 0x38
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40013000 	.word	0x40013000
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40020000 	.word	0x40020000
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40003800 	.word	0x40003800
 80024fc:	40020400 	.word	0x40020400
 8002500:	40003c00 	.word	0x40003c00
 8002504:	40020800 	.word	0x40020800

08002508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002518:	d114      	bne.n	8002544 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800251a:	4b33      	ldr	r3, [pc, #204]	; (80025e8 <HAL_TIM_Base_MspInit+0xe0>)
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	4a32      	ldr	r2, [pc, #200]	; (80025e8 <HAL_TIM_Base_MspInit+0xe0>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6253      	str	r3, [r2, #36]	; 0x24
 8002526:	4b30      	ldr	r3, [pc, #192]	; (80025e8 <HAL_TIM_Base_MspInit+0xe0>)
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002532:	2200      	movs	r2, #0
 8002534:	2100      	movs	r1, #0
 8002536:	201c      	movs	r0, #28
 8002538:	f001 fe5d 	bl	80041f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800253c:	201c      	movs	r0, #28
 800253e:	f001 fe76 	bl	800422e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002542:	e04c      	b.n	80025de <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a28      	ldr	r2, [pc, #160]	; (80025ec <HAL_TIM_Base_MspInit+0xe4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d114      	bne.n	8002578 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800254e:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <HAL_TIM_Base_MspInit+0xe0>)
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	4a25      	ldr	r2, [pc, #148]	; (80025e8 <HAL_TIM_Base_MspInit+0xe0>)
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	6253      	str	r3, [r2, #36]	; 0x24
 800255a:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <HAL_TIM_Base_MspInit+0xe0>)
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002566:	2200      	movs	r2, #0
 8002568:	2100      	movs	r1, #0
 800256a:	201d      	movs	r0, #29
 800256c:	f001 fe43 	bl	80041f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002570:	201d      	movs	r0, #29
 8002572:	f001 fe5c 	bl	800422e <HAL_NVIC_EnableIRQ>
}
 8002576:	e032      	b.n	80025de <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1c      	ldr	r2, [pc, #112]	; (80025f0 <HAL_TIM_Base_MspInit+0xe8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d114      	bne.n	80025ac <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002582:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_TIM_Base_MspInit+0xe0>)
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	4a18      	ldr	r2, [pc, #96]	; (80025e8 <HAL_TIM_Base_MspInit+0xe0>)
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	6253      	str	r3, [r2, #36]	; 0x24
 800258e:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <HAL_TIM_Base_MspInit+0xe0>)
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	201e      	movs	r0, #30
 80025a0:	f001 fe29 	bl	80041f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80025a4:	201e      	movs	r0, #30
 80025a6:	f001 fe42 	bl	800422e <HAL_NVIC_EnableIRQ>
}
 80025aa:	e018      	b.n	80025de <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a10      	ldr	r2, [pc, #64]	; (80025f4 <HAL_TIM_Base_MspInit+0xec>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d113      	bne.n	80025de <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025b6:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_TIM_Base_MspInit+0xe0>)
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	4a0b      	ldr	r2, [pc, #44]	; (80025e8 <HAL_TIM_Base_MspInit+0xe0>)
 80025bc:	f043 0308 	orr.w	r3, r3, #8
 80025c0:	6253      	str	r3, [r2, #36]	; 0x24
 80025c2:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <HAL_TIM_Base_MspInit+0xe0>)
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2100      	movs	r1, #0
 80025d2:	202e      	movs	r0, #46	; 0x2e
 80025d4:	f001 fe0f 	bl	80041f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80025d8:	202e      	movs	r0, #46	; 0x2e
 80025da:	f001 fe28 	bl	800422e <HAL_NVIC_EnableIRQ>
}
 80025de:	bf00      	nop
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40000400 	.word	0x40000400
 80025f0:	40000800 	.word	0x40000800
 80025f4:	40000c00 	.word	0x40000c00

080025f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	; 0x28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a17      	ldr	r2, [pc, #92]	; (8002674 <HAL_UART_MspInit+0x7c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d128      	bne.n	800266c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800261a:	4b17      	ldr	r3, [pc, #92]	; (8002678 <HAL_UART_MspInit+0x80>)
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	4a16      	ldr	r2, [pc, #88]	; (8002678 <HAL_UART_MspInit+0x80>)
 8002620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002624:	6213      	str	r3, [r2, #32]
 8002626:	4b14      	ldr	r3, [pc, #80]	; (8002678 <HAL_UART_MspInit+0x80>)
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <HAL_UART_MspInit+0x80>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	4a10      	ldr	r2, [pc, #64]	; (8002678 <HAL_UART_MspInit+0x80>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	61d3      	str	r3, [r2, #28]
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <HAL_UART_MspInit+0x80>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800264a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800264e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	2302      	movs	r3, #2
 8002652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	2300      	movs	r3, #0
 8002656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002658:	2303      	movs	r3, #3
 800265a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800265c:	2307      	movs	r3, #7
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	4619      	mov	r1, r3
 8002666:	4805      	ldr	r0, [pc, #20]	; (800267c <HAL_UART_MspInit+0x84>)
 8002668:	f001 ff90 	bl	800458c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800266c:	bf00      	nop
 800266e:	3728      	adds	r7, #40	; 0x28
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40013800 	.word	0x40013800
 8002678:	40023800 	.word	0x40023800
 800267c:	40020000 	.word	0x40020000

08002680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002684:	e7fe      	b.n	8002684 <NMI_Handler+0x4>

08002686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002686:	b480      	push	{r7}
 8002688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800268a:	e7fe      	b.n	800268a <HardFault_Handler+0x4>

0800268c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002690:	e7fe      	b.n	8002690 <MemManage_Handler+0x4>

08002692 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002696:	e7fe      	b.n	8002696 <BusFault_Handler+0x4>

08002698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800269c:	e7fe      	b.n	800269c <UsageFault_Handler+0x4>

0800269e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr

080026aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026aa:	b480      	push	{r7}
 80026ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr

080026b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr

080026c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026c6:	f001 fc81 	bl	8003fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80026d4:	4802      	ldr	r0, [pc, #8]	; (80026e0 <DMA1_Channel3_IRQHandler+0x10>)
 80026d6:	f001 fea9 	bl	800442c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	200018a8 	.word	0x200018a8

080026e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80026e8:	2040      	movs	r0, #64	; 0x40
 80026ea:	f002 f90f 	bl	800490c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80026ee:	2080      	movs	r0, #128	; 0x80
 80026f0:	f002 f90c 	bl	800490c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80026f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026f8:	f002 f908 	bl	800490c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}

08002700 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002704:	4802      	ldr	r0, [pc, #8]	; (8002710 <TIM2_IRQHandler+0x10>)
 8002706:	f003 fbe9 	bl	8005edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20001944 	.word	0x20001944

08002714 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002718:	4802      	ldr	r0, [pc, #8]	; (8002724 <TIM3_IRQHandler+0x10>)
 800271a:	f003 fbdf 	bl	8005edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200017b4 	.word	0x200017b4

08002728 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800272c:	4802      	ldr	r0, [pc, #8]	; (8002738 <TIM4_IRQHandler+0x10>)
 800272e:	f003 fbd5 	bl	8005edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20001734 	.word	0x20001734

0800273c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002740:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002744:	f002 f8e2 	bl	800490c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002748:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800274c:	f002 f8de 	bl	800490c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}

08002754 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002758:	4802      	ldr	r0, [pc, #8]	; (8002764 <TIM5_IRQHandler+0x10>)
 800275a:	f003 fbbf 	bl	8005edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20001774 	.word	0x20001774

08002768 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <InitTracker>:
// Uart Move Buffer //
char MoveBuffer[4] = {0};
char ReceiveBuffer[5] = {0};

void InitTracker(enum GameMode gameMode)
{
 8002774:	b590      	push	{r4, r7, lr}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
	// Initialize globals
	CurrentGameMode = gameMode;
 800277e:	4a41      	ldr	r2, [pc, #260]	; (8002884 <InitTracker+0x110>)
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	7013      	strb	r3, [r2, #0]
	LastTransitionType = PLACE;
 8002784:	4b40      	ldr	r3, [pc, #256]	; (8002888 <InitTracker+0x114>)
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
	CurrentTurn = WHITE;
 800278a:	4b40      	ldr	r3, [pc, #256]	; (800288c <InitTracker+0x118>)
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
	CanA1Castle = 1;
 8002790:	4b3f      	ldr	r3, [pc, #252]	; (8002890 <InitTracker+0x11c>)
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
	CanH1Castle = 1;
 8002796:	4b3f      	ldr	r3, [pc, #252]	; (8002894 <InitTracker+0x120>)
 8002798:	2201      	movs	r2, #1
 800279a:	701a      	strb	r2, [r3, #0]
	CanA8Castle = 1;
 800279c:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <InitTracker+0x124>)
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]
	CanH8Castle = 1;
 80027a2:	4b3e      	ldr	r3, [pc, #248]	; (800289c <InitTracker+0x128>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
	CanWhiteKingCastle = 1;
 80027a8:	4b3d      	ldr	r3, [pc, #244]	; (80028a0 <InitTracker+0x12c>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
	CanBlackKingCastle = 1;
 80027ae:	4b3d      	ldr	r3, [pc, #244]	; (80028a4 <InitTracker+0x130>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	701a      	strb	r2, [r3, #0]
	SwitchTurnsAfterLegalState = 0;
 80027b4:	4b3c      	ldr	r3, [pc, #240]	; (80028a8 <InitTracker+0x134>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]

	ClearPiece(&LastPickedUpPiece);
 80027ba:	483c      	ldr	r0, [pc, #240]	; (80028ac <InitTracker+0x138>)
 80027bc:	f001 f974 	bl	8003aa8 <ClearPiece>
	ClearPiece(&PieceToKill);
 80027c0:	483b      	ldr	r0, [pc, #236]	; (80028b0 <InitTracker+0x13c>)
 80027c2:	f001 f971 	bl	8003aa8 <ClearPiece>
	ClearPiece(&ExpectedKingCastleCoordinate);
 80027c6:	483b      	ldr	r0, [pc, #236]	; (80028b4 <InitTracker+0x140>)
 80027c8:	f001 f96e 	bl	8003aa8 <ClearPiece>
	ClearPiece(&ExpectedRookCastleCoordinate);
 80027cc:	483a      	ldr	r0, [pc, #232]	; (80028b8 <InitTracker+0x144>)
 80027ce:	f001 f96b 	bl	8003aa8 <ClearPiece>
	ClearPiece(&PawnToPromote);
 80027d2:	483a      	ldr	r0, [pc, #232]	; (80028bc <InitTracker+0x148>)
 80027d4:	f001 f968 	bl	8003aa8 <ClearPiece>

	// Initialize the Chessboard to the initial chessboard and zero the debouncing Histroy array
	for (uint8_t column = 0; column < NUM_COLS; column++)
 80027d8:	2300      	movs	r3, #0
 80027da:	73fb      	strb	r3, [r7, #15]
 80027dc:	e02d      	b.n	800283a <InitTracker+0xc6>
	{
		for (uint8_t row = 0; row < NUM_ROWS; row++)
 80027de:	2300      	movs	r3, #0
 80027e0:	73bb      	strb	r3, [r7, #14]
 80027e2:	e024      	b.n	800282e <InitTracker+0xba>
		{
			Chessboard[row][column] = INITIAL_CHESSBOARD[row][column];
 80027e4:	7bb9      	ldrb	r1, [r7, #14]
 80027e6:	7bfa      	ldrb	r2, [r7, #15]
 80027e8:	7bb8      	ldrb	r0, [r7, #14]
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	4c34      	ldr	r4, [pc, #208]	; (80028c0 <InitTracker+0x14c>)
 80027ee:	00c0      	lsls	r0, r0, #3
 80027f0:	4403      	add	r3, r0
 80027f2:	4834      	ldr	r0, [pc, #208]	; (80028c4 <InitTracker+0x150>)
 80027f4:	00c9      	lsls	r1, r1, #3
 80027f6:	440a      	add	r2, r1
 80027f8:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80027fc:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]

			// Initialize debouncing history array
			for(uint8_t i = 0; i < NUM_HISTORY_ENTRIES; i++)
 8002800:	2300      	movs	r3, #0
 8002802:	737b      	strb	r3, [r7, #13]
 8002804:	e00d      	b.n	8002822 <InitTracker+0xae>
			{
				History[row][column][i] = 0;
 8002806:	7bb9      	ldrb	r1, [r7, #14]
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	7b7b      	ldrb	r3, [r7, #13]
 800280c:	482e      	ldr	r0, [pc, #184]	; (80028c8 <InitTracker+0x154>)
 800280e:	00c9      	lsls	r1, r1, #3
 8002810:	440a      	add	r2, r1
 8002812:	00d2      	lsls	r2, r2, #3
 8002814:	4402      	add	r2, r0
 8002816:	4413      	add	r3, r2
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < NUM_HISTORY_ENTRIES; i++)
 800281c:	7b7b      	ldrb	r3, [r7, #13]
 800281e:	3301      	adds	r3, #1
 8002820:	737b      	strb	r3, [r7, #13]
 8002822:	7b7b      	ldrb	r3, [r7, #13]
 8002824:	2b07      	cmp	r3, #7
 8002826:	d9ee      	bls.n	8002806 <InitTracker+0x92>
		for (uint8_t row = 0; row < NUM_ROWS; row++)
 8002828:	7bbb      	ldrb	r3, [r7, #14]
 800282a:	3301      	adds	r3, #1
 800282c:	73bb      	strb	r3, [r7, #14]
 800282e:	7bbb      	ldrb	r3, [r7, #14]
 8002830:	2b07      	cmp	r3, #7
 8002832:	d9d7      	bls.n	80027e4 <InitTracker+0x70>
	for (uint8_t column = 0; column < NUM_COLS; column++)
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	3301      	adds	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	2b07      	cmp	r3, #7
 800283e:	d9ce      	bls.n	80027de <InitTracker+0x6a>
			}
		}
	}

	// Initialize illegal piece destinations to empty pieces
	NumIllegalPieces = 0;
 8002840:	4b22      	ldr	r3, [pc, #136]	; (80028cc <InitTracker+0x158>)
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_ILLEGAL_PIECES; i++)
 8002846:	2300      	movs	r3, #0
 8002848:	733b      	strb	r3, [r7, #12]
 800284a:	e00f      	b.n	800286c <InitTracker+0xf8>
	{
		IllegalPieces[i].destination = EMPTY_PIECE_COORDINATE;
 800284c:	7b3b      	ldrb	r3, [r7, #12]
 800284e:	4920      	ldr	r1, [pc, #128]	; (80028d0 <InitTracker+0x15c>)
 8002850:	4a20      	ldr	r2, [pc, #128]	; (80028d4 <InitTracker+0x160>)
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		IllegalPieces[i].current = EMPTY_PIECE_COORDINATE;
 8002858:	7b3b      	ldrb	r3, [r7, #12]
 800285a:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <InitTracker+0x15c>)
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	4a1c      	ldr	r2, [pc, #112]	; (80028d4 <InitTracker+0x160>)
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	605a      	str	r2, [r3, #4]
	for (uint8_t i = 0; i < MAX_ILLEGAL_PIECES; i++)
 8002866:	7b3b      	ldrb	r3, [r7, #12]
 8002868:	3301      	adds	r3, #1
 800286a:	733b      	strb	r3, [r7, #12]
 800286c:	7b3b      	ldrb	r3, [r7, #12]
 800286e:	2b1f      	cmp	r3, #31
 8002870:	d9ec      	bls.n	800284c <InitTracker+0xd8>
	}

	// Initialize PathFinder
	CalculateTeamsLegalMoves(CurrentTurn);
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <InitTracker+0x118>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fd10 	bl	800129c <CalculateTeamsLegalMoves>
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	bd90      	pop	{r4, r7, pc}
 8002884:	20001988 	.word	0x20001988
 8002888:	200005a1 	.word	0x200005a1
 800288c:	200005a0 	.word	0x200005a0
 8002890:	200006ae 	.word	0x200006ae
 8002894:	200006af 	.word	0x200006af
 8002898:	200006b0 	.word	0x200006b0
 800289c:	200006b1 	.word	0x200006b1
 80028a0:	200006b2 	.word	0x200006b2
 80028a4:	200006b3 	.word	0x200006b3
 80028a8:	200006ad 	.word	0x200006ad
 80028ac:	200005a4 	.word	0x200005a4
 80028b0:	200005a8 	.word	0x200005a8
 80028b4:	200006b4 	.word	0x200006b4
 80028b8:	200006b8 	.word	0x200006b8
 80028bc:	200006bc 	.word	0x200006bc
 80028c0:	20000520 	.word	0x20000520
 80028c4:	20000014 	.word	0x20000014
 80028c8:	2000198c 	.word	0x2000198c
 80028cc:	200006ac 	.word	0x200006ac
 80028d0:	200005ac 	.word	0x200005ac
 80028d4:	2000000c 	.word	0x2000000c

080028d8 <WriteColumn>:

static void WriteColumn(uint8_t column)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	71fb      	strb	r3, [r7, #7]
	uint8_t columnBit0 = (column & 1) >> 0;
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	73fb      	strb	r3, [r7, #15]
	uint8_t columnBit1 = (column & 2) >> 1;
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	105b      	asrs	r3, r3, #1
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	73bb      	strb	r3, [r7, #14]
	uint8_t columnBit2 = (column & 4) >> 2;
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	109b      	asrs	r3, r3, #2
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(COLUMN_BIT_TO_PIN_TABLE[0].bus, COLUMN_BIT_TO_PIN_TABLE[0].pin, columnBit0);
 8002902:	480b      	ldr	r0, [pc, #44]	; (8002930 <WriteColumn+0x58>)
 8002904:	2101      	movs	r1, #1
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	461a      	mov	r2, r3
 800290a:	f001 ffe6 	bl	80048da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COLUMN_BIT_TO_PIN_TABLE[1].bus, COLUMN_BIT_TO_PIN_TABLE[1].pin, columnBit1);
 800290e:	4808      	ldr	r0, [pc, #32]	; (8002930 <WriteColumn+0x58>)
 8002910:	2102      	movs	r1, #2
 8002912:	7bbb      	ldrb	r3, [r7, #14]
 8002914:	461a      	mov	r2, r3
 8002916:	f001 ffe0 	bl	80048da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COLUMN_BIT_TO_PIN_TABLE[2].bus, COLUMN_BIT_TO_PIN_TABLE[2].pin, columnBit2);
 800291a:	4805      	ldr	r0, [pc, #20]	; (8002930 <WriteColumn+0x58>)
 800291c:	2104      	movs	r1, #4
 800291e:	7b7b      	ldrb	r3, [r7, #13]
 8002920:	461a      	mov	r2, r3
 8002922:	f001 ffda 	bl	80048da <HAL_GPIO_WritePin>
}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40020000 	.word	0x40020000

08002934 <ReadRow>:

static uint8_t ReadRow(uint8_t rowNumber)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	71fb      	strb	r3, [r7, #7]
	struct GPIO_Pin rowPin = ROW_NUMBER_TO_PIN_TABLE[rowNumber];
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	4909      	ldr	r1, [pc, #36]	; (8002968 <ReadRow+0x34>)
 8002942:	f107 0208 	add.w	r2, r7, #8
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	440b      	add	r3, r1
 800294a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800294e:	e882 0003 	stmia.w	r2, {r0, r1}
	return HAL_GPIO_ReadPin(rowPin.bus, rowPin.pin);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	893a      	ldrh	r2, [r7, #8]
 8002956:	4611      	mov	r1, r2
 8002958:	4618      	mov	r0, r3
 800295a:	f001 ffa7 	bl	80048ac <HAL_GPIO_ReadPin>
 800295e:	4603      	mov	r3, r0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	08007720 	.word	0x08007720

0800296c <Track>:

uint8_t Track()
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
	uint8_t transitionOccured = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	71fb      	strb	r3, [r7, #7]

	for (uint8_t column = 0; column < NUM_COLS; column++)
 8002976:	2300      	movs	r3, #0
 8002978:	71bb      	strb	r3, [r7, #6]
 800297a:	e043      	b.n	8002a04 <Track+0x98>
	{
		WriteColumn(column);
 800297c:	79bb      	ldrb	r3, [r7, #6]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff ffaa 	bl	80028d8 <WriteColumn>

		for (uint8_t row = 0; row < NUM_ROWS; row++)
 8002984:	2300      	movs	r3, #0
 8002986:	717b      	strb	r3, [r7, #5]
 8002988:	e036      	b.n	80029f8 <Track+0x8c>
		{
			uint8_t cellValue = ReadRow(row);
 800298a:	797b      	ldrb	r3, [r7, #5]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ffd1 	bl	8002934 <ReadRow>
 8002992:	4603      	mov	r3, r0
 8002994:	713b      	strb	r3, [r7, #4]

			// Add cellValue to front of debouncing History array for this cell
			AppendHistory(row, column, cellValue);
 8002996:	793a      	ldrb	r2, [r7, #4]
 8002998:	79b9      	ldrb	r1, [r7, #6]
 800299a:	797b      	ldrb	r3, [r7, #5]
 800299c:	4618      	mov	r0, r3
 800299e:	f000 f839 	bl	8002a14 <AppendHistory>

			// If the debouncing History of this cell is all the same value, then we can consider it for a transition
			if(IsHistoryConsensus(row, column))
 80029a2:	79ba      	ldrb	r2, [r7, #6]
 80029a4:	797b      	ldrb	r3, [r7, #5]
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 f871 	bl	8002a90 <IsHistoryConsensus>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01e      	beq.n	80029f2 <Track+0x86>
			{
				struct PieceCoordinate currentPieceCoordinate = GetPieceCoordinate(row, column);
 80029b4:	79ba      	ldrb	r2, [r7, #6]
 80029b6:	797b      	ldrb	r3, [r7, #5]
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f001 f8ce 	bl	8003b5c <GetPieceCoordinate>
 80029c0:	4603      	mov	r3, r0
 80029c2:	603b      	str	r3, [r7, #0]

				// If there was no piece here but the IO is HIGH, a piece was placed
				if ((currentPieceCoordinate.piece.type == NONE) && (cellValue == 1))
 80029c4:	783b      	ldrb	r3, [r7, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d108      	bne.n	80029dc <Track+0x70>
 80029ca:	793b      	ldrb	r3, [r7, #4]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d105      	bne.n	80029dc <Track+0x70>
				{
					HandlePlace(currentPieceCoordinate);
 80029d0:	6838      	ldr	r0, [r7, #0]
 80029d2:	f000 f88f 	bl	8002af4 <HandlePlace>
					transitionOccured = 1;
 80029d6:	2301      	movs	r3, #1
 80029d8:	71fb      	strb	r3, [r7, #7]
 80029da:	e00a      	b.n	80029f2 <Track+0x86>
				}

				// If there was a piece here but the IO is LOW, a piece has been picked up
				else if ((currentPieceCoordinate.piece.type != NONE) && (cellValue == 0))
 80029dc:	783b      	ldrb	r3, [r7, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d007      	beq.n	80029f2 <Track+0x86>
 80029e2:	793b      	ldrb	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d104      	bne.n	80029f2 <Track+0x86>
				{
					HandlePickup(currentPieceCoordinate);
 80029e8:	6838      	ldr	r0, [r7, #0]
 80029ea:	f000 fa7f 	bl	8002eec <HandlePickup>
					transitionOccured = 1;
 80029ee:	2301      	movs	r3, #1
 80029f0:	71fb      	strb	r3, [r7, #7]
		for (uint8_t row = 0; row < NUM_ROWS; row++)
 80029f2:	797b      	ldrb	r3, [r7, #5]
 80029f4:	3301      	adds	r3, #1
 80029f6:	717b      	strb	r3, [r7, #5]
 80029f8:	797b      	ldrb	r3, [r7, #5]
 80029fa:	2b07      	cmp	r3, #7
 80029fc:	d9c5      	bls.n	800298a <Track+0x1e>
	for (uint8_t column = 0; column < NUM_COLS; column++)
 80029fe:	79bb      	ldrb	r3, [r7, #6]
 8002a00:	3301      	adds	r3, #1
 8002a02:	71bb      	strb	r3, [r7, #6]
 8002a04:	79bb      	ldrb	r3, [r7, #6]
 8002a06:	2b07      	cmp	r3, #7
 8002a08:	d9b8      	bls.n	800297c <Track+0x10>
				}
			}
		}
	}

	return transitionOccured;
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <AppendHistory>:

static void AppendHistory(uint8_t row, uint8_t column, uint8_t cellValue)
{
 8002a14:	b4f0      	push	{r4, r5, r6, r7}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	71fb      	strb	r3, [r7, #7]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	71bb      	strb	r3, [r7, #6]
 8002a22:	4613      	mov	r3, r2
 8002a24:	717b      	strb	r3, [r7, #5]
	// Append cellValue to front of History array
	for(int8_t i = NUM_HISTORY_ENTRIES - 1; i > 0; i--)
 8002a26:	2307      	movs	r3, #7
 8002a28:	73fb      	strb	r3, [r7, #15]
 8002a2a:	e01d      	b.n	8002a68 <AppendHistory+0x54>
	{
		History[row][column][i] = History[row][column][i - 1];
 8002a2c:	79fd      	ldrb	r5, [r7, #7]
 8002a2e:	79bc      	ldrb	r4, [r7, #6]
 8002a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a34:	1e58      	subs	r0, r3, #1
 8002a36:	79f9      	ldrb	r1, [r7, #7]
 8002a38:	79ba      	ldrb	r2, [r7, #6]
 8002a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3e:	4e13      	ldr	r6, [pc, #76]	; (8002a8c <AppendHistory+0x78>)
 8002a40:	00ed      	lsls	r5, r5, #3
 8002a42:	442c      	add	r4, r5
 8002a44:	00e4      	lsls	r4, r4, #3
 8002a46:	4434      	add	r4, r6
 8002a48:	4420      	add	r0, r4
 8002a4a:	7804      	ldrb	r4, [r0, #0]
 8002a4c:	480f      	ldr	r0, [pc, #60]	; (8002a8c <AppendHistory+0x78>)
 8002a4e:	00c9      	lsls	r1, r1, #3
 8002a50:	440a      	add	r2, r1
 8002a52:	00d2      	lsls	r2, r2, #3
 8002a54:	4402      	add	r2, r0
 8002a56:	4413      	add	r3, r2
 8002a58:	4622      	mov	r2, r4
 8002a5a:	701a      	strb	r2, [r3, #0]
	for(int8_t i = NUM_HISTORY_ENTRIES - 1; i > 0; i--)
 8002a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	73fb      	strb	r3, [r7, #15]
 8002a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	dcdd      	bgt.n	8002a2c <AppendHistory+0x18>
	}
	History[row][column][0] = cellValue;
 8002a70:	79fa      	ldrb	r2, [r7, #7]
 8002a72:	79bb      	ldrb	r3, [r7, #6]
 8002a74:	4905      	ldr	r1, [pc, #20]	; (8002a8c <AppendHistory+0x78>)
 8002a76:	00d2      	lsls	r2, r2, #3
 8002a78:	4413      	add	r3, r2
 8002a7a:	797a      	ldrb	r2, [r7, #5]
 8002a7c:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
}
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bcf0      	pop	{r4, r5, r6, r7}
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	2000198c 	.word	0x2000198c

08002a90 <IsHistoryConsensus>:

static uint8_t IsHistoryConsensus(uint8_t row, uint8_t column)
{
 8002a90:	b490      	push	{r4, r7}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	460a      	mov	r2, r1
 8002a9a:	71fb      	strb	r3, [r7, #7]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	71bb      	strb	r3, [r7, #6]
	// If any two History values are the same, there is not a consensus
	for(uint8_t i = 0; i < NUM_HISTORY_ENTRIES - 1; i++)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	73fb      	strb	r3, [r7, #15]
 8002aa4:	e01b      	b.n	8002ade <IsHistoryConsensus+0x4e>
	{
		if(History[row][column][i] != History[row][column][i + 1])
 8002aa6:	79f9      	ldrb	r1, [r7, #7]
 8002aa8:	79ba      	ldrb	r2, [r7, #6]
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	4810      	ldr	r0, [pc, #64]	; (8002af0 <IsHistoryConsensus+0x60>)
 8002aae:	00c9      	lsls	r1, r1, #3
 8002ab0:	440a      	add	r2, r1
 8002ab2:	00d2      	lsls	r2, r2, #3
 8002ab4:	4402      	add	r2, r0
 8002ab6:	4413      	add	r3, r2
 8002ab8:	781a      	ldrb	r2, [r3, #0]
 8002aba:	79f8      	ldrb	r0, [r7, #7]
 8002abc:	79b9      	ldrb	r1, [r7, #6]
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	4c0b      	ldr	r4, [pc, #44]	; (8002af0 <IsHistoryConsensus+0x60>)
 8002ac4:	00c0      	lsls	r0, r0, #3
 8002ac6:	4401      	add	r1, r0
 8002ac8:	00c9      	lsls	r1, r1, #3
 8002aca:	4421      	add	r1, r4
 8002acc:	440b      	add	r3, r1
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <IsHistoryConsensus+0x48>
		{
			return 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e006      	b.n	8002ae6 <IsHistoryConsensus+0x56>
	for(uint8_t i = 0; i < NUM_HISTORY_ENTRIES - 1; i++)
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	3301      	adds	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	2b06      	cmp	r3, #6
 8002ae2:	d9e0      	bls.n	8002aa6 <IsHistoryConsensus+0x16>
		}
	}

	return 1;
 8002ae4:	2301      	movs	r3, #1
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc90      	pop	{r4, r7}
 8002aee:	4770      	bx	lr
 8002af0:	2000198c 	.word	0x2000198c

08002af4 <HandlePlace>:

static void HandlePlace(struct PieceCoordinate placedPiece)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	// If board is in illegal state
	if (NumIllegalPieces > 0)
 8002afc:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <HandlePlace+0x94>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HandlePlace+0x18>
	{
		HandlePlaceIllegalState(placedPiece);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f84d 	bl	8002ba4 <HandlePlaceIllegalState>
 8002b0a:	e036      	b.n	8002b7a <HandlePlace+0x86>
	}

	// If promotion is occurring, this placed piece must be a knight or queen placed into PawnToPromote's place
	else if (PieceExists(PawnToPromote))
 8002b0c:	4b1f      	ldr	r3, [pc, #124]	; (8002b8c <HandlePlace+0x98>)
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	f000 ffb4 	bl	8003a7c <PieceExists>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HandlePlace+0x2e>
	{
		HandlePlacePromotion(placedPiece);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f9ae 	bl	8002e7c <HandlePlacePromotion>
 8002b20:	e02b      	b.n	8002b7a <HandlePlace+0x86>
	}

	// If there's a piece being killed, this placement should be in its stead
	else if (PieceExists(PieceToKill))
 8002b22:	4b1b      	ldr	r3, [pc, #108]	; (8002b90 <HandlePlace+0x9c>)
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	f000 ffa9 	bl	8003a7c <PieceExists>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HandlePlace+0x44>
	{
		HandlePlaceKill(placedPiece);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f891 	bl	8002c58 <HandlePlaceKill>
 8002b36:	e020      	b.n	8002b7a <HandlePlace+0x86>
	}

	// If the piece lifted did not move, don't do anything except update Chessboard
	else if (IsPieceCoordinateSamePosition(placedPiece, LastPickedUpPiece))
 8002b38:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <HandlePlace+0xa0>)
 8002b3a:	6819      	ldr	r1, [r3, #0]
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f001 f89d 	bl	8003c7c <IsPieceCoordinateSamePosition>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <HandlePlace+0x5c>
	{
		HandlePlaceNoMove(placedPiece);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f86f 	bl	8002c2c <HandlePlaceNoMove>
 8002b4e:	e014      	b.n	8002b7a <HandlePlace+0x86>
	}

	// If player is castling, this placement should be the king or rook being placed in the right spots
	else if (PieceExists(ExpectedKingCastleCoordinate) || PieceExists(ExpectedRookCastleCoordinate))
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <HandlePlace+0xa4>)
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	f000 ff92 	bl	8003a7c <PieceExists>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HandlePlace+0x78>
 8002b5e:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <HandlePlace+0xa8>)
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	f000 ff8b 	bl	8003a7c <PieceExists>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HandlePlace+0x80>
	{
		HandlePlaceCastling(placedPiece);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f8b7 	bl	8002ce0 <HandlePlaceCastling>
 8002b72:	e002      	b.n	8002b7a <HandlePlace+0x86>
	}

	// Any other move, the last picked up piece is set to this position
	else
	{
		HandlePlaceMove(placedPiece);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f939 	bl	8002dec <HandlePlaceMove>
	}

	LastTransitionType = PLACE;
 8002b7a:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <HandlePlace+0xac>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	200006ac 	.word	0x200006ac
 8002b8c:	200006bc 	.word	0x200006bc
 8002b90:	200005a8 	.word	0x200005a8
 8002b94:	200005a4 	.word	0x200005a4
 8002b98:	200006b4 	.word	0x200006b4
 8002b9c:	200006b8 	.word	0x200006b8
 8002ba0:	200005a1 	.word	0x200005a1

08002ba4 <HandlePlaceIllegalState>:

static void HandlePlaceIllegalState(struct PieceCoordinate placedPiece)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < NumIllegalPieces; i++)
 8002bac:	2300      	movs	r3, #0
 8002bae:	73fb      	strb	r3, [r7, #15]
 8002bb0:	e01e      	b.n	8002bf0 <HandlePlaceIllegalState+0x4c>
	{
		// If placing an illegal piece in it's proper destination, remove it from the illegal pieces array
		if (IsPieceCoordinateSamePosition(IllegalPieces[i].destination, placedPiece))
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	4a18      	ldr	r2, [pc, #96]	; (8002c18 <HandlePlaceIllegalState+0x74>)
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002bbc:	f001 f85e 	bl	8003c7c <IsPieceCoordinateSamePosition>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d011      	beq.n	8002bea <HandlePlaceIllegalState+0x46>
		{
			SetPiece(placedPiece.row, placedPiece.column, IllegalPieces[i].destination.piece);
 8002bc6:	79b8      	ldrb	r0, [r7, #6]
 8002bc8:	79f9      	ldrb	r1, [r7, #7]
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	4a12      	ldr	r2, [pc, #72]	; (8002c18 <HandlePlaceIllegalState+0x74>)
 8002bce:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002bd2:	f000 ff79 	bl	8003ac8 <SetPiece>

			// Remove from illegal pieces array
			RemoveIllegalPiece(i);
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 fc39 	bl	8003450 <RemoveIllegalPiece>

			// If chessboard is valid, switch turns if flagged to do so
			CheckChessboardValidity(SwitchTurnsAfterLegalState);
 8002bde:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <HandlePlaceIllegalState+0x78>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 fca8 	bl	8003538 <CheckChessboardValidity>

			return;
 8002be8:	e013      	b.n	8002c12 <HandlePlaceIllegalState+0x6e>
	for (uint8_t i = 0; i < NumIllegalPieces; i++)
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	3301      	adds	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HandlePlaceIllegalState+0x7c>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d3db      	bcc.n	8002bb2 <HandlePlaceIllegalState+0xe>
		}
	}

	// A piece was placed in an unexpected destination, add it as an illegal piece that must be removed from the board
	SetPiece(placedPiece.row, placedPiece.column, LastPickedUpPiece.piece);
 8002bfa:	79bb      	ldrb	r3, [r7, #6]
 8002bfc:	79f9      	ldrb	r1, [r7, #7]
 8002bfe:	4a09      	ldr	r2, [pc, #36]	; (8002c24 <HandlePlaceIllegalState+0x80>)
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 ff60 	bl	8003ac8 <SetPiece>
	AddIllegalPiece(placedPiece, OFFBOARD_PIECE_COORDINATE);
 8002c08:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <HandlePlaceIllegalState+0x84>)
 8002c0a:	6819      	ldr	r1, [r3, #0]
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fb97 	bl	8003340 <AddIllegalPiece>
}
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	200005ac 	.word	0x200005ac
 8002c1c:	200006ad 	.word	0x200006ad
 8002c20:	200006ac 	.word	0x200006ac
 8002c24:	200005a4 	.word	0x200005a4
 8002c28:	20000010 	.word	0x20000010

08002c2c <HandlePlaceNoMove>:

static void HandlePlaceNoMove(struct PieceCoordinate placedPiece)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	SetPiece(placedPiece.row, placedPiece.column, LastPickedUpPiece.piece);
 8002c34:	79bb      	ldrb	r3, [r7, #6]
 8002c36:	79f9      	ldrb	r1, [r7, #7]
 8002c38:	4a06      	ldr	r2, [pc, #24]	; (8002c54 <HandlePlaceNoMove+0x28>)
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 ff43 	bl	8003ac8 <SetPiece>

	// Turn off all squares
	IlluminateCoordinates(NULL, 0);
 8002c42:	2100      	movs	r1, #0
 8002c44:	2000      	movs	r0, #0
 8002c46:	f000 fb3b 	bl	80032c0 <IlluminateCoordinates>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	200005a4 	.word	0x200005a4

08002c58 <HandlePlaceKill>:

static void HandlePlaceKill(struct PieceCoordinate placedPiece)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	SetPiece(placedPiece.row, placedPiece.column, LastPickedUpPiece.piece);
 8002c60:	79bb      	ldrb	r3, [r7, #6]
 8002c62:	79f9      	ldrb	r1, [r7, #7]
 8002c64:	4a19      	ldr	r2, [pc, #100]	; (8002ccc <HandlePlaceKill+0x74>)
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 ff2d 	bl	8003ac8 <SetPiece>

	// If player put killer in victim's place, clear PieceToKill
	if (IsPieceCoordinateSamePosition(PieceToKill, placedPiece))
 8002c6e:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <HandlePlaceKill+0x78>)
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	f001 f802 	bl	8003c7c <IsPieceCoordinateSamePosition>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d014      	beq.n	8002ca8 <HandlePlaceKill+0x50>
	{
		// Store move for AI
		if(CurrentTurn == WHITE)
 8002c7e:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <HandlePlaceKill+0x7c>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d10a      	bne.n	8002c9c <HandlePlaceKill+0x44>
		{
			MoveBuffer[2] = 'h' - placedPiece.column;
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <HandlePlaceKill+0x80>)
 8002c90:	709a      	strb	r2, [r3, #2]
			MoveBuffer[3] = '1' + placedPiece.row;
 8002c92:	79bb      	ldrb	r3, [r7, #6]
 8002c94:	3331      	adds	r3, #49	; 0x31
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <HandlePlaceKill+0x80>)
 8002c9a:	70da      	strb	r2, [r3, #3]
		}

		ClearPiece(&PieceToKill);
 8002c9c:	480c      	ldr	r0, [pc, #48]	; (8002cd0 <HandlePlaceKill+0x78>)
 8002c9e:	f000 ff03 	bl	8003aa8 <ClearPiece>
		EndTurn();
 8002ca2:	f000 fd5f 	bl	8003764 <EndTurn>
		struct PieceCoordinate killerDestination = PieceToKill;
		killerDestination.piece = LastPickedUpPiece.piece;
		AddIllegalPiece(placedPiece, killerDestination);
		SwitchTurnsAfterLegalState = 1;
	}
}
 8002ca6:	e00c      	b.n	8002cc2 <HandlePlaceKill+0x6a>
		struct PieceCoordinate killerDestination = PieceToKill;
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <HandlePlaceKill+0x78>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60fb      	str	r3, [r7, #12]
		killerDestination.piece = LastPickedUpPiece.piece;
 8002cae:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <HandlePlaceKill+0x74>)
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	81bb      	strh	r3, [r7, #12]
		AddIllegalPiece(placedPiece, killerDestination);
 8002cb4:	68f9      	ldr	r1, [r7, #12]
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fb42 	bl	8003340 <AddIllegalPiece>
		SwitchTurnsAfterLegalState = 1;
 8002cbc:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <HandlePlaceKill+0x84>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	200005a4 	.word	0x200005a4
 8002cd0:	200005a8 	.word	0x200005a8
 8002cd4:	200005a0 	.word	0x200005a0
 8002cd8:	200006c0 	.word	0x200006c0
 8002cdc:	200006ad 	.word	0x200006ad

08002ce0 <HandlePlaceCastling>:

static void HandlePlaceCastling(struct PieceCoordinate placedPiece)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	// If placing a piece in the King's expected location, assume it's a king and place it
	if (IsPieceCoordinateSamePosition(ExpectedKingCastleCoordinate, placedPiece))
 8002ce8:	4b3c      	ldr	r3, [pc, #240]	; (8002ddc <HandlePlaceCastling+0xfc>)
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	f000 ffc5 	bl	8003c7c <IsPieceCoordinateSamePosition>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <HandlePlaceCastling+0x2e>
	{
		SetPiece(placedPiece.row, placedPiece.column, ExpectedKingCastleCoordinate.piece);
 8002cf8:	79bb      	ldrb	r3, [r7, #6]
 8002cfa:	79f9      	ldrb	r1, [r7, #7]
 8002cfc:	4a37      	ldr	r2, [pc, #220]	; (8002ddc <HandlePlaceCastling+0xfc>)
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fee1 	bl	8003ac8 <SetPiece>
		ClearPiece(&ExpectedKingCastleCoordinate);
 8002d06:	4835      	ldr	r0, [pc, #212]	; (8002ddc <HandlePlaceCastling+0xfc>)
 8002d08:	f000 fece 	bl	8003aa8 <ClearPiece>
 8002d0c:	e03e      	b.n	8002d8c <HandlePlaceCastling+0xac>
	}
	// If placing a piece in the Rook's expected location, assume it's a rook and place it
	else if (IsPieceCoordinateSamePosition(ExpectedRookCastleCoordinate, placedPiece))
 8002d0e:	4b34      	ldr	r3, [pc, #208]	; (8002de0 <HandlePlaceCastling+0x100>)
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	f000 ffb2 	bl	8003c7c <IsPieceCoordinateSamePosition>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HandlePlaceCastling+0x54>
	{
		SetPiece(placedPiece.row, placedPiece.column, ExpectedRookCastleCoordinate.piece);
 8002d1e:	79bb      	ldrb	r3, [r7, #6]
 8002d20:	79f9      	ldrb	r1, [r7, #7]
 8002d22:	4a2f      	ldr	r2, [pc, #188]	; (8002de0 <HandlePlaceCastling+0x100>)
 8002d24:	6812      	ldr	r2, [r2, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fece 	bl	8003ac8 <SetPiece>
		ClearPiece(&ExpectedRookCastleCoordinate);
 8002d2c:	482c      	ldr	r0, [pc, #176]	; (8002de0 <HandlePlaceCastling+0x100>)
 8002d2e:	f000 febb 	bl	8003aa8 <ClearPiece>
 8002d32:	e02b      	b.n	8002d8c <HandlePlaceCastling+0xac>
	}
	// If placing piece in wrong location
	else
	{
		// If King wasn't already placed in correct spot, put it in the correct spot
		if (PieceExists(ExpectedKingCastleCoordinate))
 8002d34:	4b29      	ldr	r3, [pc, #164]	; (8002ddc <HandlePlaceCastling+0xfc>)
 8002d36:	6818      	ldr	r0, [r3, #0]
 8002d38:	f000 fea0 	bl	8003a7c <PieceExists>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00e      	beq.n	8002d60 <HandlePlaceCastling+0x80>
		{
			SetPiece(placedPiece.row, placedPiece.column, ExpectedKingCastleCoordinate.piece); // Assume the king was placed here (doesn't matter)
 8002d42:	79bb      	ldrb	r3, [r7, #6]
 8002d44:	79f9      	ldrb	r1, [r7, #7]
 8002d46:	4a25      	ldr	r2, [pc, #148]	; (8002ddc <HandlePlaceCastling+0xfc>)
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 febc 	bl	8003ac8 <SetPiece>
			AddIllegalPiece(placedPiece, ExpectedKingCastleCoordinate);
 8002d50:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <HandlePlaceCastling+0xfc>)
 8002d52:	6819      	ldr	r1, [r3, #0]
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 faf3 	bl	8003340 <AddIllegalPiece>
			SwitchTurnsAfterLegalState = 1;
 8002d5a:	4b22      	ldr	r3, [pc, #136]	; (8002de4 <HandlePlaceCastling+0x104>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	701a      	strb	r2, [r3, #0]
		}

		// If Rook wasn't already placed in correct spot, put it in correct spot
		if (PieceExists(ExpectedRookCastleCoordinate))
 8002d60:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <HandlePlaceCastling+0x100>)
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	f000 fe8a 	bl	8003a7c <PieceExists>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00e      	beq.n	8002d8c <HandlePlaceCastling+0xac>
		{
			SetPiece(placedPiece.row, placedPiece.column, ExpectedRookCastleCoordinate.piece); // Assume the rook was placed here (doesn't matter)
 8002d6e:	79bb      	ldrb	r3, [r7, #6]
 8002d70:	79f9      	ldrb	r1, [r7, #7]
 8002d72:	4a1b      	ldr	r2, [pc, #108]	; (8002de0 <HandlePlaceCastling+0x100>)
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fea6 	bl	8003ac8 <SetPiece>
			AddIllegalPiece(placedPiece, ExpectedRookCastleCoordinate);
 8002d7c:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HandlePlaceCastling+0x100>)
 8002d7e:	6819      	ldr	r1, [r3, #0]
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fadd 	bl	8003340 <AddIllegalPiece>
			SwitchTurnsAfterLegalState = 1;
 8002d86:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <HandlePlaceCastling+0x104>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]
		}
	}

	// If castling has been fulfilled
	if (!PieceExists(ExpectedKingCastleCoordinate) && !PieceExists(ExpectedRookCastleCoordinate))
 8002d8c:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <HandlePlaceCastling+0xfc>)
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	f000 fe74 	bl	8003a7c <PieceExists>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d11b      	bne.n	8002dd2 <HandlePlaceCastling+0xf2>
 8002d9a:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <HandlePlaceCastling+0x100>)
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	f000 fe6d 	bl	8003a7c <PieceExists>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d114      	bne.n	8002dd2 <HandlePlaceCastling+0xf2>
	{
		MoveBuffer[0] = 'e';
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <HandlePlaceCastling+0x108>)
 8002daa:	2265      	movs	r2, #101	; 0x65
 8002dac:	701a      	strb	r2, [r3, #0]
		MoveBuffer[1] = '1';
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <HandlePlaceCastling+0x108>)
 8002db0:	2231      	movs	r2, #49	; 0x31
 8002db2:	705a      	strb	r2, [r3, #1]
		MoveBuffer[2] = 'h' - ExpectedKingCastleCoordinate.column;
 8002db4:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <HandlePlaceCastling+0xfc>)
 8002db6:	78db      	ldrb	r3, [r3, #3]
 8002db8:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HandlePlaceCastling+0x108>)
 8002dc0:	709a      	strb	r2, [r3, #2]
		MoveBuffer[3] = '1' + ExpectedKingCastleCoordinate.row;
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HandlePlaceCastling+0xfc>)
 8002dc4:	789b      	ldrb	r3, [r3, #2]
 8002dc6:	3331      	adds	r3, #49	; 0x31
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <HandlePlaceCastling+0x108>)
 8002dcc:	70da      	strb	r2, [r3, #3]
		EndTurn();
 8002dce:	f000 fcc9 	bl	8003764 <EndTurn>
	}
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	200006b4 	.word	0x200006b4
 8002de0:	200006b8 	.word	0x200006b8
 8002de4:	200006ad 	.word	0x200006ad
 8002de8:	200006c0 	.word	0x200006c0

08002dec <HandlePlaceMove>:

static void HandlePlaceMove(struct PieceCoordinate placedPiece)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
	uint8_t isMoveValid = ValidateMove(LastPickedUpPiece, placedPiece);
 8002df4:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <HandlePlaceMove+0x60>)
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	f000 fbcd 	bl	8003598 <ValidateMove>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	73fb      	strb	r3, [r7, #15]
	SetPiece(placedPiece.row, placedPiece.column, LastPickedUpPiece.piece);
 8002e02:	79bb      	ldrb	r3, [r7, #6]
 8002e04:	79f9      	ldrb	r1, [r7, #7]
 8002e06:	4a11      	ldr	r2, [pc, #68]	; (8002e4c <HandlePlaceMove+0x60>)
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fe5c 	bl	8003ac8 <SetPiece>

	if (isMoveValid)
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d011      	beq.n	8002e3a <HandlePlaceMove+0x4e>
	{
		// Store move to send to AI
		if(CurrentTurn == WHITE)
 8002e16:	4b0e      	ldr	r3, [pc, #56]	; (8002e50 <HandlePlaceMove+0x64>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d10a      	bne.n	8002e34 <HandlePlaceMove+0x48>
		{
			MoveBuffer[2] = 'h' - placedPiece.column;
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HandlePlaceMove+0x68>)
 8002e28:	709a      	strb	r2, [r3, #2]
			MoveBuffer[3] = '1' + placedPiece.row;
 8002e2a:	79bb      	ldrb	r3, [r7, #6]
 8002e2c:	3331      	adds	r3, #49	; 0x31
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <HandlePlaceMove+0x68>)
 8002e32:	70da      	strb	r2, [r3, #3]
		}

		EndTurn();
 8002e34:	f000 fc96 	bl	8003764 <EndTurn>
	// If move was invalid, put piece back
	else
	{
		AddIllegalPiece(placedPiece, LastPickedUpPiece);
	}
}
 8002e38:	e004      	b.n	8002e44 <HandlePlaceMove+0x58>
		AddIllegalPiece(placedPiece, LastPickedUpPiece);
 8002e3a:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <HandlePlaceMove+0x60>)
 8002e3c:	6819      	ldr	r1, [r3, #0]
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fa7e 	bl	8003340 <AddIllegalPiece>
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	200005a4 	.word	0x200005a4
 8002e50:	200005a0 	.word	0x200005a0
 8002e54:	200006c0 	.word	0x200006c0

08002e58 <HandlePlacePreemptPromotion>:

static void HandlePlacePreemptPromotion(struct PieceCoordinate placedPiece)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	PawnToPromote = placedPiece;
 8002e60:	4a05      	ldr	r2, [pc, #20]	; (8002e78 <HandlePlacePreemptPromotion+0x20>)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6013      	str	r3, [r2, #0]

	// Illuminate the PawnToPromote
	IlluminatePieceCoordinates(&PawnToPromote, 1);
 8002e66:	2101      	movs	r1, #1
 8002e68:	4803      	ldr	r0, [pc, #12]	; (8002e78 <HandlePlacePreemptPromotion+0x20>)
 8002e6a:	f000 f9eb 	bl	8003244 <IlluminatePieceCoordinates>
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	200006bc 	.word	0x200006bc

08002e7c <HandlePlacePromotion>:

static void HandlePlacePromotion(struct PieceCoordinate placedPiece)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
	// If placed the promoted piece back into the pawn's old spot, get the PieceType (knight or queen) from the last button pressed and set the piece as that type
	if (IsPieceCoordinateSamePosition(placedPiece, PawnToPromote))
 8002e84:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <HandlePlacePromotion+0x68>)
 8002e86:	6819      	ldr	r1, [r3, #0]
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 fef7 	bl	8003c7c <IsPieceCoordinateSamePosition>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01e      	beq.n	8002ed2 <HandlePlacePromotion+0x56>
	{
		// Get last button pressed, choose the piece type based on which button was pressed
		enum PieceType selectedPieceType;
		switch(GetLastButtonPressed())
 8002e94:	f7fd fbae 	bl	80005f4 <GetLastButtonPressed>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d002      	beq.n	8002ea4 <HandlePlacePromotion+0x28>
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d003      	beq.n	8002eaa <HandlePlacePromotion+0x2e>
			case KNIGHT_BUTTON:
				selectedPieceType = KNIGHT;
				break;
			default:
				/// @todo: play audio cue to select the piece type to promote to
				return;
 8002ea2:	e01b      	b.n	8002edc <HandlePlacePromotion+0x60>
				selectedPieceType = QUEEN;
 8002ea4:	2305      	movs	r3, #5
 8002ea6:	73fb      	strb	r3, [r7, #15]
				break;
 8002ea8:	e002      	b.n	8002eb0 <HandlePlacePromotion+0x34>
				selectedPieceType = KNIGHT;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	73fb      	strb	r3, [r7, #15]
				break;
 8002eae:	bf00      	nop
		}

		// Set piece on chessboard and end the turn
		struct Piece promotedPiece = {selectedPieceType, CurrentTurn};
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	733b      	strb	r3, [r7, #12]
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <HandlePlacePromotion+0x6c>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	737b      	strb	r3, [r7, #13]
		SetPiece(placedPiece.row, placedPiece.column, promotedPiece);
 8002eba:	79bb      	ldrb	r3, [r7, #6]
 8002ebc:	79f9      	ldrb	r1, [r7, #7]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fe01 	bl	8003ac8 <SetPiece>
		ClearPiece(&PawnToPromote);
 8002ec6:	4807      	ldr	r0, [pc, #28]	; (8002ee4 <HandlePlacePromotion+0x68>)
 8002ec8:	f000 fdee 	bl	8003aa8 <ClearPiece>
		EndTurn();
 8002ecc:	f000 fc4a 	bl	8003764 <EndTurn>
 8002ed0:	e004      	b.n	8002edc <HandlePlacePromotion+0x60>
	}

	// If player doesn't place the promotion into the pawn's old spot, it must be placed in the right spot
	else
	{
		AddIllegalPiece(placedPiece, PawnToPromote);
 8002ed2:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <HandlePlacePromotion+0x68>)
 8002ed4:	6819      	ldr	r1, [r3, #0]
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fa32 	bl	8003340 <AddIllegalPiece>
	}
}
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200006bc 	.word	0x200006bc
 8002ee8:	200005a0 	.word	0x200005a0

08002eec <HandlePickup>:



static void HandlePickup(struct PieceCoordinate pickedUpPiece)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
	SetPiece(pickedUpPiece.row, pickedUpPiece.column, EMPTY_PIECE);
 8002ef4:	79bb      	ldrb	r3, [r7, #6]
 8002ef6:	79f9      	ldrb	r1, [r7, #7]
 8002ef8:	4a21      	ldr	r2, [pc, #132]	; (8002f80 <HandlePickup+0x94>)
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 fde3 	bl	8003ac8 <SetPiece>

	// If a piece is picked up during an illegal state, if it's not an illegal piece it is NOW illegal
	if (NumIllegalPieces > 0)
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <HandlePickup+0x98>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HandlePickup+0x26>
	{
		HandlePickupIllegalState(pickedUpPiece);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f846 	bl	8002f9c <HandlePickupIllegalState>
 8002f10:	e02b      	b.n	8002f6a <HandlePickup+0x7e>
	}

	// If player picked up piece from other team, they will kill it
	else if (pickedUpPiece.piece.owner != CurrentTurn)
 8002f12:	797a      	ldrb	r2, [r7, #5]
 8002f14:	4b1c      	ldr	r3, [pc, #112]	; (8002f88 <HandlePickup+0x9c>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d003      	beq.n	8002f24 <HandlePickup+0x38>
	{
		HandlePickupPreemptKill(pickedUpPiece);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f87f 	bl	8003020 <HandlePickupPreemptKill>
 8002f22:	e022      	b.n	8002f6a <HandlePickup+0x7e>
	}

	// If there's a piece to kill, this picked up piece must be able to kill it
	else if (PieceExists(PieceToKill))
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <HandlePickup+0xa0>)
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	f000 fda8 	bl	8003a7c <PieceExists>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HandlePickup+0x4e>
	{
		HandlePickupKill(pickedUpPiece);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f882 	bl	800303c <HandlePickupKill>
 8002f38:	e017      	b.n	8002f6a <HandlePickup+0x7e>
	}

	// If there's a pawn to promote, the picked up piece must be this pawn
	else if (PieceExists(PawnToPromote))
 8002f3a:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <HandlePickup+0xa4>)
 8002f3c:	6818      	ldr	r0, [r3, #0]
 8002f3e:	f000 fd9d 	bl	8003a7c <PieceExists>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HandlePickup+0x64>
	{
		HandlePickupPromotion(pickedUpPiece);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f91f 	bl	800318c <HandlePickupPromotion>
 8002f4e:	e00c      	b.n	8002f6a <HandlePickup+0x7e>
	}

	// Same team picked up piece twice in a row, so castling is occurring
	else if (DidSameTeamPickupLast(pickedUpPiece.piece))
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fe2b 	bl	8003bac <DidSameTeamPickupLast>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HandlePickup+0x78>
	{
		HandlePickupCastling(pickedUpPiece);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f8a7 	bl	80030b0 <HandlePickupCastling>
 8002f62:	e002      	b.n	8002f6a <HandlePickup+0x7e>
	}

	// If simple pickup
	else
	{
		HandlePickupMove(pickedUpPiece);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f92b 	bl	80031c0 <HandlePickupMove>
	}

	LastPickedUpPiece = pickedUpPiece;
 8002f6a:	4a0a      	ldr	r2, [pc, #40]	; (8002f94 <HandlePickup+0xa8>)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6013      	str	r3, [r2, #0]
	LastTransitionType = PICKUP;
 8002f70:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <HandlePickup+0xac>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000008 	.word	0x20000008
 8002f84:	200006ac 	.word	0x200006ac
 8002f88:	200005a0 	.word	0x200005a0
 8002f8c:	200005a8 	.word	0x200005a8
 8002f90:	200006bc 	.word	0x200006bc
 8002f94:	200005a4 	.word	0x200005a4
 8002f98:	200005a1 	.word	0x200005a1

08002f9c <HandlePickupIllegalState>:

static void HandlePickupIllegalState(struct PieceCoordinate pickedUpPiece)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < NumIllegalPieces; i++)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	73fb      	strb	r3, [r7, #15]
 8002fa8:	e022      	b.n	8002ff0 <HandlePickupIllegalState+0x54>
	{
		// If pickup for illegal piece, let it slide
		if (IsPieceCoordinateSamePosition(IllegalPieces[i].current, pickedUpPiece))
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
 8002fac:	4a18      	ldr	r2, [pc, #96]	; (8003010 <HandlePickupIllegalState+0x74>)
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	6858      	ldr	r0, [r3, #4]
 8002fb6:	f000 fe61 	bl	8003c7c <IsPieceCoordinateSamePosition>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d014      	beq.n	8002fea <HandlePickupIllegalState+0x4e>
		{
			// If pickup an illegal piece which is to be removed from the board is picked up, it is no longer illegal
			if (IsPieceCoordinateEqual(IllegalPieces[i].destination, OFFBOARD_PIECE_COORDINATE))
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	4914      	ldr	r1, [pc, #80]	; (8003014 <HandlePickupIllegalState+0x78>)
 8002fc4:	4a12      	ldr	r2, [pc, #72]	; (8003010 <HandlePickupIllegalState+0x74>)
 8002fc6:	6809      	ldr	r1, [r1, #0]
 8002fc8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002fcc:	f000 fe3a 	bl	8003c44 <IsPieceCoordinateEqual>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d017      	beq.n	8003006 <HandlePickupIllegalState+0x6a>
			{
				// Remove from illegal pieces array
				RemoveIllegalPiece(i);
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fa39 	bl	8003450 <RemoveIllegalPiece>

				// If chessboard is valid, switch turns if flagged to do so
				CheckChessboardValidity(SwitchTurnsAfterLegalState);
 8002fde:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <HandlePickupIllegalState+0x7c>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 faa8 	bl	8003538 <CheckChessboardValidity>
			}
			return;
 8002fe8:	e00d      	b.n	8003006 <HandlePickupIllegalState+0x6a>
	for (uint8_t i = 0; i < NumIllegalPieces; i++)
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	3301      	adds	r3, #1
 8002fee:	73fb      	strb	r3, [r7, #15]
 8002ff0:	4b0a      	ldr	r3, [pc, #40]	; (800301c <HandlePickupIllegalState+0x80>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d3d7      	bcc.n	8002faa <HandlePickupIllegalState+0xe>
		}
	}

	// Player picked up a piece that wasn't illegal, so it must be added as an illegal piece which must be placed back
	AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
 8002ffa:	4b06      	ldr	r3, [pc, #24]	; (8003014 <HandlePickupIllegalState+0x78>)
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	f000 f99e 	bl	8003340 <AddIllegalPiece>
 8003004:	e000      	b.n	8003008 <HandlePickupIllegalState+0x6c>
			return;
 8003006:	bf00      	nop
}
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	200005ac 	.word	0x200005ac
 8003014:	20000010 	.word	0x20000010
 8003018:	200006ad 	.word	0x200006ad
 800301c:	200006ac 	.word	0x200006ac

08003020 <HandlePickupPreemptKill>:

static void HandlePickupPreemptKill(struct PieceCoordinate pickedUpPiece)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	PieceToKill = pickedUpPiece;
 8003028:	4a03      	ldr	r2, [pc, #12]	; (8003038 <HandlePickupPreemptKill+0x18>)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6013      	str	r3, [r2, #0]
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	200005a8 	.word	0x200005a8

0800303c <HandlePickupKill>:

static void HandlePickupKill(struct PieceCoordinate pickedUpPiece)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	// If pickedUpPiece can kill it, illuminate PieceToKill's spot
	if(ValidateKill(PieceToKill, pickedUpPiece))
 8003044:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <HandlePickupKill+0x64>)
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	f000 fa89 	bl	8003560 <ValidateKill>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d013      	beq.n	800307c <HandlePickupKill+0x40>
	{
		IlluminatePieceCoordinates(&PieceToKill, 1);
 8003054:	2101      	movs	r1, #1
 8003056:	4812      	ldr	r0, [pc, #72]	; (80030a0 <HandlePickupKill+0x64>)
 8003058:	f000 f8f4 	bl	8003244 <IlluminatePieceCoordinates>

		// Store move for AI
		if(CurrentTurn == WHITE)
 800305c:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <HandlePickupKill+0x68>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d119      	bne.n	8003098 <HandlePickupKill+0x5c>
		{
			MoveBuffer[0] = 'h' - pickedUpPiece.column;
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 800306a:	b2da      	uxtb	r2, r3
 800306c:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <HandlePickupKill+0x6c>)
 800306e:	701a      	strb	r2, [r3, #0]
			MoveBuffer[1] = '1' + pickedUpPiece.row;
 8003070:	79bb      	ldrb	r3, [r7, #6]
 8003072:	3331      	adds	r3, #49	; 0x31
 8003074:	b2da      	uxtb	r2, r3
 8003076:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <HandlePickupKill+0x6c>)
 8003078:	705a      	strb	r2, [r3, #1]
	{
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, PieceToKill);
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
		ClearPiece(&PieceToKill);
	}
}
 800307a:	e00d      	b.n	8003098 <HandlePickupKill+0x5c>
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, PieceToKill);
 800307c:	4a08      	ldr	r2, [pc, #32]	; (80030a0 <HandlePickupKill+0x64>)
 800307e:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HandlePickupKill+0x70>)
 8003080:	6811      	ldr	r1, [r2, #0]
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	f000 f95c 	bl	8003340 <AddIllegalPiece>
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
 8003088:	4b08      	ldr	r3, [pc, #32]	; (80030ac <HandlePickupKill+0x70>)
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	f000 f957 	bl	8003340 <AddIllegalPiece>
		ClearPiece(&PieceToKill);
 8003092:	4803      	ldr	r0, [pc, #12]	; (80030a0 <HandlePickupKill+0x64>)
 8003094:	f000 fd08 	bl	8003aa8 <ClearPiece>
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	200005a8 	.word	0x200005a8
 80030a4:	200005a0 	.word	0x200005a0
 80030a8:	200006c0 	.word	0x200006c0
 80030ac:	20000010 	.word	0x20000010

080030b0 <HandlePickupCastling>:

static void HandlePickupCastling(struct PieceCoordinate pickedUpPiece)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
	struct PieceCoordinate rook;
	struct PieceCoordinate king;

	if (pickedUpPiece.piece.type == ROOK && LastPickedUpPiece.piece.type == KING)
 80030b8:	793b      	ldrb	r3, [r7, #4]
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d109      	bne.n	80030d2 <HandlePickupCastling+0x22>
 80030be:	4b2f      	ldr	r3, [pc, #188]	; (800317c <HandlePickupCastling+0xcc>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b06      	cmp	r3, #6
 80030c4:	d105      	bne.n	80030d2 <HandlePickupCastling+0x22>
	{
		rook = pickedUpPiece;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	61fb      	str	r3, [r7, #28]
		king = LastPickedUpPiece;
 80030ca:	4b2c      	ldr	r3, [pc, #176]	; (800317c <HandlePickupCastling+0xcc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	61bb      	str	r3, [r7, #24]
 80030d0:	e018      	b.n	8003104 <HandlePickupCastling+0x54>
	}
	else if (pickedUpPiece.piece.type == KING && LastPickedUpPiece.piece.type == ROOK)
 80030d2:	793b      	ldrb	r3, [r7, #4]
 80030d4:	2b06      	cmp	r3, #6
 80030d6:	d109      	bne.n	80030ec <HandlePickupCastling+0x3c>
 80030d8:	4b28      	ldr	r3, [pc, #160]	; (800317c <HandlePickupCastling+0xcc>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d105      	bne.n	80030ec <HandlePickupCastling+0x3c>
	{
		rook = LastPickedUpPiece;
 80030e0:	4b26      	ldr	r3, [pc, #152]	; (800317c <HandlePickupCastling+0xcc>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	61fb      	str	r3, [r7, #28]
		king = pickedUpPiece;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	e00b      	b.n	8003104 <HandlePickupCastling+0x54>
	}
	// If the past two picked up pieces aren't a king and rook, put them back
	else
	{
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
 80030ec:	4b24      	ldr	r3, [pc, #144]	; (8003180 <HandlePickupCastling+0xd0>)
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	f000 f925 	bl	8003340 <AddIllegalPiece>
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, LastPickedUpPiece);
 80030f6:	4a21      	ldr	r2, [pc, #132]	; (800317c <HandlePickupCastling+0xcc>)
 80030f8:	4b21      	ldr	r3, [pc, #132]	; (8003180 <HandlePickupCastling+0xd0>)
 80030fa:	6811      	ldr	r1, [r2, #0]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	f000 f91f 	bl	8003340 <AddIllegalPiece>
		return;
 8003102:	e038      	b.n	8003176 <HandlePickupCastling+0xc6>
	}

	if (ValidateCastling(rook, king))
 8003104:	69b9      	ldr	r1, [r7, #24]
 8003106:	69f8      	ldr	r0, [r7, #28]
 8003108:	f000 fa54 	bl	80035b4 <ValidateCastling>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d026      	beq.n	8003160 <HandlePickupCastling+0xb0>
	{
		struct PieceCoordinate expectedKingPieceCoordinate;
		struct PieceCoordinate expectedRookPieceCoordinate;
		CalculateCastlingPositions(rook, &expectedKingPieceCoordinate, &expectedRookPieceCoordinate);
 8003112:	f107 0210 	add.w	r2, r7, #16
 8003116:	f107 0314 	add.w	r3, r7, #20
 800311a:	4619      	mov	r1, r3
 800311c:	69f8      	ldr	r0, [r7, #28]
 800311e:	f7fe ff29 	bl	8001f74 <CalculateCastlingPositions>

		// If castling won't result in a self-check then it's valid so copy to globals. Otherwise fall through to AddIllegalPiece.
		if (!WillResultInSelfCheck(rook, expectedRookPieceCoordinate) && !WillResultInSelfCheck(king, expectedKingPieceCoordinate))
 8003122:	6939      	ldr	r1, [r7, #16]
 8003124:	69f8      	ldr	r0, [r7, #28]
 8003126:	f7fe fdeb 	bl	8001d00 <WillResultInSelfCheck>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d117      	bne.n	8003160 <HandlePickupCastling+0xb0>
 8003130:	6979      	ldr	r1, [r7, #20]
 8003132:	69b8      	ldr	r0, [r7, #24]
 8003134:	f7fe fde4 	bl	8001d00 <WillResultInSelfCheck>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d110      	bne.n	8003160 <HandlePickupCastling+0xb0>
		{
			ExpectedKingCastleCoordinate = expectedKingPieceCoordinate;
 800313e:	4a11      	ldr	r2, [pc, #68]	; (8003184 <HandlePickupCastling+0xd4>)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	6013      	str	r3, [r2, #0]
			ExpectedRookCastleCoordinate = expectedRookPieceCoordinate;
 8003144:	4a10      	ldr	r2, [pc, #64]	; (8003188 <HandlePickupCastling+0xd8>)
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	6013      	str	r3, [r2, #0]

			// Illuminate LEDs to the target castling locations
			struct PieceCoordinate pieceCoordinatesToIlluminate[] = { expectedKingPieceCoordinate, expectedRookPieceCoordinate};
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	60fb      	str	r3, [r7, #12]
			IlluminatePieceCoordinates(pieceCoordinatesToIlluminate, sizeof(pieceCoordinatesToIlluminate) / sizeof(*pieceCoordinatesToIlluminate));
 8003152:	f107 0308 	add.w	r3, r7, #8
 8003156:	2102      	movs	r1, #2
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f873 	bl	8003244 <IlluminatePieceCoordinates>
 800315e:	e00a      	b.n	8003176 <HandlePickupCastling+0xc6>

			return;
		}
	}

	AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
 8003160:	4b07      	ldr	r3, [pc, #28]	; (8003180 <HandlePickupCastling+0xd0>)
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	f000 f8eb 	bl	8003340 <AddIllegalPiece>
	AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, LastPickedUpPiece);
 800316a:	4a04      	ldr	r2, [pc, #16]	; (800317c <HandlePickupCastling+0xcc>)
 800316c:	4b04      	ldr	r3, [pc, #16]	; (8003180 <HandlePickupCastling+0xd0>)
 800316e:	6811      	ldr	r1, [r2, #0]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	f000 f8e5 	bl	8003340 <AddIllegalPiece>
}
 8003176:	3720      	adds	r7, #32
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	200005a4 	.word	0x200005a4
 8003180:	20000010 	.word	0x20000010
 8003184:	200006b4 	.word	0x200006b4
 8003188:	200006b8 	.word	0x200006b8

0800318c <HandlePickupPromotion>:

static void HandlePickupPromotion(struct PieceCoordinate pickedUpPiece)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
	// All picked up pieces during a promotion must be the PawnToPromote, otherwise they must be placed back
	if (!IsPieceCoordinateEqual(pickedUpPiece, PawnToPromote))
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <HandlePickupPromotion+0x2c>)
 8003196:	6819      	ldr	r1, [r3, #0]
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fd53 	bl	8003c44 <IsPieceCoordinateEqual>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d104      	bne.n	80031ae <HandlePickupPromotion+0x22>
	{
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HandlePickupPromotion+0x30>)
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	f000 f8c9 	bl	8003340 <AddIllegalPiece>
	}
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	200006bc 	.word	0x200006bc
 80031bc:	20000010 	.word	0x20000010

080031c0 <HandlePickupMove>:

static void HandlePickupMove(struct PieceCoordinate pickedUpPiece)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b090      	sub	sp, #64	; 0x40
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
	// If this piece isn't owned by the current team, then they must put it back down
	if (pickedUpPiece.piece.owner != CurrentTurn)
 80031c8:	797a      	ldrb	r2, [r7, #5]
 80031ca:	4b1a      	ldr	r3, [pc, #104]	; (8003234 <HandlePickupMove+0x74>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d005      	beq.n	80031de <HandlePickupMove+0x1e>
	{
		AddIllegalPiece(EMPTY_PIECE_COORDINATE, pickedUpPiece);
 80031d2:	4b19      	ldr	r3, [pc, #100]	; (8003238 <HandlePickupMove+0x78>)
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	f000 f8b2 	bl	8003340 <AddIllegalPiece>
		{
			MoveBuffer[0] = 'h' - pickedUpPiece.column;
			MoveBuffer[1] = '1' + pickedUpPiece.row;
		}
	}
}
 80031dc:	e026      	b.n	800322c <HandlePickupMove+0x6c>
		if (!(CurrentGameMode == PRACTICE && CurrentTurn == BLACK))
 80031de:	4b17      	ldr	r3, [pc, #92]	; (800323c <HandlePickupMove+0x7c>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d103      	bne.n	80031ee <HandlePickupMove+0x2e>
 80031e6:	4b13      	ldr	r3, [pc, #76]	; (8003234 <HandlePickupMove+0x74>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d00f      	beq.n	800320e <HandlePickupMove+0x4e>
			CalculateAllLegalPathsAndChecks(pickedUpPiece, allLegalPaths, &numLegalPaths);
 80031ee:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 80031f2:	f107 0308 	add.w	r3, r7, #8
 80031f6:	4619      	mov	r1, r3
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7fe f96b 	bl	80014d4 <CalculateAllLegalPathsAndChecks>
			IlluminateCoordinates(allLegalPaths, numLegalPaths);
 80031fe:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003202:	f107 0308 	add.w	r3, r7, #8
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f000 f859 	bl	80032c0 <IlluminateCoordinates>
		if(CurrentTurn == WHITE)
 800320e:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HandlePickupMove+0x74>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d10a      	bne.n	800322c <HandlePickupMove+0x6c>
			MoveBuffer[0] = 'h' - pickedUpPiece.column;
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 800321c:	b2da      	uxtb	r2, r3
 800321e:	4b08      	ldr	r3, [pc, #32]	; (8003240 <HandlePickupMove+0x80>)
 8003220:	701a      	strb	r2, [r3, #0]
			MoveBuffer[1] = '1' + pickedUpPiece.row;
 8003222:	79bb      	ldrb	r3, [r7, #6]
 8003224:	3331      	adds	r3, #49	; 0x31
 8003226:	b2da      	uxtb	r2, r3
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HandlePickupMove+0x80>)
 800322a:	705a      	strb	r2, [r3, #1]
}
 800322c:	bf00      	nop
 800322e:	3740      	adds	r7, #64	; 0x40
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	200005a0 	.word	0x200005a0
 8003238:	2000000c 	.word	0x2000000c
 800323c:	20001988 	.word	0x20001988
 8003240:	200006c0 	.word	0x200006c0

08003244 <IlluminatePieceCoordinates>:

static void IlluminatePieceCoordinates(struct PieceCoordinate* pieceCoordinates, uint8_t numPieceCoordinates)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b094      	sub	sp, #80	; 0x50
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	70fb      	strb	r3, [r7, #3]
	uint8_t board[NUM_ROWS][NUM_COLS] = {0};
 8003250:	f107 030c 	add.w	r3, r7, #12
 8003254:	2240      	movs	r2, #64	; 0x40
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f004 f9e9 	bl	8007630 <memset>
	for(uint8_t i = 0; i < numPieceCoordinates; i++)
 800325e:	2300      	movs	r3, #0
 8003260:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003264:	e01a      	b.n	800329c <IlluminatePieceCoordinates+0x58>
	{
		board[pieceCoordinates[i].row][pieceCoordinates[i].column] = 1;
 8003266:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	4413      	add	r3, r2
 8003270:	789b      	ldrb	r3, [r3, #2]
 8003272:	4619      	mov	r1, r3
 8003274:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	78db      	ldrb	r3, [r3, #3]
 8003280:	461a      	mov	r2, r3
 8003282:	00cb      	lsls	r3, r1, #3
 8003284:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003288:	440b      	add	r3, r1
 800328a:	4413      	add	r3, r2
 800328c:	3b44      	subs	r3, #68	; 0x44
 800328e:	2201      	movs	r2, #1
 8003290:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < numPieceCoordinates; i++)
 8003292:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003296:	3301      	adds	r3, #1
 8003298:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800329c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d3df      	bcc.n	8003266 <IlluminatePieceCoordinates+0x22>
	}
	writeBoardValue(&hspi1, board);
 80032a6:	f107 030c 	add.w	r3, r7, #12
 80032aa:	4619      	mov	r1, r3
 80032ac:	4803      	ldr	r0, [pc, #12]	; (80032bc <IlluminatePieceCoordinates+0x78>)
 80032ae:	f7fd fbfe 	bl	8000aae <writeBoardValue>
}
 80032b2:	bf00      	nop
 80032b4:	3750      	adds	r7, #80	; 0x50
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	200018ec 	.word	0x200018ec

080032c0 <IlluminateCoordinates>:

static void IlluminateCoordinates(struct Coordinate* coordinates, uint8_t numCoordinates)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b094      	sub	sp, #80	; 0x50
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	70fb      	strb	r3, [r7, #3]
	uint8_t board[NUM_ROWS][NUM_COLS] = {0};
 80032cc:	f107 030c 	add.w	r3, r7, #12
 80032d0:	2240      	movs	r2, #64	; 0x40
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f004 f9ab 	bl	8007630 <memset>
	for(uint8_t i = 0; i < numCoordinates; i++)
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80032e0:	e01c      	b.n	800331c <IlluminateCoordinates+0x5c>
	{
		board[coordinates[i].row][coordinates[i].column] = 1;
 80032e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	4413      	add	r3, r2
 80032ec:	f993 3000 	ldrsb.w	r3, [r3]
 80032f0:	4619      	mov	r1, r3
 80032f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	4413      	add	r3, r2
 80032fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003300:	461a      	mov	r2, r3
 8003302:	00cb      	lsls	r3, r1, #3
 8003304:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003308:	440b      	add	r3, r1
 800330a:	4413      	add	r3, r2
 800330c:	3b44      	subs	r3, #68	; 0x44
 800330e:	2201      	movs	r2, #1
 8003310:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < numCoordinates; i++)
 8003312:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003316:	3301      	adds	r3, #1
 8003318:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800331c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	429a      	cmp	r2, r3
 8003324:	d3dd      	bcc.n	80032e2 <IlluminateCoordinates+0x22>
	}
	writeBoardValue(&hspi1, board);
 8003326:	f107 030c 	add.w	r3, r7, #12
 800332a:	4619      	mov	r1, r3
 800332c:	4803      	ldr	r0, [pc, #12]	; (800333c <IlluminateCoordinates+0x7c>)
 800332e:	f7fd fbbe 	bl	8000aae <writeBoardValue>
}
 8003332:	bf00      	nop
 8003334:	3750      	adds	r7, #80	; 0x50
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200018ec 	.word	0x200018ec

08003340 <AddIllegalPiece>:

/**
 * @brief Put an illegal piece in the IllegalPieceDestinations array. Destination is the correct destination of the piece and Current is the current position of the piece.
 */
static void AddIllegalPiece(struct PieceCoordinate current, struct PieceCoordinate destination)
{
 8003340:	b590      	push	{r4, r7, lr}
 8003342:	b0c5      	sub	sp, #276	; 0x114
 8003344:	af00      	add	r7, sp, #0
 8003346:	1d3b      	adds	r3, r7, #4
 8003348:	6018      	str	r0, [r3, #0]
 800334a:	463b      	mov	r3, r7
 800334c:	6019      	str	r1, [r3, #0]
	current.piece = destination.piece;
 800334e:	1d3b      	adds	r3, r7, #4
 8003350:	463a      	mov	r2, r7
 8003352:	8812      	ldrh	r2, [r2, #0]
 8003354:	801a      	strh	r2, [r3, #0]

	// Do not add duplicate pieces
	for(uint8_t i = 0; i < NumIllegalPieces; i++)
 8003356:	2300      	movs	r3, #0
 8003358:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800335c:	e011      	b.n	8003382 <AddIllegalPiece+0x42>
	{
		if(IsPieceCoordinateSamePosition(IllegalPieces[i].current, current))
 800335e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003362:	1d3a      	adds	r2, r7, #4
 8003364:	4938      	ldr	r1, [pc, #224]	; (8003448 <AddIllegalPiece+0x108>)
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	440b      	add	r3, r1
 800336a:	6811      	ldr	r1, [r2, #0]
 800336c:	6858      	ldr	r0, [r3, #4]
 800336e:	f000 fc85 	bl	8003c7c <IsPieceCoordinateSamePosition>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d161      	bne.n	800343c <AddIllegalPiece+0xfc>
	for(uint8_t i = 0; i < NumIllegalPieces; i++)
 8003378:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800337c:	3301      	adds	r3, #1
 800337e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003382:	4b32      	ldr	r3, [pc, #200]	; (800344c <AddIllegalPiece+0x10c>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 800338a:	429a      	cmp	r2, r3
 800338c:	d3e7      	bcc.n	800335e <AddIllegalPiece+0x1e>
			return;
		}
	}

	// Add illegal pieces to array
	IllegalPieces[NumIllegalPieces].current = current;
 800338e:	4b2f      	ldr	r3, [pc, #188]	; (800344c <AddIllegalPiece+0x10c>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	4a2d      	ldr	r2, [pc, #180]	; (8003448 <AddIllegalPiece+0x108>)
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	4413      	add	r3, r2
 8003398:	1d3a      	adds	r2, r7, #4
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	605a      	str	r2, [r3, #4]
	IllegalPieces[NumIllegalPieces].destination = destination;
 800339e:	4b2b      	ldr	r3, [pc, #172]	; (800344c <AddIllegalPiece+0x10c>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	4619      	mov	r1, r3
 80033a4:	4a28      	ldr	r2, [pc, #160]	; (8003448 <AddIllegalPiece+0x108>)
 80033a6:	463b      	mov	r3, r7
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
	NumIllegalPieces++;
 80033ae:	4b27      	ldr	r3, [pc, #156]	; (800344c <AddIllegalPiece+0x10c>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	3301      	adds	r3, #1
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	4b25      	ldr	r3, [pc, #148]	; (800344c <AddIllegalPiece+0x10c>)
 80033b8:	701a      	strb	r2, [r3, #0]

	// Illuminate all illegal pieces
	uint8_t j = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	struct PieceCoordinate pieceCoordinates[2 * MAX_ILLEGAL_PIECES] = {0};
 80033c0:	f107 030c 	add.w	r3, r7, #12
 80033c4:	4618      	mov	r0, r3
 80033c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033ca:	461a      	mov	r2, r3
 80033cc:	2100      	movs	r1, #0
 80033ce:	f004 f92f 	bl	8007630 <memset>
	for(uint8_t i = 0; i < NumIllegalPieces; i++)
 80033d2:	2300      	movs	r3, #0
 80033d4:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 80033d8:	e023      	b.n	8003422 <AddIllegalPiece+0xe2>
	{
		pieceCoordinates[j++] = IllegalPieces[i].current;
 80033da:	f897 110d 	ldrb.w	r1, [r7, #269]	; 0x10d
 80033de:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	f887 210e 	strb.w	r2, [r7, #270]	; 0x10e
 80033e8:	461c      	mov	r4, r3
 80033ea:	f107 020c 	add.w	r2, r7, #12
 80033ee:	4816      	ldr	r0, [pc, #88]	; (8003448 <AddIllegalPiece+0x108>)
 80033f0:	00cb      	lsls	r3, r1, #3
 80033f2:	4403      	add	r3, r0
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		pieceCoordinates[j++] = IllegalPieces[i].destination;
 80033fa:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 80033fe:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8003402:	1c59      	adds	r1, r3, #1
 8003404:	f887 110e 	strb.w	r1, [r7, #270]	; 0x10e
 8003408:	4618      	mov	r0, r3
 800340a:	f107 030c 	add.w	r3, r7, #12
 800340e:	490e      	ldr	r1, [pc, #56]	; (8003448 <AddIllegalPiece+0x108>)
 8003410:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8003414:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	for(uint8_t i = 0; i < NumIllegalPieces; i++)
 8003418:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800341c:	3301      	adds	r3, #1
 800341e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8003422:	4b0a      	ldr	r3, [pc, #40]	; (800344c <AddIllegalPiece+0x10c>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800342a:	429a      	cmp	r2, r3
 800342c:	d3d5      	bcc.n	80033da <AddIllegalPiece+0x9a>
	}
	IlluminatePieceCoordinates(pieceCoordinates, sizeof(pieceCoordinates) / sizeof(*pieceCoordinates));
 800342e:	f107 030c 	add.w	r3, r7, #12
 8003432:	2140      	movs	r1, #64	; 0x40
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff ff05 	bl	8003244 <IlluminatePieceCoordinates>
 800343a:	e000      	b.n	800343e <AddIllegalPiece+0xfe>
			return;
 800343c:	bf00      	nop
}
 800343e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003442:	46bd      	mov	sp, r7
 8003444:	bd90      	pop	{r4, r7, pc}
 8003446:	bf00      	nop
 8003448:	200005ac 	.word	0x200005ac
 800344c:	200006ac 	.word	0x200006ac

08003450 <RemoveIllegalPiece>:

/**
 * @brief Remove illegal piece from IllegalPieces array given its index
 */
static void RemoveIllegalPiece(uint8_t index)
{
 8003450:	b590      	push	{r4, r7, lr}
 8003452:	b0c5      	sub	sp, #276	; 0x114
 8003454:	af00      	add	r7, sp, #0
 8003456:	4602      	mov	r2, r0
 8003458:	1dfb      	adds	r3, r7, #7
 800345a:	701a      	strb	r2, [r3, #0]
	// Remove illegal piece from array
	NumIllegalPieces--;
 800345c:	4b34      	ldr	r3, [pc, #208]	; (8003530 <RemoveIllegalPiece+0xe0>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	3b01      	subs	r3, #1
 8003462:	b2da      	uxtb	r2, r3
 8003464:	4b32      	ldr	r3, [pc, #200]	; (8003530 <RemoveIllegalPiece+0xe0>)
 8003466:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = index; i < NumIllegalPieces; i++)
 8003468:	1dfb      	adds	r3, r7, #7
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003470:	e013      	b.n	800349a <RemoveIllegalPiece+0x4a>
	{
		IllegalPieces[i] = IllegalPieces[i + 1];
 8003472:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800347c:	482d      	ldr	r0, [pc, #180]	; (8003534 <RemoveIllegalPiece+0xe4>)
 800347e:	492d      	ldr	r1, [pc, #180]	; (8003534 <RemoveIllegalPiece+0xe4>)
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4403      	add	r3, r0
 8003484:	00d2      	lsls	r2, r2, #3
 8003486:	440a      	add	r2, r1
 8003488:	e892 0003 	ldmia.w	r2, {r0, r1}
 800348c:	e883 0003 	stmia.w	r3, {r0, r1}
	for (uint8_t i = index; i < NumIllegalPieces; i++)
 8003490:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003494:	3301      	adds	r3, #1
 8003496:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800349a:	4b25      	ldr	r3, [pc, #148]	; (8003530 <RemoveIllegalPiece+0xe0>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d3e5      	bcc.n	8003472 <RemoveIllegalPiece+0x22>
	}

	// Unilluminate the piece that was removed
	uint8_t j = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	struct PieceCoordinate pieceCoordinates[2 * MAX_ILLEGAL_PIECES] = {0};
 80034ac:	f107 030c 	add.w	r3, r7, #12
 80034b0:	4618      	mov	r0, r3
 80034b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034b6:	461a      	mov	r2, r3
 80034b8:	2100      	movs	r1, #0
 80034ba:	f004 f8b9 	bl	8007630 <memset>
	for(uint8_t i = 0; i < NumIllegalPieces; i++)
 80034be:	2300      	movs	r3, #0
 80034c0:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 80034c4:	e023      	b.n	800350e <RemoveIllegalPiece+0xbe>
	{
		pieceCoordinates[j++] = IllegalPieces[i].current;
 80034c6:	f897 110d 	ldrb.w	r1, [r7, #269]	; 0x10d
 80034ca:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	f887 210e 	strb.w	r2, [r7, #270]	; 0x10e
 80034d4:	461c      	mov	r4, r3
 80034d6:	f107 020c 	add.w	r2, r7, #12
 80034da:	4816      	ldr	r0, [pc, #88]	; (8003534 <RemoveIllegalPiece+0xe4>)
 80034dc:	00cb      	lsls	r3, r1, #3
 80034de:	4403      	add	r3, r0
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		pieceCoordinates[j++] = IllegalPieces[i].destination;
 80034e6:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 80034ea:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80034ee:	1c59      	adds	r1, r3, #1
 80034f0:	f887 110e 	strb.w	r1, [r7, #270]	; 0x10e
 80034f4:	4618      	mov	r0, r3
 80034f6:	f107 030c 	add.w	r3, r7, #12
 80034fa:	490e      	ldr	r1, [pc, #56]	; (8003534 <RemoveIllegalPiece+0xe4>)
 80034fc:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8003500:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	for(uint8_t i = 0; i < NumIllegalPieces; i++)
 8003504:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8003508:	3301      	adds	r3, #1
 800350a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800350e:	4b08      	ldr	r3, [pc, #32]	; (8003530 <RemoveIllegalPiece+0xe0>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8003516:	429a      	cmp	r2, r3
 8003518:	d3d5      	bcc.n	80034c6 <RemoveIllegalPiece+0x76>
	}
	IlluminatePieceCoordinates(pieceCoordinates, sizeof(pieceCoordinates) / sizeof(*pieceCoordinates));
 800351a:	f107 030c 	add.w	r3, r7, #12
 800351e:	2140      	movs	r1, #64	; 0x40
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fe8f 	bl	8003244 <IlluminatePieceCoordinates>
}
 8003526:	bf00      	nop
 8003528:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800352c:	46bd      	mov	sp, r7
 800352e:	bd90      	pop	{r4, r7, pc}
 8003530:	200006ac 	.word	0x200006ac
 8003534:	200005ac 	.word	0x200005ac

08003538 <CheckChessboardValidity>:

/**
 * @brief Check if chessboard is valid and switch turns if flagged to do so
 */
static void CheckChessboardValidity(uint8_t switchTurns)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	71fb      	strb	r3, [r7, #7]
	if (NumIllegalPieces == 0)
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <CheckChessboardValidity+0x24>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d104      	bne.n	8003554 <CheckChessboardValidity+0x1c>
	{
		if (switchTurns)
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <CheckChessboardValidity+0x1c>
		{
			EndTurn();
 8003550:	f000 f908 	bl	8003764 <EndTurn>
		}
	}
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	200006ac 	.word	0x200006ac

08003560 <ValidateKill>:
/**
 * @brief Return 1 if the given killer can take the victim, 0 otherwise. If the victim cannot be killed, then this is an illegal/impossible kill
 * so the victim and killer must return to their original spots, and a new move must be done.
 */
static uint8_t ValidateKill(struct PieceCoordinate victim, struct PieceCoordinate killer)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
	// Temporarily add back victim and then check if it can be killed (need to be done for PAWN)
	SetPieceCoordinate(victim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fac4 	bl	8003af8 <SetPieceCoordinate>

	uint8_t valid = ValidateMove(killer, victim);
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	6838      	ldr	r0, [r7, #0]
 8003574:	f000 f810 	bl	8003598 <ValidateMove>
 8003578:	4603      	mov	r3, r0
 800357a:	73fb      	strb	r3, [r7, #15]

	// Clear victim again
	victim.piece = EMPTY_PIECE;
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <ValidateKill+0x34>)
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	80bb      	strh	r3, [r7, #4]
	SetPieceCoordinate(victim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fab8 	bl	8003af8 <SetPieceCoordinate>

	return valid;
 8003588:	7bfb      	ldrb	r3, [r7, #15]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20000008 	.word	0x20000008

08003598 <ValidateMove>:
/**
 * @brief Return 1 if the "to" is in the legal paths for "from", 0 otherwise. If the move is invalid, then the "from" must be placed back
 * in its original spot, and a new move must be done.
 */
static uint8_t ValidateMove(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
	return IsLegalMove(from, to);
 80035a2:	6839      	ldr	r1, [r7, #0]
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7fd ff1d 	bl	80013e4 <IsLegalMove>
 80035aa:	4603      	mov	r3, r0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <ValidateCastling>:

/**
 * @brief Return 1 if the given rook can castle with the given king. If not, they should return to their original positions.
 */
static uint8_t ValidateCastling(struct PieceCoordinate rook, struct PieceCoordinate king)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
	// If white king can castle and the king and rook are in the starting row
	if (king.row == 0 && rook.row == 0 && CanWhiteKingCastle)
 80035be:	78bb      	ldrb	r3, [r7, #2]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d119      	bne.n	80035f8 <ValidateCastling+0x44>
 80035c4:	79bb      	ldrb	r3, [r7, #6]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d116      	bne.n	80035f8 <ValidateCastling+0x44>
 80035ca:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <ValidateCastling+0x8c>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d012      	beq.n	80035f8 <ValidateCastling+0x44>
	{
		return (rook.column == 0 && CanA1Castle) || (rook.column == 7 && CanH1Castle);
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d103      	bne.n	80035e0 <ValidateCastling+0x2c>
 80035d8:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <ValidateCastling+0x90>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d106      	bne.n	80035ee <ValidateCastling+0x3a>
 80035e0:	79fb      	ldrb	r3, [r7, #7]
 80035e2:	2b07      	cmp	r3, #7
 80035e4:	d105      	bne.n	80035f2 <ValidateCastling+0x3e>
 80035e6:	4b18      	ldr	r3, [pc, #96]	; (8003648 <ValidateCastling+0x94>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <ValidateCastling+0x3e>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <ValidateCastling+0x40>
 80035f2:	2300      	movs	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	e01d      	b.n	8003634 <ValidateCastling+0x80>
	}
	// If black king can castle and the king and rook are in the starting row
	else if (king.row == 7 && rook.row == 7 && CanBlackKingCastle)
 80035f8:	78bb      	ldrb	r3, [r7, #2]
 80035fa:	2b07      	cmp	r3, #7
 80035fc:	d119      	bne.n	8003632 <ValidateCastling+0x7e>
 80035fe:	79bb      	ldrb	r3, [r7, #6]
 8003600:	2b07      	cmp	r3, #7
 8003602:	d116      	bne.n	8003632 <ValidateCastling+0x7e>
 8003604:	4b11      	ldr	r3, [pc, #68]	; (800364c <ValidateCastling+0x98>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d012      	beq.n	8003632 <ValidateCastling+0x7e>
	{
		return (rook.column == 0 && CanA8Castle) || (rook.column == 7 && CanH8Castle);
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d103      	bne.n	800361a <ValidateCastling+0x66>
 8003612:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <ValidateCastling+0x9c>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <ValidateCastling+0x74>
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	2b07      	cmp	r3, #7
 800361e:	d105      	bne.n	800362c <ValidateCastling+0x78>
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <ValidateCastling+0xa0>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <ValidateCastling+0x78>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <ValidateCastling+0x7a>
 800362c:	2300      	movs	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	e000      	b.n	8003634 <ValidateCastling+0x80>
	}
	return 0;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	200006b2 	.word	0x200006b2
 8003644:	200006ae 	.word	0x200006ae
 8003648:	200006af 	.word	0x200006af
 800364c:	200006b3 	.word	0x200006b3
 8003650:	200006b0 	.word	0x200006b0
 8003654:	200006b1 	.word	0x200006b1

08003658 <ValidateStartPositions>:

uint8_t ValidateStartPositions()
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b0a2      	sub	sp, #136	; 0x88
 800365c:	af00      	add	r7, sp, #0
	struct Coordinate invalidCoordinates[NUM_COLS * NUM_ROWS] = {0};
 800365e:	1d3b      	adds	r3, r7, #4
 8003660:	2280      	movs	r2, #128	; 0x80
 8003662:	2100      	movs	r1, #0
 8003664:	4618      	mov	r0, r3
 8003666:	f003 ffe3 	bl	8007630 <memset>
	uint8_t numInvalidCoordinates = 0;
 800366a:	2300      	movs	r3, #0
 800366c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	for (uint8_t column = 0; column < NUM_COLS; column++)
 8003670:	2300      	movs	r3, #0
 8003672:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8003676:	e05c      	b.n	8003732 <ValidateStartPositions+0xda>
	{
		WriteColumn(column);
 8003678:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff f92b 	bl	80028d8 <WriteColumn>
		for (uint8_t row = 0; row < NUM_ROWS; row++)
 8003682:	2300      	movs	r3, #0
 8003684:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8003688:	e04a      	b.n	8003720 <ValidateStartPositions+0xc8>
		{
			GPIO_PinState cellValue = ReadRow(row);
 800368a:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff f950 	bl	8002934 <ReadRow>
 8003694:	4603      	mov	r3, r0
 8003696:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
			struct Coordinate coordinate = {row, column};
 800369a:	f997 3085 	ldrsb.w	r3, [r7, #133]	; 0x85
 800369e:	703b      	strb	r3, [r7, #0]
 80036a0:	f997 3086 	ldrsb.w	r3, [r7, #134]	; 0x86
 80036a4:	707b      	strb	r3, [r7, #1]

			if(cellValue == GPIO_PIN_SET && INITIAL_CHESSBOARD[row][column].type == NONE)
 80036a6:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d117      	bne.n	80036de <ValidateStartPositions+0x86>
 80036ae:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80036b2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80036b6:	492a      	ldr	r1, [pc, #168]	; (8003760 <ValidateStartPositions+0x108>)
 80036b8:	00d2      	lsls	r2, r2, #3
 80036ba:	4413      	add	r3, r2
 80036bc:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10b      	bne.n	80036de <ValidateStartPositions+0x86>
			{
				invalidCoordinates[numInvalidCoordinates++] = coordinate;
 80036c6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80036d6:	4413      	add	r3, r2
 80036d8:	883a      	ldrh	r2, [r7, #0]
 80036da:	f823 2c84 	strh.w	r2, [r3, #-132]
			}

			if(cellValue == GPIO_PIN_RESET && INITIAL_CHESSBOARD[row][column].type != NONE)
 80036de:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d117      	bne.n	8003716 <ValidateStartPositions+0xbe>
 80036e6:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80036ea:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80036ee:	491c      	ldr	r1, [pc, #112]	; (8003760 <ValidateStartPositions+0x108>)
 80036f0:	00d2      	lsls	r2, r2, #3
 80036f2:	4413      	add	r3, r2
 80036f4:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00b      	beq.n	8003716 <ValidateStartPositions+0xbe>
			{
				invalidCoordinates[numInvalidCoordinates++] = coordinate;
 80036fe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800370e:	4413      	add	r3, r2
 8003710:	883a      	ldrh	r2, [r7, #0]
 8003712:	f823 2c84 	strh.w	r2, [r3, #-132]
		for (uint8_t row = 0; row < NUM_ROWS; row++)
 8003716:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800371a:	3301      	adds	r3, #1
 800371c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8003720:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8003724:	2b07      	cmp	r3, #7
 8003726:	d9b0      	bls.n	800368a <ValidateStartPositions+0x32>
	for (uint8_t column = 0; column < NUM_COLS; column++)
 8003728:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800372c:	3301      	adds	r3, #1
 800372e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8003732:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003736:	2b07      	cmp	r3, #7
 8003738:	d99e      	bls.n	8003678 <ValidateStartPositions+0x20>
			}
		}
	}


	IlluminateCoordinates(invalidCoordinates, numInvalidCoordinates);
 800373a:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 800373e:	1d3b      	adds	r3, r7, #4
 8003740:	4611      	mov	r1, r2
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff fdbc 	bl	80032c0 <IlluminateCoordinates>
	return (numInvalidCoordinates == 0);
 8003748:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
}
 8003756:	4618      	mov	r0, r3
 8003758:	3788      	adds	r7, #136	; 0x88
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20000014 	.word	0x20000014

08003764 <EndTurn>:

static void EndTurn()
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
	// Check for a promotion. If found, do not end turn, HandlePlacePreemptPromotion
	CheckForPromotion();
 800376a:	f000 f87b 	bl	8003864 <CheckForPromotion>
	if (PieceExists(PawnToPromote))
 800376e:	4b35      	ldr	r3, [pc, #212]	; (8003844 <EndTurn+0xe0>)
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	f000 f983 	bl	8003a7c <PieceExists>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d15f      	bne.n	800383c <EndTurn+0xd8>
	{
		return;
	}

	// Turn LEDs off
	IlluminateCoordinates(NULL, 0);
 800377c:	2100      	movs	r1, #0
 800377e:	2000      	movs	r0, #0
 8003780:	f7ff fd9e 	bl	80032c0 <IlluminateCoordinates>

	// Check if any rooks or kings moved so they can be flagged as not castleable
	UpdateCastleFlags();
 8003784:	f000 f8a4 	bl	80038d0 <UpdateCastleFlags>

	SwitchTurnsAfterLegalState = 0;
 8003788:	4b2f      	ldr	r3, [pc, #188]	; (8003848 <EndTurn+0xe4>)
 800378a:	2200      	movs	r2, #0
 800378c:	701a      	strb	r2, [r3, #0]

	// Switch teams
	CurrentTurn = CurrentTurn == WHITE ? BLACK : WHITE;
 800378e:	4b2f      	ldr	r3, [pc, #188]	; (800384c <EndTurn+0xe8>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <EndTurn+0x36>
 8003796:	2202      	movs	r2, #2
 8003798:	e000      	b.n	800379c <EndTurn+0x38>
 800379a:	2201      	movs	r2, #1
 800379c:	4b2b      	ldr	r3, [pc, #172]	; (800384c <EndTurn+0xe8>)
 800379e:	701a      	strb	r2, [r3, #0]

	// If in practice mode and the current turn is the AI, generate a move
	if(CurrentGameMode == PRACTICE && CurrentTurn == BLACK)
 80037a0:	4b2b      	ldr	r3, [pc, #172]	; (8003850 <EndTurn+0xec>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d143      	bne.n	8003830 <EndTurn+0xcc>
 80037a8:	4b28      	ldr	r3, [pc, #160]	; (800384c <EndTurn+0xe8>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d13f      	bne.n	8003830 <EndTurn+0xcc>
	{
		ReceiveBuffer[0] = '-';
 80037b0:	4b28      	ldr	r3, [pc, #160]	; (8003854 <EndTurn+0xf0>)
 80037b2:	222d      	movs	r2, #45	; 0x2d
 80037b4:	701a      	strb	r2, [r3, #0]
		ReceiveBuffer[1] = '-';
 80037b6:	4b27      	ldr	r3, [pc, #156]	; (8003854 <EndTurn+0xf0>)
 80037b8:	222d      	movs	r2, #45	; 0x2d
 80037ba:	705a      	strb	r2, [r3, #1]
		ReceiveBuffer[2] = '-';
 80037bc:	4b25      	ldr	r3, [pc, #148]	; (8003854 <EndTurn+0xf0>)
 80037be:	222d      	movs	r2, #45	; 0x2d
 80037c0:	709a      	strb	r2, [r3, #2]
		ReceiveBuffer[3] = '-';
 80037c2:	4b24      	ldr	r3, [pc, #144]	; (8003854 <EndTurn+0xf0>)
 80037c4:	222d      	movs	r2, #45	; 0x2d
 80037c6:	70da      	strb	r2, [r3, #3]
		ReceiveBuffer[4] = '-';
 80037c8:	4b22      	ldr	r3, [pc, #136]	; (8003854 <EndTurn+0xf0>)
 80037ca:	222d      	movs	r2, #45	; 0x2d
 80037cc:	711a      	strb	r2, [r3, #4]
		sendMove(&huart1, MoveBuffer);
 80037ce:	4922      	ldr	r1, [pc, #136]	; (8003858 <EndTurn+0xf4>)
 80037d0:	4822      	ldr	r0, [pc, #136]	; (800385c <EndTurn+0xf8>)
 80037d2:	f000 fab9 	bl	8003d48 <sendMove>
		receiveData(&huart1, ReceiveBuffer);
 80037d6:	491f      	ldr	r1, [pc, #124]	; (8003854 <EndTurn+0xf0>)
 80037d8:	4820      	ldr	r0, [pc, #128]	; (800385c <EndTurn+0xf8>)
 80037da:	f000 fb05 	bl	8003de8 <receiveData>
		if (memcmp(ReceiveBuffer, "-----", 5) != 0){
 80037de:	2205      	movs	r2, #5
 80037e0:	491f      	ldr	r1, [pc, #124]	; (8003860 <EndTurn+0xfc>)
 80037e2:	481c      	ldr	r0, [pc, #112]	; (8003854 <EndTurn+0xf0>)
 80037e4:	f003 ff16 	bl	8007614 <memcmp>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d020      	beq.n	8003830 <EndTurn+0xcc>
			struct Coordinate from[2] = {0};
 80037ee:	2300      	movs	r3, #0
 80037f0:	607b      	str	r3, [r7, #4]
			from[0].row = (int8_t)(ReceiveBuffer[1] - '1');
 80037f2:	4b18      	ldr	r3, [pc, #96]	; (8003854 <EndTurn+0xf0>)
 80037f4:	785b      	ldrb	r3, [r3, #1]
 80037f6:	3b31      	subs	r3, #49	; 0x31
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	b25b      	sxtb	r3, r3
 80037fc:	713b      	strb	r3, [r7, #4]
			from[0].column = (int8_t)('h' - ReceiveBuffer[0]);
 80037fe:	4b15      	ldr	r3, [pc, #84]	; (8003854 <EndTurn+0xf0>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 8003806:	b2db      	uxtb	r3, r3
 8003808:	b25b      	sxtb	r3, r3
 800380a:	717b      	strb	r3, [r7, #5]
			from[1].row = (int8_t)(ReceiveBuffer[3] - '1');
 800380c:	4b11      	ldr	r3, [pc, #68]	; (8003854 <EndTurn+0xf0>)
 800380e:	78db      	ldrb	r3, [r3, #3]
 8003810:	3b31      	subs	r3, #49	; 0x31
 8003812:	b2db      	uxtb	r3, r3
 8003814:	b25b      	sxtb	r3, r3
 8003816:	71bb      	strb	r3, [r7, #6]
			from[1].column = (int8_t)('h' - ReceiveBuffer[2]);
 8003818:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <EndTurn+0xf0>)
 800381a:	789b      	ldrb	r3, [r3, #2]
 800381c:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 8003820:	b2db      	uxtb	r3, r3
 8003822:	b25b      	sxtb	r3, r3
 8003824:	71fb      	strb	r3, [r7, #7]
			IlluminateCoordinates(from, 2);
 8003826:	1d3b      	adds	r3, r7, #4
 8003828:	2102      	movs	r1, #2
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff fd48 	bl	80032c0 <IlluminateCoordinates>
			*/
		}
	}

	// Invoke PathFinder to store all legal moves for this team
	CalculateTeamsLegalMoves(CurrentTurn);
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <EndTurn+0xe8>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f7fd fd31 	bl	800129c <CalculateTeamsLegalMoves>
 800383a:	e000      	b.n	800383e <EndTurn+0xda>
		return;
 800383c:	bf00      	nop
}
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	200006bc 	.word	0x200006bc
 8003848:	200006ad 	.word	0x200006ad
 800384c:	200005a0 	.word	0x200005a0
 8003850:	20001988 	.word	0x20001988
 8003854:	200006c4 	.word	0x200006c4
 8003858:	200006c0 	.word	0x200006c0
 800385c:	20001850 	.word	0x20001850
 8003860:	080076f4 	.word	0x080076f4

08003864 <CheckForPromotion>:

static void CheckForPromotion()
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08a      	sub	sp, #40	; 0x28
 8003868:	af00      	add	r7, sp, #0
	// Get all pawns
	struct PieceCoordinate pawns[NUM_PAWNS_PER_TEAM];
	uint8_t numPawns;
	GetPiecesForTeam(CurrentTurn, PAWN, pawns, &numPawns);
 800386a:	4b18      	ldr	r3, [pc, #96]	; (80038cc <CheckForPromotion+0x68>)
 800386c:	7818      	ldrb	r0, [r3, #0]
 800386e:	1cfb      	adds	r3, r7, #3
 8003870:	1d3a      	adds	r2, r7, #4
 8003872:	2101      	movs	r1, #1
 8003874:	f000 f896 	bl	80039a4 <GetPiecesForTeam>

	// If the pawn has reached the end, it must be promoted
	for (uint8_t i = 0; i < numPawns; i++)
 8003878:	2300      	movs	r3, #0
 800387a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800387e:	e01b      	b.n	80038b8 <CheckForPromotion+0x54>
	{
		if (PawnReachedEnd(pawns[i]))
 8003880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800388a:	4413      	add	r3, r2
 800388c:	f853 0c24 	ldr.w	r0, [r3, #-36]
 8003890:	f000 f8d0 	bl	8003a34 <PawnReachedEnd>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d009      	beq.n	80038ae <CheckForPromotion+0x4a>
		{
			HandlePlacePreemptPromotion(pawns[i]);
 800389a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038a4:	4413      	add	r3, r2
 80038a6:	f853 0c24 	ldr.w	r0, [r3, #-36]
 80038aa:	f7ff fad5 	bl	8002e58 <HandlePlacePreemptPromotion>
	for (uint8_t i = 0; i < numPawns; i++)
 80038ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038b2:	3301      	adds	r3, #1
 80038b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80038be:	429a      	cmp	r2, r3
 80038c0:	d3de      	bcc.n	8003880 <CheckForPromotion+0x1c>
		}
	}
}
 80038c2:	bf00      	nop
 80038c4:	bf00      	nop
 80038c6:	3728      	adds	r7, #40	; 0x28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	200005a0 	.word	0x200005a0

080038d0 <UpdateCastleFlags>:

static void UpdateCastleFlags()
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
	// If any rooks moved, flag them as not castle-able
	if (CanA1Castle && !IsPiecePresent(A1_COORDINATE))
 80038d4:	4b2d      	ldr	r3, [pc, #180]	; (800398c <UpdateCastleFlags+0xbc>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <UpdateCastleFlags+0x22>
 80038dc:	2100      	movs	r1, #0
 80038de:	2000      	movs	r0, #0
 80038e0:	f000 f994 	bl	8003c0c <IsPiecePresent>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d103      	bne.n	80038f2 <UpdateCastleFlags+0x22>
	{
		CanA1Castle = 0;
 80038ea:	4b28      	ldr	r3, [pc, #160]	; (800398c <UpdateCastleFlags+0xbc>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	e04a      	b.n	8003988 <UpdateCastleFlags+0xb8>
	}
	else if (CanH1Castle && !IsPiecePresent(H1_COORDINATE))
 80038f2:	4b27      	ldr	r3, [pc, #156]	; (8003990 <UpdateCastleFlags+0xc0>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <UpdateCastleFlags+0x40>
 80038fa:	2107      	movs	r1, #7
 80038fc:	2000      	movs	r0, #0
 80038fe:	f000 f985 	bl	8003c0c <IsPiecePresent>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d103      	bne.n	8003910 <UpdateCastleFlags+0x40>
	{
		CanH1Castle = 0;
 8003908:	4b21      	ldr	r3, [pc, #132]	; (8003990 <UpdateCastleFlags+0xc0>)
 800390a:	2200      	movs	r2, #0
 800390c:	701a      	strb	r2, [r3, #0]
 800390e:	e03b      	b.n	8003988 <UpdateCastleFlags+0xb8>
	}
	else if (CanA8Castle && !IsPiecePresent(A8_COORDINATE))
 8003910:	4b20      	ldr	r3, [pc, #128]	; (8003994 <UpdateCastleFlags+0xc4>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <UpdateCastleFlags+0x5e>
 8003918:	2100      	movs	r1, #0
 800391a:	2007      	movs	r0, #7
 800391c:	f000 f976 	bl	8003c0c <IsPiecePresent>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d103      	bne.n	800392e <UpdateCastleFlags+0x5e>
	{
		CanA8Castle = 0;
 8003926:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <UpdateCastleFlags+0xc4>)
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	e02c      	b.n	8003988 <UpdateCastleFlags+0xb8>
	}
	else if (CanH8Castle && !IsPiecePresent(H8_COORDINATE))
 800392e:	4b1a      	ldr	r3, [pc, #104]	; (8003998 <UpdateCastleFlags+0xc8>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <UpdateCastleFlags+0x7c>
 8003936:	2107      	movs	r1, #7
 8003938:	2007      	movs	r0, #7
 800393a:	f000 f967 	bl	8003c0c <IsPiecePresent>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d103      	bne.n	800394c <UpdateCastleFlags+0x7c>
	{
		CanH8Castle = 0;
 8003944:	4b14      	ldr	r3, [pc, #80]	; (8003998 <UpdateCastleFlags+0xc8>)
 8003946:	2200      	movs	r2, #0
 8003948:	701a      	strb	r2, [r3, #0]
 800394a:	e01d      	b.n	8003988 <UpdateCastleFlags+0xb8>
	}
	// If any kings moved, flag them as not castle-able
	else if (CanWhiteKingCastle && !IsPiecePresent(E1_COORDINATE))
 800394c:	4b13      	ldr	r3, [pc, #76]	; (800399c <UpdateCastleFlags+0xcc>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <UpdateCastleFlags+0x9a>
 8003954:	2104      	movs	r1, #4
 8003956:	2000      	movs	r0, #0
 8003958:	f000 f958 	bl	8003c0c <IsPiecePresent>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d103      	bne.n	800396a <UpdateCastleFlags+0x9a>
	{
		CanWhiteKingCastle = 0;
 8003962:	4b0e      	ldr	r3, [pc, #56]	; (800399c <UpdateCastleFlags+0xcc>)
 8003964:	2200      	movs	r2, #0
 8003966:	701a      	strb	r2, [r3, #0]
 8003968:	e00e      	b.n	8003988 <UpdateCastleFlags+0xb8>
	}
	else if (CanBlackKingCastle && !IsPiecePresent(E8_COORDINATE))
 800396a:	4b0d      	ldr	r3, [pc, #52]	; (80039a0 <UpdateCastleFlags+0xd0>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <UpdateCastleFlags+0xb8>
 8003972:	2104      	movs	r1, #4
 8003974:	2007      	movs	r0, #7
 8003976:	f000 f949 	bl	8003c0c <IsPiecePresent>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d103      	bne.n	8003988 <UpdateCastleFlags+0xb8>
	{
		CanBlackKingCastle = 0;
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <UpdateCastleFlags+0xd0>)
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
	}
}
 8003986:	e7ff      	b.n	8003988 <UpdateCastleFlags+0xb8>
 8003988:	bf00      	nop
 800398a:	bd80      	pop	{r7, pc}
 800398c:	200006ae 	.word	0x200006ae
 8003990:	200006af 	.word	0x200006af
 8003994:	200006b0 	.word	0x200006b0
 8003998:	200006b1 	.word	0x200006b1
 800399c:	200006b2 	.word	0x200006b2
 80039a0:	200006b3 	.word	0x200006b3

080039a4 <GetPiecesForTeam>:

static void GetPiecesForTeam(enum PieceOwner team, enum PieceType type, struct PieceCoordinate* pieces, uint8_t* numPieces)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60ba      	str	r2, [r7, #8]
 80039ac:	607b      	str	r3, [r7, #4]
 80039ae:	4603      	mov	r3, r0
 80039b0:	73fb      	strb	r3, [r7, #15]
 80039b2:	460b      	mov	r3, r1
 80039b4:	73bb      	strb	r3, [r7, #14]
	*numPieces = 0;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	701a      	strb	r2, [r3, #0]
	for (uint8_t row = 0; row < NUM_ROWS; row++)
 80039bc:	2300      	movs	r3, #0
 80039be:	75fb      	strb	r3, [r7, #23]
 80039c0:	e02d      	b.n	8003a1e <GetPiecesForTeam+0x7a>
	{
		for (uint8_t col = 0; col < NUM_COLS; col++)
 80039c2:	2300      	movs	r3, #0
 80039c4:	75bb      	strb	r3, [r7, #22]
 80039c6:	e024      	b.n	8003a12 <GetPiecesForTeam+0x6e>
		{
			struct PieceCoordinate pieceCoordinate = { Chessboard[row][col], row, col };
 80039c8:	7dfa      	ldrb	r2, [r7, #23]
 80039ca:	7dbb      	ldrb	r3, [r7, #22]
 80039cc:	4918      	ldr	r1, [pc, #96]	; (8003a30 <GetPiecesForTeam+0x8c>)
 80039ce:	00d2      	lsls	r2, r2, #3
 80039d0:	4413      	add	r3, r2
 80039d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80039d6:	823b      	strh	r3, [r7, #16]
 80039d8:	7dfb      	ldrb	r3, [r7, #23]
 80039da:	74bb      	strb	r3, [r7, #18]
 80039dc:	7dbb      	ldrb	r3, [r7, #22]
 80039de:	74fb      	strb	r3, [r7, #19]
			if (pieceCoordinate.piece.owner == team && pieceCoordinate.piece.type == type)
 80039e0:	7c7b      	ldrb	r3, [r7, #17]
 80039e2:	7bfa      	ldrb	r2, [r7, #15]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d111      	bne.n	8003a0c <GetPiecesForTeam+0x68>
 80039e8:	7c3b      	ldrb	r3, [r7, #16]
 80039ea:	7bba      	ldrb	r2, [r7, #14]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d10d      	bne.n	8003a0c <GetPiecesForTeam+0x68>
			{
				pieces[(*numPieces)++] = pieceCoordinate;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	b2d1      	uxtb	r1, r2
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	7011      	strb	r1, [r2, #0]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	4413      	add	r3, r2
 8003a02:	461a      	mov	r2, r3
 8003a04:	f107 0310 	add.w	r3, r7, #16
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	6010      	str	r0, [r2, #0]
		for (uint8_t col = 0; col < NUM_COLS; col++)
 8003a0c:	7dbb      	ldrb	r3, [r7, #22]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	75bb      	strb	r3, [r7, #22]
 8003a12:	7dbb      	ldrb	r3, [r7, #22]
 8003a14:	2b07      	cmp	r3, #7
 8003a16:	d9d7      	bls.n	80039c8 <GetPiecesForTeam+0x24>
	for (uint8_t row = 0; row < NUM_ROWS; row++)
 8003a18:	7dfb      	ldrb	r3, [r7, #23]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	75fb      	strb	r3, [r7, #23]
 8003a1e:	7dfb      	ldrb	r3, [r7, #23]
 8003a20:	2b07      	cmp	r3, #7
 8003a22:	d9ce      	bls.n	80039c2 <GetPiecesForTeam+0x1e>
			}
		}
	}
}
 8003a24:	bf00      	nop
 8003a26:	bf00      	nop
 8003a28:	371c      	adds	r7, #28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr
 8003a30:	20000520 	.word	0x20000520

08003a34 <PawnReachedEnd>:

uint8_t PawnReachedEnd(struct PieceCoordinate pieceCoordinate)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
	uint8_t finalRow = CurrentTurn == WHITE ? 7 : 0;
 8003a3c:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <PawnReachedEnd+0x44>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <PawnReachedEnd+0x14>
 8003a44:	2307      	movs	r3, #7
 8003a46:	e000      	b.n	8003a4a <PawnReachedEnd+0x16>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	73fb      	strb	r3, [r7, #15]
	return (pieceCoordinate.piece.owner == CurrentTurn) && (pieceCoordinate.piece.type == PAWN) && (pieceCoordinate.row == finalRow);
 8003a4c:	797a      	ldrb	r2, [r7, #5]
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <PawnReachedEnd+0x44>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d108      	bne.n	8003a68 <PawnReachedEnd+0x34>
 8003a56:	793b      	ldrb	r3, [r7, #4]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d105      	bne.n	8003a68 <PawnReachedEnd+0x34>
 8003a5c:	79bb      	ldrb	r3, [r7, #6]
 8003a5e:	7bfa      	ldrb	r2, [r7, #15]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d101      	bne.n	8003a68 <PawnReachedEnd+0x34>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <PawnReachedEnd+0x36>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	200005a0 	.word	0x200005a0

08003a7c <PieceExists>:

inline uint8_t PieceExists(struct PieceCoordinate pieceCoordinate)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
	return !IsPieceCoordinateEqual(pieceCoordinate, EMPTY_PIECE_COORDINATE);
 8003a84:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <PieceExists+0x28>)
 8003a86:	6819      	ldr	r1, [r3, #0]
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f8db 	bl	8003c44 <IsPieceCoordinateEqual>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	bf0c      	ite	eq
 8003a94:	2301      	moveq	r3, #1
 8003a96:	2300      	movne	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	2000000c 	.word	0x2000000c

08003aa8 <ClearPiece>:

inline void ClearPiece(struct PieceCoordinate* pieceCoordinate)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	*pieceCoordinate = EMPTY_PIECE_COORDINATE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a04      	ldr	r2, [pc, #16]	; (8003ac4 <ClearPiece+0x1c>)
 8003ab4:	6810      	ldr	r0, [r2, #0]
 8003ab6:	6018      	str	r0, [r3, #0]
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bc80      	pop	{r7}
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	2000000c 	.word	0x2000000c

08003ac8 <SetPiece>:

inline void SetPiece(uint8_t row, uint8_t column, struct Piece piece)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	803a      	strh	r2, [r7, #0]
 8003ad2:	71fb      	strb	r3, [r7, #7]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	71bb      	strb	r3, [r7, #6]
	Chessboard[row][column] = piece;
 8003ad8:	79fa      	ldrb	r2, [r7, #7]
 8003ada:	79bb      	ldrb	r3, [r7, #6]
 8003adc:	4905      	ldr	r1, [pc, #20]	; (8003af4 <SetPiece+0x2c>)
 8003ade:	00d2      	lsls	r2, r2, #3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	883a      	ldrh	r2, [r7, #0]
 8003ae4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	20000520 	.word	0x20000520

08003af8 <SetPieceCoordinate>:

inline void SetPieceCoordinate(struct PieceCoordinate pieceCoordinate)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
	Chessboard[pieceCoordinate.row][pieceCoordinate.column] = pieceCoordinate.piece;
 8003b00:	79bb      	ldrb	r3, [r7, #6]
 8003b02:	79fa      	ldrb	r2, [r7, #7]
 8003b04:	4905      	ldr	r1, [pc, #20]	; (8003b1c <SetPieceCoordinate+0x24>)
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	88ba      	ldrh	r2, [r7, #4]
 8003b0c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	20000520 	.word	0x20000520

08003b20 <GetPiece>:

inline struct Piece GetPiece(uint8_t row, uint8_t column)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	460a      	mov	r2, r1
 8003b2a:	71fb      	strb	r3, [r7, #7]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	71bb      	strb	r3, [r7, #6]
	return Chessboard[row][column];
 8003b30:	79fa      	ldrb	r2, [r7, #7]
 8003b32:	79bb      	ldrb	r3, [r7, #6]
 8003b34:	4908      	ldr	r1, [pc, #32]	; (8003b58 <GetPiece+0x38>)
 8003b36:	00d2      	lsls	r2, r2, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003b3e:	81bb      	strh	r3, [r7, #12]
 8003b40:	2300      	movs	r3, #0
 8003b42:	7b3a      	ldrb	r2, [r7, #12]
 8003b44:	f362 0307 	bfi	r3, r2, #0, #8
 8003b48:	7b7a      	ldrb	r2, [r7, #13]
 8003b4a:	f362 230f 	bfi	r3, r2, #8, #8
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr
 8003b58:	20000520 	.word	0x20000520

08003b5c <GetPieceCoordinate>:

inline struct PieceCoordinate GetPieceCoordinate(uint8_t row, uint8_t column)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	460a      	mov	r2, r1
 8003b66:	71fb      	strb	r3, [r7, #7]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	71bb      	strb	r3, [r7, #6]
	struct PieceCoordinate pieceCoordinate = { GetPiece(row, column), row, column };
 8003b6c:	79ba      	ldrb	r2, [r7, #6]
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	4611      	mov	r1, r2
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff ffd4 	bl	8003b20 <GetPiece>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	813b      	strh	r3, [r7, #8]
 8003b7c:	79fb      	ldrb	r3, [r7, #7]
 8003b7e:	72bb      	strb	r3, [r7, #10]
 8003b80:	79bb      	ldrb	r3, [r7, #6]
 8003b82:	72fb      	strb	r3, [r7, #11]
	return pieceCoordinate;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	7b3a      	ldrb	r2, [r7, #12]
 8003b8c:	f362 0307 	bfi	r3, r2, #0, #8
 8003b90:	7b7a      	ldrb	r2, [r7, #13]
 8003b92:	f362 230f 	bfi	r3, r2, #8, #8
 8003b96:	7bba      	ldrb	r2, [r7, #14]
 8003b98:	f362 4317 	bfi	r3, r2, #16, #8
 8003b9c:	7bfa      	ldrb	r2, [r7, #15]
 8003b9e:	f362 631f 	bfi	r3, r2, #24, #8
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <DidSameTeamPickupLast>:
{
	return LastTransitionType == PICKUP && LastPickedUpPiece.piece.owner != piece.owner;
}

inline uint8_t DidSameTeamPickupLast(struct Piece piece)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	80b8      	strh	r0, [r7, #4]
	return LastTransitionType == PICKUP && LastPickedUpPiece.piece.owner == piece.owner;
 8003bb4:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <DidSameTeamPickupLast+0x2c>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d106      	bne.n	8003bca <DidSameTeamPickupLast+0x1e>
 8003bbc:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <DidSameTeamPickupLast+0x30>)
 8003bbe:	785a      	ldrb	r2, [r3, #1]
 8003bc0:	797b      	ldrb	r3, [r7, #5]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d101      	bne.n	8003bca <DidSameTeamPickupLast+0x1e>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <DidSameTeamPickupLast+0x20>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr
 8003bd8:	200005a1 	.word	0x200005a1
 8003bdc:	200005a4 	.word	0x200005a4

08003be0 <IsPieceEqual>:

inline uint8_t IsPieceEqual(struct Piece piece1, struct Piece piece2)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	80b8      	strh	r0, [r7, #4]
 8003be8:	8039      	strh	r1, [r7, #0]
	return piece1.owner == piece2.owner
 8003bea:	797a      	ldrb	r2, [r7, #5]
 8003bec:	787b      	ldrb	r3, [r7, #1]
		&& piece1.type == piece2.type;
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d105      	bne.n	8003bfe <IsPieceEqual+0x1e>
 8003bf2:	793a      	ldrb	r2, [r7, #4]
 8003bf4:	783b      	ldrb	r3, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d101      	bne.n	8003bfe <IsPieceEqual+0x1e>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <IsPieceEqual+0x20>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr

08003c0c <IsPiecePresent>:

uint8_t IsPiecePresent(uint8_t row, uint8_t column)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	460a      	mov	r2, r1
 8003c16:	71fb      	strb	r3, [r7, #7]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	71bb      	strb	r3, [r7, #6]
	return Chessboard[row][column].type != NONE;
 8003c1c:	79fa      	ldrb	r2, [r7, #7]
 8003c1e:	79bb      	ldrb	r3, [r7, #6]
 8003c20:	4907      	ldr	r1, [pc, #28]	; (8003c40 <IsPiecePresent+0x34>)
 8003c22:	00d2      	lsls	r2, r2, #3
 8003c24:	4413      	add	r3, r2
 8003c26:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	bf14      	ite	ne
 8003c2e:	2301      	movne	r3, #1
 8003c30:	2300      	moveq	r3, #0
 8003c32:	b2db      	uxtb	r3, r3
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000520 	.word	0x20000520

08003c44 <IsPieceCoordinateEqual>:

inline uint8_t IsPieceCoordinateEqual(struct PieceCoordinate pieceCoordinate1, struct PieceCoordinate pieceCoordinate2)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
	return IsPieceEqual(pieceCoordinate1.piece, pieceCoordinate2.piece)
 8003c4e:	6839      	ldr	r1, [r7, #0]
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff ffc5 	bl	8003be0 <IsPieceEqual>
 8003c56:	4603      	mov	r3, r0
		&& pieceCoordinate1.row == pieceCoordinate2.row
		&& pieceCoordinate1.column == pieceCoordinate2.column;
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d009      	beq.n	8003c70 <IsPieceCoordinateEqual+0x2c>
		&& pieceCoordinate1.row == pieceCoordinate2.row
 8003c5c:	79ba      	ldrb	r2, [r7, #6]
 8003c5e:	78bb      	ldrb	r3, [r7, #2]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d105      	bne.n	8003c70 <IsPieceCoordinateEqual+0x2c>
		&& pieceCoordinate1.column == pieceCoordinate2.column;
 8003c64:	79fa      	ldrb	r2, [r7, #7]
 8003c66:	78fb      	ldrb	r3, [r7, #3]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d101      	bne.n	8003c70 <IsPieceCoordinateEqual+0x2c>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <IsPieceCoordinateEqual+0x2e>
 8003c70:	2300      	movs	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <IsPieceCoordinateSamePosition>:

inline uint8_t IsPieceCoordinateSamePosition(struct PieceCoordinate pieceCoordinate1, struct PieceCoordinate pieceCoordinate2)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
	return pieceCoordinate1.row == pieceCoordinate2.row && pieceCoordinate1.column == pieceCoordinate2.column;
 8003c86:	79ba      	ldrb	r2, [r7, #6]
 8003c88:	78bb      	ldrb	r3, [r7, #2]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d105      	bne.n	8003c9a <IsPieceCoordinateSamePosition+0x1e>
 8003c8e:	79fa      	ldrb	r2, [r7, #7]
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d101      	bne.n	8003c9a <IsPieceCoordinateSamePosition+0x1e>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <IsPieceCoordinateSamePosition+0x20>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <GetCurrentTurn>:

inline enum PieceOwner GetCurrentTurn()
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
	return CurrentTurn;
 8003cac:	4b02      	ldr	r3, [pc, #8]	; (8003cb8 <GetCurrentTurn+0x10>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr
 8003cb8:	200005a0 	.word	0x200005a0

08003cbc <EnableUart>:
#include "uart.h"

void EnableUart(UART_HandleTypeDef * huart){
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  huart->Instance = USART1;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a0f      	ldr	r2, [pc, #60]	; (8003d04 <EnableUart+0x48>)
 8003cc8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 9600;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003cd0:	605a      	str	r2, [r3, #4]
  //huart->Init.WordLength = UART_WORDLENGTH_9B;
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	60da      	str	r2, [r3, #12]
  //huart->Init.Parity = UART_PARITY_EVEN;
  huart->Init.Parity = UART_PARITY_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	220c      	movs	r2, #12
 8003ce8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	61da      	str	r2, [r3, #28]

  HAL_UART_Init(huart);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f002 fc18 	bl	800652c <HAL_UART_Init>
}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40013800 	.word	0x40013800

08003d08 <sendData>:

void sendData(UART_HandleTypeDef * huart, char p1, char p2, char p3, char p4){
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	4608      	mov	r0, r1
 8003d12:	4611      	mov	r1, r2
 8003d14:	461a      	mov	r2, r3
 8003d16:	4603      	mov	r3, r0
 8003d18:	70fb      	strb	r3, [r7, #3]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	70bb      	strb	r3, [r7, #2]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	707b      	strb	r3, [r7, #1]
	uint8_t move[4] = {p1, p2, p3, p4};
 8003d22:	78fb      	ldrb	r3, [r7, #3]
 8003d24:	733b      	strb	r3, [r7, #12]
 8003d26:	78bb      	ldrb	r3, [r7, #2]
 8003d28:	737b      	strb	r3, [r7, #13]
 8003d2a:	787b      	ldrb	r3, [r7, #1]
 8003d2c:	73bb      	strb	r3, [r7, #14]
 8003d2e:	7e3b      	ldrb	r3, [r7, #24]
 8003d30:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(huart, move, 4, 10);
 8003d32:	f107 010c 	add.w	r1, r7, #12
 8003d36:	230a      	movs	r3, #10
 8003d38:	2204      	movs	r2, #4
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f002 fc43 	bl	80065c6 <HAL_UART_Transmit>
}
 8003d40:	bf00      	nop
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <sendMove>:
void sendData2(UART_HandleTypeDef * huart, char p1, char p2){
	uint8_t move[2] = {p1, p2};
	HAL_UART_Transmit(huart, move, 2, 10);
}

void sendMove(UART_HandleTypeDef * huart, char buffer[]){
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t *)buffer, 4, 10);
 8003d52:	230a      	movs	r3, #10
 8003d54:	2204      	movs	r2, #4
 8003d56:	6839      	ldr	r1, [r7, #0]
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f002 fc34 	bl	80065c6 <HAL_UART_Transmit>
}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <sendStart>:

void sendStart(UART_HandleTypeDef * huart, uint8_t color, uint8_t edum){
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af02      	add	r7, sp, #8
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	70fb      	strb	r3, [r7, #3]
 8003d72:	4613      	mov	r3, r2
 8003d74:	70bb      	strb	r3, [r7, #2]
	sendData(huart, 'S', 'T', 'R', 'T');
 8003d76:	2354      	movs	r3, #84	; 0x54
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	2352      	movs	r3, #82	; 0x52
 8003d7c:	2254      	movs	r2, #84	; 0x54
 8003d7e:	2153      	movs	r1, #83	; 0x53
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ffc1 	bl	8003d08 <sendData>
		sendData(huart, 'E', 'D', 'U', 'M');
	}
	else{
		sendData(huart, '-', '-', '-', '-');
	}*/
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <sendDifficulty>:

void sendDifficulty(UART_HandleTypeDef * huart, uint8_t df){
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af02      	add	r7, sp, #8
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	460b      	mov	r3, r1
 8003d98:	70fb      	strb	r3, [r7, #3]
	if (df == 1){
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d108      	bne.n	8003db2 <sendDifficulty+0x24>
		sendData(huart, 'D', 'F', '0', '1');
 8003da0:	2331      	movs	r3, #49	; 0x31
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	2330      	movs	r3, #48	; 0x30
 8003da6:	2246      	movs	r2, #70	; 0x46
 8003da8:	2144      	movs	r1, #68	; 0x44
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff ffac 	bl	8003d08 <sendData>
		sendData(huart, 'D', 'F', '0', '8');
	}
	else if (df == 3){
		sendData(huart, 'D', 'F', '1', '5');
	}
}
 8003db0:	e016      	b.n	8003de0 <sendDifficulty+0x52>
	else if (df == 2){
 8003db2:	78fb      	ldrb	r3, [r7, #3]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d108      	bne.n	8003dca <sendDifficulty+0x3c>
		sendData(huart, 'D', 'F', '0', '8');
 8003db8:	2338      	movs	r3, #56	; 0x38
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	2330      	movs	r3, #48	; 0x30
 8003dbe:	2246      	movs	r2, #70	; 0x46
 8003dc0:	2144      	movs	r1, #68	; 0x44
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff ffa0 	bl	8003d08 <sendData>
}
 8003dc8:	e00a      	b.n	8003de0 <sendDifficulty+0x52>
	else if (df == 3){
 8003dca:	78fb      	ldrb	r3, [r7, #3]
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d107      	bne.n	8003de0 <sendDifficulty+0x52>
		sendData(huart, 'D', 'F', '1', '5');
 8003dd0:	2335      	movs	r3, #53	; 0x35
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	2331      	movs	r3, #49	; 0x31
 8003dd6:	2246      	movs	r2, #70	; 0x46
 8003dd8:	2144      	movs	r1, #68	; 0x44
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff ff94 	bl	8003d08 <sendData>
}
 8003de0:	bf00      	nop
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <receiveData>:

void receiveData(UART_HandleTypeDef * huart, char buffer[]){
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
	HAL_UART_Receive(huart, (uint8_t *)buffer, 5, 3000);
 8003df2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003df6:	2205      	movs	r2, #5
 8003df8:	6839      	ldr	r1, [r7, #0]
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f002 fc75 	bl	80066ea <HAL_UART_Receive>
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <WaveplayerInit>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac){
	waveplayerStatus = WAVEPLAYER_HALFBUFFER;
}

void WaveplayerInit(SPI_HandleTypeDef * hspi, DAC_HandleTypeDef *hdac){
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e12:	f107 030c 	add.w	r3, r7, #12
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	605a      	str	r2, [r3, #4]
 8003e1c:	609a      	str	r2, [r3, #8]
 8003e1e:	60da      	str	r2, [r3, #12]
 8003e20:	611a      	str	r2, [r3, #16]

	// SPI setup
	hspi->Instance = SPI3;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a29      	ldr	r2, [pc, #164]	; (8003ecc <WaveplayerInit+0xc4>)
 8003e26:	601a      	str	r2, [r3, #0]
	hspi->Init.Mode = SPI_MODE_MASTER;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e2e:	605a      	str	r2, [r3, #4]
	hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	609a      	str	r2, [r3, #8]
	hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	60da      	str	r2, [r3, #12]
	hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	611a      	str	r2, [r3, #16]
	hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	615a      	str	r2, [r3, #20]
	hspi->Init.NSS = SPI_NSS_SOFT;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e4e:	619a      	str	r2, [r3, #24]
	hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2210      	movs	r2, #16
 8003e54:	61da      	str	r2, [r3, #28]
	hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	621a      	str	r2, [r3, #32]
	hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	625a      	str	r2, [r3, #36]	; 0x24
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	629a      	str	r2, [r3, #40]	; 0x28
	hspi->Init.CRCPolynomial = 10;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	220a      	movs	r2, #10
 8003e6c:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_SPI_Init(hspi);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f001 fb00 	bl	8005474 <HAL_SPI_Init>

	// Setting up SD_CS
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003e74:	4b16      	ldr	r3, [pc, #88]	; (8003ed0 <WaveplayerInit+0xc8>)
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <WaveplayerInit+0xc8>)
 8003e7a:	f043 0308 	orr.w	r3, r3, #8
 8003e7e:	61d3      	str	r3, [r2, #28]
 8003e80:	4b13      	ldr	r3, [pc, #76]	; (8003ed0 <WaveplayerInit+0xc8>)
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	68bb      	ldr	r3, [r7, #8]

	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2101      	movs	r1, #1
 8003e90:	4810      	ldr	r0, [pc, #64]	; (8003ed4 <WaveplayerInit+0xcc>)
 8003e92:	f000 fd22 	bl	80048da <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = SD_CS_Pin;
 8003e96:	2301      	movs	r3, #1
 8003e98:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8003ea6:	f107 030c 	add.w	r3, r7, #12
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4809      	ldr	r0, [pc, #36]	; (8003ed4 <WaveplayerInit+0xcc>)
 8003eae:	f000 fb6d 	bl	800458c <HAL_GPIO_Init>

	MX_FATFS_Init();
 8003eb2:	f002 fdeb 	bl	8006a8c <MX_FATFS_Init>

	memset(audioBuffer, 128, AUDIO_BUFFER_SIZE * sizeof(audioBuffer[0]));
 8003eb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003eba:	2180      	movs	r1, #128	; 0x80
 8003ebc:	4806      	ldr	r0, [pc, #24]	; (8003ed8 <WaveplayerInit+0xd0>)
 8003ebe:	f003 fbb7 	bl	8007630 <memset>
}
 8003ec2:	bf00      	nop
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40003c00 	.word	0x40003c00
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	40020c00 	.word	0x40020c00
 8003ed8:	200006cc 	.word	0x200006cc

08003edc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003edc:	480c      	ldr	r0, [pc, #48]	; (8003f10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ede:	490d      	ldr	r1, [pc, #52]	; (8003f14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ee0:	4a0d      	ldr	r2, [pc, #52]	; (8003f18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ee4:	e002      	b.n	8003eec <LoopCopyDataInit>

08003ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eea:	3304      	adds	r3, #4

08003eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ef0:	d3f9      	bcc.n	8003ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ef2:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ef4:	4c0a      	ldr	r4, [pc, #40]	; (8003f20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ef8:	e001      	b.n	8003efe <LoopFillZerobss>

08003efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003efc:	3204      	adds	r2, #4

08003efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f00:	d3fb      	bcc.n	8003efa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f02:	f7fe fc31 	bl	8002768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f06:	f003 fb61 	bl	80075cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f0a:	f7fc fe6b 	bl	8000be4 <main>
  bx lr
 8003f0e:	4770      	bx	lr
  ldr r0, =_sdata
 8003f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f14:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8003f18:	08007770 	.word	0x08007770
  ldr r2, =_sbss
 8003f1c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8003f20:	20002000 	.word	0x20002000

08003f24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f24:	e7fe      	b.n	8003f24 <ADC1_IRQHandler>

08003f26 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f30:	2003      	movs	r0, #3
 8003f32:	f000 f955 	bl	80041e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f36:	200f      	movs	r0, #15
 8003f38:	f000 f80e 	bl	8003f58 <HAL_InitTick>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	71fb      	strb	r3, [r7, #7]
 8003f46:	e001      	b.n	8003f4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f48:	f7fe f97e 	bl	8002248 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003f64:	4b16      	ldr	r3, [pc, #88]	; (8003fc0 <HAL_InitTick+0x68>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d022      	beq.n	8003fb2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003f6c:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <HAL_InitTick+0x6c>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	4b13      	ldr	r3, [pc, #76]	; (8003fc0 <HAL_InitTick+0x68>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003f78:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 f962 	bl	800424a <HAL_SYSTICK_Config>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10f      	bne.n	8003fac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b0f      	cmp	r3, #15
 8003f90:	d809      	bhi.n	8003fa6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f92:	2200      	movs	r2, #0
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9a:	f000 f92c 	bl	80041f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f9e:	4a0a      	ldr	r2, [pc, #40]	; (8003fc8 <HAL_InitTick+0x70>)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	e007      	b.n	8003fb6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
 8003faa:	e004      	b.n	8003fb6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
 8003fb0:	e001      	b.n	8003fb6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000098 	.word	0x20000098
 8003fc4:	20000004 	.word	0x20000004
 8003fc8:	20000094 	.word	0x20000094

08003fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <HAL_IncTick+0x1c>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4b05      	ldr	r3, [pc, #20]	; (8003fec <HAL_IncTick+0x20>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4413      	add	r3, r2
 8003fda:	4a03      	ldr	r2, [pc, #12]	; (8003fe8 <HAL_IncTick+0x1c>)
 8003fdc:	6013      	str	r3, [r2, #0]
}
 8003fde:	bf00      	nop
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20001b8c 	.word	0x20001b8c
 8003fec:	20000098 	.word	0x20000098

08003ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ff4:	4b02      	ldr	r3, [pc, #8]	; (8004000 <HAL_GetTick+0x10>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr
 8004000:	20001b8c 	.word	0x20001b8c

08004004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800400c:	f7ff fff0 	bl	8003ff0 <HAL_GetTick>
 8004010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401c:	d004      	beq.n	8004028 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800401e:	4b09      	ldr	r3, [pc, #36]	; (8004044 <HAL_Delay+0x40>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4413      	add	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004028:	bf00      	nop
 800402a:	f7ff ffe1 	bl	8003ff0 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	429a      	cmp	r2, r3
 8004038:	d8f7      	bhi.n	800402a <HAL_Delay+0x26>
  {
  }
}
 800403a:	bf00      	nop
 800403c:	bf00      	nop
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	20000098 	.word	0x20000098

08004048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004058:	4b0c      	ldr	r3, [pc, #48]	; (800408c <__NVIC_SetPriorityGrouping+0x44>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004064:	4013      	ands	r3, r2
 8004066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800407a:	4a04      	ldr	r2, [pc, #16]	; (800408c <__NVIC_SetPriorityGrouping+0x44>)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	60d3      	str	r3, [r2, #12]
}
 8004080:	bf00      	nop
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	e000ed00 	.word	0xe000ed00

08004090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004094:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	0a1b      	lsrs	r3, r3, #8
 800409a:	f003 0307 	and.w	r3, r3, #7
}
 800409e:	4618      	mov	r0, r3
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	db0b      	blt.n	80040d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	f003 021f 	and.w	r2, r3, #31
 80040c4:	4906      	ldr	r1, [pc, #24]	; (80040e0 <__NVIC_EnableIRQ+0x34>)
 80040c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	2001      	movs	r0, #1
 80040ce:	fa00 f202 	lsl.w	r2, r0, r2
 80040d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr
 80040e0:	e000e100 	.word	0xe000e100

080040e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	6039      	str	r1, [r7, #0]
 80040ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	db0a      	blt.n	800410e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	490c      	ldr	r1, [pc, #48]	; (8004130 <__NVIC_SetPriority+0x4c>)
 80040fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004102:	0112      	lsls	r2, r2, #4
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	440b      	add	r3, r1
 8004108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800410c:	e00a      	b.n	8004124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	b2da      	uxtb	r2, r3
 8004112:	4908      	ldr	r1, [pc, #32]	; (8004134 <__NVIC_SetPriority+0x50>)
 8004114:	79fb      	ldrb	r3, [r7, #7]
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	3b04      	subs	r3, #4
 800411c:	0112      	lsls	r2, r2, #4
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	440b      	add	r3, r1
 8004122:	761a      	strb	r2, [r3, #24]
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	e000e100 	.word	0xe000e100
 8004134:	e000ed00 	.word	0xe000ed00

08004138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004138:	b480      	push	{r7}
 800413a:	b089      	sub	sp, #36	; 0x24
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	f1c3 0307 	rsb	r3, r3, #7
 8004152:	2b04      	cmp	r3, #4
 8004154:	bf28      	it	cs
 8004156:	2304      	movcs	r3, #4
 8004158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	3304      	adds	r3, #4
 800415e:	2b06      	cmp	r3, #6
 8004160:	d902      	bls.n	8004168 <NVIC_EncodePriority+0x30>
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	3b03      	subs	r3, #3
 8004166:	e000      	b.n	800416a <NVIC_EncodePriority+0x32>
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800416c:	f04f 32ff 	mov.w	r2, #4294967295
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	43da      	mvns	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	401a      	ands	r2, r3
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004180:	f04f 31ff 	mov.w	r1, #4294967295
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	fa01 f303 	lsl.w	r3, r1, r3
 800418a:	43d9      	mvns	r1, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004190:	4313      	orrs	r3, r2
         );
}
 8004192:	4618      	mov	r0, r3
 8004194:	3724      	adds	r7, #36	; 0x24
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr

0800419c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041ac:	d301      	bcc.n	80041b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041ae:	2301      	movs	r3, #1
 80041b0:	e00f      	b.n	80041d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041b2:	4a0a      	ldr	r2, [pc, #40]	; (80041dc <SysTick_Config+0x40>)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041ba:	210f      	movs	r1, #15
 80041bc:	f04f 30ff 	mov.w	r0, #4294967295
 80041c0:	f7ff ff90 	bl	80040e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <SysTick_Config+0x40>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041ca:	4b04      	ldr	r3, [pc, #16]	; (80041dc <SysTick_Config+0x40>)
 80041cc:	2207      	movs	r2, #7
 80041ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	e000e010 	.word	0xe000e010

080041e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff ff2d 	bl	8004048 <__NVIC_SetPriorityGrouping>
}
 80041ee:	bf00      	nop
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b086      	sub	sp, #24
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	4603      	mov	r3, r0
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004208:	f7ff ff42 	bl	8004090 <__NVIC_GetPriorityGrouping>
 800420c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	6978      	ldr	r0, [r7, #20]
 8004214:	f7ff ff90 	bl	8004138 <NVIC_EncodePriority>
 8004218:	4602      	mov	r2, r0
 800421a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800421e:	4611      	mov	r1, r2
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff ff5f 	bl	80040e4 <__NVIC_SetPriority>
}
 8004226:	bf00      	nop
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b082      	sub	sp, #8
 8004232:	af00      	add	r7, sp, #0
 8004234:	4603      	mov	r3, r0
 8004236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff ff35 	bl	80040ac <__NVIC_EnableIRQ>
}
 8004242:	bf00      	nop
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b082      	sub	sp, #8
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff ffa2 	bl	800419c <SysTick_Config>
 8004258:	4603      	mov	r3, r0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e014      	b.n	800429e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	791b      	ldrb	r3, [r3, #4]
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d105      	bne.n	800428a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7fe f80d 	bl	80022a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2202      	movs	r2, #2
 800428e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b087      	sub	sp, #28
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	795b      	ldrb	r3, [r3, #5]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_DAC_ConfigChannel+0x18>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e03c      	b.n	8004338 <HAL_DAC_ConfigChannel+0x92>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2202      	movs	r2, #2
 80042c8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	43db      	mvns	r3, r3
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4013      	ands	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f003 0310 	and.w	r3, r3, #16
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6819      	ldr	r1, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f003 0310 	and.w	r3, r3, #16
 800431a:	22c0      	movs	r2, #192	; 0xc0
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	43da      	mvns	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	400a      	ands	r2, r1
 8004328:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	371c      	adds	r7, #28
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr
	...

08004344 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e059      	b.n	800440a <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	4b2d      	ldr	r3, [pc, #180]	; (8004414 <HAL_DMA_Init+0xd0>)
 800435e:	429a      	cmp	r2, r3
 8004360:	d80f      	bhi.n	8004382 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	4b2b      	ldr	r3, [pc, #172]	; (8004418 <HAL_DMA_Init+0xd4>)
 800436a:	4413      	add	r3, r2
 800436c:	4a2b      	ldr	r2, [pc, #172]	; (800441c <HAL_DMA_Init+0xd8>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	091b      	lsrs	r3, r3, #4
 8004374:	009a      	lsls	r2, r3, #2
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a28      	ldr	r2, [pc, #160]	; (8004420 <HAL_DMA_Init+0xdc>)
 800437e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004380:	e00e      	b.n	80043a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	4b26      	ldr	r3, [pc, #152]	; (8004424 <HAL_DMA_Init+0xe0>)
 800438a:	4413      	add	r3, r2
 800438c:	4a23      	ldr	r2, [pc, #140]	; (800441c <HAL_DMA_Init+0xd8>)
 800438e:	fba2 2303 	umull	r2, r3, r2, r3
 8004392:	091b      	lsrs	r3, r3, #4
 8004394:	009a      	lsls	r2, r3, #2
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a22      	ldr	r2, [pc, #136]	; (8004428 <HAL_DMA_Init+0xe4>)
 800439e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80043c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr
 8004414:	40026407 	.word	0x40026407
 8004418:	bffd9ff8 	.word	0xbffd9ff8
 800441c:	cccccccd 	.word	0xcccccccd
 8004420:	40026000 	.word	0x40026000
 8004424:	bffd9bf8 	.word	0xbffd9bf8
 8004428:	40026400 	.word	0x40026400

0800442c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	f003 031c 	and.w	r3, r3, #28
 800444c:	2204      	movs	r2, #4
 800444e:	409a      	lsls	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4013      	ands	r3, r2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d026      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x7a>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b00      	cmp	r3, #0
 8004460:	d021      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0320 	and.w	r3, r3, #32
 800446c:	2b00      	cmp	r3, #0
 800446e:	d107      	bne.n	8004480 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0204 	bic.w	r2, r2, #4
 800447e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	f003 021c 	and.w	r2, r3, #28
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448c:	2104      	movs	r1, #4
 800448e:	fa01 f202 	lsl.w	r2, r1, r2
 8004492:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d071      	beq.n	8004580 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80044a4:	e06c      	b.n	8004580 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f003 031c 	and.w	r3, r3, #28
 80044ae:	2202      	movs	r2, #2
 80044b0:	409a      	lsls	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4013      	ands	r3, r2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d02e      	beq.n	8004518 <HAL_DMA_IRQHandler+0xec>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d029      	beq.n	8004518 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10b      	bne.n	80044ea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 020a 	bic.w	r2, r2, #10
 80044e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f003 021c 	and.w	r2, r3, #28
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f6:	2102      	movs	r1, #2
 80044f8:	fa01 f202 	lsl.w	r2, r1, r2
 80044fc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	2b00      	cmp	r3, #0
 800450c:	d038      	beq.n	8004580 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004516:	e033      	b.n	8004580 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	f003 031c 	and.w	r3, r3, #28
 8004520:	2208      	movs	r2, #8
 8004522:	409a      	lsls	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4013      	ands	r3, r2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d02a      	beq.n	8004582 <HAL_DMA_IRQHandler+0x156>
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d025      	beq.n	8004582 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 020e 	bic.w	r2, r2, #14
 8004544:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f003 021c 	and.w	r2, r3, #28
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	2101      	movs	r1, #1
 8004554:	fa01 f202 	lsl.w	r2, r1, r2
 8004558:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004580:	bf00      	nop
 8004582:	bf00      	nop
}
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800459e:	2300      	movs	r3, #0
 80045a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80045a2:	e160      	b.n	8004866 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	2101      	movs	r1, #1
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	fa01 f303 	lsl.w	r3, r1, r3
 80045b0:	4013      	ands	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 8152 	beq.w	8004860 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f003 0303 	and.w	r3, r3, #3
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d005      	beq.n	80045d4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d130      	bne.n	8004636 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	2203      	movs	r2, #3
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	43db      	mvns	r3, r3
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4013      	ands	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800460a:	2201      	movs	r2, #1
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	43db      	mvns	r3, r3
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4013      	ands	r3, r2
 8004618:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	091b      	lsrs	r3, r3, #4
 8004620:	f003 0201 	and.w	r2, r3, #1
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	2b03      	cmp	r3, #3
 8004640:	d017      	beq.n	8004672 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	2203      	movs	r2, #3
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	43db      	mvns	r3, r3
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4013      	ands	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	689a      	ldr	r2, [r3, #8]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4313      	orrs	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d123      	bne.n	80046c6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	08da      	lsrs	r2, r3, #3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3208      	adds	r2, #8
 8004686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800468a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	220f      	movs	r2, #15
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4013      	ands	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	08da      	lsrs	r2, r3, #3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3208      	adds	r2, #8
 80046c0:	6939      	ldr	r1, [r7, #16]
 80046c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	2203      	movs	r2, #3
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	43db      	mvns	r3, r3
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4013      	ands	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f003 0203 	and.w	r2, r3, #3
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 80ac 	beq.w	8004860 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004708:	4b5e      	ldr	r3, [pc, #376]	; (8004884 <HAL_GPIO_Init+0x2f8>)
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	4a5d      	ldr	r2, [pc, #372]	; (8004884 <HAL_GPIO_Init+0x2f8>)
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	6213      	str	r3, [r2, #32]
 8004714:	4b5b      	ldr	r3, [pc, #364]	; (8004884 <HAL_GPIO_Init+0x2f8>)
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8004720:	4a59      	ldr	r2, [pc, #356]	; (8004888 <HAL_GPIO_Init+0x2fc>)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	089b      	lsrs	r3, r3, #2
 8004726:	3302      	adds	r3, #2
 8004728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800472c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	220f      	movs	r2, #15
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	43db      	mvns	r3, r3
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4013      	ands	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a51      	ldr	r2, [pc, #324]	; (800488c <HAL_GPIO_Init+0x300>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d025      	beq.n	8004798 <HAL_GPIO_Init+0x20c>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a50      	ldr	r2, [pc, #320]	; (8004890 <HAL_GPIO_Init+0x304>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d01f      	beq.n	8004794 <HAL_GPIO_Init+0x208>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a4f      	ldr	r2, [pc, #316]	; (8004894 <HAL_GPIO_Init+0x308>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d019      	beq.n	8004790 <HAL_GPIO_Init+0x204>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a4e      	ldr	r2, [pc, #312]	; (8004898 <HAL_GPIO_Init+0x30c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d013      	beq.n	800478c <HAL_GPIO_Init+0x200>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a4d      	ldr	r2, [pc, #308]	; (800489c <HAL_GPIO_Init+0x310>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d00d      	beq.n	8004788 <HAL_GPIO_Init+0x1fc>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a4c      	ldr	r2, [pc, #304]	; (80048a0 <HAL_GPIO_Init+0x314>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d007      	beq.n	8004784 <HAL_GPIO_Init+0x1f8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a4b      	ldr	r2, [pc, #300]	; (80048a4 <HAL_GPIO_Init+0x318>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d101      	bne.n	8004780 <HAL_GPIO_Init+0x1f4>
 800477c:	2306      	movs	r3, #6
 800477e:	e00c      	b.n	800479a <HAL_GPIO_Init+0x20e>
 8004780:	2307      	movs	r3, #7
 8004782:	e00a      	b.n	800479a <HAL_GPIO_Init+0x20e>
 8004784:	2305      	movs	r3, #5
 8004786:	e008      	b.n	800479a <HAL_GPIO_Init+0x20e>
 8004788:	2304      	movs	r3, #4
 800478a:	e006      	b.n	800479a <HAL_GPIO_Init+0x20e>
 800478c:	2303      	movs	r3, #3
 800478e:	e004      	b.n	800479a <HAL_GPIO_Init+0x20e>
 8004790:	2302      	movs	r3, #2
 8004792:	e002      	b.n	800479a <HAL_GPIO_Init+0x20e>
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <HAL_GPIO_Init+0x20e>
 8004798:	2300      	movs	r3, #0
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	f002 0203 	and.w	r2, r2, #3
 80047a0:	0092      	lsls	r2, r2, #2
 80047a2:	4093      	lsls	r3, r2
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80047aa:	4937      	ldr	r1, [pc, #220]	; (8004888 <HAL_GPIO_Init+0x2fc>)
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	089b      	lsrs	r3, r3, #2
 80047b0:	3302      	adds	r3, #2
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047b8:	4b3b      	ldr	r3, [pc, #236]	; (80048a8 <HAL_GPIO_Init+0x31c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	43db      	mvns	r3, r3
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4013      	ands	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80047dc:	4a32      	ldr	r2, [pc, #200]	; (80048a8 <HAL_GPIO_Init+0x31c>)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80047e2:	4b31      	ldr	r3, [pc, #196]	; (80048a8 <HAL_GPIO_Init+0x31c>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	43db      	mvns	r3, r3
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4013      	ands	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004806:	4a28      	ldr	r2, [pc, #160]	; (80048a8 <HAL_GPIO_Init+0x31c>)
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800480c:	4b26      	ldr	r3, [pc, #152]	; (80048a8 <HAL_GPIO_Init+0x31c>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	43db      	mvns	r3, r3
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4013      	ands	r3, r2
 800481a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004830:	4a1d      	ldr	r2, [pc, #116]	; (80048a8 <HAL_GPIO_Init+0x31c>)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004836:	4b1c      	ldr	r3, [pc, #112]	; (80048a8 <HAL_GPIO_Init+0x31c>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	43db      	mvns	r3, r3
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4013      	ands	r3, r2
 8004844:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800485a:	4a13      	ldr	r2, [pc, #76]	; (80048a8 <HAL_GPIO_Init+0x31c>)
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	3301      	adds	r3, #1
 8004864:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	fa22 f303 	lsr.w	r3, r2, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	f47f ae97 	bne.w	80045a4 <HAL_GPIO_Init+0x18>
  }
}
 8004876:	bf00      	nop
 8004878:	bf00      	nop
 800487a:	371c      	adds	r7, #28
 800487c:	46bd      	mov	sp, r7
 800487e:	bc80      	pop	{r7}
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40023800 	.word	0x40023800
 8004888:	40010000 	.word	0x40010000
 800488c:	40020000 	.word	0x40020000
 8004890:	40020400 	.word	0x40020400
 8004894:	40020800 	.word	0x40020800
 8004898:	40020c00 	.word	0x40020c00
 800489c:	40021000 	.word	0x40021000
 80048a0:	40021400 	.word	0x40021400
 80048a4:	40021800 	.word	0x40021800
 80048a8:	40010400 	.word	0x40010400

080048ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	887b      	ldrh	r3, [r7, #2]
 80048be:	4013      	ands	r3, r2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048c4:	2301      	movs	r3, #1
 80048c6:	73fb      	strb	r3, [r7, #15]
 80048c8:	e001      	b.n	80048ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048ca:	2300      	movs	r3, #0
 80048cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr

080048da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	460b      	mov	r3, r1
 80048e4:	807b      	strh	r3, [r7, #2]
 80048e6:	4613      	mov	r3, r2
 80048e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048ea:	787b      	ldrb	r3, [r7, #1]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048f0:	887a      	ldrh	r2, [r7, #2]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80048f6:	e003      	b.n	8004900 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80048f8:	887b      	ldrh	r3, [r7, #2]
 80048fa:	041a      	lsls	r2, r3, #16
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	619a      	str	r2, [r3, #24]
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	bc80      	pop	{r7}
 8004908:	4770      	bx	lr
	...

0800490c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	4603      	mov	r3, r0
 8004914:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004916:	4b08      	ldr	r3, [pc, #32]	; (8004938 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004918:	695a      	ldr	r2, [r3, #20]
 800491a:	88fb      	ldrh	r3, [r7, #6]
 800491c:	4013      	ands	r3, r2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d006      	beq.n	8004930 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004922:	4a05      	ldr	r2, [pc, #20]	; (8004938 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004924:	88fb      	ldrh	r3, [r7, #6]
 8004926:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004928:	88fb      	ldrh	r3, [r7, #6]
 800492a:	4618      	mov	r0, r3
 800492c:	f7fc fc7a 	bl	8001224 <HAL_GPIO_EXTI_Callback>
  }
}
 8004930:	bf00      	nop
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40010400 	.word	0x40010400

0800493c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e31d      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800494e:	4b94      	ldr	r3, [pc, #592]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 030c 	and.w	r3, r3, #12
 8004956:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004958:	4b91      	ldr	r3, [pc, #580]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004960:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d07b      	beq.n	8004a66 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	2b08      	cmp	r3, #8
 8004972:	d006      	beq.n	8004982 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b0c      	cmp	r3, #12
 8004978:	d10f      	bne.n	800499a <HAL_RCC_OscConfig+0x5e>
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004980:	d10b      	bne.n	800499a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004982:	4b87      	ldr	r3, [pc, #540]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d06a      	beq.n	8004a64 <HAL_RCC_OscConfig+0x128>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d166      	bne.n	8004a64 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e2f7      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d106      	bne.n	80049b0 <HAL_RCC_OscConfig+0x74>
 80049a2:	4b7f      	ldr	r3, [pc, #508]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a7e      	ldr	r2, [pc, #504]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 80049a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	e02d      	b.n	8004a0c <HAL_RCC_OscConfig+0xd0>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10c      	bne.n	80049d2 <HAL_RCC_OscConfig+0x96>
 80049b8:	4b79      	ldr	r3, [pc, #484]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a78      	ldr	r2, [pc, #480]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 80049be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	4b76      	ldr	r3, [pc, #472]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a75      	ldr	r2, [pc, #468]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 80049ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	e01c      	b.n	8004a0c <HAL_RCC_OscConfig+0xd0>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b05      	cmp	r3, #5
 80049d8:	d10c      	bne.n	80049f4 <HAL_RCC_OscConfig+0xb8>
 80049da:	4b71      	ldr	r3, [pc, #452]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a70      	ldr	r2, [pc, #448]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 80049e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	4b6e      	ldr	r3, [pc, #440]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a6d      	ldr	r2, [pc, #436]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 80049ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	e00b      	b.n	8004a0c <HAL_RCC_OscConfig+0xd0>
 80049f4:	4b6a      	ldr	r3, [pc, #424]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a69      	ldr	r2, [pc, #420]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 80049fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fe:	6013      	str	r3, [r2, #0]
 8004a00:	4b67      	ldr	r3, [pc, #412]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a66      	ldr	r2, [pc, #408]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 8004a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d013      	beq.n	8004a3c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a14:	f7ff faec 	bl	8003ff0 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a1c:	f7ff fae8 	bl	8003ff0 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b64      	cmp	r3, #100	; 0x64
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e2ad      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a2e:	4b5c      	ldr	r3, [pc, #368]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0xe0>
 8004a3a:	e014      	b.n	8004a66 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3c:	f7ff fad8 	bl	8003ff0 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a44:	f7ff fad4 	bl	8003ff0 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b64      	cmp	r3, #100	; 0x64
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e299      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a56:	4b52      	ldr	r3, [pc, #328]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f0      	bne.n	8004a44 <HAL_RCC_OscConfig+0x108>
 8004a62:	e000      	b.n	8004a66 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d05a      	beq.n	8004b28 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d005      	beq.n	8004a84 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2b0c      	cmp	r3, #12
 8004a7c:	d119      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x176>
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d116      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a84:	4b46      	ldr	r3, [pc, #280]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <HAL_RCC_OscConfig+0x160>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d001      	beq.n	8004a9c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e276      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a9c:	4b40      	ldr	r3, [pc, #256]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	021b      	lsls	r3, r3, #8
 8004aaa:	493d      	ldr	r1, [pc, #244]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ab0:	e03a      	b.n	8004b28 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d020      	beq.n	8004afc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aba:	4b3a      	ldr	r3, [pc, #232]	; (8004ba4 <HAL_RCC_OscConfig+0x268>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac0:	f7ff fa96 	bl	8003ff0 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ac8:	f7ff fa92 	bl	8003ff0 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e257      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ada:	4b31      	ldr	r3, [pc, #196]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae6:	4b2e      	ldr	r3, [pc, #184]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	021b      	lsls	r3, r3, #8
 8004af4:	492a      	ldr	r1, [pc, #168]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	604b      	str	r3, [r1, #4]
 8004afa:	e015      	b.n	8004b28 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004afc:	4b29      	ldr	r3, [pc, #164]	; (8004ba4 <HAL_RCC_OscConfig+0x268>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b02:	f7ff fa75 	bl	8003ff0 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b0a:	f7ff fa71 	bl	8003ff0 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e236      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b1c:	4b20      	ldr	r3, [pc, #128]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1f0      	bne.n	8004b0a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0310 	and.w	r3, r3, #16
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 80b8 	beq.w	8004ca6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d170      	bne.n	8004c1e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b3c:	4b18      	ldr	r3, [pc, #96]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d005      	beq.n	8004b54 <HAL_RCC_OscConfig+0x218>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e21a      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1a      	ldr	r2, [r3, #32]
 8004b58:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d921      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fc23 	bl	80053b4 <RCC_SetFlashLatencyFromMSIRange>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e208      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	4906      	ldr	r1, [pc, #24]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b8a:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	061b      	lsls	r3, r3, #24
 8004b98:	4901      	ldr	r1, [pc, #4]	; (8004ba0 <HAL_RCC_OscConfig+0x264>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	604b      	str	r3, [r1, #4]
 8004b9e:	e020      	b.n	8004be2 <HAL_RCC_OscConfig+0x2a6>
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ba8:	4ba4      	ldr	r3, [pc, #656]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	49a1      	ldr	r1, [pc, #644]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bba:	4ba0      	ldr	r3, [pc, #640]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	061b      	lsls	r3, r3, #24
 8004bc8:	499c      	ldr	r1, [pc, #624]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fbee 	bl	80053b4 <RCC_SetFlashLatencyFromMSIRange>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e1d3      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	0b5b      	lsrs	r3, r3, #13
 8004be8:	3301      	adds	r3, #1
 8004bea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004bee:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004bf2:	4a92      	ldr	r2, [pc, #584]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004bf4:	6892      	ldr	r2, [r2, #8]
 8004bf6:	0912      	lsrs	r2, r2, #4
 8004bf8:	f002 020f 	and.w	r2, r2, #15
 8004bfc:	4990      	ldr	r1, [pc, #576]	; (8004e40 <HAL_RCC_OscConfig+0x504>)
 8004bfe:	5c8a      	ldrb	r2, [r1, r2]
 8004c00:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004c02:	4a90      	ldr	r2, [pc, #576]	; (8004e44 <HAL_RCC_OscConfig+0x508>)
 8004c04:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c06:	4b90      	ldr	r3, [pc, #576]	; (8004e48 <HAL_RCC_OscConfig+0x50c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff f9a4 	bl	8003f58 <HAL_InitTick>
 8004c10:	4603      	mov	r3, r0
 8004c12:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d045      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
 8004c1c:	e1b5      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d029      	beq.n	8004c7a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c26:	4b89      	ldr	r3, [pc, #548]	; (8004e4c <HAL_RCC_OscConfig+0x510>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2c:	f7ff f9e0 	bl	8003ff0 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c34:	f7ff f9dc 	bl	8003ff0 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e1a1      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c46:	4b7d      	ldr	r3, [pc, #500]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0f0      	beq.n	8004c34 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c52:	4b7a      	ldr	r3, [pc, #488]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	4977      	ldr	r1, [pc, #476]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c64:	4b75      	ldr	r3, [pc, #468]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	061b      	lsls	r3, r3, #24
 8004c72:	4972      	ldr	r1, [pc, #456]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	604b      	str	r3, [r1, #4]
 8004c78:	e015      	b.n	8004ca6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c7a:	4b74      	ldr	r3, [pc, #464]	; (8004e4c <HAL_RCC_OscConfig+0x510>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c80:	f7ff f9b6 	bl	8003ff0 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c88:	f7ff f9b2 	bl	8003ff0 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e177      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004c9a:	4b68      	ldr	r3, [pc, #416]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d030      	beq.n	8004d14 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d016      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cba:	4b65      	ldr	r3, [pc, #404]	; (8004e50 <HAL_RCC_OscConfig+0x514>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc0:	f7ff f996 	bl	8003ff0 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cc8:	f7ff f992 	bl	8003ff0 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e157      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cda:	4b58      	ldr	r3, [pc, #352]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x38c>
 8004ce6:	e015      	b.n	8004d14 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ce8:	4b59      	ldr	r3, [pc, #356]	; (8004e50 <HAL_RCC_OscConfig+0x514>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cee:	f7ff f97f 	bl	8003ff0 <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cf4:	e008      	b.n	8004d08 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cf6:	f7ff f97b 	bl	8003ff0 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e140      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d08:	4b4c      	ldr	r3, [pc, #304]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f0      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80b5 	beq.w	8004e8c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d22:	2300      	movs	r3, #0
 8004d24:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d26:	4b45      	ldr	r3, [pc, #276]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10d      	bne.n	8004d4e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d32:	4b42      	ldr	r3, [pc, #264]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	4a41      	ldr	r2, [pc, #260]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	6253      	str	r3, [r2, #36]	; 0x24
 8004d3e:	4b3f      	ldr	r3, [pc, #252]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d46:	60bb      	str	r3, [r7, #8]
 8004d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4e:	4b41      	ldr	r3, [pc, #260]	; (8004e54 <HAL_RCC_OscConfig+0x518>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d118      	bne.n	8004d8c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d5a:	4b3e      	ldr	r3, [pc, #248]	; (8004e54 <HAL_RCC_OscConfig+0x518>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a3d      	ldr	r2, [pc, #244]	; (8004e54 <HAL_RCC_OscConfig+0x518>)
 8004d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d66:	f7ff f943 	bl	8003ff0 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d6e:	f7ff f93f 	bl	8003ff0 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b64      	cmp	r3, #100	; 0x64
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e104      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d80:	4b34      	ldr	r3, [pc, #208]	; (8004e54 <HAL_RCC_OscConfig+0x518>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0f0      	beq.n	8004d6e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d106      	bne.n	8004da2 <HAL_RCC_OscConfig+0x466>
 8004d94:	4b29      	ldr	r3, [pc, #164]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d98:	4a28      	ldr	r2, [pc, #160]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d9e:	6353      	str	r3, [r2, #52]	; 0x34
 8004da0:	e02d      	b.n	8004dfe <HAL_RCC_OscConfig+0x4c2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10c      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x488>
 8004daa:	4b24      	ldr	r3, [pc, #144]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dae:	4a23      	ldr	r2, [pc, #140]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004db4:	6353      	str	r3, [r2, #52]	; 0x34
 8004db6:	4b21      	ldr	r3, [pc, #132]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dba:	4a20      	ldr	r2, [pc, #128]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004dbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dc0:	6353      	str	r3, [r2, #52]	; 0x34
 8004dc2:	e01c      	b.n	8004dfe <HAL_RCC_OscConfig+0x4c2>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2b05      	cmp	r3, #5
 8004dca:	d10c      	bne.n	8004de6 <HAL_RCC_OscConfig+0x4aa>
 8004dcc:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd0:	4a1a      	ldr	r2, [pc, #104]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dd6:	6353      	str	r3, [r2, #52]	; 0x34
 8004dd8:	4b18      	ldr	r3, [pc, #96]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ddc:	4a17      	ldr	r2, [pc, #92]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de2:	6353      	str	r3, [r2, #52]	; 0x34
 8004de4:	e00b      	b.n	8004dfe <HAL_RCC_OscConfig+0x4c2>
 8004de6:	4b15      	ldr	r3, [pc, #84]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dea:	4a14      	ldr	r2, [pc, #80]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004df0:	6353      	str	r3, [r2, #52]	; 0x34
 8004df2:	4b12      	ldr	r3, [pc, #72]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df6:	4a11      	ldr	r2, [pc, #68]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004df8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dfc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d015      	beq.n	8004e32 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e06:	f7ff f8f3 	bl	8003ff0 <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e0c:	e00a      	b.n	8004e24 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e0e:	f7ff f8ef 	bl	8003ff0 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e0b2      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e24:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <HAL_RCC_OscConfig+0x500>)
 8004e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0ee      	beq.n	8004e0e <HAL_RCC_OscConfig+0x4d2>
 8004e30:	e023      	b.n	8004e7a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e32:	f7ff f8dd 	bl	8003ff0 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e38:	e019      	b.n	8004e6e <HAL_RCC_OscConfig+0x532>
 8004e3a:	bf00      	nop
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	08007708 	.word	0x08007708
 8004e44:	20000004 	.word	0x20000004
 8004e48:	20000094 	.word	0x20000094
 8004e4c:	42470020 	.word	0x42470020
 8004e50:	42470680 	.word	0x42470680
 8004e54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e58:	f7ff f8ca 	bl	8003ff0 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e08d      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e6e:	4b49      	ldr	r3, [pc, #292]	; (8004f94 <HAL_RCC_OscConfig+0x658>)
 8004e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1ee      	bne.n	8004e58 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e7a:	7ffb      	ldrb	r3, [r7, #31]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d105      	bne.n	8004e8c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e80:	4b44      	ldr	r3, [pc, #272]	; (8004f94 <HAL_RCC_OscConfig+0x658>)
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	4a43      	ldr	r2, [pc, #268]	; (8004f94 <HAL_RCC_OscConfig+0x658>)
 8004e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d079      	beq.n	8004f88 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	2b0c      	cmp	r3, #12
 8004e98:	d056      	beq.n	8004f48 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d13b      	bne.n	8004f1a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea2:	4b3d      	ldr	r3, [pc, #244]	; (8004f98 <HAL_RCC_OscConfig+0x65c>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea8:	f7ff f8a2 	bl	8003ff0 <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eb0:	f7ff f89e 	bl	8003ff0 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e063      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ec2:	4b34      	ldr	r3, [pc, #208]	; (8004f94 <HAL_RCC_OscConfig+0x658>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1f0      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ece:	4b31      	ldr	r3, [pc, #196]	; (8004f94 <HAL_RCC_OscConfig+0x658>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	4319      	orrs	r1, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	492b      	ldr	r1, [pc, #172]	; (8004f94 <HAL_RCC_OscConfig+0x658>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eec:	4b2a      	ldr	r3, [pc, #168]	; (8004f98 <HAL_RCC_OscConfig+0x65c>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef2:	f7ff f87d 	bl	8003ff0 <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ef8:	e008      	b.n	8004f0c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004efa:	f7ff f879 	bl	8003ff0 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e03e      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f0c:	4b21      	ldr	r3, [pc, #132]	; (8004f94 <HAL_RCC_OscConfig+0x658>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0f0      	beq.n	8004efa <HAL_RCC_OscConfig+0x5be>
 8004f18:	e036      	b.n	8004f88 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f1a:	4b1f      	ldr	r3, [pc, #124]	; (8004f98 <HAL_RCC_OscConfig+0x65c>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f20:	f7ff f866 	bl	8003ff0 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f28:	f7ff f862 	bl	8003ff0 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e027      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f3a:	4b16      	ldr	r3, [pc, #88]	; (8004f94 <HAL_RCC_OscConfig+0x658>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0x5ec>
 8004f46:	e01f      	b.n	8004f88 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e01a      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f54:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <HAL_RCC_OscConfig+0x658>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d10d      	bne.n	8004f84 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d106      	bne.n	8004f84 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d001      	beq.n	8004f88 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e000      	b.n	8004f8a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3720      	adds	r7, #32
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	40023800 	.word	0x40023800
 8004f98:	42470060 	.word	0x42470060

08004f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e11a      	b.n	80051e6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb0:	4b8f      	ldr	r3, [pc, #572]	; (80051f0 <HAL_RCC_ClockConfig+0x254>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d919      	bls.n	8004ff2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d105      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0x34>
 8004fc4:	4b8a      	ldr	r3, [pc, #552]	; (80051f0 <HAL_RCC_ClockConfig+0x254>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a89      	ldr	r2, [pc, #548]	; (80051f0 <HAL_RCC_ClockConfig+0x254>)
 8004fca:	f043 0304 	orr.w	r3, r3, #4
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	4b87      	ldr	r3, [pc, #540]	; (80051f0 <HAL_RCC_ClockConfig+0x254>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f023 0201 	bic.w	r2, r3, #1
 8004fd8:	4985      	ldr	r1, [pc, #532]	; (80051f0 <HAL_RCC_ClockConfig+0x254>)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe0:	4b83      	ldr	r3, [pc, #524]	; (80051f0 <HAL_RCC_ClockConfig+0x254>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d001      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e0f9      	b.n	80051e6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d008      	beq.n	8005010 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ffe:	4b7d      	ldr	r3, [pc, #500]	; (80051f4 <HAL_RCC_ClockConfig+0x258>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	497a      	ldr	r1, [pc, #488]	; (80051f4 <HAL_RCC_ClockConfig+0x258>)
 800500c:	4313      	orrs	r3, r2
 800500e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 808e 	beq.w	800513a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d107      	bne.n	8005036 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005026:	4b73      	ldr	r3, [pc, #460]	; (80051f4 <HAL_RCC_ClockConfig+0x258>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d121      	bne.n	8005076 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e0d7      	b.n	80051e6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b03      	cmp	r3, #3
 800503c:	d107      	bne.n	800504e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800503e:	4b6d      	ldr	r3, [pc, #436]	; (80051f4 <HAL_RCC_ClockConfig+0x258>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d115      	bne.n	8005076 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e0cb      	b.n	80051e6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d107      	bne.n	8005066 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005056:	4b67      	ldr	r3, [pc, #412]	; (80051f4 <HAL_RCC_ClockConfig+0x258>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d109      	bne.n	8005076 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e0bf      	b.n	80051e6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005066:	4b63      	ldr	r3, [pc, #396]	; (80051f4 <HAL_RCC_ClockConfig+0x258>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e0b7      	b.n	80051e6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005076:	4b5f      	ldr	r3, [pc, #380]	; (80051f4 <HAL_RCC_ClockConfig+0x258>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f023 0203 	bic.w	r2, r3, #3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	495c      	ldr	r1, [pc, #368]	; (80051f4 <HAL_RCC_ClockConfig+0x258>)
 8005084:	4313      	orrs	r3, r2
 8005086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005088:	f7fe ffb2 	bl	8003ff0 <HAL_GetTick>
 800508c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2b02      	cmp	r3, #2
 8005094:	d112      	bne.n	80050bc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005096:	e00a      	b.n	80050ae <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005098:	f7fe ffaa 	bl	8003ff0 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e09b      	b.n	80051e6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050ae:	4b51      	ldr	r3, [pc, #324]	; (80051f4 <HAL_RCC_ClockConfig+0x258>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 030c 	and.w	r3, r3, #12
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d1ee      	bne.n	8005098 <HAL_RCC_ClockConfig+0xfc>
 80050ba:	e03e      	b.n	800513a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b03      	cmp	r3, #3
 80050c2:	d112      	bne.n	80050ea <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050c4:	e00a      	b.n	80050dc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c6:	f7fe ff93 	bl	8003ff0 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e084      	b.n	80051e6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050dc:	4b45      	ldr	r3, [pc, #276]	; (80051f4 <HAL_RCC_ClockConfig+0x258>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 030c 	and.w	r3, r3, #12
 80050e4:	2b0c      	cmp	r3, #12
 80050e6:	d1ee      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x12a>
 80050e8:	e027      	b.n	800513a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d11d      	bne.n	800512e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80050f2:	e00a      	b.n	800510a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f4:	f7fe ff7c 	bl	8003ff0 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e06d      	b.n	80051e6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800510a:	4b3a      	ldr	r3, [pc, #232]	; (80051f4 <HAL_RCC_ClockConfig+0x258>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 030c 	and.w	r3, r3, #12
 8005112:	2b04      	cmp	r3, #4
 8005114:	d1ee      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x158>
 8005116:	e010      	b.n	800513a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005118:	f7fe ff6a 	bl	8003ff0 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	f241 3288 	movw	r2, #5000	; 0x1388
 8005126:	4293      	cmp	r3, r2
 8005128:	d901      	bls.n	800512e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e05b      	b.n	80051e6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800512e:	4b31      	ldr	r3, [pc, #196]	; (80051f4 <HAL_RCC_ClockConfig+0x258>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 030c 	and.w	r3, r3, #12
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1ee      	bne.n	8005118 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800513a:	4b2d      	ldr	r3, [pc, #180]	; (80051f0 <HAL_RCC_ClockConfig+0x254>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d219      	bcs.n	800517c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d105      	bne.n	800515a <HAL_RCC_ClockConfig+0x1be>
 800514e:	4b28      	ldr	r3, [pc, #160]	; (80051f0 <HAL_RCC_ClockConfig+0x254>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a27      	ldr	r2, [pc, #156]	; (80051f0 <HAL_RCC_ClockConfig+0x254>)
 8005154:	f043 0304 	orr.w	r3, r3, #4
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	4b25      	ldr	r3, [pc, #148]	; (80051f0 <HAL_RCC_ClockConfig+0x254>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f023 0201 	bic.w	r2, r3, #1
 8005162:	4923      	ldr	r1, [pc, #140]	; (80051f0 <HAL_RCC_ClockConfig+0x254>)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	4313      	orrs	r3, r2
 8005168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800516a:	4b21      	ldr	r3, [pc, #132]	; (80051f0 <HAL_RCC_ClockConfig+0x254>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	429a      	cmp	r2, r3
 8005176:	d001      	beq.n	800517c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e034      	b.n	80051e6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005188:	4b1a      	ldr	r3, [pc, #104]	; (80051f4 <HAL_RCC_ClockConfig+0x258>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	4917      	ldr	r1, [pc, #92]	; (80051f4 <HAL_RCC_ClockConfig+0x258>)
 8005196:	4313      	orrs	r3, r2
 8005198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d009      	beq.n	80051ba <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051a6:	4b13      	ldr	r3, [pc, #76]	; (80051f4 <HAL_RCC_ClockConfig+0x258>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	490f      	ldr	r1, [pc, #60]	; (80051f4 <HAL_RCC_ClockConfig+0x258>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051ba:	f000 f823 	bl	8005204 <HAL_RCC_GetSysClockFreq>
 80051be:	4602      	mov	r2, r0
 80051c0:	4b0c      	ldr	r3, [pc, #48]	; (80051f4 <HAL_RCC_ClockConfig+0x258>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	091b      	lsrs	r3, r3, #4
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	490b      	ldr	r1, [pc, #44]	; (80051f8 <HAL_RCC_ClockConfig+0x25c>)
 80051cc:	5ccb      	ldrb	r3, [r1, r3]
 80051ce:	fa22 f303 	lsr.w	r3, r2, r3
 80051d2:	4a0a      	ldr	r2, [pc, #40]	; (80051fc <HAL_RCC_ClockConfig+0x260>)
 80051d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051d6:	4b0a      	ldr	r3, [pc, #40]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fe febc 	bl	8003f58 <HAL_InitTick>
 80051e0:	4603      	mov	r3, r0
 80051e2:	72fb      	strb	r3, [r7, #11]

  return status;
 80051e4:	7afb      	ldrb	r3, [r7, #11]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40023c00 	.word	0x40023c00
 80051f4:	40023800 	.word	0x40023800
 80051f8:	08007708 	.word	0x08007708
 80051fc:	20000004 	.word	0x20000004
 8005200:	20000094 	.word	0x20000094

08005204 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005204:	b5b0      	push	{r4, r5, r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800520a:	4b4d      	ldr	r3, [pc, #308]	; (8005340 <HAL_RCC_GetSysClockFreq+0x13c>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f003 030c 	and.w	r3, r3, #12
 8005216:	2b0c      	cmp	r3, #12
 8005218:	d00c      	beq.n	8005234 <HAL_RCC_GetSysClockFreq+0x30>
 800521a:	2b0c      	cmp	r3, #12
 800521c:	d87c      	bhi.n	8005318 <HAL_RCC_GetSysClockFreq+0x114>
 800521e:	2b04      	cmp	r3, #4
 8005220:	d002      	beq.n	8005228 <HAL_RCC_GetSysClockFreq+0x24>
 8005222:	2b08      	cmp	r3, #8
 8005224:	d003      	beq.n	800522e <HAL_RCC_GetSysClockFreq+0x2a>
 8005226:	e077      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005228:	4b46      	ldr	r3, [pc, #280]	; (8005344 <HAL_RCC_GetSysClockFreq+0x140>)
 800522a:	613b      	str	r3, [r7, #16]
      break;
 800522c:	e082      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800522e:	4b46      	ldr	r3, [pc, #280]	; (8005348 <HAL_RCC_GetSysClockFreq+0x144>)
 8005230:	613b      	str	r3, [r7, #16]
      break;
 8005232:	e07f      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	0c9b      	lsrs	r3, r3, #18
 8005238:	f003 030f 	and.w	r3, r3, #15
 800523c:	4a43      	ldr	r2, [pc, #268]	; (800534c <HAL_RCC_GetSysClockFreq+0x148>)
 800523e:	5cd3      	ldrb	r3, [r2, r3]
 8005240:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	0d9b      	lsrs	r3, r3, #22
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	3301      	adds	r3, #1
 800524c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800524e:	4b3c      	ldr	r3, [pc, #240]	; (8005340 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01a      	beq.n	8005290 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	461a      	mov	r2, r3
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	4939      	ldr	r1, [pc, #228]	; (8005348 <HAL_RCC_GetSysClockFreq+0x144>)
 8005264:	fb01 f003 	mul.w	r0, r1, r3
 8005268:	2100      	movs	r1, #0
 800526a:	fb01 f102 	mul.w	r1, r1, r2
 800526e:	1844      	adds	r4, r0, r1
 8005270:	4935      	ldr	r1, [pc, #212]	; (8005348 <HAL_RCC_GetSysClockFreq+0x144>)
 8005272:	fba2 0101 	umull	r0, r1, r2, r1
 8005276:	1863      	adds	r3, r4, r1
 8005278:	4619      	mov	r1, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	461a      	mov	r2, r3
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	f7fa ff7b 	bl	800017c <__aeabi_uldivmod>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	4613      	mov	r3, r2
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	e040      	b.n	8005312 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	461c      	mov	r4, r3
 8005294:	f04f 0500 	mov.w	r5, #0
 8005298:	4620      	mov	r0, r4
 800529a:	4629      	mov	r1, r5
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	014b      	lsls	r3, r1, #5
 80052a6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052aa:	0142      	lsls	r2, r0, #5
 80052ac:	4610      	mov	r0, r2
 80052ae:	4619      	mov	r1, r3
 80052b0:	1b00      	subs	r0, r0, r4
 80052b2:	eb61 0105 	sbc.w	r1, r1, r5
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	018b      	lsls	r3, r1, #6
 80052c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052c4:	0182      	lsls	r2, r0, #6
 80052c6:	1a12      	subs	r2, r2, r0
 80052c8:	eb63 0301 	sbc.w	r3, r3, r1
 80052cc:	f04f 0000 	mov.w	r0, #0
 80052d0:	f04f 0100 	mov.w	r1, #0
 80052d4:	00d9      	lsls	r1, r3, #3
 80052d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052da:	00d0      	lsls	r0, r2, #3
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	1912      	adds	r2, r2, r4
 80052e2:	eb45 0303 	adc.w	r3, r5, r3
 80052e6:	f04f 0000 	mov.w	r0, #0
 80052ea:	f04f 0100 	mov.w	r1, #0
 80052ee:	0299      	lsls	r1, r3, #10
 80052f0:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052f4:	0290      	lsls	r0, r2, #10
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4610      	mov	r0, r2
 80052fc:	4619      	mov	r1, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	461a      	mov	r2, r3
 8005302:	f04f 0300 	mov.w	r3, #0
 8005306:	f7fa ff39 	bl	800017c <__aeabi_uldivmod>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	4613      	mov	r3, r2
 8005310:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	613b      	str	r3, [r7, #16]
      break;
 8005316:	e00d      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005318:	4b09      	ldr	r3, [pc, #36]	; (8005340 <HAL_RCC_GetSysClockFreq+0x13c>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	0b5b      	lsrs	r3, r3, #13
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	3301      	adds	r3, #1
 8005328:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	613b      	str	r3, [r7, #16]
      break;
 8005332:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005334:	693b      	ldr	r3, [r7, #16]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bdb0      	pop	{r4, r5, r7, pc}
 800533e:	bf00      	nop
 8005340:	40023800 	.word	0x40023800
 8005344:	00f42400 	.word	0x00f42400
 8005348:	016e3600 	.word	0x016e3600
 800534c:	080076fc 	.word	0x080076fc

08005350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005354:	4b02      	ldr	r3, [pc, #8]	; (8005360 <HAL_RCC_GetHCLKFreq+0x10>)
 8005356:	681b      	ldr	r3, [r3, #0]
}
 8005358:	4618      	mov	r0, r3
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr
 8005360:	20000004 	.word	0x20000004

08005364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005368:	f7ff fff2 	bl	8005350 <HAL_RCC_GetHCLKFreq>
 800536c:	4602      	mov	r2, r0
 800536e:	4b05      	ldr	r3, [pc, #20]	; (8005384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	0a1b      	lsrs	r3, r3, #8
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	4903      	ldr	r1, [pc, #12]	; (8005388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800537a:	5ccb      	ldrb	r3, [r1, r3]
 800537c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005380:	4618      	mov	r0, r3
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40023800 	.word	0x40023800
 8005388:	08007718 	.word	0x08007718

0800538c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005390:	f7ff ffde 	bl	8005350 <HAL_RCC_GetHCLKFreq>
 8005394:	4602      	mov	r2, r0
 8005396:	4b05      	ldr	r3, [pc, #20]	; (80053ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	0adb      	lsrs	r3, r3, #11
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	4903      	ldr	r1, [pc, #12]	; (80053b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053a2:	5ccb      	ldrb	r3, [r1, r3]
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40023800 	.word	0x40023800
 80053b0:	08007718 	.word	0x08007718

080053b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053bc:	2300      	movs	r3, #0
 80053be:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80053c0:	4b29      	ldr	r3, [pc, #164]	; (8005468 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d12c      	bne.n	8005426 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053cc:	4b26      	ldr	r3, [pc, #152]	; (8005468 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d005      	beq.n	80053e4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80053d8:	4b24      	ldr	r3, [pc, #144]	; (800546c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	e016      	b.n	8005412 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053e4:	4b20      	ldr	r3, [pc, #128]	; (8005468 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	4a1f      	ldr	r2, [pc, #124]	; (8005468 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80053ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ee:	6253      	str	r3, [r2, #36]	; 0x24
 80053f0:	4b1d      	ldr	r3, [pc, #116]	; (8005468 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80053fc:	4b1b      	ldr	r3, [pc, #108]	; (800546c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005404:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005406:	4b18      	ldr	r3, [pc, #96]	; (8005468 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	4a17      	ldr	r2, [pc, #92]	; (8005468 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800540c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005410:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005418:	d105      	bne.n	8005426 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005420:	d101      	bne.n	8005426 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005422:	2301      	movs	r3, #1
 8005424:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d105      	bne.n	8005438 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800542c:	4b10      	ldr	r3, [pc, #64]	; (8005470 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a0f      	ldr	r2, [pc, #60]	; (8005470 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005432:	f043 0304 	orr.w	r3, r3, #4
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	4b0d      	ldr	r3, [pc, #52]	; (8005470 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f023 0201 	bic.w	r2, r3, #1
 8005440:	490b      	ldr	r1, [pc, #44]	; (8005470 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005448:	4b09      	ldr	r3, [pc, #36]	; (8005470 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	429a      	cmp	r2, r3
 8005454:	d001      	beq.n	800545a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	371c      	adds	r7, #28
 8005460:	46bd      	mov	sp, r7
 8005462:	bc80      	pop	{r7}
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	40023800 	.word	0x40023800
 800546c:	40007000 	.word	0x40007000
 8005470:	40023c00 	.word	0x40023c00

08005474 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e07b      	b.n	800557e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	2b00      	cmp	r3, #0
 800548c:	d108      	bne.n	80054a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005496:	d009      	beq.n	80054ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	61da      	str	r2, [r3, #28]
 800549e:	e005      	b.n	80054ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d106      	bne.n	80054cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fc ff56 	bl	8002378 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	431a      	orrs	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005526:	431a      	orrs	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005530:	ea42 0103 	orr.w	r1, r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005538:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	0c1b      	lsrs	r3, r3, #16
 800554a:	f003 0104 	and.w	r1, r3, #4
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	f003 0210 	and.w	r2, r3, #16
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69da      	ldr	r2, [r3, #28]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800556c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b088      	sub	sp, #32
 800558a:	af00      	add	r7, sp, #0
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	603b      	str	r3, [r7, #0]
 8005592:	4613      	mov	r3, r2
 8005594:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_SPI_Transmit+0x22>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e126      	b.n	80057f6 <HAL_SPI_Transmit+0x270>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055b0:	f7fe fd1e 	bl	8003ff0 <HAL_GetTick>
 80055b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055b6:	88fb      	ldrh	r3, [r7, #6]
 80055b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d002      	beq.n	80055cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055c6:	2302      	movs	r3, #2
 80055c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055ca:	e10b      	b.n	80057e4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <HAL_SPI_Transmit+0x52>
 80055d2:	88fb      	ldrh	r3, [r7, #6]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d102      	bne.n	80055de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055dc:	e102      	b.n	80057e4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2203      	movs	r2, #3
 80055e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	88fa      	ldrh	r2, [r7, #6]
 80055f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	88fa      	ldrh	r2, [r7, #6]
 80055fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005624:	d10f      	bne.n	8005646 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005634:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005644:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b40      	cmp	r3, #64	; 0x40
 8005652:	d007      	beq.n	8005664 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005662:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800566c:	d14b      	bne.n	8005706 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <HAL_SPI_Transmit+0xf6>
 8005676:	8afb      	ldrh	r3, [r7, #22]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d13e      	bne.n	80056fa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005680:	881a      	ldrh	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568c:	1c9a      	adds	r2, r3, #2
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005696:	b29b      	uxth	r3, r3
 8005698:	3b01      	subs	r3, #1
 800569a:	b29a      	uxth	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056a0:	e02b      	b.n	80056fa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d112      	bne.n	80056d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b4:	881a      	ldrh	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c0:	1c9a      	adds	r2, r3, #2
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80056d4:	e011      	b.n	80056fa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056d6:	f7fe fc8b 	bl	8003ff0 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d803      	bhi.n	80056ee <HAL_SPI_Transmit+0x168>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d102      	bne.n	80056f4 <HAL_SPI_Transmit+0x16e>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d102      	bne.n	80056fa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056f8:	e074      	b.n	80057e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1ce      	bne.n	80056a2 <HAL_SPI_Transmit+0x11c>
 8005704:	e04c      	b.n	80057a0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <HAL_SPI_Transmit+0x18e>
 800570e:	8afb      	ldrh	r3, [r7, #22]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d140      	bne.n	8005796 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	330c      	adds	r3, #12
 800571e:	7812      	ldrb	r2, [r2, #0]
 8005720:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800573a:	e02c      	b.n	8005796 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b02      	cmp	r3, #2
 8005748:	d113      	bne.n	8005772 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	330c      	adds	r3, #12
 8005754:	7812      	ldrb	r2, [r2, #0]
 8005756:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005766:	b29b      	uxth	r3, r3
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005770:	e011      	b.n	8005796 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005772:	f7fe fc3d 	bl	8003ff0 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d803      	bhi.n	800578a <HAL_SPI_Transmit+0x204>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005788:	d102      	bne.n	8005790 <HAL_SPI_Transmit+0x20a>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d102      	bne.n	8005796 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005794:	e026      	b.n	80057e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1cd      	bne.n	800573c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	6839      	ldr	r1, [r7, #0]
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 fa55 	bl	8005c54 <SPI_EndRxTxTransaction>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2220      	movs	r2, #32
 80057b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10a      	bne.n	80057d4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057be:	2300      	movs	r3, #0
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	613b      	str	r3, [r7, #16]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	613b      	str	r3, [r7, #16]
 80057d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	77fb      	strb	r3, [r7, #31]
 80057e0:	e000      	b.n	80057e4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80057e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b08c      	sub	sp, #48	; 0x30
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	607a      	str	r2, [r7, #4]
 800580a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800580c:	2301      	movs	r3, #1
 800580e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005810:	2300      	movs	r3, #0
 8005812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_SPI_TransmitReceive+0x26>
 8005820:	2302      	movs	r3, #2
 8005822:	e18a      	b.n	8005b3a <HAL_SPI_TransmitReceive+0x33c>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800582c:	f7fe fbe0 	bl	8003ff0 <HAL_GetTick>
 8005830:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005842:	887b      	ldrh	r3, [r7, #2]
 8005844:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005846:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800584a:	2b01      	cmp	r3, #1
 800584c:	d00f      	beq.n	800586e <HAL_SPI_TransmitReceive+0x70>
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005854:	d107      	bne.n	8005866 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d103      	bne.n	8005866 <HAL_SPI_TransmitReceive+0x68>
 800585e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005862:	2b04      	cmp	r3, #4
 8005864:	d003      	beq.n	800586e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005866:	2302      	movs	r3, #2
 8005868:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800586c:	e15b      	b.n	8005b26 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d005      	beq.n	8005880 <HAL_SPI_TransmitReceive+0x82>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_SPI_TransmitReceive+0x82>
 800587a:	887b      	ldrh	r3, [r7, #2]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d103      	bne.n	8005888 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005886:	e14e      	b.n	8005b26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b04      	cmp	r3, #4
 8005892:	d003      	beq.n	800589c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2205      	movs	r2, #5
 8005898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	887a      	ldrh	r2, [r7, #2]
 80058ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	887a      	ldrh	r2, [r7, #2]
 80058b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	887a      	ldrh	r2, [r7, #2]
 80058be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	887a      	ldrh	r2, [r7, #2]
 80058c4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058dc:	2b40      	cmp	r3, #64	; 0x40
 80058de:	d007      	beq.n	80058f0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058f8:	d178      	bne.n	80059ec <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <HAL_SPI_TransmitReceive+0x10a>
 8005902:	8b7b      	ldrh	r3, [r7, #26]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d166      	bne.n	80059d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590c:	881a      	ldrh	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005918:	1c9a      	adds	r2, r3, #2
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005922:	b29b      	uxth	r3, r3
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800592c:	e053      	b.n	80059d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b02      	cmp	r3, #2
 800593a:	d11b      	bne.n	8005974 <HAL_SPI_TransmitReceive+0x176>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005940:	b29b      	uxth	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d016      	beq.n	8005974 <HAL_SPI_TransmitReceive+0x176>
 8005946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005948:	2b01      	cmp	r3, #1
 800594a:	d113      	bne.n	8005974 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005950:	881a      	ldrh	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595c:	1c9a      	adds	r2, r3, #2
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b01      	cmp	r3, #1
 8005980:	d119      	bne.n	80059b6 <HAL_SPI_TransmitReceive+0x1b8>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005986:	b29b      	uxth	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d014      	beq.n	80059b6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	b292      	uxth	r2, r2
 8005998:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	1c9a      	adds	r2, r3, #2
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	3b01      	subs	r3, #1
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059b2:	2301      	movs	r3, #1
 80059b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059b6:	f7fe fb1b 	bl	8003ff0 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d807      	bhi.n	80059d6 <HAL_SPI_TransmitReceive+0x1d8>
 80059c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059cc:	d003      	beq.n	80059d6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80059d4:	e0a7      	b.n	8005b26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059da:	b29b      	uxth	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1a6      	bne.n	800592e <HAL_SPI_TransmitReceive+0x130>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1a1      	bne.n	800592e <HAL_SPI_TransmitReceive+0x130>
 80059ea:	e07c      	b.n	8005ae6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <HAL_SPI_TransmitReceive+0x1fc>
 80059f4:	8b7b      	ldrh	r3, [r7, #26]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d16b      	bne.n	8005ad2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	330c      	adds	r3, #12
 8005a04:	7812      	ldrb	r2, [r2, #0]
 8005a06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a20:	e057      	b.n	8005ad2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d11c      	bne.n	8005a6a <HAL_SPI_TransmitReceive+0x26c>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d017      	beq.n	8005a6a <HAL_SPI_TransmitReceive+0x26c>
 8005a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d114      	bne.n	8005a6a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	330c      	adds	r3, #12
 8005a4a:	7812      	ldrb	r2, [r2, #0]
 8005a4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d119      	bne.n	8005aac <HAL_SPI_TransmitReceive+0x2ae>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d014      	beq.n	8005aac <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68da      	ldr	r2, [r3, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005aac:	f7fe faa0 	bl	8003ff0 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d803      	bhi.n	8005ac4 <HAL_SPI_TransmitReceive+0x2c6>
 8005abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac2:	d102      	bne.n	8005aca <HAL_SPI_TransmitReceive+0x2cc>
 8005ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d103      	bne.n	8005ad2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ad0:	e029      	b.n	8005b26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1a2      	bne.n	8005a22 <HAL_SPI_TransmitReceive+0x224>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d19d      	bne.n	8005a22 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 f8b2 	bl	8005c54 <SPI_EndRxTxTransaction>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d006      	beq.n	8005b04 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2220      	movs	r2, #32
 8005b00:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b02:	e010      	b.n	8005b26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10b      	bne.n	8005b24 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	617b      	str	r3, [r7, #20]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	617b      	str	r3, [r7, #20]
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	e000      	b.n	8005b26 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005b24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3730      	adds	r7, #48	; 0x30
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	4613      	mov	r3, r2
 8005b52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b54:	f7fe fa4c 	bl	8003ff0 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	1a9b      	subs	r3, r3, r2
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	4413      	add	r3, r2
 8005b62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b64:	f7fe fa44 	bl	8003ff0 <HAL_GetTick>
 8005b68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b6a:	4b39      	ldr	r3, [pc, #228]	; (8005c50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	015b      	lsls	r3, r3, #5
 8005b70:	0d1b      	lsrs	r3, r3, #20
 8005b72:	69fa      	ldr	r2, [r7, #28]
 8005b74:	fb02 f303 	mul.w	r3, r2, r3
 8005b78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b7a:	e054      	b.n	8005c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b82:	d050      	beq.n	8005c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b84:	f7fe fa34 	bl	8003ff0 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d902      	bls.n	8005b9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d13d      	bne.n	8005c16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ba8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bb2:	d111      	bne.n	8005bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bbc:	d004      	beq.n	8005bc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc6:	d107      	bne.n	8005bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be0:	d10f      	bne.n	8005c02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e017      	b.n	8005c46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	bf0c      	ite	eq
 8005c36:	2301      	moveq	r3, #1
 8005c38:	2300      	movne	r3, #0
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d19b      	bne.n	8005b7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3720      	adds	r7, #32
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	20000004 	.word	0x20000004

08005c54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c60:	4b1b      	ldr	r3, [pc, #108]	; (8005cd0 <SPI_EndRxTxTransaction+0x7c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a1b      	ldr	r2, [pc, #108]	; (8005cd4 <SPI_EndRxTxTransaction+0x80>)
 8005c66:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6a:	0d5b      	lsrs	r3, r3, #21
 8005c6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c70:	fb02 f303 	mul.w	r3, r2, r3
 8005c74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c7e:	d112      	bne.n	8005ca6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2200      	movs	r2, #0
 8005c88:	2180      	movs	r1, #128	; 0x80
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f7ff ff5a 	bl	8005b44 <SPI_WaitFlagStateUntilTimeout>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d016      	beq.n	8005cc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9a:	f043 0220 	orr.w	r2, r3, #32
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e00f      	b.n	8005cc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00a      	beq.n	8005cc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cbc:	2b80      	cmp	r3, #128	; 0x80
 8005cbe:	d0f2      	beq.n	8005ca6 <SPI_EndRxTxTransaction+0x52>
 8005cc0:	e000      	b.n	8005cc4 <SPI_EndRxTxTransaction+0x70>
        break;
 8005cc2:	bf00      	nop
  }

  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20000004 	.word	0x20000004
 8005cd4:	165e9f81 	.word	0x165e9f81

08005cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e031      	b.n	8005d4e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d106      	bne.n	8005d04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fc fc02 	bl	8002508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3304      	adds	r3, #4
 8005d14:	4619      	mov	r1, r3
 8005d16:	4610      	mov	r0, r2
 8005d18:	f000 faa4 	bl	8006264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
	...

08005d58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d001      	beq.n	8005d70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e032      	b.n	8005dd6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d80:	d00e      	beq.n	8005da0 <HAL_TIM_Base_Start+0x48>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a16      	ldr	r2, [pc, #88]	; (8005de0 <HAL_TIM_Base_Start+0x88>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d009      	beq.n	8005da0 <HAL_TIM_Base_Start+0x48>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a14      	ldr	r2, [pc, #80]	; (8005de4 <HAL_TIM_Base_Start+0x8c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d004      	beq.n	8005da0 <HAL_TIM_Base_Start+0x48>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a13      	ldr	r2, [pc, #76]	; (8005de8 <HAL_TIM_Base_Start+0x90>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d111      	bne.n	8005dc4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b06      	cmp	r3, #6
 8005db0:	d010      	beq.n	8005dd4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f042 0201 	orr.w	r2, r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc2:	e007      	b.n	8005dd4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0201 	orr.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	4770      	bx	lr
 8005de0:	40000400 	.word	0x40000400
 8005de4:	40000800 	.word	0x40000800
 8005de8:	40010800 	.word	0x40010800

08005dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d001      	beq.n	8005e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e03a      	b.n	8005e7a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e24:	d00e      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x58>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a16      	ldr	r2, [pc, #88]	; (8005e84 <HAL_TIM_Base_Start_IT+0x98>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d009      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x58>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a14      	ldr	r2, [pc, #80]	; (8005e88 <HAL_TIM_Base_Start_IT+0x9c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d004      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x58>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a13      	ldr	r2, [pc, #76]	; (8005e8c <HAL_TIM_Base_Start_IT+0xa0>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d111      	bne.n	8005e68 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b06      	cmp	r3, #6
 8005e54:	d010      	beq.n	8005e78 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f042 0201 	orr.w	r2, r2, #1
 8005e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e66:	e007      	b.n	8005e78 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0201 	orr.w	r2, r2, #1
 8005e76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bc80      	pop	{r7}
 8005e82:	4770      	bx	lr
 8005e84:	40000400 	.word	0x40000400
 8005e88:	40000800 	.word	0x40000800
 8005e8c:	40010800 	.word	0x40010800

08005e90 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0201 	bic.w	r2, r2, #1
 8005ea6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6a1a      	ldr	r2, [r3, #32]
 8005eae:	f241 1311 	movw	r3, #4369	; 0x1111
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d107      	bne.n	8005ec8 <HAL_TIM_Base_Stop_IT+0x38>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0201 	bic.w	r2, r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bc80      	pop	{r7}
 8005eda:	4770      	bx	lr

08005edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d122      	bne.n	8005f38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d11b      	bne.n	8005f38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f06f 0202 	mvn.w	r2, #2
 8005f08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f985 	bl	800622e <HAL_TIM_IC_CaptureCallback>
 8005f24:	e005      	b.n	8005f32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f978 	bl	800621c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f987 	bl	8006240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	f003 0304 	and.w	r3, r3, #4
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	d122      	bne.n	8005f8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f003 0304 	and.w	r3, r3, #4
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	d11b      	bne.n	8005f8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f06f 0204 	mvn.w	r2, #4
 8005f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2202      	movs	r2, #2
 8005f62:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f95b 	bl	800622e <HAL_TIM_IC_CaptureCallback>
 8005f78:	e005      	b.n	8005f86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f94e 	bl	800621c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f95d 	bl	8006240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	f003 0308 	and.w	r3, r3, #8
 8005f96:	2b08      	cmp	r3, #8
 8005f98:	d122      	bne.n	8005fe0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f003 0308 	and.w	r3, r3, #8
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d11b      	bne.n	8005fe0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f06f 0208 	mvn.w	r2, #8
 8005fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2204      	movs	r2, #4
 8005fb6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f931 	bl	800622e <HAL_TIM_IC_CaptureCallback>
 8005fcc:	e005      	b.n	8005fda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f924 	bl	800621c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f933 	bl	8006240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	f003 0310 	and.w	r3, r3, #16
 8005fea:	2b10      	cmp	r3, #16
 8005fec:	d122      	bne.n	8006034 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f003 0310 	and.w	r3, r3, #16
 8005ff8:	2b10      	cmp	r3, #16
 8005ffa:	d11b      	bne.n	8006034 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f06f 0210 	mvn.w	r2, #16
 8006004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2208      	movs	r2, #8
 800600a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f907 	bl	800622e <HAL_TIM_IC_CaptureCallback>
 8006020:	e005      	b.n	800602e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f8fa 	bl	800621c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f909 	bl	8006240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b01      	cmp	r3, #1
 8006040:	d10e      	bne.n	8006060 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b01      	cmp	r3, #1
 800604e:	d107      	bne.n	8006060 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f06f 0201 	mvn.w	r2, #1
 8006058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fb f8bc 	bl	80011d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606a:	2b40      	cmp	r3, #64	; 0x40
 800606c:	d10e      	bne.n	800608c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006078:	2b40      	cmp	r3, #64	; 0x40
 800607a:	d107      	bne.n	800608c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f8e3 	bl	8006252 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800608c:	bf00      	nop
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_TIM_ConfigClockSource+0x18>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e0b3      	b.n	8006214 <HAL_TIM_ConfigClockSource+0x180>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e4:	d03e      	beq.n	8006164 <HAL_TIM_ConfigClockSource+0xd0>
 80060e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ea:	f200 8087 	bhi.w	80061fc <HAL_TIM_ConfigClockSource+0x168>
 80060ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f2:	f000 8085 	beq.w	8006200 <HAL_TIM_ConfigClockSource+0x16c>
 80060f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fa:	d87f      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x168>
 80060fc:	2b70      	cmp	r3, #112	; 0x70
 80060fe:	d01a      	beq.n	8006136 <HAL_TIM_ConfigClockSource+0xa2>
 8006100:	2b70      	cmp	r3, #112	; 0x70
 8006102:	d87b      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x168>
 8006104:	2b60      	cmp	r3, #96	; 0x60
 8006106:	d050      	beq.n	80061aa <HAL_TIM_ConfigClockSource+0x116>
 8006108:	2b60      	cmp	r3, #96	; 0x60
 800610a:	d877      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x168>
 800610c:	2b50      	cmp	r3, #80	; 0x50
 800610e:	d03c      	beq.n	800618a <HAL_TIM_ConfigClockSource+0xf6>
 8006110:	2b50      	cmp	r3, #80	; 0x50
 8006112:	d873      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x168>
 8006114:	2b40      	cmp	r3, #64	; 0x40
 8006116:	d058      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x136>
 8006118:	2b40      	cmp	r3, #64	; 0x40
 800611a:	d86f      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x168>
 800611c:	2b30      	cmp	r3, #48	; 0x30
 800611e:	d064      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x156>
 8006120:	2b30      	cmp	r3, #48	; 0x30
 8006122:	d86b      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x168>
 8006124:	2b20      	cmp	r3, #32
 8006126:	d060      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x156>
 8006128:	2b20      	cmp	r3, #32
 800612a:	d867      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x168>
 800612c:	2b00      	cmp	r3, #0
 800612e:	d05c      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x156>
 8006130:	2b10      	cmp	r3, #16
 8006132:	d05a      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006134:	e062      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6818      	ldr	r0, [r3, #0]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	6899      	ldr	r1, [r3, #8]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f000 f974 	bl	8006432 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006158:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	609a      	str	r2, [r3, #8]
      break;
 8006162:	e04e      	b.n	8006202 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	6899      	ldr	r1, [r3, #8]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f000 f95d 	bl	8006432 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689a      	ldr	r2, [r3, #8]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006186:	609a      	str	r2, [r3, #8]
      break;
 8006188:	e03b      	b.n	8006202 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6818      	ldr	r0, [r3, #0]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	6859      	ldr	r1, [r3, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	461a      	mov	r2, r3
 8006198:	f000 f8d4 	bl	8006344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2150      	movs	r1, #80	; 0x50
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 f92b 	bl	80063fe <TIM_ITRx_SetConfig>
      break;
 80061a8:	e02b      	b.n	8006202 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6859      	ldr	r1, [r3, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	461a      	mov	r2, r3
 80061b8:	f000 f8f2 	bl	80063a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2160      	movs	r1, #96	; 0x60
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 f91b 	bl	80063fe <TIM_ITRx_SetConfig>
      break;
 80061c8:	e01b      	b.n	8006202 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6818      	ldr	r0, [r3, #0]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6859      	ldr	r1, [r3, #4]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	461a      	mov	r2, r3
 80061d8:	f000 f8b4 	bl	8006344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2140      	movs	r1, #64	; 0x40
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 f90b 	bl	80063fe <TIM_ITRx_SetConfig>
      break;
 80061e8:	e00b      	b.n	8006202 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4619      	mov	r1, r3
 80061f4:	4610      	mov	r0, r2
 80061f6:	f000 f902 	bl	80063fe <TIM_ITRx_SetConfig>
        break;
 80061fa:	e002      	b.n	8006202 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80061fc:	bf00      	nop
 80061fe:	e000      	b.n	8006202 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006200:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	bc80      	pop	{r7}
 800622c:	4770      	bx	lr

0800622e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	bc80      	pop	{r7}
 800623e:	4770      	bx	lr

08006240 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	bc80      	pop	{r7}
 8006250:	4770      	bx	lr

08006252 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr

08006264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800627a:	d00f      	beq.n	800629c <TIM_Base_SetConfig+0x38>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a2b      	ldr	r2, [pc, #172]	; (800632c <TIM_Base_SetConfig+0xc8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00b      	beq.n	800629c <TIM_Base_SetConfig+0x38>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a2a      	ldr	r2, [pc, #168]	; (8006330 <TIM_Base_SetConfig+0xcc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d007      	beq.n	800629c <TIM_Base_SetConfig+0x38>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a29      	ldr	r2, [pc, #164]	; (8006334 <TIM_Base_SetConfig+0xd0>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d003      	beq.n	800629c <TIM_Base_SetConfig+0x38>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a28      	ldr	r2, [pc, #160]	; (8006338 <TIM_Base_SetConfig+0xd4>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d108      	bne.n	80062ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b4:	d017      	beq.n	80062e6 <TIM_Base_SetConfig+0x82>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a1c      	ldr	r2, [pc, #112]	; (800632c <TIM_Base_SetConfig+0xc8>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d013      	beq.n	80062e6 <TIM_Base_SetConfig+0x82>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a1b      	ldr	r2, [pc, #108]	; (8006330 <TIM_Base_SetConfig+0xcc>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d00f      	beq.n	80062e6 <TIM_Base_SetConfig+0x82>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a1a      	ldr	r2, [pc, #104]	; (8006334 <TIM_Base_SetConfig+0xd0>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d00b      	beq.n	80062e6 <TIM_Base_SetConfig+0x82>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a19      	ldr	r2, [pc, #100]	; (8006338 <TIM_Base_SetConfig+0xd4>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d007      	beq.n	80062e6 <TIM_Base_SetConfig+0x82>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a18      	ldr	r2, [pc, #96]	; (800633c <TIM_Base_SetConfig+0xd8>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d003      	beq.n	80062e6 <TIM_Base_SetConfig+0x82>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a17      	ldr	r2, [pc, #92]	; (8006340 <TIM_Base_SetConfig+0xdc>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d108      	bne.n	80062f8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	615a      	str	r2, [r3, #20]
}
 8006322:	bf00      	nop
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	bc80      	pop	{r7}
 800632a:	4770      	bx	lr
 800632c:	40000400 	.word	0x40000400
 8006330:	40000800 	.word	0x40000800
 8006334:	40000c00 	.word	0x40000c00
 8006338:	40010800 	.word	0x40010800
 800633c:	40010c00 	.word	0x40010c00
 8006340:	40011000 	.word	0x40011000

08006344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	f023 0201 	bic.w	r2, r3, #1
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800636e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	011b      	lsls	r3, r3, #4
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	4313      	orrs	r3, r2
 8006378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f023 030a 	bic.w	r3, r3, #10
 8006380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	4313      	orrs	r3, r2
 8006388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	621a      	str	r2, [r3, #32]
}
 8006396:	bf00      	nop
 8006398:	371c      	adds	r7, #28
 800639a:	46bd      	mov	sp, r7
 800639c:	bc80      	pop	{r7}
 800639e:	4770      	bx	lr

080063a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	f023 0210 	bic.w	r2, r3, #16
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	031b      	lsls	r3, r3, #12
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	011b      	lsls	r3, r3, #4
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	621a      	str	r2, [r3, #32]
}
 80063f4:	bf00      	nop
 80063f6:	371c      	adds	r7, #28
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bc80      	pop	{r7}
 80063fc:	4770      	bx	lr

080063fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063fe:	b480      	push	{r7}
 8006400:	b085      	sub	sp, #20
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006414:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	f043 0307 	orr.w	r3, r3, #7
 8006420:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	609a      	str	r2, [r3, #8]
}
 8006428:	bf00      	nop
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	bc80      	pop	{r7}
 8006430:	4770      	bx	lr

08006432 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006432:	b480      	push	{r7}
 8006434:	b087      	sub	sp, #28
 8006436:	af00      	add	r7, sp, #0
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	607a      	str	r2, [r7, #4]
 800643e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800644c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	021a      	lsls	r2, r3, #8
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	431a      	orrs	r2, r3
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	4313      	orrs	r3, r2
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	4313      	orrs	r3, r2
 800645e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	609a      	str	r2, [r3, #8]
}
 8006466:	bf00      	nop
 8006468:	371c      	adds	r7, #28
 800646a:	46bd      	mov	sp, r7
 800646c:	bc80      	pop	{r7}
 800646e:	4770      	bx	lr

08006470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006480:	2b01      	cmp	r3, #1
 8006482:	d101      	bne.n	8006488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006484:	2302      	movs	r3, #2
 8006486:	e046      	b.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ca:	d00e      	beq.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a13      	ldr	r2, [pc, #76]	; (8006520 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d009      	beq.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a12      	ldr	r2, [pc, #72]	; (8006524 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d004      	beq.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a10      	ldr	r2, [pc, #64]	; (8006528 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d10c      	bne.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	bc80      	pop	{r7}
 800651e:	4770      	bx	lr
 8006520:	40000400 	.word	0x40000400
 8006524:	40000800 	.word	0x40000800
 8006528:	40010800 	.word	0x40010800

0800652c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e03f      	b.n	80065be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d106      	bne.n	8006558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7fc f850 	bl	80025f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2224      	movs	r2, #36	; 0x24
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800656e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f9a7 	bl	80068c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	691a      	ldr	r2, [r3, #16]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	695a      	ldr	r2, [r3, #20]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68da      	ldr	r2, [r3, #12]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2220      	movs	r2, #32
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b08a      	sub	sp, #40	; 0x28
 80065ca:	af02      	add	r7, sp, #8
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	60b9      	str	r1, [r7, #8]
 80065d0:	603b      	str	r3, [r7, #0]
 80065d2:	4613      	mov	r3, r2
 80065d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	d17c      	bne.n	80066e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <HAL_UART_Transmit+0x2c>
 80065ec:	88fb      	ldrh	r3, [r7, #6]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e075      	b.n	80066e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d101      	bne.n	8006604 <HAL_UART_Transmit+0x3e>
 8006600:	2302      	movs	r3, #2
 8006602:	e06e      	b.n	80066e2 <HAL_UART_Transmit+0x11c>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2221      	movs	r2, #33	; 0x21
 8006616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800661a:	f7fd fce9 	bl	8003ff0 <HAL_GetTick>
 800661e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	88fa      	ldrh	r2, [r7, #6]
 8006624:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	88fa      	ldrh	r2, [r7, #6]
 800662a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006634:	d108      	bne.n	8006648 <HAL_UART_Transmit+0x82>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d104      	bne.n	8006648 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800663e:	2300      	movs	r3, #0
 8006640:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	61bb      	str	r3, [r7, #24]
 8006646:	e003      	b.n	8006650 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800664c:	2300      	movs	r3, #0
 800664e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006658:	e02a      	b.n	80066b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	2200      	movs	r2, #0
 8006662:	2180      	movs	r1, #128	; 0x80
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 f8e2 	bl	800682e <UART_WaitOnFlagUntilTimeout>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e036      	b.n	80066e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10b      	bne.n	8006692 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006688:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	3302      	adds	r3, #2
 800668e:	61bb      	str	r3, [r7, #24]
 8006690:	e007      	b.n	80066a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	781a      	ldrb	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	3301      	adds	r3, #1
 80066a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	3b01      	subs	r3, #1
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1cf      	bne.n	800665a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	2200      	movs	r2, #0
 80066c2:	2140      	movs	r1, #64	; 0x40
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 f8b2 	bl	800682e <UART_WaitOnFlagUntilTimeout>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e006      	b.n	80066e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066dc:	2300      	movs	r3, #0
 80066de:	e000      	b.n	80066e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066e0:	2302      	movs	r3, #2
  }
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3720      	adds	r7, #32
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b08a      	sub	sp, #40	; 0x28
 80066ee:	af02      	add	r7, sp, #8
 80066f0:	60f8      	str	r0, [r7, #12]
 80066f2:	60b9      	str	r1, [r7, #8]
 80066f4:	603b      	str	r3, [r7, #0]
 80066f6:	4613      	mov	r3, r2
 80066f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066fa:	2300      	movs	r3, #0
 80066fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b20      	cmp	r3, #32
 8006708:	f040 808c 	bne.w	8006824 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <HAL_UART_Receive+0x2e>
 8006712:	88fb      	ldrh	r3, [r7, #6]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e084      	b.n	8006826 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006722:	2b01      	cmp	r3, #1
 8006724:	d101      	bne.n	800672a <HAL_UART_Receive+0x40>
 8006726:	2302      	movs	r3, #2
 8006728:	e07d      	b.n	8006826 <HAL_UART_Receive+0x13c>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2222      	movs	r2, #34	; 0x22
 800673c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006746:	f7fd fc53 	bl	8003ff0 <HAL_GetTick>
 800674a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	88fa      	ldrh	r2, [r7, #6]
 8006750:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	88fa      	ldrh	r2, [r7, #6]
 8006756:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006760:	d108      	bne.n	8006774 <HAL_UART_Receive+0x8a>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d104      	bne.n	8006774 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800676a:	2300      	movs	r3, #0
 800676c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	61bb      	str	r3, [r7, #24]
 8006772:	e003      	b.n	800677c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006778:	2300      	movs	r3, #0
 800677a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006784:	e043      	b.n	800680e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	2200      	movs	r2, #0
 800678e:	2120      	movs	r1, #32
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 f84c 	bl	800682e <UART_WaitOnFlagUntilTimeout>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e042      	b.n	8006826 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10c      	bne.n	80067c0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	3302      	adds	r3, #2
 80067bc:	61bb      	str	r3, [r7, #24]
 80067be:	e01f      	b.n	8006800 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c8:	d007      	beq.n	80067da <HAL_UART_Receive+0xf0>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10a      	bne.n	80067e8 <HAL_UART_Receive+0xfe>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d106      	bne.n	80067e8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	e008      	b.n	80067fa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	3301      	adds	r3, #1
 80067fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006804:	b29b      	uxth	r3, r3
 8006806:	3b01      	subs	r3, #1
 8006808:	b29a      	uxth	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006812:	b29b      	uxth	r3, r3
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1b6      	bne.n	8006786 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2220      	movs	r2, #32
 800681c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	e000      	b.n	8006826 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006824:	2302      	movs	r3, #2
  }
}
 8006826:	4618      	mov	r0, r3
 8006828:	3720      	adds	r7, #32
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	60f8      	str	r0, [r7, #12]
 8006836:	60b9      	str	r1, [r7, #8]
 8006838:	603b      	str	r3, [r7, #0]
 800683a:	4613      	mov	r3, r2
 800683c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800683e:	e02c      	b.n	800689a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006846:	d028      	beq.n	800689a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d007      	beq.n	800685e <UART_WaitOnFlagUntilTimeout+0x30>
 800684e:	f7fd fbcf 	bl	8003ff0 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	429a      	cmp	r2, r3
 800685c:	d21d      	bcs.n	800689a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800686c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695a      	ldr	r2, [r3, #20]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0201 	bic.w	r2, r2, #1
 800687c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2220      	movs	r2, #32
 8006882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2220      	movs	r2, #32
 800688a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e00f      	b.n	80068ba <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	4013      	ands	r3, r2
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	bf0c      	ite	eq
 80068aa:	2301      	moveq	r3, #1
 80068ac:	2300      	movne	r3, #0
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	79fb      	ldrb	r3, [r7, #7]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d0c3      	beq.n	8006840 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68da      	ldr	r2, [r3, #12]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	689a      	ldr	r2, [r3, #8]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	431a      	orrs	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006904:	f023 030c 	bic.w	r3, r3, #12
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6812      	ldr	r2, [r2, #0]
 800690c:	68b9      	ldr	r1, [r7, #8]
 800690e:	430b      	orrs	r3, r1
 8006910:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	699a      	ldr	r2, [r3, #24]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a55      	ldr	r2, [pc, #340]	; (8006a84 <UART_SetConfig+0x1c0>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d103      	bne.n	800693a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006932:	f7fe fd2b 	bl	800538c <HAL_RCC_GetPCLK2Freq>
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	e002      	b.n	8006940 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800693a:	f7fe fd13 	bl	8005364 <HAL_RCC_GetPCLK1Freq>
 800693e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006948:	d14c      	bne.n	80069e4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	4613      	mov	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	009a      	lsls	r2, r3, #2
 8006954:	441a      	add	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006960:	4a49      	ldr	r2, [pc, #292]	; (8006a88 <UART_SetConfig+0x1c4>)
 8006962:	fba2 2303 	umull	r2, r3, r2, r3
 8006966:	095b      	lsrs	r3, r3, #5
 8006968:	0119      	lsls	r1, r3, #4
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	4613      	mov	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	009a      	lsls	r2, r3, #2
 8006974:	441a      	add	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	005b      	lsls	r3, r3, #1
 800697c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006980:	4b41      	ldr	r3, [pc, #260]	; (8006a88 <UART_SetConfig+0x1c4>)
 8006982:	fba3 0302 	umull	r0, r3, r3, r2
 8006986:	095b      	lsrs	r3, r3, #5
 8006988:	2064      	movs	r0, #100	; 0x64
 800698a:	fb00 f303 	mul.w	r3, r0, r3
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	3332      	adds	r3, #50	; 0x32
 8006994:	4a3c      	ldr	r2, [pc, #240]	; (8006a88 <UART_SetConfig+0x1c4>)
 8006996:	fba2 2303 	umull	r2, r3, r2, r3
 800699a:	095b      	lsrs	r3, r3, #5
 800699c:	005b      	lsls	r3, r3, #1
 800699e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069a2:	4419      	add	r1, r3
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	4613      	mov	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	009a      	lsls	r2, r3, #2
 80069ae:	441a      	add	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80069ba:	4b33      	ldr	r3, [pc, #204]	; (8006a88 <UART_SetConfig+0x1c4>)
 80069bc:	fba3 0302 	umull	r0, r3, r3, r2
 80069c0:	095b      	lsrs	r3, r3, #5
 80069c2:	2064      	movs	r0, #100	; 0x64
 80069c4:	fb00 f303 	mul.w	r3, r0, r3
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	00db      	lsls	r3, r3, #3
 80069cc:	3332      	adds	r3, #50	; 0x32
 80069ce:	4a2e      	ldr	r2, [pc, #184]	; (8006a88 <UART_SetConfig+0x1c4>)
 80069d0:	fba2 2303 	umull	r2, r3, r2, r3
 80069d4:	095b      	lsrs	r3, r3, #5
 80069d6:	f003 0207 	and.w	r2, r3, #7
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	440a      	add	r2, r1
 80069e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069e2:	e04a      	b.n	8006a7a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	4613      	mov	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	009a      	lsls	r2, r3, #2
 80069ee:	441a      	add	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fa:	4a23      	ldr	r2, [pc, #140]	; (8006a88 <UART_SetConfig+0x1c4>)
 80069fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006a00:	095b      	lsrs	r3, r3, #5
 8006a02:	0119      	lsls	r1, r3, #4
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009a      	lsls	r2, r3, #2
 8006a0e:	441a      	add	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a1a:	4b1b      	ldr	r3, [pc, #108]	; (8006a88 <UART_SetConfig+0x1c4>)
 8006a1c:	fba3 0302 	umull	r0, r3, r3, r2
 8006a20:	095b      	lsrs	r3, r3, #5
 8006a22:	2064      	movs	r0, #100	; 0x64
 8006a24:	fb00 f303 	mul.w	r3, r0, r3
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	011b      	lsls	r3, r3, #4
 8006a2c:	3332      	adds	r3, #50	; 0x32
 8006a2e:	4a16      	ldr	r2, [pc, #88]	; (8006a88 <UART_SetConfig+0x1c4>)
 8006a30:	fba2 2303 	umull	r2, r3, r2, r3
 8006a34:	095b      	lsrs	r3, r3, #5
 8006a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a3a:	4419      	add	r1, r3
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	009a      	lsls	r2, r3, #2
 8006a46:	441a      	add	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a52:	4b0d      	ldr	r3, [pc, #52]	; (8006a88 <UART_SetConfig+0x1c4>)
 8006a54:	fba3 0302 	umull	r0, r3, r3, r2
 8006a58:	095b      	lsrs	r3, r3, #5
 8006a5a:	2064      	movs	r0, #100	; 0x64
 8006a5c:	fb00 f303 	mul.w	r3, r0, r3
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	3332      	adds	r3, #50	; 0x32
 8006a66:	4a08      	ldr	r2, [pc, #32]	; (8006a88 <UART_SetConfig+0x1c4>)
 8006a68:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6c:	095b      	lsrs	r3, r3, #5
 8006a6e:	f003 020f 	and.w	r2, r3, #15
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	440a      	add	r2, r1
 8006a78:	609a      	str	r2, [r3, #8]
}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	40013800 	.word	0x40013800
 8006a88:	51eb851f 	.word	0x51eb851f

08006a8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006a90:	4904      	ldr	r1, [pc, #16]	; (8006aa4 <MX_FATFS_Init+0x18>)
 8006a92:	4805      	ldr	r0, [pc, #20]	; (8006aa8 <MX_FATFS_Init+0x1c>)
 8006a94:	f000 fd8a 	bl	80075ac <FATFS_LinkDriver>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	4b03      	ldr	r3, [pc, #12]	; (8006aac <MX_FATFS_Init+0x20>)
 8006a9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006aa0:	bf00      	nop
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	20001b90 	.word	0x20001b90
 8006aa8:	2000009c 	.word	0x2000009c
 8006aac:	20001b94 	.word	0x20001b94

08006ab0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8006aba:	79fb      	ldrb	r3, [r7, #7]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f000 f9d9 	bl	8006e74 <USER_SPI_initialize>
 8006ac2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8006ad6:	79fb      	ldrb	r3, [r7, #7]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 fab7 	bl	800704c <USER_SPI_status>
 8006ade:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60b9      	str	r1, [r7, #8]
 8006af0:	607a      	str	r2, [r7, #4]
 8006af2:	603b      	str	r3, [r7, #0]
 8006af4:	4603      	mov	r3, r0
 8006af6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8006af8:	7bf8      	ldrb	r0, [r7, #15]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	f000 fab8 	bl	8007074 <USER_SPI_read>
 8006b04:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b084      	sub	sp, #16
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	603b      	str	r3, [r7, #0]
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8006b1e:	7bf8      	ldrb	r0, [r7, #15]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	68b9      	ldr	r1, [r7, #8]
 8006b26:	f000 fb0b 	bl	8007140 <USER_SPI_write>
 8006b2a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	603a      	str	r2, [r7, #0]
 8006b3e:	71fb      	strb	r3, [r7, #7]
 8006b40:	460b      	mov	r3, r1
 8006b42:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8006b44:	79b9      	ldrb	r1, [r7, #6]
 8006b46:	79fb      	ldrb	r3, [r7, #7]
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fb74 	bl	8007238 <USER_SPI_ioctl>
 8006b50:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006b64:	f7fd fa44 	bl	8003ff0 <HAL_GetTick>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	4a04      	ldr	r2, [pc, #16]	; (8006b7c <SPI_Timer_On+0x20>)
 8006b6c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006b6e:	4a04      	ldr	r2, [pc, #16]	; (8006b80 <SPI_Timer_On+0x24>)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6013      	str	r3, [r2, #0]
}
 8006b74:	bf00      	nop
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	20001ff8 	.word	0x20001ff8
 8006b80:	20001ffc 	.word	0x20001ffc

08006b84 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006b84:	b580      	push	{r7, lr}
 8006b86:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006b88:	f7fd fa32 	bl	8003ff0 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	4b06      	ldr	r3, [pc, #24]	; (8006ba8 <SPI_Timer_Status+0x24>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	1ad2      	subs	r2, r2, r3
 8006b94:	4b05      	ldr	r3, [pc, #20]	; (8006bac <SPI_Timer_Status+0x28>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	bf34      	ite	cc
 8006b9c:	2301      	movcc	r3, #1
 8006b9e:	2300      	movcs	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20001ff8 	.word	0x20001ff8
 8006bac:	20001ffc 	.word	0x20001ffc

08006bb0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af02      	add	r7, sp, #8
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006bba:	f107 020f 	add.w	r2, r7, #15
 8006bbe:	1df9      	adds	r1, r7, #7
 8006bc0:	2332      	movs	r3, #50	; 0x32
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	4804      	ldr	r0, [pc, #16]	; (8006bd8 <xchg_spi+0x28>)
 8006bc8:	f7fe fe19 	bl	80057fe <HAL_SPI_TransmitReceive>
    return rxDat;
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	200017f4 	.word	0x200017f4

08006bdc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006bdc:	b590      	push	{r4, r7, lr}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006be6:	2300      	movs	r3, #0
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	e00a      	b.n	8006c02 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	18d4      	adds	r4, r2, r3
 8006bf2:	20ff      	movs	r0, #255	; 0xff
 8006bf4:	f7ff ffdc 	bl	8006bb0 <xchg_spi>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	60fb      	str	r3, [r7, #12]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d3f0      	bcc.n	8006bec <rcvr_spi_multi+0x10>
	}
}
 8006c0a:	bf00      	nop
 8006c0c:	bf00      	nop
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd90      	pop	{r4, r7, pc}

08006c14 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60fb      	str	r3, [r7, #12]
 8006c22:	e009      	b.n	8006c38 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4413      	add	r3, r2
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7ff ffbf 	bl	8006bb0 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	3301      	adds	r3, #1
 8006c36:	60fb      	str	r3, [r7, #12]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d3f1      	bcc.n	8006c24 <xmit_spi_multi+0x10>
	}
}
 8006c40:	bf00      	nop
 8006c42:	bf00      	nop
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b086      	sub	sp, #24
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006c52:	f7fd f9cd 	bl	8003ff0 <HAL_GetTick>
 8006c56:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006c5c:	20ff      	movs	r0, #255	; 0xff
 8006c5e:	f7ff ffa7 	bl	8006bb0 <xchg_spi>
 8006c62:	4603      	mov	r3, r0
 8006c64:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	2bff      	cmp	r3, #255	; 0xff
 8006c6a:	d007      	beq.n	8006c7c <wait_ready+0x32>
 8006c6c:	f7fd f9c0 	bl	8003ff0 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d8ef      	bhi.n	8006c5c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
 8006c7e:	2bff      	cmp	r3, #255	; 0xff
 8006c80:	bf0c      	ite	eq
 8006c82:	2301      	moveq	r3, #1
 8006c84:	2300      	movne	r3, #0
 8006c86:	b2db      	uxtb	r3, r3
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3718      	adds	r7, #24
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006c94:	2201      	movs	r2, #1
 8006c96:	2101      	movs	r1, #1
 8006c98:	4803      	ldr	r0, [pc, #12]	; (8006ca8 <despiselect+0x18>)
 8006c9a:	f7fd fe1e 	bl	80048da <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006c9e:	20ff      	movs	r0, #255	; 0xff
 8006ca0:	f7ff ff86 	bl	8006bb0 <xchg_spi>

}
 8006ca4:	bf00      	nop
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	40020c00 	.word	0x40020c00

08006cac <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	4809      	ldr	r0, [pc, #36]	; (8006cdc <spiselect+0x30>)
 8006cb6:	f7fd fe10 	bl	80048da <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006cba:	20ff      	movs	r0, #255	; 0xff
 8006cbc:	f7ff ff78 	bl	8006bb0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006cc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006cc4:	f7ff ffc1 	bl	8006c4a <wait_ready>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <spiselect+0x26>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e002      	b.n	8006cd8 <spiselect+0x2c>

	despiselect();
 8006cd2:	f7ff ffdd 	bl	8006c90 <despiselect>
	return 0;	/* Timeout */
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	40020c00 	.word	0x40020c00

08006ce0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006cea:	20c8      	movs	r0, #200	; 0xc8
 8006cec:	f7ff ff36 	bl	8006b5c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006cf0:	20ff      	movs	r0, #255	; 0xff
 8006cf2:	f7ff ff5d 	bl	8006bb0 <xchg_spi>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
 8006cfc:	2bff      	cmp	r3, #255	; 0xff
 8006cfe:	d104      	bne.n	8006d0a <rcvr_datablock+0x2a>
 8006d00:	f7ff ff40 	bl	8006b84 <SPI_Timer_Status>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1f2      	bne.n	8006cf0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
 8006d0c:	2bfe      	cmp	r3, #254	; 0xfe
 8006d0e:	d001      	beq.n	8006d14 <rcvr_datablock+0x34>
 8006d10:	2300      	movs	r3, #0
 8006d12:	e00a      	b.n	8006d2a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7ff ff60 	bl	8006bdc <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006d1c:	20ff      	movs	r0, #255	; 0xff
 8006d1e:	f7ff ff47 	bl	8006bb0 <xchg_spi>
 8006d22:	20ff      	movs	r0, #255	; 0xff
 8006d24:	f7ff ff44 	bl	8006bb0 <xchg_spi>

	return 1;						/* Function succeeded */
 8006d28:	2301      	movs	r3, #1
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b084      	sub	sp, #16
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006d3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d42:	f7ff ff82 	bl	8006c4a <wait_ready>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <xmit_datablock+0x1e>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	e01e      	b.n	8006d8e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006d50:	78fb      	ldrb	r3, [r7, #3]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff ff2c 	bl	8006bb0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006d58:	78fb      	ldrb	r3, [r7, #3]
 8006d5a:	2bfd      	cmp	r3, #253	; 0xfd
 8006d5c:	d016      	beq.n	8006d8c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006d5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7ff ff56 	bl	8006c14 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006d68:	20ff      	movs	r0, #255	; 0xff
 8006d6a:	f7ff ff21 	bl	8006bb0 <xchg_spi>
 8006d6e:	20ff      	movs	r0, #255	; 0xff
 8006d70:	f7ff ff1e 	bl	8006bb0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006d74:	20ff      	movs	r0, #255	; 0xff
 8006d76:	f7ff ff1b 	bl	8006bb0 <xchg_spi>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	f003 031f 	and.w	r3, r3, #31
 8006d84:	2b05      	cmp	r3, #5
 8006d86:	d001      	beq.n	8006d8c <xmit_datablock+0x5a>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	e000      	b.n	8006d8e <xmit_datablock+0x5c>
	}
	return 1;
 8006d8c:	2301      	movs	r3, #1
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b084      	sub	sp, #16
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	6039      	str	r1, [r7, #0]
 8006da0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	da0e      	bge.n	8006dc8 <send_cmd+0x32>
		cmd &= 0x7F;
 8006daa:	79fb      	ldrb	r3, [r7, #7]
 8006dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006db0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006db2:	2100      	movs	r1, #0
 8006db4:	2037      	movs	r0, #55	; 0x37
 8006db6:	f7ff ffee 	bl	8006d96 <send_cmd>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006dbe:	7bbb      	ldrb	r3, [r7, #14]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d901      	bls.n	8006dc8 <send_cmd+0x32>
 8006dc4:	7bbb      	ldrb	r3, [r7, #14]
 8006dc6:	e051      	b.n	8006e6c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006dc8:	79fb      	ldrb	r3, [r7, #7]
 8006dca:	2b0c      	cmp	r3, #12
 8006dcc:	d008      	beq.n	8006de0 <send_cmd+0x4a>
		despiselect();
 8006dce:	f7ff ff5f 	bl	8006c90 <despiselect>
		if (!spiselect()) return 0xFF;
 8006dd2:	f7ff ff6b 	bl	8006cac <spiselect>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <send_cmd+0x4a>
 8006ddc:	23ff      	movs	r3, #255	; 0xff
 8006dde:	e045      	b.n	8006e6c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006de0:	79fb      	ldrb	r3, [r7, #7]
 8006de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7ff fee1 	bl	8006bb0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	0e1b      	lsrs	r3, r3, #24
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7ff fedb 	bl	8006bb0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	0c1b      	lsrs	r3, r3, #16
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7ff fed5 	bl	8006bb0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	0a1b      	lsrs	r3, r3, #8
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7ff fecf 	bl	8006bb0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7ff feca 	bl	8006bb0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006e20:	79fb      	ldrb	r3, [r7, #7]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <send_cmd+0x94>
 8006e26:	2395      	movs	r3, #149	; 0x95
 8006e28:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006e2a:	79fb      	ldrb	r3, [r7, #7]
 8006e2c:	2b08      	cmp	r3, #8
 8006e2e:	d101      	bne.n	8006e34 <send_cmd+0x9e>
 8006e30:	2387      	movs	r3, #135	; 0x87
 8006e32:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff feba 	bl	8006bb0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006e3c:	79fb      	ldrb	r3, [r7, #7]
 8006e3e:	2b0c      	cmp	r3, #12
 8006e40:	d102      	bne.n	8006e48 <send_cmd+0xb2>
 8006e42:	20ff      	movs	r0, #255	; 0xff
 8006e44:	f7ff feb4 	bl	8006bb0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006e48:	230a      	movs	r3, #10
 8006e4a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006e4c:	20ff      	movs	r0, #255	; 0xff
 8006e4e:	f7ff feaf 	bl	8006bb0 <xchg_spi>
 8006e52:	4603      	mov	r3, r0
 8006e54:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006e56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	da05      	bge.n	8006e6a <send_cmd+0xd4>
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	73fb      	strb	r3, [r7, #15]
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1f0      	bne.n	8006e4c <send_cmd+0xb6>

	return res;							/* Return received response */
 8006e6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006e74:	b590      	push	{r4, r7, lr}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006e7e:	79fb      	ldrb	r3, [r7, #7]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <USER_SPI_initialize+0x14>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e0d6      	b.n	8007036 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006e88:	4b6d      	ldr	r3, [pc, #436]	; (8007040 <USER_SPI_initialize+0x1cc>)
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <USER_SPI_initialize+0x2a>
 8006e96:	4b6a      	ldr	r3, [pc, #424]	; (8007040 <USER_SPI_initialize+0x1cc>)
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	e0cb      	b.n	8007036 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8006e9e:	4b69      	ldr	r3, [pc, #420]	; (8007044 <USER_SPI_initialize+0x1d0>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006ea8:	4b66      	ldr	r3, [pc, #408]	; (8007044 <USER_SPI_initialize+0x1d0>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8006eb0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006eb2:	230a      	movs	r3, #10
 8006eb4:	73fb      	strb	r3, [r7, #15]
 8006eb6:	e005      	b.n	8006ec4 <USER_SPI_initialize+0x50>
 8006eb8:	20ff      	movs	r0, #255	; 0xff
 8006eba:	f7ff fe79 	bl	8006bb0 <xchg_spi>
 8006ebe:	7bfb      	ldrb	r3, [r7, #15]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	73fb      	strb	r3, [r7, #15]
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1f6      	bne.n	8006eb8 <USER_SPI_initialize+0x44>

	ty = 0;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006ece:	2100      	movs	r1, #0
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	f7ff ff60 	bl	8006d96 <send_cmd>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	f040 808b 	bne.w	8006ff4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006ede:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ee2:	f7ff fe3b 	bl	8006b5c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006ee6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006eea:	2008      	movs	r0, #8
 8006eec:	f7ff ff53 	bl	8006d96 <send_cmd>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d151      	bne.n	8006f9a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	73fb      	strb	r3, [r7, #15]
 8006efa:	e00d      	b.n	8006f18 <USER_SPI_initialize+0xa4>
 8006efc:	7bfc      	ldrb	r4, [r7, #15]
 8006efe:	20ff      	movs	r0, #255	; 0xff
 8006f00:	f7ff fe56 	bl	8006bb0 <xchg_spi>
 8006f04:	4603      	mov	r3, r0
 8006f06:	461a      	mov	r2, r3
 8006f08:	f107 0310 	add.w	r3, r7, #16
 8006f0c:	4423      	add	r3, r4
 8006f0e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
 8006f14:	3301      	adds	r3, #1
 8006f16:	73fb      	strb	r3, [r7, #15]
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d9ee      	bls.n	8006efc <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006f1e:	7abb      	ldrb	r3, [r7, #10]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d167      	bne.n	8006ff4 <USER_SPI_initialize+0x180>
 8006f24:	7afb      	ldrb	r3, [r7, #11]
 8006f26:	2baa      	cmp	r3, #170	; 0xaa
 8006f28:	d164      	bne.n	8006ff4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006f2a:	bf00      	nop
 8006f2c:	f7ff fe2a 	bl	8006b84 <SPI_Timer_Status>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d007      	beq.n	8006f46 <USER_SPI_initialize+0xd2>
 8006f36:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006f3a:	20a9      	movs	r0, #169	; 0xa9
 8006f3c:	f7ff ff2b 	bl	8006d96 <send_cmd>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1f2      	bne.n	8006f2c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006f46:	f7ff fe1d 	bl	8006b84 <SPI_Timer_Status>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d051      	beq.n	8006ff4 <USER_SPI_initialize+0x180>
 8006f50:	2100      	movs	r1, #0
 8006f52:	203a      	movs	r0, #58	; 0x3a
 8006f54:	f7ff ff1f 	bl	8006d96 <send_cmd>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d14a      	bne.n	8006ff4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006f5e:	2300      	movs	r3, #0
 8006f60:	73fb      	strb	r3, [r7, #15]
 8006f62:	e00d      	b.n	8006f80 <USER_SPI_initialize+0x10c>
 8006f64:	7bfc      	ldrb	r4, [r7, #15]
 8006f66:	20ff      	movs	r0, #255	; 0xff
 8006f68:	f7ff fe22 	bl	8006bb0 <xchg_spi>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f107 0310 	add.w	r3, r7, #16
 8006f74:	4423      	add	r3, r4
 8006f76:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	73fb      	strb	r3, [r7, #15]
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d9ee      	bls.n	8006f64 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006f86:	7a3b      	ldrb	r3, [r7, #8]
 8006f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d001      	beq.n	8006f94 <USER_SPI_initialize+0x120>
 8006f90:	230c      	movs	r3, #12
 8006f92:	e000      	b.n	8006f96 <USER_SPI_initialize+0x122>
 8006f94:	2304      	movs	r3, #4
 8006f96:	737b      	strb	r3, [r7, #13]
 8006f98:	e02c      	b.n	8006ff4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	20a9      	movs	r0, #169	; 0xa9
 8006f9e:	f7ff fefa 	bl	8006d96 <send_cmd>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d804      	bhi.n	8006fb2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006fa8:	2302      	movs	r3, #2
 8006faa:	737b      	strb	r3, [r7, #13]
 8006fac:	23a9      	movs	r3, #169	; 0xa9
 8006fae:	73bb      	strb	r3, [r7, #14]
 8006fb0:	e003      	b.n	8006fba <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	737b      	strb	r3, [r7, #13]
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006fba:	bf00      	nop
 8006fbc:	f7ff fde2 	bl	8006b84 <SPI_Timer_Status>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d007      	beq.n	8006fd6 <USER_SPI_initialize+0x162>
 8006fc6:	7bbb      	ldrb	r3, [r7, #14]
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7ff fee3 	bl	8006d96 <send_cmd>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1f2      	bne.n	8006fbc <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006fd6:	f7ff fdd5 	bl	8006b84 <SPI_Timer_Status>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d007      	beq.n	8006ff0 <USER_SPI_initialize+0x17c>
 8006fe0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006fe4:	2010      	movs	r0, #16
 8006fe6:	f7ff fed6 	bl	8006d96 <send_cmd>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d001      	beq.n	8006ff4 <USER_SPI_initialize+0x180>
				ty = 0;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006ff4:	4a14      	ldr	r2, [pc, #80]	; (8007048 <USER_SPI_initialize+0x1d4>)
 8006ff6:	7b7b      	ldrb	r3, [r7, #13]
 8006ff8:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006ffa:	f7ff fe49 	bl	8006c90 <despiselect>

	if (ty) {			/* OK */
 8006ffe:	7b7b      	ldrb	r3, [r7, #13]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d012      	beq.n	800702a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8007004:	4b0f      	ldr	r3, [pc, #60]	; (8007044 <USER_SPI_initialize+0x1d0>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800700e:	4b0d      	ldr	r3, [pc, #52]	; (8007044 <USER_SPI_initialize+0x1d0>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0210 	orr.w	r2, r2, #16
 8007016:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007018:	4b09      	ldr	r3, [pc, #36]	; (8007040 <USER_SPI_initialize+0x1cc>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	b2db      	uxtb	r3, r3
 800701e:	f023 0301 	bic.w	r3, r3, #1
 8007022:	b2da      	uxtb	r2, r3
 8007024:	4b06      	ldr	r3, [pc, #24]	; (8007040 <USER_SPI_initialize+0x1cc>)
 8007026:	701a      	strb	r2, [r3, #0]
 8007028:	e002      	b.n	8007030 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800702a:	4b05      	ldr	r3, [pc, #20]	; (8007040 <USER_SPI_initialize+0x1cc>)
 800702c:	2201      	movs	r2, #1
 800702e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007030:	4b03      	ldr	r3, [pc, #12]	; (8007040 <USER_SPI_initialize+0x1cc>)
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	b2db      	uxtb	r3, r3
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	bd90      	pop	{r4, r7, pc}
 800703e:	bf00      	nop
 8007040:	200000b0 	.word	0x200000b0
 8007044:	200017f4 	.word	0x200017f4
 8007048:	200016cc 	.word	0x200016cc

0800704c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	4603      	mov	r3, r0
 8007054:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8007056:	79fb      	ldrb	r3, [r7, #7]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <USER_SPI_status+0x14>
 800705c:	2301      	movs	r3, #1
 800705e:	e002      	b.n	8007066 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007060:	4b03      	ldr	r3, [pc, #12]	; (8007070 <USER_SPI_status+0x24>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	b2db      	uxtb	r3, r3
}
 8007066:	4618      	mov	r0, r3
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	bc80      	pop	{r7}
 800706e:	4770      	bx	lr
 8007070:	200000b0 	.word	0x200000b0

08007074 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	60b9      	str	r1, [r7, #8]
 800707c:	607a      	str	r2, [r7, #4]
 800707e:	603b      	str	r3, [r7, #0]
 8007080:	4603      	mov	r3, r0
 8007082:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007084:	7bfb      	ldrb	r3, [r7, #15]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d102      	bne.n	8007090 <USER_SPI_read+0x1c>
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d101      	bne.n	8007094 <USER_SPI_read+0x20>
 8007090:	2304      	movs	r3, #4
 8007092:	e04d      	b.n	8007130 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007094:	4b28      	ldr	r3, [pc, #160]	; (8007138 <USER_SPI_read+0xc4>)
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	b2db      	uxtb	r3, r3
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <USER_SPI_read+0x32>
 80070a2:	2303      	movs	r3, #3
 80070a4:	e044      	b.n	8007130 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80070a6:	4b25      	ldr	r3, [pc, #148]	; (800713c <USER_SPI_read+0xc8>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	f003 0308 	and.w	r3, r3, #8
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d102      	bne.n	80070b8 <USER_SPI_read+0x44>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	025b      	lsls	r3, r3, #9
 80070b6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d111      	bne.n	80070e2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80070be:	6879      	ldr	r1, [r7, #4]
 80070c0:	2011      	movs	r0, #17
 80070c2:	f7ff fe68 	bl	8006d96 <send_cmd>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d129      	bne.n	8007120 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80070cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80070d0:	68b8      	ldr	r0, [r7, #8]
 80070d2:	f7ff fe05 	bl	8006ce0 <rcvr_datablock>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d021      	beq.n	8007120 <USER_SPI_read+0xac>
			count = 0;
 80070dc:	2300      	movs	r3, #0
 80070de:	603b      	str	r3, [r7, #0]
 80070e0:	e01e      	b.n	8007120 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80070e2:	6879      	ldr	r1, [r7, #4]
 80070e4:	2012      	movs	r0, #18
 80070e6:	f7ff fe56 	bl	8006d96 <send_cmd>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d117      	bne.n	8007120 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80070f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80070f4:	68b8      	ldr	r0, [r7, #8]
 80070f6:	f7ff fdf3 	bl	8006ce0 <rcvr_datablock>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00a      	beq.n	8007116 <USER_SPI_read+0xa2>
				buff += 512;
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007106:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	3b01      	subs	r3, #1
 800710c:	603b      	str	r3, [r7, #0]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1ed      	bne.n	80070f0 <USER_SPI_read+0x7c>
 8007114:	e000      	b.n	8007118 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007116:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007118:	2100      	movs	r1, #0
 800711a:	200c      	movs	r0, #12
 800711c:	f7ff fe3b 	bl	8006d96 <send_cmd>
		}
	}
	despiselect();
 8007120:	f7ff fdb6 	bl	8006c90 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	bf14      	ite	ne
 800712a:	2301      	movne	r3, #1
 800712c:	2300      	moveq	r3, #0
 800712e:	b2db      	uxtb	r3, r3
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	200000b0 	.word	0x200000b0
 800713c:	200016cc 	.word	0x200016cc

08007140 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	607a      	str	r2, [r7, #4]
 800714a:	603b      	str	r3, [r7, #0]
 800714c:	4603      	mov	r3, r0
 800714e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007150:	7bfb      	ldrb	r3, [r7, #15]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d102      	bne.n	800715c <USER_SPI_write+0x1c>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <USER_SPI_write+0x20>
 800715c:	2304      	movs	r3, #4
 800715e:	e063      	b.n	8007228 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007160:	4b33      	ldr	r3, [pc, #204]	; (8007230 <USER_SPI_write+0xf0>)
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <USER_SPI_write+0x32>
 800716e:	2303      	movs	r3, #3
 8007170:	e05a      	b.n	8007228 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007172:	4b2f      	ldr	r3, [pc, #188]	; (8007230 <USER_SPI_write+0xf0>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	b2db      	uxtb	r3, r3
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <USER_SPI_write+0x44>
 8007180:	2302      	movs	r3, #2
 8007182:	e051      	b.n	8007228 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007184:	4b2b      	ldr	r3, [pc, #172]	; (8007234 <USER_SPI_write+0xf4>)
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	f003 0308 	and.w	r3, r3, #8
 800718c:	2b00      	cmp	r3, #0
 800718e:	d102      	bne.n	8007196 <USER_SPI_write+0x56>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	025b      	lsls	r3, r3, #9
 8007194:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d110      	bne.n	80071be <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800719c:	6879      	ldr	r1, [r7, #4]
 800719e:	2018      	movs	r0, #24
 80071a0:	f7ff fdf9 	bl	8006d96 <send_cmd>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d136      	bne.n	8007218 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80071aa:	21fe      	movs	r1, #254	; 0xfe
 80071ac:	68b8      	ldr	r0, [r7, #8]
 80071ae:	f7ff fdc0 	bl	8006d32 <xmit_datablock>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d02f      	beq.n	8007218 <USER_SPI_write+0xd8>
			count = 0;
 80071b8:	2300      	movs	r3, #0
 80071ba:	603b      	str	r3, [r7, #0]
 80071bc:	e02c      	b.n	8007218 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80071be:	4b1d      	ldr	r3, [pc, #116]	; (8007234 <USER_SPI_write+0xf4>)
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	f003 0306 	and.w	r3, r3, #6
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <USER_SPI_write+0x92>
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	2097      	movs	r0, #151	; 0x97
 80071ce:	f7ff fde2 	bl	8006d96 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	2019      	movs	r0, #25
 80071d6:	f7ff fdde 	bl	8006d96 <send_cmd>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d11b      	bne.n	8007218 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80071e0:	21fc      	movs	r1, #252	; 0xfc
 80071e2:	68b8      	ldr	r0, [r7, #8]
 80071e4:	f7ff fda5 	bl	8006d32 <xmit_datablock>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00a      	beq.n	8007204 <USER_SPI_write+0xc4>
				buff += 512;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80071f4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	3b01      	subs	r3, #1
 80071fa:	603b      	str	r3, [r7, #0]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1ee      	bne.n	80071e0 <USER_SPI_write+0xa0>
 8007202:	e000      	b.n	8007206 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007204:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007206:	21fd      	movs	r1, #253	; 0xfd
 8007208:	2000      	movs	r0, #0
 800720a:	f7ff fd92 	bl	8006d32 <xmit_datablock>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <USER_SPI_write+0xd8>
 8007214:	2301      	movs	r3, #1
 8007216:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007218:	f7ff fd3a 	bl	8006c90 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	bf14      	ite	ne
 8007222:	2301      	movne	r3, #1
 8007224:	2300      	moveq	r3, #0
 8007226:	b2db      	uxtb	r3, r3
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	200000b0 	.word	0x200000b0
 8007234:	200016cc 	.word	0x200016cc

08007238 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b08c      	sub	sp, #48	; 0x30
 800723c:	af00      	add	r7, sp, #0
 800723e:	4603      	mov	r3, r0
 8007240:	603a      	str	r2, [r7, #0]
 8007242:	71fb      	strb	r3, [r7, #7]
 8007244:	460b      	mov	r3, r1
 8007246:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007248:	79fb      	ldrb	r3, [r7, #7]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <USER_SPI_ioctl+0x1a>
 800724e:	2304      	movs	r3, #4
 8007250:	e15a      	b.n	8007508 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007252:	4baf      	ldr	r3, [pc, #700]	; (8007510 <USER_SPI_ioctl+0x2d8>)
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	b2db      	uxtb	r3, r3
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	2b00      	cmp	r3, #0
 800725e:	d001      	beq.n	8007264 <USER_SPI_ioctl+0x2c>
 8007260:	2303      	movs	r3, #3
 8007262:	e151      	b.n	8007508 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800726a:	79bb      	ldrb	r3, [r7, #6]
 800726c:	2b04      	cmp	r3, #4
 800726e:	f200 8136 	bhi.w	80074de <USER_SPI_ioctl+0x2a6>
 8007272:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <USER_SPI_ioctl+0x40>)
 8007274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007278:	0800728d 	.word	0x0800728d
 800727c:	080072a1 	.word	0x080072a1
 8007280:	080074df 	.word	0x080074df
 8007284:	0800734d 	.word	0x0800734d
 8007288:	08007443 	.word	0x08007443
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800728c:	f7ff fd0e 	bl	8006cac <spiselect>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 8127 	beq.w	80074e6 <USER_SPI_ioctl+0x2ae>
 8007298:	2300      	movs	r3, #0
 800729a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800729e:	e122      	b.n	80074e6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80072a0:	2100      	movs	r1, #0
 80072a2:	2009      	movs	r0, #9
 80072a4:	f7ff fd77 	bl	8006d96 <send_cmd>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f040 811d 	bne.w	80074ea <USER_SPI_ioctl+0x2b2>
 80072b0:	f107 030c 	add.w	r3, r7, #12
 80072b4:	2110      	movs	r1, #16
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7ff fd12 	bl	8006ce0 <rcvr_datablock>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 8113 	beq.w	80074ea <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80072c4:	7b3b      	ldrb	r3, [r7, #12]
 80072c6:	099b      	lsrs	r3, r3, #6
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d111      	bne.n	80072f2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80072ce:	7d7b      	ldrb	r3, [r7, #21]
 80072d0:	461a      	mov	r2, r3
 80072d2:	7d3b      	ldrb	r3, [r7, #20]
 80072d4:	021b      	lsls	r3, r3, #8
 80072d6:	4413      	add	r3, r2
 80072d8:	461a      	mov	r2, r3
 80072da:	7cfb      	ldrb	r3, [r7, #19]
 80072dc:	041b      	lsls	r3, r3, #16
 80072de:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80072e2:	4413      	add	r3, r2
 80072e4:	3301      	adds	r3, #1
 80072e6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	029a      	lsls	r2, r3, #10
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	601a      	str	r2, [r3, #0]
 80072f0:	e028      	b.n	8007344 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80072f2:	7c7b      	ldrb	r3, [r7, #17]
 80072f4:	f003 030f 	and.w	r3, r3, #15
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	7dbb      	ldrb	r3, [r7, #22]
 80072fc:	09db      	lsrs	r3, r3, #7
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	4413      	add	r3, r2
 8007302:	b2da      	uxtb	r2, r3
 8007304:	7d7b      	ldrb	r3, [r7, #21]
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	b2db      	uxtb	r3, r3
 800730a:	f003 0306 	and.w	r3, r3, #6
 800730e:	b2db      	uxtb	r3, r3
 8007310:	4413      	add	r3, r2
 8007312:	b2db      	uxtb	r3, r3
 8007314:	3302      	adds	r3, #2
 8007316:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800731a:	7d3b      	ldrb	r3, [r7, #20]
 800731c:	099b      	lsrs	r3, r3, #6
 800731e:	b2db      	uxtb	r3, r3
 8007320:	461a      	mov	r2, r3
 8007322:	7cfb      	ldrb	r3, [r7, #19]
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	441a      	add	r2, r3
 8007328:	7cbb      	ldrb	r3, [r7, #18]
 800732a:	029b      	lsls	r3, r3, #10
 800732c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007330:	4413      	add	r3, r2
 8007332:	3301      	adds	r3, #1
 8007334:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007336:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800733a:	3b09      	subs	r3, #9
 800733c:	69fa      	ldr	r2, [r7, #28]
 800733e:	409a      	lsls	r2, r3
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007344:	2300      	movs	r3, #0
 8007346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800734a:	e0ce      	b.n	80074ea <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800734c:	4b71      	ldr	r3, [pc, #452]	; (8007514 <USER_SPI_ioctl+0x2dc>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	f003 0304 	and.w	r3, r3, #4
 8007354:	2b00      	cmp	r3, #0
 8007356:	d031      	beq.n	80073bc <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007358:	2100      	movs	r1, #0
 800735a:	208d      	movs	r0, #141	; 0x8d
 800735c:	f7ff fd1b 	bl	8006d96 <send_cmd>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	f040 80c3 	bne.w	80074ee <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007368:	20ff      	movs	r0, #255	; 0xff
 800736a:	f7ff fc21 	bl	8006bb0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800736e:	f107 030c 	add.w	r3, r7, #12
 8007372:	2110      	movs	r1, #16
 8007374:	4618      	mov	r0, r3
 8007376:	f7ff fcb3 	bl	8006ce0 <rcvr_datablock>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 80b6 	beq.w	80074ee <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007382:	2330      	movs	r3, #48	; 0x30
 8007384:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007388:	e007      	b.n	800739a <USER_SPI_ioctl+0x162>
 800738a:	20ff      	movs	r0, #255	; 0xff
 800738c:	f7ff fc10 	bl	8006bb0 <xchg_spi>
 8007390:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007394:	3b01      	subs	r3, #1
 8007396:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800739a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1f3      	bne.n	800738a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80073a2:	7dbb      	ldrb	r3, [r7, #22]
 80073a4:	091b      	lsrs	r3, r3, #4
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	461a      	mov	r2, r3
 80073aa:	2310      	movs	r3, #16
 80073ac:	fa03 f202 	lsl.w	r2, r3, r2
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80073ba:	e098      	b.n	80074ee <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80073bc:	2100      	movs	r1, #0
 80073be:	2009      	movs	r0, #9
 80073c0:	f7ff fce9 	bl	8006d96 <send_cmd>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f040 8091 	bne.w	80074ee <USER_SPI_ioctl+0x2b6>
 80073cc:	f107 030c 	add.w	r3, r7, #12
 80073d0:	2110      	movs	r1, #16
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7ff fc84 	bl	8006ce0 <rcvr_datablock>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f000 8087 	beq.w	80074ee <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80073e0:	4b4c      	ldr	r3, [pc, #304]	; (8007514 <USER_SPI_ioctl+0x2dc>)
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d012      	beq.n	8007412 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80073ec:	7dbb      	ldrb	r3, [r7, #22]
 80073ee:	005b      	lsls	r3, r3, #1
 80073f0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80073f4:	7dfa      	ldrb	r2, [r7, #23]
 80073f6:	09d2      	lsrs	r2, r2, #7
 80073f8:	b2d2      	uxtb	r2, r2
 80073fa:	4413      	add	r3, r2
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	7e7b      	ldrb	r3, [r7, #25]
 8007400:	099b      	lsrs	r3, r3, #6
 8007402:	b2db      	uxtb	r3, r3
 8007404:	3b01      	subs	r3, #1
 8007406:	fa02 f303 	lsl.w	r3, r2, r3
 800740a:	461a      	mov	r2, r3
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	e013      	b.n	800743a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007412:	7dbb      	ldrb	r3, [r7, #22]
 8007414:	109b      	asrs	r3, r3, #2
 8007416:	b29b      	uxth	r3, r3
 8007418:	f003 031f 	and.w	r3, r3, #31
 800741c:	3301      	adds	r3, #1
 800741e:	7dfa      	ldrb	r2, [r7, #23]
 8007420:	00d2      	lsls	r2, r2, #3
 8007422:	f002 0218 	and.w	r2, r2, #24
 8007426:	7df9      	ldrb	r1, [r7, #23]
 8007428:	0949      	lsrs	r1, r1, #5
 800742a:	b2c9      	uxtb	r1, r1
 800742c:	440a      	add	r2, r1
 800742e:	3201      	adds	r2, #1
 8007430:	fb02 f303 	mul.w	r3, r2, r3
 8007434:	461a      	mov	r2, r3
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007440:	e055      	b.n	80074ee <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007442:	4b34      	ldr	r3, [pc, #208]	; (8007514 <USER_SPI_ioctl+0x2dc>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	f003 0306 	and.w	r3, r3, #6
 800744a:	2b00      	cmp	r3, #0
 800744c:	d051      	beq.n	80074f2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800744e:	f107 020c 	add.w	r2, r7, #12
 8007452:	79fb      	ldrb	r3, [r7, #7]
 8007454:	210b      	movs	r1, #11
 8007456:	4618      	mov	r0, r3
 8007458:	f7ff feee 	bl	8007238 <USER_SPI_ioctl>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d149      	bne.n	80074f6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007462:	7b3b      	ldrb	r3, [r7, #12]
 8007464:	099b      	lsrs	r3, r3, #6
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	d104      	bne.n	8007476 <USER_SPI_ioctl+0x23e>
 800746c:	7dbb      	ldrb	r3, [r7, #22]
 800746e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007472:	2b00      	cmp	r3, #0
 8007474:	d041      	beq.n	80074fa <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	623b      	str	r3, [r7, #32]
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8007486:	4b23      	ldr	r3, [pc, #140]	; (8007514 <USER_SPI_ioctl+0x2dc>)
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	f003 0308 	and.w	r3, r3, #8
 800748e:	2b00      	cmp	r3, #0
 8007490:	d105      	bne.n	800749e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007494:	025b      	lsls	r3, r3, #9
 8007496:	62bb      	str	r3, [r7, #40]	; 0x28
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	025b      	lsls	r3, r3, #9
 800749c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800749e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074a0:	2020      	movs	r0, #32
 80074a2:	f7ff fc78 	bl	8006d96 <send_cmd>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d128      	bne.n	80074fe <USER_SPI_ioctl+0x2c6>
 80074ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074ae:	2021      	movs	r0, #33	; 0x21
 80074b0:	f7ff fc71 	bl	8006d96 <send_cmd>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d121      	bne.n	80074fe <USER_SPI_ioctl+0x2c6>
 80074ba:	2100      	movs	r1, #0
 80074bc:	2026      	movs	r0, #38	; 0x26
 80074be:	f7ff fc6a 	bl	8006d96 <send_cmd>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d11a      	bne.n	80074fe <USER_SPI_ioctl+0x2c6>
 80074c8:	f247 5030 	movw	r0, #30000	; 0x7530
 80074cc:	f7ff fbbd 	bl	8006c4a <wait_ready>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d013      	beq.n	80074fe <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80074d6:	2300      	movs	r3, #0
 80074d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80074dc:	e00f      	b.n	80074fe <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80074de:	2304      	movs	r3, #4
 80074e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80074e4:	e00c      	b.n	8007500 <USER_SPI_ioctl+0x2c8>
		break;
 80074e6:	bf00      	nop
 80074e8:	e00a      	b.n	8007500 <USER_SPI_ioctl+0x2c8>
		break;
 80074ea:	bf00      	nop
 80074ec:	e008      	b.n	8007500 <USER_SPI_ioctl+0x2c8>
		break;
 80074ee:	bf00      	nop
 80074f0:	e006      	b.n	8007500 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80074f2:	bf00      	nop
 80074f4:	e004      	b.n	8007500 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80074f6:	bf00      	nop
 80074f8:	e002      	b.n	8007500 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80074fa:	bf00      	nop
 80074fc:	e000      	b.n	8007500 <USER_SPI_ioctl+0x2c8>
		break;
 80074fe:	bf00      	nop
	}

	despiselect();
 8007500:	f7ff fbc6 	bl	8006c90 <despiselect>

	return res;
 8007504:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007508:	4618      	mov	r0, r3
 800750a:	3730      	adds	r7, #48	; 0x30
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	200000b0 	.word	0x200000b0
 8007514:	200016cc 	.word	0x200016cc

08007518 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	4613      	mov	r3, r2
 8007524:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007526:	2301      	movs	r3, #1
 8007528:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800752a:	2300      	movs	r3, #0
 800752c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800752e:	4b1e      	ldr	r3, [pc, #120]	; (80075a8 <FATFS_LinkDriverEx+0x90>)
 8007530:	7a5b      	ldrb	r3, [r3, #9]
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b00      	cmp	r3, #0
 8007536:	d131      	bne.n	800759c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007538:	4b1b      	ldr	r3, [pc, #108]	; (80075a8 <FATFS_LinkDriverEx+0x90>)
 800753a:	7a5b      	ldrb	r3, [r3, #9]
 800753c:	b2db      	uxtb	r3, r3
 800753e:	461a      	mov	r2, r3
 8007540:	4b19      	ldr	r3, [pc, #100]	; (80075a8 <FATFS_LinkDriverEx+0x90>)
 8007542:	2100      	movs	r1, #0
 8007544:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007546:	4b18      	ldr	r3, [pc, #96]	; (80075a8 <FATFS_LinkDriverEx+0x90>)
 8007548:	7a5b      	ldrb	r3, [r3, #9]
 800754a:	b2db      	uxtb	r3, r3
 800754c:	4a16      	ldr	r2, [pc, #88]	; (80075a8 <FATFS_LinkDriverEx+0x90>)
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007556:	4b14      	ldr	r3, [pc, #80]	; (80075a8 <FATFS_LinkDriverEx+0x90>)
 8007558:	7a5b      	ldrb	r3, [r3, #9]
 800755a:	b2db      	uxtb	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	4b12      	ldr	r3, [pc, #72]	; (80075a8 <FATFS_LinkDriverEx+0x90>)
 8007560:	4413      	add	r3, r2
 8007562:	79fa      	ldrb	r2, [r7, #7]
 8007564:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007566:	4b10      	ldr	r3, [pc, #64]	; (80075a8 <FATFS_LinkDriverEx+0x90>)
 8007568:	7a5b      	ldrb	r3, [r3, #9]
 800756a:	b2db      	uxtb	r3, r3
 800756c:	1c5a      	adds	r2, r3, #1
 800756e:	b2d1      	uxtb	r1, r2
 8007570:	4a0d      	ldr	r2, [pc, #52]	; (80075a8 <FATFS_LinkDriverEx+0x90>)
 8007572:	7251      	strb	r1, [r2, #9]
 8007574:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007576:	7dbb      	ldrb	r3, [r7, #22]
 8007578:	3330      	adds	r3, #48	; 0x30
 800757a:	b2da      	uxtb	r2, r3
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	3301      	adds	r3, #1
 8007584:	223a      	movs	r2, #58	; 0x3a
 8007586:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	3302      	adds	r3, #2
 800758c:	222f      	movs	r2, #47	; 0x2f
 800758e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	3303      	adds	r3, #3
 8007594:	2200      	movs	r2, #0
 8007596:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800759c:	7dfb      	ldrb	r3, [r7, #23]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	371c      	adds	r7, #28
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bc80      	pop	{r7}
 80075a6:	4770      	bx	lr
 80075a8:	200016d0 	.word	0x200016d0

080075ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80075b6:	2200      	movs	r2, #0
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff ffac 	bl	8007518 <FATFS_LinkDriverEx>
 80075c0:	4603      	mov	r3, r0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
	...

080075cc <__libc_init_array>:
 80075cc:	b570      	push	{r4, r5, r6, lr}
 80075ce:	2600      	movs	r6, #0
 80075d0:	4d0c      	ldr	r5, [pc, #48]	; (8007604 <__libc_init_array+0x38>)
 80075d2:	4c0d      	ldr	r4, [pc, #52]	; (8007608 <__libc_init_array+0x3c>)
 80075d4:	1b64      	subs	r4, r4, r5
 80075d6:	10a4      	asrs	r4, r4, #2
 80075d8:	42a6      	cmp	r6, r4
 80075da:	d109      	bne.n	80075f0 <__libc_init_array+0x24>
 80075dc:	f000 f830 	bl	8007640 <_init>
 80075e0:	2600      	movs	r6, #0
 80075e2:	4d0a      	ldr	r5, [pc, #40]	; (800760c <__libc_init_array+0x40>)
 80075e4:	4c0a      	ldr	r4, [pc, #40]	; (8007610 <__libc_init_array+0x44>)
 80075e6:	1b64      	subs	r4, r4, r5
 80075e8:	10a4      	asrs	r4, r4, #2
 80075ea:	42a6      	cmp	r6, r4
 80075ec:	d105      	bne.n	80075fa <__libc_init_array+0x2e>
 80075ee:	bd70      	pop	{r4, r5, r6, pc}
 80075f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075f4:	4798      	blx	r3
 80075f6:	3601      	adds	r6, #1
 80075f8:	e7ee      	b.n	80075d8 <__libc_init_array+0xc>
 80075fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80075fe:	4798      	blx	r3
 8007600:	3601      	adds	r6, #1
 8007602:	e7f2      	b.n	80075ea <__libc_init_array+0x1e>
 8007604:	08007768 	.word	0x08007768
 8007608:	08007768 	.word	0x08007768
 800760c:	08007768 	.word	0x08007768
 8007610:	0800776c 	.word	0x0800776c

08007614 <memcmp>:
 8007614:	b530      	push	{r4, r5, lr}
 8007616:	2400      	movs	r4, #0
 8007618:	3901      	subs	r1, #1
 800761a:	42a2      	cmp	r2, r4
 800761c:	d101      	bne.n	8007622 <memcmp+0xe>
 800761e:	2000      	movs	r0, #0
 8007620:	e005      	b.n	800762e <memcmp+0x1a>
 8007622:	5d03      	ldrb	r3, [r0, r4]
 8007624:	3401      	adds	r4, #1
 8007626:	5d0d      	ldrb	r5, [r1, r4]
 8007628:	42ab      	cmp	r3, r5
 800762a:	d0f6      	beq.n	800761a <memcmp+0x6>
 800762c:	1b58      	subs	r0, r3, r5
 800762e:	bd30      	pop	{r4, r5, pc}

08007630 <memset>:
 8007630:	4603      	mov	r3, r0
 8007632:	4402      	add	r2, r0
 8007634:	4293      	cmp	r3, r2
 8007636:	d100      	bne.n	800763a <memset+0xa>
 8007638:	4770      	bx	lr
 800763a:	f803 1b01 	strb.w	r1, [r3], #1
 800763e:	e7f9      	b.n	8007634 <memset+0x4>

08007640 <_init>:
 8007640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007642:	bf00      	nop
 8007644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007646:	bc08      	pop	{r3}
 8007648:	469e      	mov	lr, r3
 800764a:	4770      	bx	lr

0800764c <_fini>:
 800764c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764e:	bf00      	nop
 8007650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007652:	bc08      	pop	{r3}
 8007654:	469e      	mov	lr, r3
 8007656:	4770      	bx	lr
