
IHateEverything3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d94  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08009ed0  08009ed0  00019ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0a8  0800a0a8  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0a8  0800a0a8  0001a0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0b0  0800a0b0  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0b0  0800a0b0  0001a0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0b4  0800a0b4  0001a0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800a0b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023c0  200000fc  0800a1b4  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200024bc  0800a1b4  000224bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e55b  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000420d  00000000  00000000  0003e680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  00042890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001448  00000000  00000000  00043e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d76  00000000  00000000  000452a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a0d9  00000000  00000000  0005f016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091402  00000000  00000000  000790ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010a4f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a44  00000000  00000000  0010a544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000fc 	.word	0x200000fc
 8000158:	00000000 	.word	0x00000000
 800015c:	08009eb8 	.word	0x08009eb8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000100 	.word	0x20000100
 8000178:	08009eb8 	.word	0x08009eb8

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <InitButtons>:
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
 800047e:	4a07      	ldr	r2, [pc, #28]	; (800049c <InitButtons+0x28>)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6013      	str	r3, [r2, #0]
 8000484:	4a06      	ldr	r2, [pc, #24]	; (80004a0 <InitButtons+0x2c>)
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	6013      	str	r3, [r2, #0]
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <InitButtons+0x30>)
 800048c:	2200      	movs	r2, #0
 800048e:	701a      	strb	r2, [r3, #0]
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	20001b9c 	.word	0x20001b9c
 80004a0:	20001ba0 	.word	0x20001ba0
 80004a4:	20000118 	.word	0x20000118

080004a8 <Button1DebounceTimerCallback>:
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <Button1DebounceTimerCallback+0x28>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f006 f80b 	bl	80064cc <HAL_TIM_Base_Stop_IT>
 80004b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ba:	4806      	ldr	r0, [pc, #24]	; (80004d4 <Button1DebounceTimerCallback+0x2c>)
 80004bc:	f004 fd14 	bl	8004ee8 <HAL_GPIO_ReadPin>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d101      	bne.n	80004ca <Button1DebounceTimerCallback+0x22>
 80004c6:	f000 f837 	bl	8000538 <OnButton1Press>
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20001b9c 	.word	0x20001b9c
 80004d4:	40020c00 	.word	0x40020c00

080004d8 <Button2DebounceTimerCallback>:
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <Button2DebounceTimerCallback+0x28>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4618      	mov	r0, r3
 80004e2:	f005 fff3 	bl	80064cc <HAL_TIM_Base_Stop_IT>
 80004e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ea:	4806      	ldr	r0, [pc, #24]	; (8000504 <Button2DebounceTimerCallback+0x2c>)
 80004ec:	f004 fcfc 	bl	8004ee8 <HAL_GPIO_ReadPin>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d101      	bne.n	80004fa <Button2DebounceTimerCallback+0x22>
 80004f6:	f000 f82b 	bl	8000550 <OnButton2Press>
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20001ba0 	.word	0x20001ba0
 8000504:	40020c00 	.word	0x40020c00

08000508 <Button1Callback>:
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <Button1Callback+0x14>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4618      	mov	r0, r3
 8000512:	f005 ff89 	bl	8006428 <HAL_TIM_Base_Start_IT>
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20001b9c 	.word	0x20001b9c

08000520 <Button2Callback>:
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
 8000524:	4b03      	ldr	r3, [pc, #12]	; (8000534 <Button2Callback+0x14>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4618      	mov	r0, r3
 800052a:	f005 ff7d 	bl	8006428 <HAL_TIM_Base_Start_IT>
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20001ba0 	.word	0x20001ba0

08000538 <OnButton1Press>:
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <OnButton1Press+0x14>)
 800053e:	2201      	movs	r2, #1
 8000540:	701a      	strb	r2, [r3, #0]
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000118 	.word	0x20000118

08000550 <OnButton2Press>:
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <OnButton2Press+0x14>)
 8000556:	2202      	movs	r2, #2
 8000558:	701a      	strb	r2, [r3, #0]
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000118 	.word	0x20000118

08000568 <GetLastButtonPressed>:
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
 800056c:	4b02      	ldr	r3, [pc, #8]	; (8000578 <GetLastButtonPressed+0x10>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	20000118 	.word	0x20000118

0800057c <enableHex>:
#include "leds.h"

void enableHex(SPI_HandleTypeDef * hspi){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	writeHexVal(hspi, LED_DECODE_MODE, 0xFF);
 8000584:	22ff      	movs	r2, #255	; 0xff
 8000586:	2101      	movs	r1, #1
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f000 f9e1 	bl	8000950 <writeHexVal>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <setIntensity>:

void setIntensity(SPI_HandleTypeDef * hspi, uint8_t val){
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
 800059e:	460b      	mov	r3, r1
 80005a0:	70fb      	strb	r3, [r7, #3]
	writeHexVal(hspi, LED_INTENSITY, val);
 80005a2:	78fb      	ldrb	r3, [r7, #3]
 80005a4:	461a      	mov	r2, r3
 80005a6:	2102      	movs	r1, #2
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 f9d1 	bl	8000950 <writeHexVal>
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <setScanLimit>:

void setScanLimit(SPI_HandleTypeDef * hspi, uint8_t val){
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b082      	sub	sp, #8
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	460b      	mov	r3, r1
 80005c0:	70fb      	strb	r3, [r7, #3]
	writeHexVal(hspi, LED_SCAN_LIMIT, val);
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	461a      	mov	r2, r3
 80005c6:	2103      	movs	r1, #3
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f000 f9c1 	bl	8000950 <writeHexVal>
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <enableOutput>:

void enableOutput(SPI_HandleTypeDef * hspi){
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
	writeHexVal(hspi, LED_CONFIGURATION, 0x01);
 80005de:	2201      	movs	r2, #1
 80005e0:	2104      	movs	r1, #4
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f000 f9b4 	bl	8000950 <writeHexVal>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <disableOutput>:

void disableOutput(SPI_HandleTypeDef * hspi){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	writeHexVal(hspi, LED_CONFIGURATION, 0x00);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2104      	movs	r1, #4
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f9a7 	bl	8000950 <writeHexVal>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <writeTime>:

void writeTime(SPI_HandleTypeDef * hspi, int time, int player){
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
	int sec = time % 60;
 8000618:	68ba      	ldr	r2, [r7, #8]
 800061a:	4b4d      	ldr	r3, [pc, #308]	; (8000750 <writeTime+0x144>)
 800061c:	fb83 1302 	smull	r1, r3, r3, r2
 8000620:	4413      	add	r3, r2
 8000622:	1159      	asrs	r1, r3, #5
 8000624:	17d3      	asrs	r3, r2, #31
 8000626:	1ac9      	subs	r1, r1, r3
 8000628:	460b      	mov	r3, r1
 800062a:	011b      	lsls	r3, r3, #4
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	617b      	str	r3, [r7, #20]
	int min = time / 60;
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	4a46      	ldr	r2, [pc, #280]	; (8000750 <writeTime+0x144>)
 8000638:	fb82 1203 	smull	r1, r2, r2, r3
 800063c:	441a      	add	r2, r3
 800063e:	1152      	asrs	r2, r2, #5
 8000640:	17db      	asrs	r3, r3, #31
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	613b      	str	r3, [r7, #16]
	if (!player){
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d13e      	bne.n	80006ca <writeTime+0xbe>
		writeHexVal(hspi, LED_4, sec % 10);
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	4b41      	ldr	r3, [pc, #260]	; (8000754 <writeTime+0x148>)
 8000650:	fb83 1302 	smull	r1, r3, r3, r2
 8000654:	1099      	asrs	r1, r3, #2
 8000656:	17d3      	asrs	r3, r2, #31
 8000658:	1ac9      	subs	r1, r1, r3
 800065a:	460b      	mov	r3, r1
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	440b      	add	r3, r1
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	1ad1      	subs	r1, r2, r3
 8000664:	b2cb      	uxtb	r3, r1
 8000666:	461a      	mov	r2, r3
 8000668:	2163      	movs	r1, #99	; 0x63
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f000 f970 	bl	8000950 <writeHexVal>
		writeHexVal(hspi, LED_3, sec / 10);
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	4a38      	ldr	r2, [pc, #224]	; (8000754 <writeTime+0x148>)
 8000674:	fb82 1203 	smull	r1, r2, r2, r3
 8000678:	1092      	asrs	r2, r2, #2
 800067a:	17db      	asrs	r3, r3, #31
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	b2db      	uxtb	r3, r3
 8000680:	461a      	mov	r2, r3
 8000682:	2162      	movs	r1, #98	; 0x62
 8000684:	68f8      	ldr	r0, [r7, #12]
 8000686:	f000 f963 	bl	8000950 <writeHexVal>
		writeHexVal(hspi, LED_2, min % 10);
 800068a:	693a      	ldr	r2, [r7, #16]
 800068c:	4b31      	ldr	r3, [pc, #196]	; (8000754 <writeTime+0x148>)
 800068e:	fb83 1302 	smull	r1, r3, r3, r2
 8000692:	1099      	asrs	r1, r3, #2
 8000694:	17d3      	asrs	r3, r2, #31
 8000696:	1ac9      	subs	r1, r1, r3
 8000698:	460b      	mov	r3, r1
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	440b      	add	r3, r1
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	1ad1      	subs	r1, r2, r3
 80006a2:	b2cb      	uxtb	r3, r1
 80006a4:	461a      	mov	r2, r3
 80006a6:	2161      	movs	r1, #97	; 0x61
 80006a8:	68f8      	ldr	r0, [r7, #12]
 80006aa:	f000 f951 	bl	8000950 <writeHexVal>
		writeHexVal(hspi, LED_1, min / 10);
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	4a28      	ldr	r2, [pc, #160]	; (8000754 <writeTime+0x148>)
 80006b2:	fb82 1203 	smull	r1, r2, r2, r3
 80006b6:	1092      	asrs	r2, r2, #2
 80006b8:	17db      	asrs	r3, r3, #31
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	461a      	mov	r2, r3
 80006c0:	2160      	movs	r1, #96	; 0x60
 80006c2:	68f8      	ldr	r0, [r7, #12]
 80006c4:	f000 f944 	bl	8000950 <writeHexVal>
		writeHexVal(hspi, LED_8, sec % 10);
		writeHexVal(hspi, LED_7, sec / 10);
		writeHexVal(hspi, LED_6, min % 10);
		writeHexVal(hspi, LED_5, min / 10);
	}
}
 80006c8:	e03d      	b.n	8000746 <writeTime+0x13a>
		writeHexVal(hspi, LED_8, sec % 10);
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	4b21      	ldr	r3, [pc, #132]	; (8000754 <writeTime+0x148>)
 80006ce:	fb83 1302 	smull	r1, r3, r3, r2
 80006d2:	1099      	asrs	r1, r3, #2
 80006d4:	17d3      	asrs	r3, r2, #31
 80006d6:	1ac9      	subs	r1, r1, r3
 80006d8:	460b      	mov	r3, r1
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	440b      	add	r3, r1
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	1ad1      	subs	r1, r2, r3
 80006e2:	b2cb      	uxtb	r3, r1
 80006e4:	461a      	mov	r2, r3
 80006e6:	2167      	movs	r1, #103	; 0x67
 80006e8:	68f8      	ldr	r0, [r7, #12]
 80006ea:	f000 f931 	bl	8000950 <writeHexVal>
		writeHexVal(hspi, LED_7, sec / 10);
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	4a18      	ldr	r2, [pc, #96]	; (8000754 <writeTime+0x148>)
 80006f2:	fb82 1203 	smull	r1, r2, r2, r3
 80006f6:	1092      	asrs	r2, r2, #2
 80006f8:	17db      	asrs	r3, r3, #31
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	461a      	mov	r2, r3
 8000700:	2166      	movs	r1, #102	; 0x66
 8000702:	68f8      	ldr	r0, [r7, #12]
 8000704:	f000 f924 	bl	8000950 <writeHexVal>
		writeHexVal(hspi, LED_6, min % 10);
 8000708:	693a      	ldr	r2, [r7, #16]
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <writeTime+0x148>)
 800070c:	fb83 1302 	smull	r1, r3, r3, r2
 8000710:	1099      	asrs	r1, r3, #2
 8000712:	17d3      	asrs	r3, r2, #31
 8000714:	1ac9      	subs	r1, r1, r3
 8000716:	460b      	mov	r3, r1
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	440b      	add	r3, r1
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	1ad1      	subs	r1, r2, r3
 8000720:	b2cb      	uxtb	r3, r1
 8000722:	461a      	mov	r2, r3
 8000724:	2165      	movs	r1, #101	; 0x65
 8000726:	68f8      	ldr	r0, [r7, #12]
 8000728:	f000 f912 	bl	8000950 <writeHexVal>
		writeHexVal(hspi, LED_5, min / 10);
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	4a09      	ldr	r2, [pc, #36]	; (8000754 <writeTime+0x148>)
 8000730:	fb82 1203 	smull	r1, r2, r2, r3
 8000734:	1092      	asrs	r2, r2, #2
 8000736:	17db      	asrs	r3, r3, #31
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	2164      	movs	r1, #100	; 0x64
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f000 f905 	bl	8000950 <writeHexVal>
}
 8000746:	bf00      	nop
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	88888889 	.word	0x88888889
 8000754:	66666667 	.word	0x66666667

08000758 <LEDSInit>:

void LEDSInit(SPI_HandleTypeDef * hspi, uint8_t spi_num){
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

	// SPI setup
	if (spi_num == 1){
 8000774:	78fb      	ldrb	r3, [r7, #3]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d124      	bne.n	80007c4 <LEDSInit+0x6c>
		hspi->Instance = SPI1;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a3a      	ldr	r2, [pc, #232]	; (8000868 <LEDSInit+0x110>)
 800077e:	601a      	str	r2, [r3, #0]

		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000780:	4b3a      	ldr	r3, [pc, #232]	; (800086c <LEDSInit+0x114>)
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	4a39      	ldr	r2, [pc, #228]	; (800086c <LEDSInit+0x114>)
 8000786:	f043 0310 	orr.w	r3, r3, #16
 800078a:	61d3      	str	r3, [r2, #28]
 800078c:	4b37      	ldr	r3, [pc, #220]	; (800086c <LEDSInit+0x114>)
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	f003 0310 	and.w	r3, r3, #16
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	693b      	ldr	r3, [r7, #16]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800079e:	4834      	ldr	r0, [pc, #208]	; (8000870 <LEDSInit+0x118>)
 80007a0:	f004 fbb9 	bl	8004f16 <HAL_GPIO_WritePin>

		GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 80007a4:	f241 0304 	movw	r3, #4100	; 0x1004
 80007a8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	482c      	ldr	r0, [pc, #176]	; (8000870 <LEDSInit+0x118>)
 80007be:	f004 fa03 	bl	8004bc8 <HAL_GPIO_Init>
 80007c2:	e026      	b.n	8000812 <LEDSInit+0xba>
	}
	else if (spi_num == 2){
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	d123      	bne.n	8000812 <LEDSInit+0xba>
		hspi->Instance = SPI2;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a29      	ldr	r2, [pc, #164]	; (8000874 <LEDSInit+0x11c>)
 80007ce:	601a      	str	r2, [r3, #0]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 80007d0:	4b26      	ldr	r3, [pc, #152]	; (800086c <LEDSInit+0x114>)
 80007d2:	69db      	ldr	r3, [r3, #28]
 80007d4:	4a25      	ldr	r2, [pc, #148]	; (800086c <LEDSInit+0x114>)
 80007d6:	f043 0308 	orr.w	r3, r3, #8
 80007da:	61d3      	str	r3, [r2, #28]
 80007dc:	4b23      	ldr	r3, [pc, #140]	; (800086c <LEDSInit+0x114>)
 80007de:	69db      	ldr	r3, [r3, #28]
 80007e0:	f003 0308 	and.w	r3, r3, #8
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ee:	4822      	ldr	r0, [pc, #136]	; (8000878 <LEDSInit+0x120>)
 80007f0:	f004 fb91 	bl	8004f16 <HAL_GPIO_WritePin>

		GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007f8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	481a      	ldr	r0, [pc, #104]	; (8000878 <LEDSInit+0x120>)
 800080e:	f004 f9db 	bl	8004bc8 <HAL_GPIO_Init>
	}
	hspi->Init.Mode = SPI_MODE_MASTER;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000818:	605a      	str	r2, [r3, #4]
	hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
	hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
	hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
	hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
	hspi->Init.NSS = SPI_NSS_SOFT;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000838:	619a      	str	r2, [r3, #24]
	hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2228      	movs	r2, #40	; 0x28
 800083e:	61da      	str	r2, [r3, #28]
	hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2200      	movs	r2, #0
 8000844:	621a      	str	r2, [r3, #32]
	hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2200      	movs	r2, #0
 800084a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2200      	movs	r2, #0
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
	hspi->Init.CRCPolynomial = 10;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	220a      	movs	r2, #10
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_SPI_Init(hspi);
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f005 f929 	bl	8005ab0 <HAL_SPI_Init>


}
 800085e:	bf00      	nop
 8000860:	3728      	adds	r7, #40	; 0x28
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40013000 	.word	0x40013000
 800086c:	40023800 	.word	0x40023800
 8000870:	40021000 	.word	0x40021000
 8000874:	40003800 	.word	0x40003800
 8000878:	40020c00 	.word	0x40020c00

0800087c <ChessTimerLEDInit>:

void ChessTimerLEDInit(SPI_HandleTypeDef * hspi){
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	enableOutput(hspi);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff fea6 	bl	80005d6 <enableOutput>
	setScanLimit(hspi, 0x07);
 800088a:	2107      	movs	r1, #7
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff fe92 	bl	80005b6 <setScanLimit>
	setIntensity(hspi, 0x00);
 8000892:	2100      	movs	r1, #0
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f7ff fe7e 	bl	8000596 <setIntensity>
	enableHex(hspi);
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff fe6e 	bl	800057c <enableHex>
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <BoardLEDInit>:

void BoardLEDInit(SPI_HandleTypeDef * hspi){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	enableOutput(hspi);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff fe90 	bl	80005d6 <enableOutput>
	setScanLimit(hspi, 0x07);
 80008b6:	2107      	movs	r1, #7
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff fe7c 	bl	80005b6 <setScanLimit>
	setIntensity(hspi, 0x05);
 80008be:	2105      	movs	r1, #5
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff fe68 	bl	8000596 <setIntensity>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <writeBoardValue>:

void writeBoardValue(SPI_HandleTypeDef * hspi, uint8_t board[8][8]){
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b086      	sub	sp, #24
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
 80008d6:	6039      	str	r1, [r7, #0]
	for (int row = 0; row < 8; row++){
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	e030      	b.n	8000940 <writeBoardValue+0x72>
		uint8_t val = 0x0;
 80008de:	2300      	movs	r3, #0
 80008e0:	74fb      	strb	r3, [r7, #19]
		for (int col = 7; col > 0; col--){
 80008e2:	2307      	movs	r3, #7
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	e010      	b.n	800090a <writeBoardValue+0x3c>
			val = (val << 1) | board[row][col];
 80008e8:	7cfb      	ldrb	r3, [r7, #19]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	b25a      	sxtb	r2, r3
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	6839      	ldr	r1, [r7, #0]
 80008f4:	4419      	add	r1, r3
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	440b      	add	r3, r1
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b25b      	sxtb	r3, r3
 80008fe:	4313      	orrs	r3, r2
 8000900:	b25b      	sxtb	r3, r3
 8000902:	74fb      	strb	r3, [r7, #19]
		for (int col = 7; col > 0; col--){
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	3b01      	subs	r3, #1
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	2b00      	cmp	r3, #0
 800090e:	dceb      	bgt.n	80008e8 <writeBoardValue+0x1a>
		}
		val |= board[row][0] << 7;
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	683a      	ldr	r2, [r7, #0]
 8000916:	4413      	add	r3, r2
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	01db      	lsls	r3, r3, #7
 800091c:	b25a      	sxtb	r2, r3
 800091e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000922:	4313      	orrs	r3, r2
 8000924:	b25b      	sxtb	r3, r3
 8000926:	74fb      	strb	r3, [r7, #19]

		writeHexVal(hspi, LED_1 + row, val);
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	3360      	adds	r3, #96	; 0x60
 800092e:	b2db      	uxtb	r3, r3
 8000930:	7cfa      	ldrb	r2, [r7, #19]
 8000932:	4619      	mov	r1, r3
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f000 f80b 	bl	8000950 <writeHexVal>
	for (int row = 0; row < 8; row++){
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	3301      	adds	r3, #1
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	2b07      	cmp	r3, #7
 8000944:	ddcb      	ble.n	80008de <writeBoardValue+0x10>
	}
}
 8000946:	bf00      	nop
 8000948:	bf00      	nop
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <writeHexVal>:
	board[row2][col2] = 1;

	writeBoardValue(hspi, board);
}

void writeHexVal(SPI_HandleTypeDef * hspi, uint8_t reg, uint8_t val){
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	70fb      	strb	r3, [r7, #3]
 800095c:	4613      	mov	r3, r2
 800095e:	70bb      	strb	r3, [r7, #2]
	if (hspi->Instance == SPI2){
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a23      	ldr	r2, [pc, #140]	; (80009f4 <writeHexVal+0xa4>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d10c      	bne.n	8000984 <writeHexVal+0x34>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000970:	4821      	ldr	r0, [pc, #132]	; (80009f8 <writeHexVal+0xa8>)
 8000972:	f004 fad0 	bl	8004f16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097c:	481e      	ldr	r0, [pc, #120]	; (80009f8 <writeHexVal+0xa8>)
 800097e:	f004 faca 	bl	8004f16 <HAL_GPIO_WritePin>
 8000982:	e010      	b.n	80009a6 <writeHexVal+0x56>
	}
	else if (hspi->Instance == SPI1){
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a1c      	ldr	r2, [pc, #112]	; (80009fc <writeHexVal+0xac>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d10b      	bne.n	80009a6 <writeHexVal+0x56>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 800098e:	2201      	movs	r2, #1
 8000990:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000994:	481a      	ldr	r0, [pc, #104]	; (8000a00 <writeHexVal+0xb0>)
 8000996:	f004 fabe 	bl	8004f16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a0:	4817      	ldr	r0, [pc, #92]	; (8000a00 <writeHexVal+0xb0>)
 80009a2:	f004 fab8 	bl	8004f16 <HAL_GPIO_WritePin>
	}

	HAL_SPI_Transmit(hspi, &reg, 1, 100);
 80009a6:	1cf9      	adds	r1, r7, #3
 80009a8:	2364      	movs	r3, #100	; 0x64
 80009aa:	2201      	movs	r2, #1
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f005 f908 	bl	8005bc2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &val, 1, 100);
 80009b2:	1cb9      	adds	r1, r7, #2
 80009b4:	2364      	movs	r3, #100	; 0x64
 80009b6:	2201      	movs	r2, #1
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f005 f902 	bl	8005bc2 <HAL_SPI_Transmit>

	if (hspi->Instance == SPI2){
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a0c      	ldr	r2, [pc, #48]	; (80009f4 <writeHexVal+0xa4>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d106      	bne.n	80009d6 <writeHexVal+0x86>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ce:	480a      	ldr	r0, [pc, #40]	; (80009f8 <writeHexVal+0xa8>)
 80009d0:	f004 faa1 	bl	8004f16 <HAL_GPIO_WritePin>
	}
	else if (hspi->Instance == SPI1){
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
	}
}
 80009d4:	e00a      	b.n	80009ec <writeHexVal+0x9c>
	else if (hspi->Instance == SPI1){
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a08      	ldr	r2, [pc, #32]	; (80009fc <writeHexVal+0xac>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d105      	bne.n	80009ec <writeHexVal+0x9c>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e6:	4806      	ldr	r0, [pc, #24]	; (8000a00 <writeHexVal+0xb0>)
 80009e8:	f004 fa95 	bl	8004f16 <HAL_GPIO_WritePin>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40003800 	.word	0x40003800
 80009f8:	40020c00 	.word	0x40020c00
 80009fc:	40013000 	.word	0x40013000
 8000a00:	40021000 	.word	0x40021000

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b096      	sub	sp, #88	; 0x58
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0a:	f003 fb4c 	bl	80040a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0e:	f000 f8c5 	bl	8000b9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a12:	f000 f9f9 	bl	8000e08 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000a16:	f000 f95b 	bl	8000cd0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000a1a:	f000 f90d 	bl	8000c38 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000a1e:	f000 f9a5 	bl	8000d6c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  LEDSInit(&hspi2, 2);
 8000a22:	2102      	movs	r1, #2
 8000a24:	4850      	ldr	r0, [pc, #320]	; (8000b68 <main+0x164>)
 8000a26:	f7ff fe97 	bl	8000758 <LEDSInit>
  HAL_TIM_Base_Start_IT(&htim3);
 8000a2a:	4850      	ldr	r0, [pc, #320]	; (8000b6c <main+0x168>)
 8000a2c:	f005 fcfc 	bl	8006428 <HAL_TIM_Base_Start_IT>
  ChessTimerLEDInit(&hspi2);
 8000a30:	484d      	ldr	r0, [pc, #308]	; (8000b68 <main+0x164>)
 8000a32:	f7ff ff23 	bl	800087c <ChessTimerLEDInit>
  writeTime(&hspi2, timer1, 0);
 8000a36:	4b4e      	ldr	r3, [pc, #312]	; (8000b70 <main+0x16c>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	484a      	ldr	r0, [pc, #296]	; (8000b68 <main+0x164>)
 8000a40:	f7ff fde4 	bl	800060c <writeTime>
  writeTime(&hspi2, timer2, 1);
 8000a44:	4b4b      	ldr	r3, [pc, #300]	; (8000b74 <main+0x170>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4846      	ldr	r0, [pc, #280]	; (8000b68 <main+0x164>)
 8000a4e:	f7ff fddd 	bl	800060c <writeTime>

  LEDSInit(&hspi1, 1);
 8000a52:	2101      	movs	r1, #1
 8000a54:	4848      	ldr	r0, [pc, #288]	; (8000b78 <main+0x174>)
 8000a56:	f7ff fe7f 	bl	8000758 <LEDSInit>
  BoardLEDInit(&hspi1);
 8000a5a:	4847      	ldr	r0, [pc, #284]	; (8000b78 <main+0x174>)
 8000a5c:	f7ff ff24 	bl	80008a8 <BoardLEDInit>
  uint8_t board[NUM_ROWS][NUM_COLS] = {0};
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	2240      	movs	r2, #64	; 0x40
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f009 fa1d 	bl	8009ea8 <memset>
  writeBoardValue(&hspi1, board);
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4619      	mov	r1, r3
 8000a74:	4840      	ldr	r0, [pc, #256]	; (8000b78 <main+0x174>)
 8000a76:	f7ff ff2a 	bl	80008ce <writeBoardValue>
  /*

  */
  SpeakerInit(&hdac, &htim4);
 8000a7a:	4940      	ldr	r1, [pc, #256]	; (8000b7c <main+0x178>)
 8000a7c:	4840      	ldr	r0, [pc, #256]	; (8000b80 <main+0x17c>)
 8000a7e:	f001 fabd 	bl	8001ffc <SpeakerInit>
  WaveplayerInit(&hspi3, &hdac);
 8000a82:	493f      	ldr	r1, [pc, #252]	; (8000b80 <main+0x17c>)
 8000a84:	483f      	ldr	r0, [pc, #252]	; (8000b84 <main+0x180>)
 8000a86:	f003 fa4b 	bl	8003f20 <WaveplayerInit>

  EnableUart(&huart1);
 8000a8a:	483f      	ldr	r0, [pc, #252]	; (8000b88 <main+0x184>)
 8000a8c:	f003 f870 	bl	8003b70 <EnableUart>

  char send[4] = {'S', 'T', 'R', 'T'};
 8000a90:	4b3e      	ldr	r3, [pc, #248]	; (8000b8c <main+0x188>)
 8000a92:	60fb      	str	r3, [r7, #12]
  char recv[6] = {'-', '-', '-', '-', '-'};
 8000a94:	4a3e      	ldr	r2, [pc, #248]	; (8000b90 <main+0x18c>)
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a9c:	6018      	str	r0, [r3, #0]
 8000a9e:	3304      	adds	r3, #4
 8000aa0:	8019      	strh	r1, [r3, #0]
  uint8_t color = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  uint8_t edum = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  sendStart(&huart1, color, edum);
 8000aae:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8000ab2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4833      	ldr	r0, [pc, #204]	; (8000b88 <main+0x184>)
 8000aba:	f003 f8ae 	bl	8003c1a <sendStart>
  sendDifficulty(&huart1, 1);
 8000abe:	2101      	movs	r1, #1
 8000ac0:	4831      	ldr	r0, [pc, #196]	; (8000b88 <main+0x184>)
 8000ac2:	f003 f8c2 	bl	8003c4a <sendDifficulty>
	  receiveData(&huart1, recv);
  }*/


  // Initialize Buttons
  InitButtons(&htim2, &htim5);
 8000ac6:	4933      	ldr	r1, [pc, #204]	; (8000b94 <main+0x190>)
 8000ac8:	4833      	ldr	r0, [pc, #204]	; (8000b98 <main+0x194>)
 8000aca:	f7ff fcd3 	bl	8000474 <InitButtons>

  // Initialize Tracker component
  InitTracker();
 8000ace:	f001 fd33 	bl	8002538 <InitTracker>
  while(!ValidateStartPositions())
 8000ad2:	e002      	b.n	8000ada <main+0xd6>
  {
	  /// @todo: play audio cue and invoke LEDs to put pieces in correct starting positions
	  HAL_Delay(10);
 8000ad4:	200a      	movs	r0, #10
 8000ad6:	f003 fb55 	bl	8004184 <HAL_Delay>
  while(!ValidateStartPositions())
 8000ada:	f002 fd75 	bl	80035c8 <ValidateStartPositions>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d0f7      	beq.n	8000ad4 <main+0xd0>
  }

  // Splash LEDs when ready
  for(uint8_t i = 0; i < 8; i++)
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000aea:	e026      	b.n	8000b3a <main+0x136>
  {
	  board[i][0] = 1;
 8000aec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000af6:	4413      	add	r3, r2
 8000af8:	2201      	movs	r2, #1
 8000afa:	f803 2c48 	strb.w	r2, [r3, #-72]
	  board[i][7] = 1;
 8000afe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000b08:	4413      	add	r3, r2
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f803 2c41 	strb.w	r2, [r3, #-65]
	  board[0][i] = 1;
 8000b10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b14:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000b18:	4413      	add	r3, r2
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f803 2c48 	strb.w	r2, [r3, #-72]
	  board[7][i] = 1;
 8000b20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b24:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000b28:	4413      	add	r3, r2
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(uint8_t i = 0; i < 8; i++)
 8000b30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b34:	3301      	adds	r3, #1
 8000b36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000b3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b3e:	2b07      	cmp	r3, #7
 8000b40:	d9d4      	bls.n	8000aec <main+0xe8>
  }
  writeBoardValue(&hspi1, board);
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	4619      	mov	r1, r3
 8000b48:	480b      	ldr	r0, [pc, #44]	; (8000b78 <main+0x174>)
 8000b4a:	f7ff fec0 	bl	80008ce <writeBoardValue>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char a, b;
  a = 'd';
 8000b4e:	2364      	movs	r3, #100	; 0x64
 8000b50:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  b = '2';
 8000b54:	2332      	movs	r3, #50	; 0x32
 8000b56:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  while (1)
  {
	  //TestLEDs();
	  Track();
 8000b5a:	f001 fde3 	bl	8002724 <Track>
	  HAL_Delay(10);
 8000b5e:	200a      	movs	r0, #10
 8000b60:	f003 fb10 	bl	8004184 <HAL_Delay>
	  Track();
 8000b64:	e7f9      	b.n	8000b5a <main+0x156>
 8000b66:	bf00      	nop
 8000b68:	20001ba4 	.word	0x20001ba4
 8000b6c:	20001c7c 	.word	0x20001c7c
 8000b70:	20000000 	.word	0x20000000
 8000b74:	20000002 	.word	0x20000002
 8000b78:	20001db0 	.word	0x20001db0
 8000b7c:	20001bfc 	.word	0x20001bfc
 8000b80:	20001d58 	.word	0x20001d58
 8000b84:	20001cbc 	.word	0x20001cbc
 8000b88:	20001d14 	.word	0x20001d14
 8000b8c:	54525453 	.word	0x54525453
 8000b90:	08009ed0 	.word	0x08009ed0
 8000b94:	20001c3c 	.word	0x20001c3c
 8000b98:	20001e08 	.word	0x20001e08

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b092      	sub	sp, #72	; 0x48
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	2234      	movs	r2, #52	; 0x34
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f009 f97c 	bl	8009ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <SystemClock_Config+0x98>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000bc6:	4a1b      	ldr	r2, [pc, #108]	; (8000c34 <SystemClock_Config+0x98>)
 8000bc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bcc:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd6:	2310      	movs	r3, #16
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bde:	2300      	movs	r3, #0
 8000be0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000be2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000be6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000be8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f004 f9c0 	bl	8004f78 <HAL_RCC_OscConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bfe:	f000 fa37 	bl	8001070 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c02:	230f      	movs	r3, #15
 8000c04:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c06:	2303      	movs	r3, #3
 8000c08:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c16:	463b      	mov	r3, r7
 8000c18:	2101      	movs	r1, #1
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f004 fcdc 	bl	80055d8 <HAL_RCC_ClockConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000c26:	f000 fa23 	bl	8001070 <Error_Handler>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3748      	adds	r7, #72	; 0x48
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40007000 	.word	0x40007000

08000c38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c54:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <MX_TIM2_Init+0x94>)
 8000c56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3200;
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <MX_TIM2_Init+0x94>)
 8000c5e:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000c62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c64:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <MX_TIM2_Init+0x94>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <MX_TIM2_Init+0x94>)
 8000c6c:	2264      	movs	r2, #100	; 0x64
 8000c6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <MX_TIM2_Init+0x94>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <MX_TIM2_Init+0x94>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c7c:	4813      	ldr	r0, [pc, #76]	; (8000ccc <MX_TIM2_Init+0x94>)
 8000c7e:	f005 fb49 	bl	8006314 <HAL_TIM_Base_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c88:	f000 f9f2 	bl	8001070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	4619      	mov	r1, r3
 8000c98:	480c      	ldr	r0, [pc, #48]	; (8000ccc <MX_TIM2_Init+0x94>)
 8000c9a:	f005 fd19 	bl	80066d0 <HAL_TIM_ConfigClockSource>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ca4:	f000 f9e4 	bl	8001070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_TIM2_Init+0x94>)
 8000cb6:	f005 fef9 	bl	8006aac <HAL_TIMEx_MasterConfigSynchronization>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cc0:	f000 f9d6 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20001e08 	.word	0x20001e08

08000cd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <MX_TIM3_Init+0x94>)
 8000cee:	4a1e      	ldr	r2, [pc, #120]	; (8000d68 <MX_TIM3_Init+0x98>)
 8000cf0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000-1;
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <MX_TIM3_Init+0x94>)
 8000cf4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000cf8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <MX_TIM3_Init+0x94>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <MX_TIM3_Init+0x94>)
 8000d02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <MX_TIM3_Init+0x94>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <MX_TIM3_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d14:	4813      	ldr	r0, [pc, #76]	; (8000d64 <MX_TIM3_Init+0x94>)
 8000d16:	f005 fafd 	bl	8006314 <HAL_TIM_Base_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d20:	f000 f9a6 	bl	8001070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480c      	ldr	r0, [pc, #48]	; (8000d64 <MX_TIM3_Init+0x94>)
 8000d32:	f005 fccd 	bl	80066d0 <HAL_TIM_ConfigClockSource>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d3c:	f000 f998 	bl	8001070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d40:	2300      	movs	r3, #0
 8000d42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d48:	463b      	mov	r3, r7
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_TIM3_Init+0x94>)
 8000d4e:	f005 fead 	bl	8006aac <HAL_TIMEx_MasterConfigSynchronization>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d58:	f000 f98a 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20001c7c 	.word	0x20001c7c
 8000d68:	40000400 	.word	0x40000400

08000d6c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d80:	463b      	mov	r3, r7
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <MX_TIM5_Init+0x94>)
 8000d8a:	4a1e      	ldr	r2, [pc, #120]	; (8000e04 <MX_TIM5_Init+0x98>)
 8000d8c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 3200;
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <MX_TIM5_Init+0x94>)
 8000d90:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000d94:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_TIM5_Init+0x94>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8000d9c:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <MX_TIM5_Init+0x94>)
 8000d9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000da2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <MX_TIM5_Init+0x94>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <MX_TIM5_Init+0x94>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000db0:	4813      	ldr	r0, [pc, #76]	; (8000e00 <MX_TIM5_Init+0x94>)
 8000db2:	f005 faaf 	bl	8006314 <HAL_TIM_Base_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000dbc:	f000 f958 	bl	8001070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000dc6:	f107 0308 	add.w	r3, r7, #8
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <MX_TIM5_Init+0x94>)
 8000dce:	f005 fc7f 	bl	80066d0 <HAL_TIM_ConfigClockSource>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000dd8:	f000 f94a 	bl	8001070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000de4:	463b      	mov	r3, r7
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_TIM5_Init+0x94>)
 8000dea:	f005 fe5f 	bl	8006aac <HAL_TIMEx_MasterConfigSynchronization>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000df4:	f000 f93c 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20001c3c 	.word	0x20001c3c
 8000e04:	40000c00 	.word	0x40000c00

08000e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08c      	sub	sp, #48	; 0x30
 8000e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1e:	4b6b      	ldr	r3, [pc, #428]	; (8000fcc <MX_GPIO_Init+0x1c4>)
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	4a6a      	ldr	r2, [pc, #424]	; (8000fcc <MX_GPIO_Init+0x1c4>)
 8000e24:	f043 0310 	orr.w	r3, r3, #16
 8000e28:	61d3      	str	r3, [r2, #28]
 8000e2a:	4b68      	ldr	r3, [pc, #416]	; (8000fcc <MX_GPIO_Init+0x1c4>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	f003 0310 	and.w	r3, r3, #16
 8000e32:	61bb      	str	r3, [r7, #24]
 8000e34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b65      	ldr	r3, [pc, #404]	; (8000fcc <MX_GPIO_Init+0x1c4>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4a64      	ldr	r2, [pc, #400]	; (8000fcc <MX_GPIO_Init+0x1c4>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	61d3      	str	r3, [r2, #28]
 8000e42:	4b62      	ldr	r3, [pc, #392]	; (8000fcc <MX_GPIO_Init+0x1c4>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e4e:	4b5f      	ldr	r3, [pc, #380]	; (8000fcc <MX_GPIO_Init+0x1c4>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	4a5e      	ldr	r2, [pc, #376]	; (8000fcc <MX_GPIO_Init+0x1c4>)
 8000e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e58:	61d3      	str	r3, [r2, #28]
 8000e5a:	4b5c      	ldr	r3, [pc, #368]	; (8000fcc <MX_GPIO_Init+0x1c4>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e66:	4b59      	ldr	r3, [pc, #356]	; (8000fcc <MX_GPIO_Init+0x1c4>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	4a58      	ldr	r2, [pc, #352]	; (8000fcc <MX_GPIO_Init+0x1c4>)
 8000e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e70:	61d3      	str	r3, [r2, #28]
 8000e72:	4b56      	ldr	r3, [pc, #344]	; (8000fcc <MX_GPIO_Init+0x1c4>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	4b53      	ldr	r3, [pc, #332]	; (8000fcc <MX_GPIO_Init+0x1c4>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a52      	ldr	r2, [pc, #328]	; (8000fcc <MX_GPIO_Init+0x1c4>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b50      	ldr	r3, [pc, #320]	; (8000fcc <MX_GPIO_Init+0x1c4>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e96:	4b4d      	ldr	r3, [pc, #308]	; (8000fcc <MX_GPIO_Init+0x1c4>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a4c      	ldr	r2, [pc, #304]	; (8000fcc <MX_GPIO_Init+0x1c4>)
 8000e9c:	f043 0308 	orr.w	r3, r3, #8
 8000ea0:	61d3      	str	r3, [r2, #28]
 8000ea2:	4b4a      	ldr	r3, [pc, #296]	; (8000fcc <MX_GPIO_Init+0x1c4>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 0308 	and.w	r3, r3, #8
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	4b47      	ldr	r3, [pc, #284]	; (8000fcc <MX_GPIO_Init+0x1c4>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	4a46      	ldr	r2, [pc, #280]	; (8000fcc <MX_GPIO_Init+0x1c4>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	61d3      	str	r3, [r2, #28]
 8000eba:	4b44      	ldr	r3, [pc, #272]	; (8000fcc <MX_GPIO_Init+0x1c4>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEARTBEAT_LED_GPIO_Port, HEARTBEAT_LED_Pin, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2104      	movs	r1, #4
 8000eca:	4841      	ldr	r0, [pc, #260]	; (8000fd0 <MX_GPIO_Init+0x1c8>)
 8000ecc:	f004 f823 	bl	8004f16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HALLSEL0_Pin|HALLSEL1_Pin|HALLSEL2_Pin, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2107      	movs	r1, #7
 8000ed4:	483f      	ldr	r0, [pc, #252]	; (8000fd4 <MX_GPIO_Init+0x1cc>)
 8000ed6:	f004 f81e 	bl	8004f16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee0:	483b      	ldr	r0, [pc, #236]	; (8000fd0 <MX_GPIO_Init+0x1c8>)
 8000ee2:	f004 f818 	bl	8004f16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|SD_CS_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f240 1101 	movw	r1, #257	; 0x101
 8000eec:	483a      	ldr	r0, [pc, #232]	; (8000fd8 <MX_GPIO_Init+0x1d0>)
 8000eee:	f004 f812 	bl	8004f16 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HEARTBEAT_LED_Pin PE12 */
  GPIO_InitStruct.Pin = HEARTBEAT_LED_Pin|GPIO_PIN_12;
 8000ef2:	f241 0304 	movw	r3, #4100	; 0x1004
 8000ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4831      	ldr	r0, [pc, #196]	; (8000fd0 <MX_GPIO_Init+0x1c8>)
 8000f0c:	f003 fe5c 	bl	8004bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALLSEL0_Pin HALLSEL1_Pin HALLSEL2_Pin */
  GPIO_InitStruct.Pin = HALLSEL0_Pin|HALLSEL1_Pin|HALLSEL2_Pin;
 8000f10:	2307      	movs	r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	4619      	mov	r1, r3
 8000f26:	482b      	ldr	r0, [pc, #172]	; (8000fd4 <MX_GPIO_Init+0x1cc>)
 8000f28:	f003 fe4e 	bl	8004bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALLOUT0_Pin HALLOUT1_Pin HALLOUT2_Pin */
  GPIO_InitStruct.Pin = HALLOUT0_Pin|HALLOUT1_Pin|HALLOUT2_Pin;
 8000f2c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f32:	2300      	movs	r3, #0
 8000f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4826      	ldr	r0, [pc, #152]	; (8000fdc <MX_GPIO_Init+0x1d4>)
 8000f42:	f003 fe41 	bl	8004bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALLOUT3_Pin HALLOUT4_Pin */
  GPIO_InitStruct.Pin = HALLOUT3_Pin|HALLOUT4_Pin;
 8000f46:	2303      	movs	r3, #3
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4821      	ldr	r0, [pc, #132]	; (8000fe0 <MX_GPIO_Init+0x1d8>)
 8000f5a:	f003 fe35 	bl	8004bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALLOUT5_Pin HALLOUT6_Pin HALLOUT7_Pin */
  GPIO_InitStruct.Pin = HALLOUT5_Pin|HALLOUT6_Pin|HALLOUT7_Pin;
 8000f5e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4817      	ldr	r0, [pc, #92]	; (8000fd0 <MX_GPIO_Init+0x1c8>)
 8000f74:	f003 fe28 	bl	8004bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 SD_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|SD_CS_Pin;
 8000f78:	f240 1301 	movw	r3, #257	; 0x101
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4811      	ldr	r0, [pc, #68]	; (8000fd8 <MX_GPIO_Init+0x1d0>)
 8000f92:	f003 fe19 	bl	8004bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 8000f96:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f9c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <MX_GPIO_Init+0x1d0>)
 8000fae:	f003 fe0b 	bl	8004bc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2028      	movs	r0, #40	; 0x28
 8000fb8:	f003 f9dd 	bl	8004376 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fbc:	2028      	movs	r0, #40	; 0x28
 8000fbe:	f003 f9f6 	bl	80043ae <HAL_NVIC_EnableIRQ>

}
 8000fc2:	bf00      	nop
 8000fc4:	3730      	adds	r7, #48	; 0x30
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020c00 	.word	0x40020c00
 8000fdc:	40021800 	.word	0x40021800
 8000fe0:	40021c00 	.word	0x40021c00

08000fe4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Chess clock callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a10      	ldr	r2, [pc, #64]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d10c      	bne.n	8001010 <HAL_TIM_PeriodElapsedCallback+0x2c>
	  timer1--;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001000:	801a      	strh	r2, [r3, #0]
	  writeTime(&hspi2, timer1, 0);
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	2200      	movs	r2, #0
 8001008:	4619      	mov	r1, r3
 800100a:	480c      	ldr	r0, [pc, #48]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800100c:	f7ff fafe 	bl	800060c <writeTime>
  }
  if (htim->Instance == TIM2) {
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001018:	d101      	bne.n	800101e <HAL_TIM_PeriodElapsedCallback+0x3a>
	  Button1DebounceTimerCallback();
 800101a:	f7ff fa45 	bl	80004a8 <Button1DebounceTimerCallback>
  }
  if (htim->Instance == TIM5) {
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a07      	ldr	r2, [pc, #28]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d101      	bne.n	800102c <HAL_TIM_PeriodElapsedCallback+0x48>
	  Button2DebounceTimerCallback();
 8001028:	f7ff fa56 	bl	80004d8 <Button2DebounceTimerCallback>
  }
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40000400 	.word	0x40000400
 8001038:	20000000 	.word	0x20000000
 800103c:	20001ba4 	.word	0x20001ba4
 8001040:	40000c00 	.word	0x40000c00

08001044 <HAL_GPIO_EXTI_Callback>:

// Button0 and Button1 callbacks
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON1_Pin)
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001054:	d102      	bne.n	800105c <HAL_GPIO_EXTI_Callback+0x18>
	{
		Button1Callback();
 8001056:	f7ff fa57 	bl	8000508 <Button1Callback>
	}
	else if(GPIO_Pin == BUTTON2_Pin)
	{
		Button2Callback();
	}
}
 800105a:	e005      	b.n	8001068 <HAL_GPIO_EXTI_Callback+0x24>
	else if(GPIO_Pin == BUTTON2_Pin)
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001062:	d101      	bne.n	8001068 <HAL_GPIO_EXTI_Callback+0x24>
		Button2Callback();
 8001064:	f7ff fa5c 	bl	8000520 <Button2Callback>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001074:	b672      	cpsid	i
}
 8001076:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001078:	e7fe      	b.n	8001078 <Error_Handler+0x8>
	...

0800107c <CalculateTeamsLegalMoves>:

// All legal moves for the current team - calculated at the beginning of each turn
static struct Moves LegalMoveSet[PIECES_PER_TEAM];

void CalculateTeamsLegalMoves(enum PieceOwner owner)
{
 800107c:	b5b0      	push	{r4, r5, r7, lr}
 800107e:	b0a4      	sub	sp, #144	; 0x90
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
	// Initialize MockChessboard with current chessboard
	for (uint8_t row = 0; row < NUM_ROWS; row++)
 8001086:	2300      	movs	r3, #0
 8001088:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800108c:	e023      	b.n	80010d6 <CalculateTeamsLegalMoves+0x5a>
	{
		for (uint8_t column = 0; column < NUM_COLS; column++)
 800108e:	2300      	movs	r3, #0
 8001090:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8001094:	e016      	b.n	80010c4 <CalculateTeamsLegalMoves+0x48>
		{
			MockChessboard[row][column] = GetPiece(row, column);
 8001096:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800109a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800109e:	4d47      	ldr	r5, [pc, #284]	; (80011bc <CalculateTeamsLegalMoves+0x140>)
 80010a0:	00d2      	lsls	r2, r2, #3
 80010a2:	18d4      	adds	r4, r2, r3
 80010a4:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 80010a8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80010ac:	4611      	mov	r1, r2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f002 fc9a 	bl	80039e8 <GetPiece>
 80010b4:	4603      	mov	r3, r0
 80010b6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		for (uint8_t column = 0; column < NUM_COLS; column++)
 80010ba:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80010be:	3301      	adds	r3, #1
 80010c0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 80010c4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80010c8:	2b07      	cmp	r3, #7
 80010ca:	d9e4      	bls.n	8001096 <CalculateTeamsLegalMoves+0x1a>
	for (uint8_t row = 0; row < NUM_ROWS; row++)
 80010cc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80010d0:	3301      	adds	r3, #1
 80010d2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80010d6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80010da:	2b07      	cmp	r3, #7
 80010dc:	d9d7      	bls.n	800108e <CalculateTeamsLegalMoves+0x12>
	}

	// Get all pieces for this team
	uint8_t numTeamPieces;
	struct PieceCoordinate teamsPieces[PIECES_PER_TEAM];
	GetPiecesForTeam(owner, teamsPieces, &numTeamPieces);
 80010de:	f107 028b 	add.w	r2, r7, #139	; 0x8b
 80010e2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fda5 	bl	8001c38 <GetPiecesForTeam>

	for (uint8_t i = 0; i < numTeamPieces; i++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 80010f4:	e057      	b.n	80011a6 <CalculateTeamsLegalMoves+0x12a>
	{
		struct PieceCoordinate teamPiece = teamsPieces[i];
 80010f6:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001100:	4413      	add	r3, r2
 8001102:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001106:	647b      	str	r3, [r7, #68]	; 0x44

		// Get all legal paths for teamPiece
		uint8_t numLegalPaths;
		struct Coordinate allLegalPaths[MAX_LEGAL_MOVES];
		CalculateAllLegalPathsAndChecks(teamPiece, allLegalPaths, &numLegalPaths);
 8001108:	f107 0243 	add.w	r2, r7, #67	; 0x43
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4619      	mov	r1, r3
 8001112:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001114:	f000 f8ce 	bl	80012b4 <CalculateAllLegalPathsAndChecks>

		// Add possible moves for this piece
		LegalMoveSet[i].from = teamPiece;
 8001118:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 800111c:	4928      	ldr	r1, [pc, #160]	; (80011c0 <CalculateTeamsLegalMoves+0x144>)
 800111e:	4613      	mov	r3, r2
 8001120:	011b      	lsls	r3, r3, #4
 8001122:	1a9b      	subs	r3, r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	1a9b      	subs	r3, r3, r2
 8001128:	440b      	add	r3, r1
 800112a:	461a      	mov	r2, r3
 800112c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	6010      	str	r0, [r2, #0]
		LegalMoveSet[i].numMoves = numLegalPaths;
 8001134:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 8001138:	f897 0043 	ldrb.w	r0, [r7, #67]	; 0x43
 800113c:	4920      	ldr	r1, [pc, #128]	; (80011c0 <CalculateTeamsLegalMoves+0x144>)
 800113e:	4613      	mov	r3, r2
 8001140:	011b      	lsls	r3, r3, #4
 8001142:	1a9b      	subs	r3, r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	1a9b      	subs	r3, r3, r2
 8001148:	440b      	add	r3, r1
 800114a:	333a      	adds	r3, #58	; 0x3a
 800114c:	4602      	mov	r2, r0
 800114e:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < numLegalPaths; j++)
 8001150:	2300      	movs	r3, #0
 8001152:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8001156:	e01b      	b.n	8001190 <CalculateTeamsLegalMoves+0x114>
		{
			LegalMoveSet[i].moves[j] = allLegalPaths[j];
 8001158:	f897 108c 	ldrb.w	r1, [r7, #140]	; 0x8c
 800115c:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 8001160:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001164:	4c16      	ldr	r4, [pc, #88]	; (80011c0 <CalculateTeamsLegalMoves+0x144>)
 8001166:	0058      	lsls	r0, r3, #1
 8001168:	4613      	mov	r3, r2
 800116a:	011b      	lsls	r3, r3, #4
 800116c:	1a9b      	subs	r3, r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	1a9b      	subs	r3, r3, r2
 8001172:	4403      	add	r3, r0
 8001174:	4423      	add	r3, r4
 8001176:	1d1a      	adds	r2, r3, #4
 8001178:	004b      	lsls	r3, r1, #1
 800117a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800117e:	440b      	add	r3, r1
 8001180:	3b84      	subs	r3, #132	; 0x84
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	8013      	strh	r3, [r2, #0]
		for (uint8_t j = 0; j < numLegalPaths; j++)
 8001186:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800118a:	3301      	adds	r3, #1
 800118c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8001190:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001194:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 8001198:	429a      	cmp	r2, r3
 800119a:	d3dd      	bcc.n	8001158 <CalculateTeamsLegalMoves+0xdc>
	for (uint8_t i = 0; i < numTeamPieces; i++)
 800119c:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80011a0:	3301      	adds	r3, #1
 80011a2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 80011a6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80011aa:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d3a1      	bcc.n	80010f6 <CalculateTeamsLegalMoves+0x7a>
		}
	}
}
 80011b2:	bf00      	nop
 80011b4:	bf00      	nop
 80011b6:	3790      	adds	r7, #144	; 0x90
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bdb0      	pop	{r4, r5, r7, pc}
 80011bc:	2000011c 	.word	0x2000011c
 80011c0:	2000019c 	.word	0x2000019c

080011c4 <IsLegalMove>:

uint8_t IsLegalMove(struct PieceCoordinate from, struct PieceCoordinate to)
{
 80011c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c6:	b093      	sub	sp, #76	; 0x4c
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
	// Find the legal moves for "from"
	struct Moves legalMoves;
	for (uint8_t i = 0; i < PIECES_PER_TEAM; i++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80011d4:	e03a      	b.n	800124c <IsLegalMove+0x88>
	{
		if (IsPieceCoordinateEqual(from, LegalMoveSet[i].from))
 80011d6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80011da:	4935      	ldr	r1, [pc, #212]	; (80012b0 <IsLegalMove+0xec>)
 80011dc:	4613      	mov	r3, r2
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	1a9b      	subs	r3, r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	1a9b      	subs	r3, r3, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	2300      	movs	r3, #0
 80011ec:	4613      	mov	r3, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f002 fc8b 	bl	8003b0c <IsPieceCoordinateEqual>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d022      	beq.n	8001242 <IsLegalMove+0x7e>
		{
			legalMoves = LegalMoveSet[i];
 80011fc:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001200:	492b      	ldr	r1, [pc, #172]	; (80012b0 <IsLegalMove+0xec>)
 8001202:	4613      	mov	r3, r2
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	1a9b      	subs	r3, r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	1a9b      	subs	r3, r3, r2
 800120c:	440b      	add	r3, r1
 800120e:	461c      	mov	r4, r3
 8001210:	f107 0608 	add.w	r6, r7, #8
 8001214:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8001218:	4635      	mov	r5, r6
 800121a:	4623      	mov	r3, r4
 800121c:	6818      	ldr	r0, [r3, #0]
 800121e:	6859      	ldr	r1, [r3, #4]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001226:	3410      	adds	r4, #16
 8001228:	3610      	adds	r6, #16
 800122a:	4564      	cmp	r4, ip
 800122c:	d1f4      	bne.n	8001218 <IsLegalMove+0x54>
 800122e:	4633      	mov	r3, r6
 8001230:	4622      	mov	r2, r4
 8001232:	6810      	ldr	r0, [r2, #0]
 8001234:	6851      	ldr	r1, [r2, #4]
 8001236:	c303      	stmia	r3!, {r0, r1}
 8001238:	8911      	ldrh	r1, [r2, #8]
 800123a:	7a92      	ldrb	r2, [r2, #10]
 800123c:	8019      	strh	r1, [r3, #0]
 800123e:	709a      	strb	r2, [r3, #2]
			break;
 8001240:	e008      	b.n	8001254 <IsLegalMove+0x90>
	for (uint8_t i = 0; i < PIECES_PER_TEAM; i++)
 8001242:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001246:	3301      	adds	r3, #1
 8001248:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800124c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001250:	2b0f      	cmp	r3, #15
 8001252:	d9c0      	bls.n	80011d6 <IsLegalMove+0x12>
		}
	}

	// Go through all legal moves and make sure "to" is in there
	for (uint8_t i = 0; i < legalMoves.numMoves; i++)
 8001254:	2300      	movs	r3, #0
 8001256:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800125a:	e01e      	b.n	800129a <IsLegalMove+0xd6>
	{
		if ((to.row == legalMoves.moves[i].row) && (to.column == legalMoves.moves[i].column))
 800125c:	78bb      	ldrb	r3, [r7, #2]
 800125e:	461a      	mov	r2, r3
 8001260:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800126a:	440b      	add	r3, r1
 800126c:	f913 3c3c 	ldrsb.w	r3, [r3, #-60]
 8001270:	429a      	cmp	r2, r3
 8001272:	d10d      	bne.n	8001290 <IsLegalMove+0xcc>
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	461a      	mov	r2, r3
 8001278:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001282:	440b      	add	r3, r1
 8001284:	f913 3c3b 	ldrsb.w	r3, [r3, #-59]
 8001288:	429a      	cmp	r2, r3
 800128a:	d101      	bne.n	8001290 <IsLegalMove+0xcc>
		{
			return 1;
 800128c:	2301      	movs	r3, #1
 800128e:	e00b      	b.n	80012a8 <IsLegalMove+0xe4>
	for (uint8_t i = 0; i < legalMoves.numMoves; i++)
 8001290:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001294:	3301      	adds	r3, #1
 8001296:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800129a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800129e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d3da      	bcc.n	800125c <IsLegalMove+0x98>
		}
	}
	return 0;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	374c      	adds	r7, #76	; 0x4c
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012b0:	2000019c 	.word	0x2000019c

080012b4 <CalculateAllLegalPathsAndChecks>:


void CalculateAllLegalPathsAndChecks(struct PieceCoordinate from, struct Coordinate* allLegalPaths, uint8_t* numLegalPaths)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]

	CalculateAllLegalPaths(from, allLegalPaths, numLegalPaths, 1);
 80012c0:	2301      	movs	r3, #1
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f000 f814 	bl	80012f4 <CalculateAllLegalPaths>
}
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <CalculateAllLegalPathsNoChecks>:

/**
 * @brief Calculates all legal paths but without regard for putting their own king in check. Used by WillResultInSelfCheck for each enemy piece.
 */
static void CalculateAllLegalPathsNoChecks(struct PieceCoordinate from, struct Coordinate* allLegalPaths, uint8_t* numLegalPaths)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
	CalculateAllLegalPaths(from, allLegalPaths, numLegalPaths, 0);
 80012e0:	2300      	movs	r3, #0
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f000 f804 	bl	80012f4 <CalculateAllLegalPaths>
}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <CalculateAllLegalPaths>:

/**
 * @brief Calculates all legal paths with trimming off moves that would put their king in check controlled by calculateCheck
 */
static void CalculateAllLegalPaths(struct PieceCoordinate from, struct Coordinate* allLegalPaths, uint8_t* numLegalPaths, uint8_t calculateCheck)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b094      	sub	sp, #80	; 0x50
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	70fb      	strb	r3, [r7, #3]
	*numLegalPaths = 0;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]

	// Get all paths
	uint8_t numPaths;
	struct Coordinate allPaths[MAX_LEGAL_MOVES] = { 0 };
 8001308:	f107 0318 	add.w	r3, r7, #24
 800130c:	2236      	movs	r2, #54	; 0x36
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f008 fdc9 	bl	8009ea8 <memset>
	CalculateAllPaths(from, &numPaths, allPaths);
 8001316:	f107 0218 	add.w	r2, r7, #24
 800131a:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 800131e:	4619      	mov	r1, r3
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f000 f889 	bl	8001438 <CalculateAllPaths>

	// Populate legal paths from all paths
	for (uint8_t i = 0; i < numPaths; i++)
 8001326:	2300      	movs	r3, #0
 8001328:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800132c:	e076      	b.n	800141c <CalculateAllLegalPaths+0x128>
	{
		struct Coordinate path = allPaths[i];
 800132e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001338:	4413      	add	r3, r2
 800133a:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 800133e:	82bb      	strh	r3, [r7, #20]
		struct PieceCoordinate to = { MockChessboard[path.row][path.column], path.row, path.column };
 8001340:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001344:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001348:	4611      	mov	r1, r2
 800134a:	4a3a      	ldr	r2, [pc, #232]	; (8001434 <CalculateAllLegalPaths+0x140>)
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	440b      	add	r3, r1
 8001350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001354:	823b      	strh	r3, [r7, #16]
 8001356:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	74bb      	strb	r3, [r7, #18]
 800135e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	74fb      	strb	r3, [r7, #19]

		if (IsPieceCoordinateSameTeam(from, to))
 8001366:	6939      	ldr	r1, [r7, #16]
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f000 fd87 	bl	8001e7c <IsPieceCoordinateSameTeam>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d145      	bne.n	8001400 <CalculateAllLegalPaths+0x10c>
		{
			continue;
		}
		else if (IsPieceMovingStraight(from, to) && IsPieceBlockingStraight(from, to))
 8001374:	6939      	ldr	r1, [r7, #16]
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 fd48 	bl	8001e0c <IsPieceMovingStraight>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d006      	beq.n	8001390 <CalculateAllLegalPaths+0x9c>
 8001382:	6939      	ldr	r1, [r7, #16]
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f000 fb4f 	bl	8001a28 <IsPieceBlockingStraight>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d139      	bne.n	8001404 <CalculateAllLegalPaths+0x110>
		{
			continue;
		}
		else if (IsPieceMovingDiagonal(from, to))
 8001390:	6939      	ldr	r1, [r7, #16]
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f000 fd50 	bl	8001e38 <IsPieceMovingDiagonal>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d017      	beq.n	80013ce <CalculateAllLegalPaths+0xda>
		{
			// For pawn to move in diagonal line, it must have an enemy piece on the diagonal
			if ((from.piece.type == PAWN) && (to.piece.owner == NEUTRAL))
 800139e:	7b3b      	ldrb	r3, [r7, #12]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d102      	bne.n	80013aa <CalculateAllLegalPaths+0xb6>
 80013a4:	7c7b      	ldrb	r3, [r7, #17]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d02e      	beq.n	8001408 <CalculateAllLegalPaths+0x114>
			{
				continue;
			}
			else if (IsPieceBlockingDiagonal(from, to))
 80013aa:	6939      	ldr	r1, [r7, #16]
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f000 fc85 	bl	8001cbc <IsPieceBlockingDiagonal>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d129      	bne.n	800140c <CalculateAllLegalPaths+0x118>
			{
				continue;
			}
			else if (calculateCheck && WillResultInSelfCheck(from, to))
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d011      	beq.n	80013e2 <CalculateAllLegalPaths+0xee>
 80013be:	6939      	ldr	r1, [r7, #16]
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 fb8d 	bl	8001ae0 <WillResultInSelfCheck>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d00a      	beq.n	80013e2 <CalculateAllLegalPaths+0xee>
			{
				continue;
 80013cc:	e021      	b.n	8001412 <CalculateAllLegalPaths+0x11e>
			}
		}
		else if (calculateCheck && WillResultInSelfCheck(from, to))
 80013ce:	78fb      	ldrb	r3, [r7, #3]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d006      	beq.n	80013e2 <CalculateAllLegalPaths+0xee>
 80013d4:	6939      	ldr	r1, [r7, #16]
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f000 fb82 	bl	8001ae0 <WillResultInSelfCheck>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d116      	bne.n	8001410 <CalculateAllLegalPaths+0x11c>
		{
			continue;
		}
		allLegalPaths[(*numLegalPaths)++] = path;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	1c5a      	adds	r2, r3, #1
 80013e8:	b2d1      	uxtb	r1, r2
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	7011      	strb	r1, [r2, #0]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	4413      	add	r3, r2
 80013f4:	461a      	mov	r2, r3
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	8013      	strh	r3, [r2, #0]
 80013fe:	e008      	b.n	8001412 <CalculateAllLegalPaths+0x11e>
			continue;
 8001400:	bf00      	nop
 8001402:	e006      	b.n	8001412 <CalculateAllLegalPaths+0x11e>
			continue;
 8001404:	bf00      	nop
 8001406:	e004      	b.n	8001412 <CalculateAllLegalPaths+0x11e>
				continue;
 8001408:	bf00      	nop
 800140a:	e002      	b.n	8001412 <CalculateAllLegalPaths+0x11e>
				continue;
 800140c:	bf00      	nop
 800140e:	e000      	b.n	8001412 <CalculateAllLegalPaths+0x11e>
			continue;
 8001410:	bf00      	nop
	for (uint8_t i = 0; i < numPaths; i++)
 8001412:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001416:	3301      	adds	r3, #1
 8001418:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800141c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001420:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001424:	429a      	cmp	r2, r3
 8001426:	d382      	bcc.n	800132e <CalculateAllLegalPaths+0x3a>
	}
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3750      	adds	r7, #80	; 0x50
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000011c 	.word	0x2000011c

08001438 <CalculateAllPaths>:

static void CalculateAllPaths(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
	*numPaths = 0;
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]

	switch (pieceCoordinate.piece.type)
 800144a:	7b3b      	ldrb	r3, [r7, #12]
 800144c:	3b01      	subs	r3, #1
 800144e:	2b05      	cmp	r3, #5
 8001450:	d832      	bhi.n	80014b8 <CalculateAllPaths+0x80>
 8001452:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <CalculateAllPaths+0x20>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	08001471 	.word	0x08001471
 800145c:	08001495 	.word	0x08001495
 8001460:	08001489 	.word	0x08001489
 8001464:	0800147d 	.word	0x0800147d
 8001468:	080014a1 	.word	0x080014a1
 800146c:	080014ad 	.word	0x080014ad
	{
	case PAWN:
		CalculateAllPathsPawn(pieceCoordinate, numPaths, paths);
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	68b9      	ldr	r1, [r7, #8]
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f000 f825 	bl	80014c4 <CalculateAllPathsPawn>
		break;
 800147a:	e01e      	b.n	80014ba <CalculateAllPaths+0x82>
	case ROOK:
		CalculateAllPathsRook(pieceCoordinate, numPaths, paths);
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	68b9      	ldr	r1, [r7, #8]
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f000 f89a 	bl	80015ba <CalculateAllPathsRook>
		break;
 8001486:	e018      	b.n	80014ba <CalculateAllPaths+0x82>
	case BISHOP:
		CalculateAllPathsBishop(pieceCoordinate, numPaths, paths);
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	68b9      	ldr	r1, [r7, #8]
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f000 f8dd 	bl	800164c <CalculateAllPathsBishop>
		break;
 8001492:	e012      	b.n	80014ba <CalculateAllPaths+0x82>
	case KNIGHT:
		CalculateAllPathsKnight(pieceCoordinate, numPaths, paths);
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	68b9      	ldr	r1, [r7, #8]
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f000 f999 	bl	80017d0 <CalculateAllPathsKnight>
		break;
 800149e:	e00c      	b.n	80014ba <CalculateAllPaths+0x82>
	case QUEEN:
		CalculateAllPathsQueen(pieceCoordinate, numPaths, paths);
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	68b9      	ldr	r1, [r7, #8]
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f000 f9f1 	bl	800188c <CalculateAllPathsQueen>
		break;
 80014aa:	e006      	b.n	80014ba <CalculateAllPaths+0x82>
	case KING:
		CalculateAllPathsKing(pieceCoordinate, numPaths, paths);
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	68b9      	ldr	r1, [r7, #8]
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f000 fa65 	bl	8001980 <CalculateAllPathsKing>
		break;
 80014b6:	e000      	b.n	80014ba <CalculateAllPaths+0x82>
	default:
		break;
 80014b8:	bf00      	nop
	}
}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop

080014c4 <CalculateAllPathsPawn>:

static void CalculateAllPathsPawn(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
	uint8_t row = pieceCoordinate.piece.owner == WHITE ? pieceCoordinate.row + 1 : pieceCoordinate.row - 1;
 80014d0:	7b7b      	ldrb	r3, [r7, #13]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d103      	bne.n	80014de <CalculateAllPathsPawn+0x1a>
 80014d6:	7bbb      	ldrb	r3, [r7, #14]
 80014d8:	3301      	adds	r3, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	e002      	b.n	80014e4 <CalculateAllPathsPawn+0x20>
 80014de:	7bbb      	ldrb	r3, [r7, #14]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	77bb      	strb	r3, [r7, #30]
	uint8_t column = pieceCoordinate.column;
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	777b      	strb	r3, [r7, #29]

	for (int8_t i = -1; i <= 1; i++)
 80014ea:	23ff      	movs	r3, #255	; 0xff
 80014ec:	77fb      	strb	r3, [r7, #31]
 80014ee:	e022      	b.n	8001536 <CalculateAllPathsPawn+0x72>
	{

		struct Coordinate path = { row, column + i };
 80014f0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80014f4:	763b      	strb	r3, [r7, #24]
 80014f6:	7ffa      	ldrb	r2, [r7, #31]
 80014f8:	7f7b      	ldrb	r3, [r7, #29]
 80014fa:	4413      	add	r3, r2
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	767b      	strb	r3, [r7, #25]
		if (IsValidCoordinate(path))
 8001502:	69b8      	ldr	r0, [r7, #24]
 8001504:	f000 fc65 	bl	8001dd2 <IsValidCoordinate>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00d      	beq.n	800152a <CalculateAllPathsPawn+0x66>
		{
			paths[(*numPaths)++] = path;
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	b2d1      	uxtb	r1, r2
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	7011      	strb	r1, [r2, #0]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	4413      	add	r3, r2
 8001520:	461a      	mov	r2, r3
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	8013      	strh	r3, [r2, #0]
	for (int8_t i = -1; i <= 1; i++)
 800152a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	3301      	adds	r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	77fb      	strb	r3, [r7, #31]
 8001536:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800153a:	2b01      	cmp	r3, #1
 800153c:	ddd8      	ble.n	80014f0 <CalculateAllPathsPawn+0x2c>
		}
	}

	if (pieceCoordinate.piece.owner == WHITE && pieceCoordinate.row == 1)
 800153e:	7b7b      	ldrb	r3, [r7, #13]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d11a      	bne.n	800157a <CalculateAllPathsPawn+0xb6>
 8001544:	7bbb      	ldrb	r3, [r7, #14]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d117      	bne.n	800157a <CalculateAllPathsPawn+0xb6>
	{
		struct Coordinate path = { row + 1, column };
 800154a:	7fbb      	ldrb	r3, [r7, #30]
 800154c:	3301      	adds	r3, #1
 800154e:	b2db      	uxtb	r3, r3
 8001550:	b25b      	sxtb	r3, r3
 8001552:	753b      	strb	r3, [r7, #20]
 8001554:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001558:	757b      	strb	r3, [r7, #21]
		paths[(*numPaths)++] = path;
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	b2d1      	uxtb	r1, r2
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	7011      	strb	r1, [r2, #0]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	4413      	add	r3, r2
 800156c:	461a      	mov	r2, r3
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	8013      	strh	r3, [r2, #0]
	{
 8001576:	bf00      	nop
	else if (pieceCoordinate.piece.owner == BLACK && pieceCoordinate.row == 6)
	{
		struct Coordinate path = { row - 1, column };
		paths[(*numPaths)++] = path;
	}
}
 8001578:	e01b      	b.n	80015b2 <CalculateAllPathsPawn+0xee>
	else if (pieceCoordinate.piece.owner == BLACK && pieceCoordinate.row == 6)
 800157a:	7b7b      	ldrb	r3, [r7, #13]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d118      	bne.n	80015b2 <CalculateAllPathsPawn+0xee>
 8001580:	7bbb      	ldrb	r3, [r7, #14]
 8001582:	2b06      	cmp	r3, #6
 8001584:	d115      	bne.n	80015b2 <CalculateAllPathsPawn+0xee>
		struct Coordinate path = { row - 1, column };
 8001586:	7fbb      	ldrb	r3, [r7, #30]
 8001588:	3b01      	subs	r3, #1
 800158a:	b2db      	uxtb	r3, r3
 800158c:	b25b      	sxtb	r3, r3
 800158e:	743b      	strb	r3, [r7, #16]
 8001590:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001594:	747b      	strb	r3, [r7, #17]
		paths[(*numPaths)++] = path;
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	b2d1      	uxtb	r1, r2
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	7011      	strb	r1, [r2, #0]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	4413      	add	r3, r2
 80015a8:	461a      	mov	r2, r3
 80015aa:	f107 0310 	add.w	r3, r7, #16
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	8013      	strh	r3, [r2, #0]
}
 80015b2:	bf00      	nop
 80015b4:	3720      	adds	r7, #32
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <CalculateAllPathsRook>:

static void CalculateAllPathsRook(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b089      	sub	sp, #36	; 0x24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	60f8      	str	r0, [r7, #12]
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
	uint8_t row = pieceCoordinate.row;
 80015c6:	7bbb      	ldrb	r3, [r7, #14]
 80015c8:	77bb      	strb	r3, [r7, #30]
	uint8_t column = pieceCoordinate.column;
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	777b      	strb	r3, [r7, #29]

	for (uint8_t move = 0; move < 8; move++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	77fb      	strb	r3, [r7, #31]
 80015d2:	e032      	b.n	800163a <CalculateAllPathsRook+0x80>
	{
		if (move != row)
 80015d4:	7ffa      	ldrb	r2, [r7, #31]
 80015d6:	7fbb      	ldrb	r3, [r7, #30]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d013      	beq.n	8001604 <CalculateAllPathsRook+0x4a>
		{
			struct Coordinate path = { move, column };
 80015dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015e0:	763b      	strb	r3, [r7, #24]
 80015e2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80015e6:	767b      	strb	r3, [r7, #25]
			paths[(*numPaths)++] = path;
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	b2d1      	uxtb	r1, r2
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	7011      	strb	r1, [r2, #0]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	461a      	mov	r2, r3
 80015fc:	f107 0318 	add.w	r3, r7, #24
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	8013      	strh	r3, [r2, #0]
		}

		if (move != column)
 8001604:	7ffa      	ldrb	r2, [r7, #31]
 8001606:	7f7b      	ldrb	r3, [r7, #29]
 8001608:	429a      	cmp	r2, r3
 800160a:	d013      	beq.n	8001634 <CalculateAllPathsRook+0x7a>
		{
			struct Coordinate path = { row, move };
 800160c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001610:	753b      	strb	r3, [r7, #20]
 8001612:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001616:	757b      	strb	r3, [r7, #21]
			paths[(*numPaths)++] = path;
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	1c5a      	adds	r2, r3, #1
 800161e:	b2d1      	uxtb	r1, r2
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	7011      	strb	r1, [r2, #0]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	461a      	mov	r2, r3
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	8013      	strh	r3, [r2, #0]
	for (uint8_t move = 0; move < 8; move++)
 8001634:	7ffb      	ldrb	r3, [r7, #31]
 8001636:	3301      	adds	r3, #1
 8001638:	77fb      	strb	r3, [r7, #31]
 800163a:	7ffb      	ldrb	r3, [r7, #31]
 800163c:	2b07      	cmp	r3, #7
 800163e:	d9c9      	bls.n	80015d4 <CalculateAllPathsRook+0x1a>
		}
	}
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <CalculateAllPathsBishop>:

static void CalculateAllPathsBishop(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 800164c:	b480      	push	{r7}
 800164e:	b08b      	sub	sp, #44	; 0x2c
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
	uint8_t row = pieceCoordinate.row;
 8001658:	7bbb      	ldrb	r3, [r7, #14]
 800165a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t column = pieceCoordinate.column;
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	for (uint8_t move = 1; move < 8; move++)
 8001664:	2301      	movs	r3, #1
 8001666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800166a:	e0a5      	b.n	80017b8 <CalculateAllPathsBishop+0x16c>
	{
		if (row + move < 8)
 800166c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001674:	4413      	add	r3, r2
 8001676:	2b07      	cmp	r3, #7
 8001678:	dc4a      	bgt.n	8001710 <CalculateAllPathsBishop+0xc4>
		{
			if (column + move < 8)
 800167a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800167e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001682:	4413      	add	r3, r2
 8001684:	2b07      	cmp	r3, #7
 8001686:	dc1f      	bgt.n	80016c8 <CalculateAllPathsBishop+0x7c>
			{
				struct Coordinate path = { row + move, column + move };
 8001688:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800168c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001690:	4413      	add	r3, r2
 8001692:	b2db      	uxtb	r3, r3
 8001694:	b25b      	sxtb	r3, r3
 8001696:	f887 3020 	strb.w	r3, [r7, #32]
 800169a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800169e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016a2:	4413      	add	r3, r2
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				paths[(*numPaths)++] = path;
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	1c5a      	adds	r2, r3, #1
 80016b2:	b2d1      	uxtb	r1, r2
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	7011      	strb	r1, [r2, #0]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	461a      	mov	r2, r3
 80016c0:	f107 0320 	add.w	r3, r7, #32
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	8013      	strh	r3, [r2, #0]
			}
			if (column >= move)
 80016c8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80016cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d31d      	bcc.n	8001710 <CalculateAllPathsBishop+0xc4>
			{
				struct Coordinate path = { row + move, column - move };
 80016d4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80016d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016dc:	4413      	add	r3, r2
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	b25b      	sxtb	r3, r3
 80016e2:	773b      	strb	r3, [r7, #28]
 80016e4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80016e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	777b      	strb	r3, [r7, #29]
				paths[(*numPaths)++] = path;
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	b2d1      	uxtb	r1, r2
 80016fc:	68ba      	ldr	r2, [r7, #8]
 80016fe:	7011      	strb	r1, [r2, #0]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	461a      	mov	r2, r3
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	8013      	strh	r3, [r2, #0]
			}

		}

		if (row >= move)
 8001710:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001718:	429a      	cmp	r2, r3
 800171a:	d348      	bcc.n	80017ae <CalculateAllPathsBishop+0x162>
		{
			if (column + move < 8)
 800171c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001724:	4413      	add	r3, r2
 8001726:	2b07      	cmp	r3, #7
 8001728:	dc1d      	bgt.n	8001766 <CalculateAllPathsBishop+0x11a>
			{
				struct Coordinate path = { row - move, column + move };
 800172a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800172e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	b2db      	uxtb	r3, r3
 8001736:	b25b      	sxtb	r3, r3
 8001738:	763b      	strb	r3, [r7, #24]
 800173a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800173e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001742:	4413      	add	r3, r2
 8001744:	b2db      	uxtb	r3, r3
 8001746:	b25b      	sxtb	r3, r3
 8001748:	767b      	strb	r3, [r7, #25]
				paths[(*numPaths)++] = path;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	b2d1      	uxtb	r1, r2
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	7011      	strb	r1, [r2, #0]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	4413      	add	r3, r2
 800175c:	461a      	mov	r2, r3
 800175e:	f107 0318 	add.w	r3, r7, #24
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	8013      	strh	r3, [r2, #0]
			}
			if (column >= move)
 8001766:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800176a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800176e:	429a      	cmp	r2, r3
 8001770:	d31d      	bcc.n	80017ae <CalculateAllPathsBishop+0x162>
			{
				struct Coordinate path = { row - move, column - move };
 8001772:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001776:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	b2db      	uxtb	r3, r3
 800177e:	b25b      	sxtb	r3, r3
 8001780:	753b      	strb	r3, [r7, #20]
 8001782:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	b25b      	sxtb	r3, r3
 8001790:	757b      	strb	r3, [r7, #21]
				paths[(*numPaths)++] = path;
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	b2d1      	uxtb	r1, r2
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	7011      	strb	r1, [r2, #0]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	4413      	add	r3, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	8013      	strh	r3, [r2, #0]
	for (uint8_t move = 1; move < 8; move++)
 80017ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017b2:	3301      	adds	r3, #1
 80017b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017bc:	2b07      	cmp	r3, #7
 80017be:	f67f af55 	bls.w	800166c <CalculateAllPathsBishop+0x20>
			}
		}
	}
}
 80017c2:	bf00      	nop
 80017c4:	bf00      	nop
 80017c6:	372c      	adds	r7, #44	; 0x2c
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
	...

080017d0 <CalculateAllPathsKnight>:

static void CalculateAllPathsKnight(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b08d      	sub	sp, #52	; 0x34
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
	uint8_t row = pieceCoordinate.row;
 80017dc:	7bbb      	ldrb	r3, [r7, #14]
 80017de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t column = pieceCoordinate.column;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	const struct Coordinate adders[] = {
 80017e8:	4b27      	ldr	r3, [pc, #156]	; (8001888 <CalculateAllPathsKnight+0xb8>)
 80017ea:	f107 0418 	add.w	r4, r7, #24
 80017ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		{1, 2}, {-1, 2}, {1, -2}, {-1, -2},
		{2, 1}, {-2, 1}, {2, -1}, {-2, -1}
	};

	for (uint8_t move = 0; move < sizeof(adders) / sizeof(*adders); move++)
 80017f4:	2300      	movs	r3, #0
 80017f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80017fa:	e03c      	b.n	8001876 <CalculateAllPathsKnight+0xa6>
	{
		int8_t newRow = row + adders[move].row;
 80017fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001806:	4413      	add	r3, r2
 8001808:	f913 3c18 	ldrsb.w	r3, [r3, #-24]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001812:	4413      	add	r3, r2
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		int8_t newColumn = column + adders[move].column;
 800181a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001824:	4413      	add	r3, r2
 8001826:	f913 3c17 	ldrsb.w	r3, [r3, #-23]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001830:	4413      	add	r3, r2
 8001832:	b2db      	uxtb	r3, r3
 8001834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		struct Coordinate path = { newRow, newColumn };
 8001838:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800183c:	753b      	strb	r3, [r7, #20]
 800183e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001842:	757b      	strb	r3, [r7, #21]
		if (IsValidCoordinate(path))
 8001844:	6978      	ldr	r0, [r7, #20]
 8001846:	f000 fac4 	bl	8001dd2 <IsValidCoordinate>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00d      	beq.n	800186c <CalculateAllPathsKnight+0x9c>
		{
			paths[(*numPaths)++] = path;
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	b2d1      	uxtb	r1, r2
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	7011      	strb	r1, [r2, #0]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	461a      	mov	r2, r3
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	8013      	strh	r3, [r2, #0]
	for (uint8_t move = 0; move < sizeof(adders) / sizeof(*adders); move++)
 800186c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001870:	3301      	adds	r3, #1
 8001872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800187a:	2b07      	cmp	r3, #7
 800187c:	d9be      	bls.n	80017fc <CalculateAllPathsKnight+0x2c>
		}
	}
}
 800187e:	bf00      	nop
 8001880:	bf00      	nop
 8001882:	3734      	adds	r7, #52	; 0x34
 8001884:	46bd      	mov	sp, r7
 8001886:	bd90      	pop	{r4, r7, pc}
 8001888:	08009ed8 	.word	0x08009ed8

0800188c <CalculateAllPathsQueen>:

static void CalculateAllPathsQueen(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b094      	sub	sp, #80	; 0x50
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
	uint8_t numRookPaths = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	struct Coordinate rookPaths[MAX_ROOK_MOVES] = { 0 };
 800189e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	611a      	str	r2, [r3, #16]
 80018ae:	615a      	str	r2, [r3, #20]
 80018b0:	619a      	str	r2, [r3, #24]
	CalculateAllPathsRook(pieceCoordinate, &numRookPaths, rookPaths);
 80018b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018b6:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 80018ba:	4619      	mov	r1, r3
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f7ff fe7c 	bl	80015ba <CalculateAllPathsRook>

	uint8_t numBishopPaths = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	struct Coordinate bishopPaths[MAX_BISHOP_MOVES] = { 0 };
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
 80018d8:	615a      	str	r2, [r3, #20]
 80018da:	831a      	strh	r2, [r3, #24]
	CalculateAllPathsBishop(pieceCoordinate, &numBishopPaths, bishopPaths);
 80018dc:	f107 0214 	add.w	r2, r7, #20
 80018e0:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80018e4:	4619      	mov	r1, r3
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f7ff feb0 	bl	800164c <CalculateAllPathsBishop>

	*numPaths = numRookPaths + numBishopPaths;
 80018ec:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80018f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018f4:	4413      	add	r3, r2
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	701a      	strb	r2, [r3, #0]

	// Add in Rook paths
	for (uint8_t i = 0; i < numRookPaths; i++)
 80018fc:	2300      	movs	r3, #0
 80018fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001902:	e012      	b.n	800192a <CalculateAllPathsQueen+0x9e>
	{
		paths[i] = rookPaths[i];
 8001904:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001908:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800190c:	0052      	lsls	r2, r2, #1
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	440a      	add	r2, r1
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001918:	440b      	add	r3, r1
 800191a:	3b20      	subs	r3, #32
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < numRookPaths; i++)
 8001920:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001924:	3301      	adds	r3, #1
 8001926:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800192a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800192e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001932:	429a      	cmp	r2, r3
 8001934:	d3e6      	bcc.n	8001904 <CalculateAllPathsQueen+0x78>
	}

	// Append Bishop paths
	for (uint8_t i = 0; i < numBishopPaths; i++)
 8001936:	2300      	movs	r3, #0
 8001938:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800193c:	e015      	b.n	800196a <CalculateAllPathsQueen+0xde>
	{
		paths[i + numRookPaths] = bishopPaths[i];
 800193e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001942:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001946:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 800194a:	440a      	add	r2, r1
 800194c:	0052      	lsls	r2, r2, #1
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	440a      	add	r2, r1
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001958:	440b      	add	r3, r1
 800195a:	3b3c      	subs	r3, #60	; 0x3c
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < numBishopPaths; i++)
 8001960:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001964:	3301      	adds	r3, #1
 8001966:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800196a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800196e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001972:	429a      	cmp	r2, r3
 8001974:	d3e3      	bcc.n	800193e <CalculateAllPathsQueen+0xb2>
	}
}
 8001976:	bf00      	nop
 8001978:	bf00      	nop
 800197a:	3750      	adds	r7, #80	; 0x50
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <CalculateAllPathsKing>:

static void CalculateAllPathsKing(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
	uint8_t row = pieceCoordinate.row;
 800198c:	7bbb      	ldrb	r3, [r7, #14]
 800198e:	757b      	strb	r3, [r7, #21]
	uint8_t column = pieceCoordinate.column;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	753b      	strb	r3, [r7, #20]

	for (int8_t i = -1; i <= 1; i++)
 8001994:	23ff      	movs	r3, #255	; 0xff
 8001996:	75fb      	strb	r3, [r7, #23]
 8001998:	e03c      	b.n	8001a14 <CalculateAllPathsKing+0x94>
	{
		for (int8_t j = -1; j <= 1; j++)
 800199a:	23ff      	movs	r3, #255	; 0xff
 800199c:	75bb      	strb	r3, [r7, #22]
 800199e:	e02f      	b.n	8001a00 <CalculateAllPathsKing+0x80>
		{
			if (i == 0 && j == 0)
 80019a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d103      	bne.n	80019b0 <CalculateAllPathsKing+0x30>
 80019a8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d020      	beq.n	80019f2 <CalculateAllPathsKing+0x72>
			{
				continue;
			}

			struct Coordinate path = { row + i, column + j };
 80019b0:	7dfa      	ldrb	r2, [r7, #23]
 80019b2:	7d7b      	ldrb	r3, [r7, #21]
 80019b4:	4413      	add	r3, r2
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	b25b      	sxtb	r3, r3
 80019ba:	743b      	strb	r3, [r7, #16]
 80019bc:	7dba      	ldrb	r2, [r7, #22]
 80019be:	7d3b      	ldrb	r3, [r7, #20]
 80019c0:	4413      	add	r3, r2
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	b25b      	sxtb	r3, r3
 80019c6:	747b      	strb	r3, [r7, #17]
			if (IsValidCoordinate(path))
 80019c8:	6938      	ldr	r0, [r7, #16]
 80019ca:	f000 fa02 	bl	8001dd2 <IsValidCoordinate>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00f      	beq.n	80019f4 <CalculateAllPathsKing+0x74>
			{
				paths[(*numPaths)++] = path;
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	b2d1      	uxtb	r1, r2
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	7011      	strb	r1, [r2, #0]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	461a      	mov	r2, r3
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	8013      	strh	r3, [r2, #0]
 80019f0:	e000      	b.n	80019f4 <CalculateAllPathsKing+0x74>
				continue;
 80019f2:	bf00      	nop
		for (int8_t j = -1; j <= 1; j++)
 80019f4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	3301      	adds	r3, #1
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	75bb      	strb	r3, [r7, #22]
 8001a00:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	ddcb      	ble.n	80019a0 <CalculateAllPathsKing+0x20>
	for (int8_t i = -1; i <= 1; i++)
 8001a08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	3301      	adds	r3, #1
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	75fb      	strb	r3, [r7, #23]
 8001a14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	ddbe      	ble.n	800199a <CalculateAllPathsKing+0x1a>
			}
		}
	}
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <IsPieceBlockingStraight>:

static uint8_t IsPieceBlockingStraight(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
	// If move is in same column
	if (from.column == to.column)
 8001a32:	79fa      	ldrb	r2, [r7, #7]
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d123      	bne.n	8001a82 <IsPieceBlockingStraight+0x5a>
	{
		uint8_t startRow = from.row > to.row ? to.row : from.row;
 8001a3a:	79ba      	ldrb	r2, [r7, #6]
 8001a3c:	78bb      	ldrb	r3, [r7, #2]
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	bf28      	it	cs
 8001a42:	4613      	movcs	r3, r2
 8001a44:	72fb      	strb	r3, [r7, #11]
		uint8_t endRow = from.row > to.row ? from.row : to.row;
 8001a46:	78ba      	ldrb	r2, [r7, #2]
 8001a48:	79bb      	ldrb	r3, [r7, #6]
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	bf38      	it	cc
 8001a4e:	4613      	movcc	r3, r2
 8001a50:	72bb      	strb	r3, [r7, #10]

		for (uint8_t row = startRow + 1; row < endRow; row++)
 8001a52:	7afb      	ldrb	r3, [r7, #11]
 8001a54:	3301      	adds	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	e00e      	b.n	8001a78 <IsPieceBlockingStraight+0x50>
		{
			if (MockChessboard[row][from.column].type != NONE) // If piece in row between "from" and "to" then it is blocking it.
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	79fa      	ldrb	r2, [r7, #7]
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4a1e      	ldr	r2, [pc, #120]	; (8001adc <IsPieceBlockingStraight+0xb4>)
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	440b      	add	r3, r1
 8001a66:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <IsPieceBlockingStraight+0x4a>
			{
				return 1;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e02f      	b.n	8001ad2 <IsPieceBlockingStraight+0xaa>
		for (uint8_t row = startRow + 1; row < endRow; row++)
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	3301      	adds	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	7abb      	ldrb	r3, [r7, #10]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d3ec      	bcc.n	8001a5a <IsPieceBlockingStraight+0x32>
 8001a80:	e026      	b.n	8001ad0 <IsPieceBlockingStraight+0xa8>
			}
		}
	}
	// If move is in same row
	else if (from.row == to.row)
 8001a82:	79ba      	ldrb	r2, [r7, #6]
 8001a84:	78bb      	ldrb	r3, [r7, #2]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d122      	bne.n	8001ad0 <IsPieceBlockingStraight+0xa8>
	{
		uint8_t startColumn = from.column > to.column ? to.column : from.column;
 8001a8a:	79fa      	ldrb	r2, [r7, #7]
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	bf28      	it	cs
 8001a92:	4613      	movcs	r3, r2
 8001a94:	737b      	strb	r3, [r7, #13]
		uint8_t endColumn = from.column > to.column ? from.column : to.column;
 8001a96:	78fa      	ldrb	r2, [r7, #3]
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	bf38      	it	cc
 8001a9e:	4613      	movcc	r3, r2
 8001aa0:	733b      	strb	r3, [r7, #12]
		for (uint8_t column = startColumn + 1; column < endColumn; column++)
 8001aa2:	7b7b      	ldrb	r3, [r7, #13]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	73bb      	strb	r3, [r7, #14]
 8001aa8:	e00e      	b.n	8001ac8 <IsPieceBlockingStraight+0xa0>
		{
			// If piece in column between "from" and "to" then it is blocking it.
			if (MockChessboard[from.row][column].type != NONE)
 8001aaa:	79bb      	ldrb	r3, [r7, #6]
 8001aac:	461a      	mov	r2, r3
 8001aae:	7bbb      	ldrb	r3, [r7, #14]
 8001ab0:	490a      	ldr	r1, [pc, #40]	; (8001adc <IsPieceBlockingStraight+0xb4>)
 8001ab2:	00d2      	lsls	r2, r2, #3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <IsPieceBlockingStraight+0x9a>
			{
				return 1;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e007      	b.n	8001ad2 <IsPieceBlockingStraight+0xaa>
		for (uint8_t column = startColumn + 1; column < endColumn; column++)
 8001ac2:	7bbb      	ldrb	r3, [r7, #14]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	73bb      	strb	r3, [r7, #14]
 8001ac8:	7bba      	ldrb	r2, [r7, #14]
 8001aca:	7b3b      	ldrb	r3, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d3ec      	bcc.n	8001aaa <IsPieceBlockingStraight+0x82>
			}
		}
	}
	return 0;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	2000011c 	.word	0x2000011c

08001ae0 <WillResultInSelfCheck>:

uint8_t WillResultInSelfCheck(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b0a4      	sub	sp, #144	; 0x90
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
	// Temporarily populate the chessboard with this move to see if it causes a self check
	MockChessboard[from.row][from.column] = EMPTY_PIECE;
 8001aea:	79bb      	ldrb	r3, [r7, #6]
 8001aec:	79fa      	ldrb	r2, [r7, #7]
 8001aee:	4950      	ldr	r1, [pc, #320]	; (8001c30 <WillResultInSelfCheck+0x150>)
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4413      	add	r3, r2
 8001af4:	4a4f      	ldr	r2, [pc, #316]	; (8001c34 <WillResultInSelfCheck+0x154>)
 8001af6:	8812      	ldrh	r2, [r2, #0]
 8001af8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	MockChessboard[to.row][to.column] = from.piece;
 8001afc:	78bb      	ldrb	r3, [r7, #2]
 8001afe:	78fa      	ldrb	r2, [r7, #3]
 8001b00:	494b      	ldr	r1, [pc, #300]	; (8001c30 <WillResultInSelfCheck+0x150>)
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4413      	add	r3, r2
 8001b06:	88ba      	ldrh	r2, [r7, #4]
 8001b08:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	enum PieceOwner enemyTeam = from.piece.owner == WHITE ? BLACK : WHITE;
 8001b0c:	797b      	ldrb	r3, [r7, #5]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <WillResultInSelfCheck+0x36>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e000      	b.n	8001b18 <WillResultInSelfCheck+0x38>
 8001b16:	2301      	movs	r3, #1
 8001b18:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
	uint8_t numEnemyPieces;
	struct PieceCoordinate enemyPieces[PIECES_PER_TEAM] = { 0 };
 8001b1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b20:	2240      	movs	r2, #64	; 0x40
 8001b22:	2100      	movs	r1, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f008 f9bf 	bl	8009ea8 <memset>

	// For each enemy piece
	GetPiecesForTeam(enemyTeam, enemyPieces, &numEnemyPieces);
 8001b2a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001b2e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001b32:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 f87e 	bl	8001c38 <GetPiecesForTeam>
	for (uint8_t i = 0; i < numEnemyPieces; i++)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001b42:	e059      	b.n	8001bf8 <WillResultInSelfCheck+0x118>
	{
		uint8_t numEnemyPieceLegalPaths;
		struct Coordinate enemyPieceLegalPaths[MAX_LEGAL_MOVES] = { 0 };
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	2236      	movs	r2, #54	; 0x36
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f008 f9ab 	bl	8009ea8 <memset>

		// For each legal path this enemy piece can take
		CalculateAllLegalPathsNoChecks(enemyPieces[i], enemyPieceLegalPaths, &numEnemyPieceLegalPaths);
 8001b52:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001b56:	f107 024b 	add.w	r2, r7, #75	; 0x4b
 8001b5a:	f107 010c 	add.w	r1, r7, #12
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8001b64:	4403      	add	r3, r0
 8001b66:	f853 0c44 	ldr.w	r0, [r3, #-68]
 8001b6a:	f7ff fbb3 	bl	80012d4 <CalculateAllLegalPathsNoChecks>
		for (uint8_t j = 0; j < numEnemyPieceLegalPaths; j++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8001b74:	e035      	b.n	8001be2 <WillResultInSelfCheck+0x102>
		{
			struct Coordinate enemyFinalLocation = enemyPieceLegalPaths[j];
 8001b76:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001b80:	4413      	add	r3, r2
 8001b82:	f833 3c84 	ldrh.w	r3, [r3, #-132]
 8001b86:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			struct Piece killedPiece = MockChessboard[enemyFinalLocation.row][enemyFinalLocation.column];
 8001b8a:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 8001b8e:	f997 2049 	ldrsb.w	r2, [r7, #73]	; 0x49
 8001b92:	4611      	mov	r1, r2
 8001b94:	4a26      	ldr	r2, [pc, #152]	; (8001c30 <WillResultInSelfCheck+0x150>)
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	440b      	add	r3, r1
 8001b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b9e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

			// If the enemy piece can take our king, this move (from -> to) will result in a check so it cannot be legal
			if ((killedPiece.type == KING) && (killedPiece.owner == from.piece.owner))
 8001ba2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d116      	bne.n	8001bd8 <WillResultInSelfCheck+0xf8>
 8001baa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001bae:	797b      	ldrb	r3, [r7, #5]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d111      	bne.n	8001bd8 <WillResultInSelfCheck+0xf8>
			{
				// Undo temporary move
				MockChessboard[from.row][from.column] = from.piece;
 8001bb4:	79bb      	ldrb	r3, [r7, #6]
 8001bb6:	79fa      	ldrb	r2, [r7, #7]
 8001bb8:	491d      	ldr	r1, [pc, #116]	; (8001c30 <WillResultInSelfCheck+0x150>)
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	88ba      	ldrh	r2, [r7, #4]
 8001bc0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				MockChessboard[to.row][to.column] = to.piece;
 8001bc4:	78bb      	ldrb	r3, [r7, #2]
 8001bc6:	78fa      	ldrb	r2, [r7, #3]
 8001bc8:	4919      	ldr	r1, [pc, #100]	; (8001c30 <WillResultInSelfCheck+0x150>)
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	883a      	ldrh	r2, [r7, #0]
 8001bd0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				return 1;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e026      	b.n	8001c26 <WillResultInSelfCheck+0x146>
		for (uint8_t j = 0; j < numEnemyPieceLegalPaths; j++)
 8001bd8:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001bdc:	3301      	adds	r3, #1
 8001bde:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8001be2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001be6:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d3c3      	bcc.n	8001b76 <WillResultInSelfCheck+0x96>
	for (uint8_t i = 0; i < numEnemyPieces; i++)
 8001bee:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001bf8:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001bfc:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d39f      	bcc.n	8001b44 <WillResultInSelfCheck+0x64>
			}
		}
	}

	// Undo temporary move
	MockChessboard[from.row][from.column] = from.piece;
 8001c04:	79bb      	ldrb	r3, [r7, #6]
 8001c06:	79fa      	ldrb	r2, [r7, #7]
 8001c08:	4909      	ldr	r1, [pc, #36]	; (8001c30 <WillResultInSelfCheck+0x150>)
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	88ba      	ldrh	r2, [r7, #4]
 8001c10:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	MockChessboard[to.row][to.column] = to.piece;
 8001c14:	78bb      	ldrb	r3, [r7, #2]
 8001c16:	78fa      	ldrb	r2, [r7, #3]
 8001c18:	4905      	ldr	r1, [pc, #20]	; (8001c30 <WillResultInSelfCheck+0x150>)
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	883a      	ldrh	r2, [r7, #0]
 8001c20:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	return 0;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3790      	adds	r7, #144	; 0x90
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000011c 	.word	0x2000011c
 8001c34:	20000004 	.word	0x20000004

08001c38 <GetPiecesForTeam>:

void GetPiecesForTeam(enum PieceOwner owner, struct PieceCoordinate* pieces, uint8_t* numPieces)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	73fb      	strb	r3, [r7, #15]
	*numPieces = 0;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]

	for (uint8_t row = 0; row < NUM_ROWS; row++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	75fb      	strb	r3, [r7, #23]
 8001c50:	e029      	b.n	8001ca6 <GetPiecesForTeam+0x6e>
	{
		for (uint8_t column = 0; column < NUM_COLS; column++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	75bb      	strb	r3, [r7, #22]
 8001c56:	e020      	b.n	8001c9a <GetPiecesForTeam+0x62>
		{
			struct PieceCoordinate piece = { MockChessboard[row][column], row, column };
 8001c58:	7dfa      	ldrb	r2, [r7, #23]
 8001c5a:	7dbb      	ldrb	r3, [r7, #22]
 8001c5c:	4916      	ldr	r1, [pc, #88]	; (8001cb8 <GetPiecesForTeam+0x80>)
 8001c5e:	00d2      	lsls	r2, r2, #3
 8001c60:	4413      	add	r3, r2
 8001c62:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c66:	823b      	strh	r3, [r7, #16]
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
 8001c6a:	74bb      	strb	r3, [r7, #18]
 8001c6c:	7dbb      	ldrb	r3, [r7, #22]
 8001c6e:	74fb      	strb	r3, [r7, #19]
			if (piece.piece.owner == owner)
 8001c70:	7c7b      	ldrb	r3, [r7, #17]
 8001c72:	7bfa      	ldrb	r2, [r7, #15]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d10d      	bne.n	8001c94 <GetPiecesForTeam+0x5c>
			{
				pieces[(*numPieces)++] = piece;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	b2d1      	uxtb	r1, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	7011      	strb	r1, [r2, #0]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	4413      	add	r3, r2
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	f107 0310 	add.w	r3, r7, #16
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	6010      	str	r0, [r2, #0]
		for (uint8_t column = 0; column < NUM_COLS; column++)
 8001c94:	7dbb      	ldrb	r3, [r7, #22]
 8001c96:	3301      	adds	r3, #1
 8001c98:	75bb      	strb	r3, [r7, #22]
 8001c9a:	7dbb      	ldrb	r3, [r7, #22]
 8001c9c:	2b07      	cmp	r3, #7
 8001c9e:	d9db      	bls.n	8001c58 <GetPiecesForTeam+0x20>
	for (uint8_t row = 0; row < NUM_ROWS; row++)
 8001ca0:	7dfb      	ldrb	r3, [r7, #23]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	75fb      	strb	r3, [r7, #23]
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	2b07      	cmp	r3, #7
 8001caa:	d9d2      	bls.n	8001c52 <GetPiecesForTeam+0x1a>
			}
		}
	}
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	371c      	adds	r7, #28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	2000011c 	.word	0x2000011c

08001cbc <IsPieceBlockingDiagonal>:

static uint8_t IsPieceBlockingDiagonal(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
	uint8_t startRow;
	uint8_t startColumn;
	uint8_t endRow;
	uint8_t endColumn;

	if (from.row > to.row)
 8001cc6:	79ba      	ldrb	r2, [r7, #6]
 8001cc8:	78bb      	ldrb	r3, [r7, #2]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d908      	bls.n	8001ce0 <IsPieceBlockingDiagonal+0x24>
	{
		startRow = to.row;
 8001cce:	78bb      	ldrb	r3, [r7, #2]
 8001cd0:	73fb      	strb	r3, [r7, #15]
		startColumn = to.column;
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	73bb      	strb	r3, [r7, #14]
		endRow = from.row;
 8001cd6:	79bb      	ldrb	r3, [r7, #6]
 8001cd8:	737b      	strb	r3, [r7, #13]
		endColumn = from.column;
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	733b      	strb	r3, [r7, #12]
 8001cde:	e007      	b.n	8001cf0 <IsPieceBlockingDiagonal+0x34>
	}
	else
	{
		startRow = from.row;
 8001ce0:	79bb      	ldrb	r3, [r7, #6]
 8001ce2:	73fb      	strb	r3, [r7, #15]
		startColumn = from.column;
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	73bb      	strb	r3, [r7, #14]
		endRow = to.row;
 8001ce8:	78bb      	ldrb	r3, [r7, #2]
 8001cea:	737b      	strb	r3, [r7, #13]
		endColumn = to.column;
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	733b      	strb	r3, [r7, #12]
	}

	int8_t columnIncrement = startColumn > endColumn ? -1 : 1;
 8001cf0:	7bba      	ldrb	r2, [r7, #14]
 8001cf2:	7b3b      	ldrb	r3, [r7, #12]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d902      	bls.n	8001cfe <IsPieceBlockingDiagonal+0x42>
 8001cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfc:	e000      	b.n	8001d00 <IsPieceBlockingDiagonal+0x44>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	727b      	strb	r3, [r7, #9]
	int8_t column = startColumn + columnIncrement;
 8001d02:	7a7a      	ldrb	r2, [r7, #9]
 8001d04:	7bbb      	ldrb	r3, [r7, #14]
 8001d06:	4413      	add	r3, r2
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	72fb      	strb	r3, [r7, #11]
	for (uint8_t row = startRow + 1; row < endRow; row++, column += columnIncrement)
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	72bb      	strb	r3, [r7, #10]
 8001d12:	e013      	b.n	8001d3c <IsPieceBlockingDiagonal+0x80>
	{
		// If piece is between "from" and "to" on the diagonal, it is blocking it
		if (MockChessboard[row][column].type != NONE)
 8001d14:	7aba      	ldrb	r2, [r7, #10]
 8001d16:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001d1a:	490d      	ldr	r1, [pc, #52]	; (8001d50 <IsPieceBlockingDiagonal+0x94>)
 8001d1c:	00d2      	lsls	r2, r2, #3
 8001d1e:	4413      	add	r3, r2
 8001d20:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <IsPieceBlockingDiagonal+0x70>
		{
			return 1;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e00c      	b.n	8001d46 <IsPieceBlockingDiagonal+0x8a>
	for (uint8_t row = startRow + 1; row < endRow; row++, column += columnIncrement)
 8001d2c:	7abb      	ldrb	r3, [r7, #10]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	72bb      	strb	r3, [r7, #10]
 8001d32:	7afa      	ldrb	r2, [r7, #11]
 8001d34:	7a7b      	ldrb	r3, [r7, #9]
 8001d36:	4413      	add	r3, r2
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	72fb      	strb	r3, [r7, #11]
 8001d3c:	7aba      	ldrb	r2, [r7, #10]
 8001d3e:	7b7b      	ldrb	r3, [r7, #13]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d3e7      	bcc.n	8001d14 <IsPieceBlockingDiagonal+0x58>
		}
	}
	return 0;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	2000011c 	.word	0x2000011c

08001d54 <CalculateCastlingPositions>:


void CalculateCastlingPositions(
	struct PieceCoordinate rookPieceCoordinate,
	struct PieceCoordinate* expectedKingPieceCoordinate, struct PieceCoordinate* expectedRookPieceCoordinate)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
	// Fill in the piece attributes
	expectedKingPieceCoordinate->piece.owner = rookPieceCoordinate.piece.owner;
 8001d60:	7b7a      	ldrb	r2, [r7, #13]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	705a      	strb	r2, [r3, #1]
	expectedRookPieceCoordinate->piece.owner = rookPieceCoordinate.piece.owner;
 8001d66:	7b7a      	ldrb	r2, [r7, #13]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	705a      	strb	r2, [r3, #1]
	expectedKingPieceCoordinate->piece.type = KING;
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2206      	movs	r2, #6
 8001d70:	701a      	strb	r2, [r3, #0]
	expectedRookPieceCoordinate->piece.type = ROOK;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2204      	movs	r2, #4
 8001d76:	701a      	strb	r2, [r3, #0]

	// Calculate expected ROOK and KING columns
	if (rookPieceCoordinate.column == 0)
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <CalculateCastlingPositions+0x38>
	{
		expectedKingPieceCoordinate->column = 1;
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2201      	movs	r2, #1
 8001d82:	70da      	strb	r2, [r3, #3]
		expectedRookPieceCoordinate->column = 2;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	70da      	strb	r2, [r3, #3]
 8001d8a:	e008      	b.n	8001d9e <CalculateCastlingPositions+0x4a>
	}
	else if (rookPieceCoordinate.column == 7)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b07      	cmp	r3, #7
 8001d90:	d105      	bne.n	8001d9e <CalculateCastlingPositions+0x4a>
	{
		expectedKingPieceCoordinate->column = 6;
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2206      	movs	r2, #6
 8001d96:	70da      	strb	r2, [r3, #3]
		expectedRookPieceCoordinate->column = 5;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2205      	movs	r2, #5
 8001d9c:	70da      	strb	r2, [r3, #3]
	}

	// Calculate expected ROOK and KING rows
	if (rookPieceCoordinate.piece.owner == WHITE)
 8001d9e:	7b7b      	ldrb	r3, [r7, #13]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d107      	bne.n	8001db4 <CalculateCastlingPositions+0x60>
	{
		expectedKingPieceCoordinate->row = expectedRookPieceCoordinate->row = 0;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	709a      	strb	r2, [r3, #2]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	789a      	ldrb	r2, [r3, #2]
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	709a      	strb	r2, [r3, #2]
	}
	else if (rookPieceCoordinate.piece.owner == BLACK)
	{
		expectedKingPieceCoordinate->row = expectedRookPieceCoordinate->row = 7;
	}
}
 8001db2:	e009      	b.n	8001dc8 <CalculateCastlingPositions+0x74>
	else if (rookPieceCoordinate.piece.owner == BLACK)
 8001db4:	7b7b      	ldrb	r3, [r7, #13]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d106      	bne.n	8001dc8 <CalculateCastlingPositions+0x74>
		expectedKingPieceCoordinate->row = expectedRookPieceCoordinate->row = 7;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	709a      	strb	r2, [r3, #2]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	789a      	ldrb	r2, [r3, #2]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	709a      	strb	r2, [r3, #2]
}
 8001dc8:	bf00      	nop
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <IsValidCoordinate>:

static inline uint8_t IsValidCoordinate(struct Coordinate path)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	80b8      	strh	r0, [r7, #4]
	return path.row >= 0 && path.row < 8 && path.column >= 0 && path.column < 8;
 8001dda:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	db0d      	blt.n	8001dfe <IsValidCoordinate+0x2c>
 8001de2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001de6:	2b07      	cmp	r3, #7
 8001de8:	dc09      	bgt.n	8001dfe <IsValidCoordinate+0x2c>
 8001dea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	db05      	blt.n	8001dfe <IsValidCoordinate+0x2c>
 8001df2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001df6:	2b07      	cmp	r3, #7
 8001df8:	dc01      	bgt.n	8001dfe <IsValidCoordinate+0x2c>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <IsValidCoordinate+0x2e>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <IsPieceMovingStraight>:

static inline uint8_t IsPieceMovingStraight(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
	return (from.column == to.column || from.row == to.row);
 8001e16:	79fa      	ldrb	r2, [r7, #7]
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d003      	beq.n	8001e26 <IsPieceMovingStraight+0x1a>
 8001e1e:	79ba      	ldrb	r2, [r7, #6]
 8001e20:	78bb      	ldrb	r3, [r7, #2]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d101      	bne.n	8001e2a <IsPieceMovingStraight+0x1e>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <IsPieceMovingStraight+0x20>
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <IsPieceMovingDiagonal>:

static inline uint8_t IsPieceMovingDiagonal(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
	return abs((int8_t)from.column - (int8_t)to.column) == abs((int8_t)from.row - (int8_t)to.row);
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	b25b      	sxtb	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	b25b      	sxtb	r3, r3
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001e52:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001e56:	79bb      	ldrb	r3, [r7, #6]
 8001e58:	b25b      	sxtb	r3, r3
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	78bb      	ldrb	r3, [r7, #2]
 8001e5e:	b25b      	sxtb	r3, r3
 8001e60:	1acb      	subs	r3, r1, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bfb8      	it	lt
 8001e66:	425b      	neglt	r3, r3
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <IsPieceCoordinateSameTeam>:

static inline uint8_t IsPieceCoordinateSameTeam(struct PieceCoordinate pieceCoordinate1, struct PieceCoordinate pieceCoordinate2)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
	return pieceCoordinate1.piece.owner == pieceCoordinate2.piece.owner;
 8001e86:	797a      	ldrb	r2, [r7, #5]
 8001e88:	787b      	ldrb	r3, [r7, #1]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	bf0c      	ite	eq
 8001e8e:	2301      	moveq	r3, #1
 8001e90:	2300      	movne	r3, #0
 8001e92:	b2db      	uxtb	r3, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
	...

08001ea0 <SpeakerGPIOInit>:
#include "speaker.h"

void SpeakerGPIOInit(){
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	// Enable Analog Output
	SPEARER_GPIO_BUS_ENABLE_FUNCTION;
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <SpeakerGPIOInit+0x3c>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a0c      	ldr	r2, [pc, #48]	; (8001edc <SpeakerGPIOInit+0x3c>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	61d3      	str	r3, [r2, #28]
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <SpeakerGPIOInit+0x3c>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = SPEAKER_GPIO_PIN;
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(SPEAKER_GPIO_BUS, &GPIO_InitStruct);
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4804      	ldr	r0, [pc, #16]	; (8001ee0 <SpeakerGPIOInit+0x40>)
 8001ed0:	f002 fe7a 	bl	8004bc8 <HAL_GPIO_Init>
}
 8001ed4:	bf00      	nop
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020000 	.word	0x40020000

08001ee4 <DACInit>:

void DACInit(DAC_HandleTypeDef * hdac){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
	DAC_ChannelConfTypeDef sConfig = {0};
 8001eec:	f107 0310 	add.w	r3, r7, #16
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]

	// Enable DAC clock
	__HAL_RCC_DAC_CLK_ENABLE();
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <DACInit+0x54>)
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	4a0f      	ldr	r2, [pc, #60]	; (8001f38 <DACInit+0x54>)
 8001efc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f00:	6253      	str	r3, [r2, #36]	; 0x24
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <DACInit+0x54>)
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
	hdac->Instance = DAC;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <DACInit+0x58>)
 8001f12:	601a      	str	r2, [r3, #0]
	HAL_DAC_Init(hdac);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f002 fa64 	bl	80043e2 <HAL_DAC_Init>

	// DAC Setup Settings of Timer 2 Trigger
	sConfig.DAC_Trigger = DAC_DMA_TRIGGER;
 8001f1a:	232c      	movs	r3, #44	; 0x2c
 8001f1c:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
	HAL_DAC_ConfigChannel(hdac, &sConfig, DAC_CHANNEL);
 8001f22:	f107 0310 	add.w	r3, r7, #16
 8001f26:	2210      	movs	r2, #16
 8001f28:	4619      	mov	r1, r3
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f002 fb99 	bl	8004662 <HAL_DAC_ConfigChannel>
}
 8001f30:	bf00      	nop
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40007400 	.word	0x40007400

08001f40 <DMAInit>:

void DMAInit(){
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
	// DMA controller clock enable
	DMA_CLOCK_ENABLE_FUNCTION;
 8001f46:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <DMAInit+0x38>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <DMAInit+0x38>)
 8001f4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f50:	61d3      	str	r3, [r2, #28]
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <DMAInit+0x38>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]

	// DMA interrupt init
	// DMA1_Channel2_IRQn interrupt configuration
	HAL_NVIC_SetPriority(DMA_IRQ, 0, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2100      	movs	r1, #0
 8001f62:	200d      	movs	r0, #13
 8001f64:	f002 fa07 	bl	8004376 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA_IRQ);
 8001f68:	200d      	movs	r0, #13
 8001f6a:	f002 fa20 	bl	80043ae <HAL_NVIC_EnableIRQ>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800

08001f7c <TimerInit>:

void TimerInit(TIM_HandleTypeDef * htim){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f84:	f107 0310 	add.w	r3, r7, #16
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f92:	f107 0308 	add.w	r3, r7, #8
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]

	htim->Instance = TIMER_NAME;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a16      	ldr	r2, [pc, #88]	; (8001ff8 <TimerInit+0x7c>)
 8001fa0:	601a      	str	r2, [r3, #0]
	htim->Init.Prescaler = TIMER_PSC;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	605a      	str	r2, [r3, #4]
	htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
	htim->Init.Period = TIMER_ARR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f240 22d5 	movw	r2, #725	; 0x2d5
 8001fb4:	60da      	str	r2, [r3, #12]
	htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
	htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Init(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f004 f9a6 	bl	8006314 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fcc:	613b      	str	r3, [r7, #16]
	HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig);
 8001fce:	f107 0310 	add.w	r3, r7, #16
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f004 fb7b 	bl	80066d0 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fda:	2320      	movs	r3, #32
 8001fdc:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
	HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig);
 8001fe2:	f107 0308 	add.w	r3, r7, #8
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f004 fd5f 	bl	8006aac <HAL_TIMEx_MasterConfigSynchronization>
}
 8001fee:	bf00      	nop
 8001ff0:	3720      	adds	r7, #32
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40000800 	.word	0x40000800

08001ffc <SpeakerInit>:

void SpeakerInit(DAC_HandleTypeDef * hdac, TIM_HandleTypeDef * htim){
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
	SpeakerGPIOInit();
 8002006:	f7ff ff4b 	bl	8001ea0 <SpeakerGPIOInit>
	DMAInit();
 800200a:	f7ff ff99 	bl	8001f40 <DMAInit>
	DACInit(hdac);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ff68 	bl	8001ee4 <DACInit>
	TimerInit(htim);
 8002014:	6838      	ldr	r0, [r7, #0]
 8002016:	f7ff ffb1 	bl	8001f7c <TimerInit>
	HAL_TIM_Base_Start(htim);
 800201a:	6838      	ldr	r0, [r7, #0]
 800201c:	f004 f9ba 	bl	8006394 <HAL_TIM_Base_Start>
}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800202e:	4b14      	ldr	r3, [pc, #80]	; (8002080 <HAL_MspInit+0x58>)
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	4a13      	ldr	r2, [pc, #76]	; (8002080 <HAL_MspInit+0x58>)
 8002034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002038:	6253      	str	r3, [r2, #36]	; 0x24
 800203a:	4b11      	ldr	r3, [pc, #68]	; (8002080 <HAL_MspInit+0x58>)
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <HAL_MspInit+0x58>)
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4a0d      	ldr	r2, [pc, #52]	; (8002080 <HAL_MspInit+0x58>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6213      	str	r3, [r2, #32]
 8002052:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_MspInit+0x58>)
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800205e:	4b08      	ldr	r3, [pc, #32]	; (8002080 <HAL_MspInit+0x58>)
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	4a07      	ldr	r2, [pc, #28]	; (8002080 <HAL_MspInit+0x58>)
 8002064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002068:	6253      	str	r3, [r2, #36]	; 0x24
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_MspInit+0x58>)
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	40023800 	.word	0x40023800

08002084 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	; 0x28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a28      	ldr	r2, [pc, #160]	; (8002144 <HAL_DAC_MspInit+0xc0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d14a      	bne.n	800213c <HAL_DAC_MspInit+0xb8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80020a6:	4b28      	ldr	r3, [pc, #160]	; (8002148 <HAL_DAC_MspInit+0xc4>)
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	4a27      	ldr	r2, [pc, #156]	; (8002148 <HAL_DAC_MspInit+0xc4>)
 80020ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020b0:	6253      	str	r3, [r2, #36]	; 0x24
 80020b2:	4b25      	ldr	r3, [pc, #148]	; (8002148 <HAL_DAC_MspInit+0xc4>)
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020be:	4b22      	ldr	r3, [pc, #136]	; (8002148 <HAL_DAC_MspInit+0xc4>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	4a21      	ldr	r2, [pc, #132]	; (8002148 <HAL_DAC_MspInit+0xc4>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	61d3      	str	r3, [r2, #28]
 80020ca:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <HAL_DAC_MspInit+0xc4>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020d6:	2320      	movs	r3, #32
 80020d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020da:	2303      	movs	r3, #3
 80020dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	4619      	mov	r1, r3
 80020e8:	4818      	ldr	r0, [pc, #96]	; (800214c <HAL_DAC_MspInit+0xc8>)
 80020ea:	f002 fd6d 	bl	8004bc8 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel3;
 80020ee:	4b18      	ldr	r3, [pc, #96]	; (8002150 <HAL_DAC_MspInit+0xcc>)
 80020f0:	4a18      	ldr	r2, [pc, #96]	; (8002154 <HAL_DAC_MspInit+0xd0>)
 80020f2:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020f4:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_DAC_MspInit+0xcc>)
 80020f6:	2210      	movs	r2, #16
 80020f8:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_DAC_MspInit+0xcc>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <HAL_DAC_MspInit+0xcc>)
 8002102:	2280      	movs	r2, #128	; 0x80
 8002104:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_DAC_MspInit+0xcc>)
 8002108:	2200      	movs	r2, #0
 800210a:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800210c:	4b10      	ldr	r3, [pc, #64]	; (8002150 <HAL_DAC_MspInit+0xcc>)
 800210e:	2200      	movs	r2, #0
 8002110:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_DAC_MspInit+0xcc>)
 8002114:	2220      	movs	r2, #32
 8002116:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002118:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <HAL_DAC_MspInit+0xcc>)
 800211a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800211e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8002120:	480b      	ldr	r0, [pc, #44]	; (8002150 <HAL_DAC_MspInit+0xcc>)
 8002122:	f002 fb61 	bl	80047e8 <HAL_DMA_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_DAC_MspInit+0xac>
    {
      Error_Handler();
 800212c:	f7fe ffa0 	bl	8001070 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a07      	ldr	r2, [pc, #28]	; (8002150 <HAL_DAC_MspInit+0xcc>)
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	4a06      	ldr	r2, [pc, #24]	; (8002150 <HAL_DAC_MspInit+0xcc>)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800213c:	bf00      	nop
 800213e:	3728      	adds	r7, #40	; 0x28
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40007400 	.word	0x40007400
 8002148:	40023800 	.word	0x40023800
 800214c:	40020000 	.word	0x40020000
 8002150:	20001d6c 	.word	0x20001d6c
 8002154:	40026030 	.word	0x40026030

08002158 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08e      	sub	sp, #56	; 0x38
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a54      	ldr	r2, [pc, #336]	; (80022c8 <HAL_SPI_MspInit+0x170>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d145      	bne.n	8002206 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800217a:	4b54      	ldr	r3, [pc, #336]	; (80022cc <HAL_SPI_MspInit+0x174>)
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	4a53      	ldr	r2, [pc, #332]	; (80022cc <HAL_SPI_MspInit+0x174>)
 8002180:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002184:	6213      	str	r3, [r2, #32]
 8002186:	4b51      	ldr	r3, [pc, #324]	; (80022cc <HAL_SPI_MspInit+0x174>)
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800218e:	623b      	str	r3, [r7, #32]
 8002190:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	4b4e      	ldr	r3, [pc, #312]	; (80022cc <HAL_SPI_MspInit+0x174>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	4a4d      	ldr	r2, [pc, #308]	; (80022cc <HAL_SPI_MspInit+0x174>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	61d3      	str	r3, [r2, #28]
 800219e:	4b4b      	ldr	r3, [pc, #300]	; (80022cc <HAL_SPI_MspInit+0x174>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021aa:	4b48      	ldr	r3, [pc, #288]	; (80022cc <HAL_SPI_MspInit+0x174>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	4a47      	ldr	r2, [pc, #284]	; (80022cc <HAL_SPI_MspInit+0x174>)
 80021b0:	f043 0310 	orr.w	r3, r3, #16
 80021b4:	61d3      	str	r3, [r2, #28]
 80021b6:	4b45      	ldr	r3, [pc, #276]	; (80022cc <HAL_SPI_MspInit+0x174>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	61bb      	str	r3, [r7, #24]
 80021c0:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PE13     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021c2:	23c0      	movs	r3, #192	; 0xc0
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021d2:	2305      	movs	r3, #5
 80021d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021da:	4619      	mov	r1, r3
 80021dc:	483c      	ldr	r0, [pc, #240]	; (80022d0 <HAL_SPI_MspInit+0x178>)
 80021de:	f002 fcf3 	bl	8004bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80021e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021f4:	2305      	movs	r3, #5
 80021f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fc:	4619      	mov	r1, r3
 80021fe:	4835      	ldr	r0, [pc, #212]	; (80022d4 <HAL_SPI_MspInit+0x17c>)
 8002200:	f002 fce2 	bl	8004bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002204:	e05c      	b.n	80022c0 <HAL_SPI_MspInit+0x168>
  else if(hspi->Instance==SPI2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a33      	ldr	r2, [pc, #204]	; (80022d8 <HAL_SPI_MspInit+0x180>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d129      	bne.n	8002264 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002210:	4b2e      	ldr	r3, [pc, #184]	; (80022cc <HAL_SPI_MspInit+0x174>)
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	4a2d      	ldr	r2, [pc, #180]	; (80022cc <HAL_SPI_MspInit+0x174>)
 8002216:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800221a:	6253      	str	r3, [r2, #36]	; 0x24
 800221c:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <HAL_SPI_MspInit+0x174>)
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002228:	4b28      	ldr	r3, [pc, #160]	; (80022cc <HAL_SPI_MspInit+0x174>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	4a27      	ldr	r2, [pc, #156]	; (80022cc <HAL_SPI_MspInit+0x174>)
 800222e:	f043 0302 	orr.w	r3, r3, #2
 8002232:	61d3      	str	r3, [r2, #28]
 8002234:	4b25      	ldr	r3, [pc, #148]	; (80022cc <HAL_SPI_MspInit+0x174>)
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002240:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002246:	2302      	movs	r3, #2
 8002248:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224e:	2303      	movs	r3, #3
 8002250:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002252:	2305      	movs	r3, #5
 8002254:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225a:	4619      	mov	r1, r3
 800225c:	481f      	ldr	r0, [pc, #124]	; (80022dc <HAL_SPI_MspInit+0x184>)
 800225e:	f002 fcb3 	bl	8004bc8 <HAL_GPIO_Init>
}
 8002262:	e02d      	b.n	80022c0 <HAL_SPI_MspInit+0x168>
  else if(hspi->Instance==SPI3)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a1d      	ldr	r2, [pc, #116]	; (80022e0 <HAL_SPI_MspInit+0x188>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d128      	bne.n	80022c0 <HAL_SPI_MspInit+0x168>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800226e:	4b17      	ldr	r3, [pc, #92]	; (80022cc <HAL_SPI_MspInit+0x174>)
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	4a16      	ldr	r2, [pc, #88]	; (80022cc <HAL_SPI_MspInit+0x174>)
 8002274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002278:	6253      	str	r3, [r2, #36]	; 0x24
 800227a:	4b14      	ldr	r3, [pc, #80]	; (80022cc <HAL_SPI_MspInit+0x174>)
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002286:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_SPI_MspInit+0x174>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	4a10      	ldr	r2, [pc, #64]	; (80022cc <HAL_SPI_MspInit+0x174>)
 800228c:	f043 0304 	orr.w	r3, r3, #4
 8002290:	61d3      	str	r3, [r2, #28]
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <HAL_SPI_MspInit+0x174>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800229e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ac:	2303      	movs	r3, #3
 80022ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022b0:	2306      	movs	r3, #6
 80022b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b8:	4619      	mov	r1, r3
 80022ba:	480a      	ldr	r0, [pc, #40]	; (80022e4 <HAL_SPI_MspInit+0x18c>)
 80022bc:	f002 fc84 	bl	8004bc8 <HAL_GPIO_Init>
}
 80022c0:	bf00      	nop
 80022c2:	3738      	adds	r7, #56	; 0x38
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40013000 	.word	0x40013000
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40020000 	.word	0x40020000
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40003800 	.word	0x40003800
 80022dc:	40020400 	.word	0x40020400
 80022e0:	40003c00 	.word	0x40003c00
 80022e4:	40020800 	.word	0x40020800

080022e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f8:	d114      	bne.n	8002324 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022fa:	4b33      	ldr	r3, [pc, #204]	; (80023c8 <HAL_TIM_Base_MspInit+0xe0>)
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	4a32      	ldr	r2, [pc, #200]	; (80023c8 <HAL_TIM_Base_MspInit+0xe0>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6253      	str	r3, [r2, #36]	; 0x24
 8002306:	4b30      	ldr	r3, [pc, #192]	; (80023c8 <HAL_TIM_Base_MspInit+0xe0>)
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2100      	movs	r1, #0
 8002316:	201c      	movs	r0, #28
 8002318:	f002 f82d 	bl	8004376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800231c:	201c      	movs	r0, #28
 800231e:	f002 f846 	bl	80043ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002322:	e04c      	b.n	80023be <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a28      	ldr	r2, [pc, #160]	; (80023cc <HAL_TIM_Base_MspInit+0xe4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d114      	bne.n	8002358 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800232e:	4b26      	ldr	r3, [pc, #152]	; (80023c8 <HAL_TIM_Base_MspInit+0xe0>)
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	4a25      	ldr	r2, [pc, #148]	; (80023c8 <HAL_TIM_Base_MspInit+0xe0>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	6253      	str	r3, [r2, #36]	; 0x24
 800233a:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <HAL_TIM_Base_MspInit+0xe0>)
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	201d      	movs	r0, #29
 800234c:	f002 f813 	bl	8004376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002350:	201d      	movs	r0, #29
 8002352:	f002 f82c 	bl	80043ae <HAL_NVIC_EnableIRQ>
}
 8002356:	e032      	b.n	80023be <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1c      	ldr	r2, [pc, #112]	; (80023d0 <HAL_TIM_Base_MspInit+0xe8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d114      	bne.n	800238c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002362:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_TIM_Base_MspInit+0xe0>)
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	4a18      	ldr	r2, [pc, #96]	; (80023c8 <HAL_TIM_Base_MspInit+0xe0>)
 8002368:	f043 0304 	orr.w	r3, r3, #4
 800236c:	6253      	str	r3, [r2, #36]	; 0x24
 800236e:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <HAL_TIM_Base_MspInit+0xe0>)
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800237a:	2200      	movs	r2, #0
 800237c:	2100      	movs	r1, #0
 800237e:	201e      	movs	r0, #30
 8002380:	f001 fff9 	bl	8004376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002384:	201e      	movs	r0, #30
 8002386:	f002 f812 	bl	80043ae <HAL_NVIC_EnableIRQ>
}
 800238a:	e018      	b.n	80023be <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a10      	ldr	r2, [pc, #64]	; (80023d4 <HAL_TIM_Base_MspInit+0xec>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d113      	bne.n	80023be <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <HAL_TIM_Base_MspInit+0xe0>)
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <HAL_TIM_Base_MspInit+0xe0>)
 800239c:	f043 0308 	orr.w	r3, r3, #8
 80023a0:	6253      	str	r3, [r2, #36]	; 0x24
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_TIM_Base_MspInit+0xe0>)
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	202e      	movs	r0, #46	; 0x2e
 80023b4:	f001 ffdf 	bl	8004376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80023b8:	202e      	movs	r0, #46	; 0x2e
 80023ba:	f001 fff8 	bl	80043ae <HAL_NVIC_EnableIRQ>
}
 80023be:	bf00      	nop
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40000400 	.word	0x40000400
 80023d0:	40000800 	.word	0x40000800
 80023d4:	40000c00 	.word	0x40000c00

080023d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a17      	ldr	r2, [pc, #92]	; (8002454 <HAL_UART_MspInit+0x7c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d128      	bne.n	800244c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023fa:	4b17      	ldr	r3, [pc, #92]	; (8002458 <HAL_UART_MspInit+0x80>)
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4a16      	ldr	r2, [pc, #88]	; (8002458 <HAL_UART_MspInit+0x80>)
 8002400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002404:	6213      	str	r3, [r2, #32]
 8002406:	4b14      	ldr	r3, [pc, #80]	; (8002458 <HAL_UART_MspInit+0x80>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002412:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_UART_MspInit+0x80>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4a10      	ldr	r2, [pc, #64]	; (8002458 <HAL_UART_MspInit+0x80>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	61d3      	str	r3, [r2, #28]
 800241e:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <HAL_UART_MspInit+0x80>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800242a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800242e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002438:	2303      	movs	r3, #3
 800243a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800243c:	2307      	movs	r3, #7
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	4619      	mov	r1, r3
 8002446:	4805      	ldr	r0, [pc, #20]	; (800245c <HAL_UART_MspInit+0x84>)
 8002448:	f002 fbbe 	bl	8004bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800244c:	bf00      	nop
 800244e:	3728      	adds	r7, #40	; 0x28
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40013800 	.word	0x40013800
 8002458:	40023800 	.word	0x40023800
 800245c:	40020000 	.word	0x40020000

08002460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002464:	e7fe      	b.n	8002464 <NMI_Handler+0x4>

08002466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800246a:	e7fe      	b.n	800246a <HardFault_Handler+0x4>

0800246c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002470:	e7fe      	b.n	8002470 <MemManage_Handler+0x4>

08002472 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002476:	e7fe      	b.n	8002476 <BusFault_Handler+0x4>

08002478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800247c:	e7fe      	b.n	800247c <UsageFault_Handler+0x4>

0800247e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr

080024a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a6:	f001 fe51 	bl	800414c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <DMA1_Channel3_IRQHandler+0x10>)
 80024b6:	f002 faa8 	bl	8004a0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20001d6c 	.word	0x20001d6c

080024c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <TIM2_IRQHandler+0x10>)
 80024ca:	f004 f825 	bl	8006518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20001e08 	.word	0x20001e08

080024d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <TIM3_IRQHandler+0x10>)
 80024de:	f004 f81b 	bl	8006518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20001c7c 	.word	0x20001c7c

080024ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <TIM4_IRQHandler+0x10>)
 80024f2:	f004 f811 	bl	8006518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20001bfc 	.word	0x20001bfc

08002500 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002504:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002508:	f002 fd1e 	bl	8004f48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800250c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002510:	f002 fd1a 	bl	8004f48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}

08002518 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800251c:	4802      	ldr	r0, [pc, #8]	; (8002528 <TIM5_IRQHandler+0x10>)
 800251e:	f003 fffb 	bl	8006518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20001c3c 	.word	0x20001c3c

0800252c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <InitTracker>:
// Uart Move Buffer //
char MoveBuffer[4] = {0};
char ReceiveBuffer[5] = {0};

void InitTracker()
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
	// Initialize globals
	LastTransitionType = PLACE;
 800253e:	4b40      	ldr	r3, [pc, #256]	; (8002640 <InitTracker+0x108>)
 8002540:	2201      	movs	r2, #1
 8002542:	701a      	strb	r2, [r3, #0]
	CurrentTurn = WHITE;
 8002544:	4b3f      	ldr	r3, [pc, #252]	; (8002644 <InitTracker+0x10c>)
 8002546:	2201      	movs	r2, #1
 8002548:	701a      	strb	r2, [r3, #0]
	CanA1Castle = 1;
 800254a:	4b3f      	ldr	r3, [pc, #252]	; (8002648 <InitTracker+0x110>)
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
	CanH1Castle = 1;
 8002550:	4b3e      	ldr	r3, [pc, #248]	; (800264c <InitTracker+0x114>)
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
	CanA8Castle = 1;
 8002556:	4b3e      	ldr	r3, [pc, #248]	; (8002650 <InitTracker+0x118>)
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
	CanH8Castle = 1;
 800255c:	4b3d      	ldr	r3, [pc, #244]	; (8002654 <InitTracker+0x11c>)
 800255e:	2201      	movs	r2, #1
 8002560:	701a      	strb	r2, [r3, #0]
	CanWhiteKingCastle = 1;
 8002562:	4b3d      	ldr	r3, [pc, #244]	; (8002658 <InitTracker+0x120>)
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]
	CanBlackKingCastle = 1;
 8002568:	4b3c      	ldr	r3, [pc, #240]	; (800265c <InitTracker+0x124>)
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
	SwitchTurnsAfterLegalState = 0;
 800256e:	4b3c      	ldr	r3, [pc, #240]	; (8002660 <InitTracker+0x128>)
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]

	ClearPiece(&LastPickedUpPiece);
 8002574:	483b      	ldr	r0, [pc, #236]	; (8002664 <InitTracker+0x12c>)
 8002576:	f001 f9fb 	bl	8003970 <ClearPiece>
	ClearPiece(&PieceToKill);
 800257a:	483b      	ldr	r0, [pc, #236]	; (8002668 <InitTracker+0x130>)
 800257c:	f001 f9f8 	bl	8003970 <ClearPiece>
	ClearPiece(&ExpectedKingCastleCoordinate);
 8002580:	483a      	ldr	r0, [pc, #232]	; (800266c <InitTracker+0x134>)
 8002582:	f001 f9f5 	bl	8003970 <ClearPiece>
	ClearPiece(&ExpectedRookCastleCoordinate);
 8002586:	483a      	ldr	r0, [pc, #232]	; (8002670 <InitTracker+0x138>)
 8002588:	f001 f9f2 	bl	8003970 <ClearPiece>
	ClearPiece(&PawnToPromote);
 800258c:	4839      	ldr	r0, [pc, #228]	; (8002674 <InitTracker+0x13c>)
 800258e:	f001 f9ef 	bl	8003970 <ClearPiece>

	// Initialize the Chessboard to the initial chessboard and zero the debouncing Histroy array
	for (uint8_t column = 0; column < NUM_COLS; column++)
 8002592:	2300      	movs	r3, #0
 8002594:	71fb      	strb	r3, [r7, #7]
 8002596:	e02d      	b.n	80025f4 <InitTracker+0xbc>
	{
		for (uint8_t row = 0; row < NUM_ROWS; row++)
 8002598:	2300      	movs	r3, #0
 800259a:	71bb      	strb	r3, [r7, #6]
 800259c:	e024      	b.n	80025e8 <InitTracker+0xb0>
		{
			Chessboard[row][column] = INITIAL_CHESSBOARD[row][column];
 800259e:	79b9      	ldrb	r1, [r7, #6]
 80025a0:	79fa      	ldrb	r2, [r7, #7]
 80025a2:	79b8      	ldrb	r0, [r7, #6]
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	4c34      	ldr	r4, [pc, #208]	; (8002678 <InitTracker+0x140>)
 80025a8:	00c0      	lsls	r0, r0, #3
 80025aa:	4403      	add	r3, r0
 80025ac:	4833      	ldr	r0, [pc, #204]	; (800267c <InitTracker+0x144>)
 80025ae:	00c9      	lsls	r1, r1, #3
 80025b0:	440a      	add	r2, r1
 80025b2:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80025b6:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]

			// Initialize debouncing history array
			for(uint8_t i = 0; i < NUM_HISTORY_ENTRIES; i++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	717b      	strb	r3, [r7, #5]
 80025be:	e00d      	b.n	80025dc <InitTracker+0xa4>
			{
				History[row][column][i] = 0;
 80025c0:	79b9      	ldrb	r1, [r7, #6]
 80025c2:	79fa      	ldrb	r2, [r7, #7]
 80025c4:	797b      	ldrb	r3, [r7, #5]
 80025c6:	482e      	ldr	r0, [pc, #184]	; (8002680 <InitTracker+0x148>)
 80025c8:	00c9      	lsls	r1, r1, #3
 80025ca:	440a      	add	r2, r1
 80025cc:	00d2      	lsls	r2, r2, #3
 80025ce:	4402      	add	r2, r0
 80025d0:	4413      	add	r3, r2
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < NUM_HISTORY_ENTRIES; i++)
 80025d6:	797b      	ldrb	r3, [r7, #5]
 80025d8:	3301      	adds	r3, #1
 80025da:	717b      	strb	r3, [r7, #5]
 80025dc:	797b      	ldrb	r3, [r7, #5]
 80025de:	2b07      	cmp	r3, #7
 80025e0:	d9ee      	bls.n	80025c0 <InitTracker+0x88>
		for (uint8_t row = 0; row < NUM_ROWS; row++)
 80025e2:	79bb      	ldrb	r3, [r7, #6]
 80025e4:	3301      	adds	r3, #1
 80025e6:	71bb      	strb	r3, [r7, #6]
 80025e8:	79bb      	ldrb	r3, [r7, #6]
 80025ea:	2b07      	cmp	r3, #7
 80025ec:	d9d7      	bls.n	800259e <InitTracker+0x66>
	for (uint8_t column = 0; column < NUM_COLS; column++)
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	3301      	adds	r3, #1
 80025f2:	71fb      	strb	r3, [r7, #7]
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	2b07      	cmp	r3, #7
 80025f8:	d9ce      	bls.n	8002598 <InitTracker+0x60>
			}
		}
	}

	// Initialize illegal piece destinations to empty pieces
	NumIllegalPieces = 0;
 80025fa:	4b22      	ldr	r3, [pc, #136]	; (8002684 <InitTracker+0x14c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_ILLEGAL_PIECES; i++)
 8002600:	2300      	movs	r3, #0
 8002602:	713b      	strb	r3, [r7, #4]
 8002604:	e00f      	b.n	8002626 <InitTracker+0xee>
	{
		IllegalPieces[i].destination = EMPTY_PIECE_COORDINATE;
 8002606:	793b      	ldrb	r3, [r7, #4]
 8002608:	491f      	ldr	r1, [pc, #124]	; (8002688 <InitTracker+0x150>)
 800260a:	4a20      	ldr	r2, [pc, #128]	; (800268c <InitTracker+0x154>)
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		IllegalPieces[i].current = EMPTY_PIECE_COORDINATE;
 8002612:	793b      	ldrb	r3, [r7, #4]
 8002614:	4a1c      	ldr	r2, [pc, #112]	; (8002688 <InitTracker+0x150>)
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	4a1c      	ldr	r2, [pc, #112]	; (800268c <InitTracker+0x154>)
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	605a      	str	r2, [r3, #4]
	for (uint8_t i = 0; i < MAX_ILLEGAL_PIECES; i++)
 8002620:	793b      	ldrb	r3, [r7, #4]
 8002622:	3301      	adds	r3, #1
 8002624:	713b      	strb	r3, [r7, #4]
 8002626:	793b      	ldrb	r3, [r7, #4]
 8002628:	2b1f      	cmp	r3, #31
 800262a:	d9ec      	bls.n	8002606 <InitTracker+0xce>
	}

	// Initialize PathFinder
	CalculateTeamsLegalMoves(CurrentTurn);
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <InitTracker+0x10c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe fd23 	bl	800107c <CalculateTeamsLegalMoves>
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bd90      	pop	{r4, r7, pc}
 800263e:	bf00      	nop
 8002640:	200005cd 	.word	0x200005cd
 8002644:	200005cc 	.word	0x200005cc
 8002648:	200006da 	.word	0x200006da
 800264c:	200006db 	.word	0x200006db
 8002650:	200006dc 	.word	0x200006dc
 8002654:	200006dd 	.word	0x200006dd
 8002658:	200006de 	.word	0x200006de
 800265c:	200006df 	.word	0x200006df
 8002660:	200006d9 	.word	0x200006d9
 8002664:	200005d0 	.word	0x200005d0
 8002668:	200005d4 	.word	0x200005d4
 800266c:	200006e0 	.word	0x200006e0
 8002670:	200006e4 	.word	0x200006e4
 8002674:	200006e8 	.word	0x200006e8
 8002678:	2000054c 	.word	0x2000054c
 800267c:	20000018 	.word	0x20000018
 8002680:	20001e48 	.word	0x20001e48
 8002684:	200006d8 	.word	0x200006d8
 8002688:	200005d8 	.word	0x200005d8
 800268c:	20000010 	.word	0x20000010

08002690 <WriteColumn>:

static void WriteColumn(uint8_t column)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
	uint8_t columnBit0 = (column & 1) >> 0;
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
	uint8_t columnBit1 = (column & 2) >> 1;
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	105b      	asrs	r3, r3, #1
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	73bb      	strb	r3, [r7, #14]
	uint8_t columnBit2 = (column & 4) >> 2;
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	109b      	asrs	r3, r3, #2
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(COLUMN_BIT_TO_PIN_TABLE[0].bus, COLUMN_BIT_TO_PIN_TABLE[0].pin, columnBit0);
 80026ba:	480b      	ldr	r0, [pc, #44]	; (80026e8 <WriteColumn+0x58>)
 80026bc:	2101      	movs	r1, #1
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	461a      	mov	r2, r3
 80026c2:	f002 fc28 	bl	8004f16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COLUMN_BIT_TO_PIN_TABLE[1].bus, COLUMN_BIT_TO_PIN_TABLE[1].pin, columnBit1);
 80026c6:	4808      	ldr	r0, [pc, #32]	; (80026e8 <WriteColumn+0x58>)
 80026c8:	2102      	movs	r1, #2
 80026ca:	7bbb      	ldrb	r3, [r7, #14]
 80026cc:	461a      	mov	r2, r3
 80026ce:	f002 fc22 	bl	8004f16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COLUMN_BIT_TO_PIN_TABLE[2].bus, COLUMN_BIT_TO_PIN_TABLE[2].pin, columnBit2);
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <WriteColumn+0x58>)
 80026d4:	2104      	movs	r1, #4
 80026d6:	7b7b      	ldrb	r3, [r7, #13]
 80026d8:	461a      	mov	r2, r3
 80026da:	f002 fc1c 	bl	8004f16 <HAL_GPIO_WritePin>
}
 80026de:	bf00      	nop
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40020000 	.word	0x40020000

080026ec <ReadRow>:

static uint8_t ReadRow(uint8_t rowNumber)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
	struct GPIO_Pin rowPin = ROW_NUMBER_TO_PIN_TABLE[rowNumber];
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	4909      	ldr	r1, [pc, #36]	; (8002720 <ReadRow+0x34>)
 80026fa:	f107 0208 	add.w	r2, r7, #8
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	440b      	add	r3, r1
 8002702:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002706:	e882 0003 	stmia.w	r2, {r0, r1}
	return HAL_GPIO_ReadPin(rowPin.bus, rowPin.pin);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	893a      	ldrh	r2, [r7, #8]
 800270e:	4611      	mov	r1, r2
 8002710:	4618      	mov	r0, r3
 8002712:	f002 fbe9 	bl	8004ee8 <HAL_GPIO_ReadPin>
 8002716:	4603      	mov	r3, r0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	08009fe8 	.word	0x08009fe8

08002724 <Track>:

uint8_t Track()
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
	uint8_t transitionOccured = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	71fb      	strb	r3, [r7, #7]

	for (uint8_t column = 0; column < NUM_COLS; column++)
 800272e:	2300      	movs	r3, #0
 8002730:	71bb      	strb	r3, [r7, #6]
 8002732:	e043      	b.n	80027bc <Track+0x98>
	{
		WriteColumn(column);
 8002734:	79bb      	ldrb	r3, [r7, #6]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff ffaa 	bl	8002690 <WriteColumn>

		for (uint8_t row = 0; row < NUM_ROWS; row++)
 800273c:	2300      	movs	r3, #0
 800273e:	717b      	strb	r3, [r7, #5]
 8002740:	e036      	b.n	80027b0 <Track+0x8c>
		{
			uint8_t cellValue = ReadRow(row);
 8002742:	797b      	ldrb	r3, [r7, #5]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ffd1 	bl	80026ec <ReadRow>
 800274a:	4603      	mov	r3, r0
 800274c:	713b      	strb	r3, [r7, #4]

			// Add cellValue to front of debouncing History array for this cell
			AppendHistory(row, column, cellValue);
 800274e:	793a      	ldrb	r2, [r7, #4]
 8002750:	79b9      	ldrb	r1, [r7, #6]
 8002752:	797b      	ldrb	r3, [r7, #5]
 8002754:	4618      	mov	r0, r3
 8002756:	f000 f839 	bl	80027cc <AppendHistory>

			// If the debouncing History of this cell is all the same value, then we can consider it for a transition
			if(IsHistoryConsensus(row, column))
 800275a:	79ba      	ldrb	r2, [r7, #6]
 800275c:	797b      	ldrb	r3, [r7, #5]
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f000 f871 	bl	8002848 <IsHistoryConsensus>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d01e      	beq.n	80027aa <Track+0x86>
			{
				struct PieceCoordinate currentPieceCoordinate = GetPieceCoordinate(row, column);
 800276c:	79ba      	ldrb	r2, [r7, #6]
 800276e:	797b      	ldrb	r3, [r7, #5]
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f001 f956 	bl	8003a24 <GetPieceCoordinate>
 8002778:	4603      	mov	r3, r0
 800277a:	603b      	str	r3, [r7, #0]

				// If there was no piece here but the IO is HIGH, a piece was placed
				if ((currentPieceCoordinate.piece.type == NONE) && (cellValue == 1))
 800277c:	783b      	ldrb	r3, [r7, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d108      	bne.n	8002794 <Track+0x70>
 8002782:	793b      	ldrb	r3, [r7, #4]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d105      	bne.n	8002794 <Track+0x70>
				{
					HandlePlace(currentPieceCoordinate);
 8002788:	6838      	ldr	r0, [r7, #0]
 800278a:	f000 f88f 	bl	80028ac <HandlePlace>
					transitionOccured = 1;
 800278e:	2301      	movs	r3, #1
 8002790:	71fb      	strb	r3, [r7, #7]
 8002792:	e00a      	b.n	80027aa <Track+0x86>
				}

				// If there was a piece here but the IO is LOW, a piece has been picked up
				else if ((currentPieceCoordinate.piece.type != NONE) && (cellValue == 0))
 8002794:	783b      	ldrb	r3, [r7, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <Track+0x86>
 800279a:	793b      	ldrb	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d104      	bne.n	80027aa <Track+0x86>
				{
					HandlePickup(currentPieceCoordinate);
 80027a0:	6838      	ldr	r0, [r7, #0]
 80027a2:	f000 fb6b 	bl	8002e7c <HandlePickup>
					transitionOccured = 1;
 80027a6:	2301      	movs	r3, #1
 80027a8:	71fb      	strb	r3, [r7, #7]
		for (uint8_t row = 0; row < NUM_ROWS; row++)
 80027aa:	797b      	ldrb	r3, [r7, #5]
 80027ac:	3301      	adds	r3, #1
 80027ae:	717b      	strb	r3, [r7, #5]
 80027b0:	797b      	ldrb	r3, [r7, #5]
 80027b2:	2b07      	cmp	r3, #7
 80027b4:	d9c5      	bls.n	8002742 <Track+0x1e>
	for (uint8_t column = 0; column < NUM_COLS; column++)
 80027b6:	79bb      	ldrb	r3, [r7, #6]
 80027b8:	3301      	adds	r3, #1
 80027ba:	71bb      	strb	r3, [r7, #6]
 80027bc:	79bb      	ldrb	r3, [r7, #6]
 80027be:	2b07      	cmp	r3, #7
 80027c0:	d9b8      	bls.n	8002734 <Track+0x10>
				}
			}
		}
	}

	return transitionOccured;
 80027c2:	79fb      	ldrb	r3, [r7, #7]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <AppendHistory>:

static void AppendHistory(uint8_t row, uint8_t column, uint8_t cellValue)
{
 80027cc:	b4f0      	push	{r4, r5, r6, r7}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
 80027d6:	460b      	mov	r3, r1
 80027d8:	71bb      	strb	r3, [r7, #6]
 80027da:	4613      	mov	r3, r2
 80027dc:	717b      	strb	r3, [r7, #5]
	// Append cellValue to front of History array
	for(int8_t i = NUM_HISTORY_ENTRIES - 1; i > 0; i--)
 80027de:	2307      	movs	r3, #7
 80027e0:	73fb      	strb	r3, [r7, #15]
 80027e2:	e01d      	b.n	8002820 <AppendHistory+0x54>
	{
		History[row][column][i] = History[row][column][i - 1];
 80027e4:	79fd      	ldrb	r5, [r7, #7]
 80027e6:	79bc      	ldrb	r4, [r7, #6]
 80027e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ec:	1e58      	subs	r0, r3, #1
 80027ee:	79f9      	ldrb	r1, [r7, #7]
 80027f0:	79ba      	ldrb	r2, [r7, #6]
 80027f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f6:	4e13      	ldr	r6, [pc, #76]	; (8002844 <AppendHistory+0x78>)
 80027f8:	00ed      	lsls	r5, r5, #3
 80027fa:	442c      	add	r4, r5
 80027fc:	00e4      	lsls	r4, r4, #3
 80027fe:	4434      	add	r4, r6
 8002800:	4420      	add	r0, r4
 8002802:	7804      	ldrb	r4, [r0, #0]
 8002804:	480f      	ldr	r0, [pc, #60]	; (8002844 <AppendHistory+0x78>)
 8002806:	00c9      	lsls	r1, r1, #3
 8002808:	440a      	add	r2, r1
 800280a:	00d2      	lsls	r2, r2, #3
 800280c:	4402      	add	r2, r0
 800280e:	4413      	add	r3, r2
 8002810:	4622      	mov	r2, r4
 8002812:	701a      	strb	r2, [r3, #0]
	for(int8_t i = NUM_HISTORY_ENTRIES - 1; i > 0; i--)
 8002814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	3b01      	subs	r3, #1
 800281c:	b2db      	uxtb	r3, r3
 800281e:	73fb      	strb	r3, [r7, #15]
 8002820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002824:	2b00      	cmp	r3, #0
 8002826:	dcdd      	bgt.n	80027e4 <AppendHistory+0x18>
	}
	History[row][column][0] = cellValue;
 8002828:	79fa      	ldrb	r2, [r7, #7]
 800282a:	79bb      	ldrb	r3, [r7, #6]
 800282c:	4905      	ldr	r1, [pc, #20]	; (8002844 <AppendHistory+0x78>)
 800282e:	00d2      	lsls	r2, r2, #3
 8002830:	4413      	add	r3, r2
 8002832:	797a      	ldrb	r2, [r7, #5]
 8002834:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
}
 8002838:	bf00      	nop
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bcf0      	pop	{r4, r5, r6, r7}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20001e48 	.word	0x20001e48

08002848 <IsHistoryConsensus>:

static uint8_t IsHistoryConsensus(uint8_t row, uint8_t column)
{
 8002848:	b490      	push	{r4, r7}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	460a      	mov	r2, r1
 8002852:	71fb      	strb	r3, [r7, #7]
 8002854:	4613      	mov	r3, r2
 8002856:	71bb      	strb	r3, [r7, #6]
	// If any two History values are the same, there is not a consensus
	for(uint8_t i = 0; i < NUM_HISTORY_ENTRIES - 1; i++)
 8002858:	2300      	movs	r3, #0
 800285a:	73fb      	strb	r3, [r7, #15]
 800285c:	e01b      	b.n	8002896 <IsHistoryConsensus+0x4e>
	{
		if(History[row][column][i] != History[row][column][i + 1])
 800285e:	79f9      	ldrb	r1, [r7, #7]
 8002860:	79ba      	ldrb	r2, [r7, #6]
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	4810      	ldr	r0, [pc, #64]	; (80028a8 <IsHistoryConsensus+0x60>)
 8002866:	00c9      	lsls	r1, r1, #3
 8002868:	440a      	add	r2, r1
 800286a:	00d2      	lsls	r2, r2, #3
 800286c:	4402      	add	r2, r0
 800286e:	4413      	add	r3, r2
 8002870:	781a      	ldrb	r2, [r3, #0]
 8002872:	79f8      	ldrb	r0, [r7, #7]
 8002874:	79b9      	ldrb	r1, [r7, #6]
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	3301      	adds	r3, #1
 800287a:	4c0b      	ldr	r4, [pc, #44]	; (80028a8 <IsHistoryConsensus+0x60>)
 800287c:	00c0      	lsls	r0, r0, #3
 800287e:	4401      	add	r1, r0
 8002880:	00c9      	lsls	r1, r1, #3
 8002882:	4421      	add	r1, r4
 8002884:	440b      	add	r3, r1
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <IsHistoryConsensus+0x48>
		{
			return 0;
 800288c:	2300      	movs	r3, #0
 800288e:	e006      	b.n	800289e <IsHistoryConsensus+0x56>
	for(uint8_t i = 0; i < NUM_HISTORY_ENTRIES - 1; i++)
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	3301      	adds	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	2b06      	cmp	r3, #6
 800289a:	d9e0      	bls.n	800285e <IsHistoryConsensus+0x16>
		}
	}

	return 1;
 800289c:	2301      	movs	r3, #1
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc90      	pop	{r4, r7}
 80028a6:	4770      	bx	lr
 80028a8:	20001e48 	.word	0x20001e48

080028ac <HandlePlace>:

static void HandlePlace(struct PieceCoordinate placedPiece)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	// If board is in illegal state
	if (NumIllegalPieces > 0)
 80028b4:	4b22      	ldr	r3, [pc, #136]	; (8002940 <HandlePlace+0x94>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HandlePlace+0x18>
	{
		HandlePlaceIllegalState(placedPiece);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f84d 	bl	800295c <HandlePlaceIllegalState>
 80028c2:	e036      	b.n	8002932 <HandlePlace+0x86>
	}

	// If promotion is occurring, this placed piece must be a knight or queen placed into PawnToPromote's place
	else if (PieceExists(PawnToPromote))
 80028c4:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <HandlePlace+0x98>)
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	f001 f83c 	bl	8003944 <PieceExists>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HandlePlace+0x2e>
	{
		HandlePlacePromotion(placedPiece);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 fa9a 	bl	8002e0c <HandlePlacePromotion>
 80028d8:	e02b      	b.n	8002932 <HandlePlace+0x86>
	}

	// If the piece lifted did not move, don't do anything except update Chessboard
	else if (IsPieceCoordinateSamePosition(placedPiece, LastPickedUpPiece))
 80028da:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <HandlePlace+0x9c>)
 80028dc:	6819      	ldr	r1, [r3, #0]
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f001 f930 	bl	8003b44 <IsPieceCoordinateSamePosition>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HandlePlace+0x46>
	{
		HandlePlaceNoMove(placedPiece);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f87a 	bl	80029e4 <HandlePlaceNoMove>
 80028f0:	e01f      	b.n	8002932 <HandlePlace+0x86>
	}

	// If there's a piece being killed, this placement should be in its stead
	else if (PieceExists(PieceToKill))
 80028f2:	4b16      	ldr	r3, [pc, #88]	; (800294c <HandlePlace+0xa0>)
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	f001 f825 	bl	8003944 <PieceExists>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HandlePlace+0x5c>
	{
		HandlePlaceKill(placedPiece);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f885 	bl	8002a10 <HandlePlaceKill>
 8002906:	e014      	b.n	8002932 <HandlePlace+0x86>
	}

	// If player is castling, this placement should be the king or rook being placed in the right spots
	else if (PieceExists(ExpectedKingCastleCoordinate) || PieceExists(ExpectedRookCastleCoordinate))
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <HandlePlace+0xa4>)
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	f001 f81a 	bl	8003944 <PieceExists>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HandlePlace+0x78>
 8002916:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <HandlePlace+0xa8>)
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	f001 f813 	bl	8003944 <PieceExists>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HandlePlace+0x80>
	{
		HandlePlaceCastling(placedPiece);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f937 	bl	8002b98 <HandlePlaceCastling>
 800292a:	e002      	b.n	8002932 <HandlePlace+0x86>
	}

	// Any other move, the last picked up piece is set to this position
	else
	{
		HandlePlaceMove(placedPiece);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f9a3 	bl	8002c78 <HandlePlaceMove>
	}

	LastTransitionType = PLACE;
 8002932:	4b09      	ldr	r3, [pc, #36]	; (8002958 <HandlePlace+0xac>)
 8002934:	2201      	movs	r2, #1
 8002936:	701a      	strb	r2, [r3, #0]
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	200006d8 	.word	0x200006d8
 8002944:	200006e8 	.word	0x200006e8
 8002948:	200005d0 	.word	0x200005d0
 800294c:	200005d4 	.word	0x200005d4
 8002950:	200006e0 	.word	0x200006e0
 8002954:	200006e4 	.word	0x200006e4
 8002958:	200005cd 	.word	0x200005cd

0800295c <HandlePlaceIllegalState>:

static void HandlePlaceIllegalState(struct PieceCoordinate placedPiece)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < NumIllegalPieces; i++)
 8002964:	2300      	movs	r3, #0
 8002966:	73fb      	strb	r3, [r7, #15]
 8002968:	e01e      	b.n	80029a8 <HandlePlaceIllegalState+0x4c>
	{
		// If placing an illegal piece in it's proper destination, remove it from the illegal pieces array
		if (IsPieceCoordinateSamePosition(IllegalPieces[i].destination, placedPiece))
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	4a18      	ldr	r2, [pc, #96]	; (80029d0 <HandlePlaceIllegalState+0x74>)
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002974:	f001 f8e6 	bl	8003b44 <IsPieceCoordinateSamePosition>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d011      	beq.n	80029a2 <HandlePlaceIllegalState+0x46>
		{
			SetPiece(placedPiece.row, placedPiece.column, IllegalPieces[i].destination.piece);
 800297e:	79b8      	ldrb	r0, [r7, #6]
 8002980:	79f9      	ldrb	r1, [r7, #7]
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	4a12      	ldr	r2, [pc, #72]	; (80029d0 <HandlePlaceIllegalState+0x74>)
 8002986:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800298a:	f001 f801 	bl	8003990 <SetPiece>

			// Remove from illegal pieces array
			RemoveIllegalPiece(i);
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	4618      	mov	r0, r3
 8002992:	f000 fd15 	bl	80033c0 <RemoveIllegalPiece>

			// If chessboard is valid, switch turns if flagged to do so
			CheckChessboardValidity(SwitchTurnsAfterLegalState);
 8002996:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <HandlePlaceIllegalState+0x78>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fd84 	bl	80034a8 <CheckChessboardValidity>

			return;
 80029a0:	e013      	b.n	80029ca <HandlePlaceIllegalState+0x6e>
	for (uint8_t i = 0; i < NumIllegalPieces; i++)
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	3301      	adds	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HandlePlaceIllegalState+0x7c>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d3db      	bcc.n	800296a <HandlePlaceIllegalState+0xe>
		}
	}

	// A piece was placed in an unexpected destination, add it as an illegal piece that must be removed from the board
	SetPiece(placedPiece.row, placedPiece.column, LastPickedUpPiece.piece);
 80029b2:	79bb      	ldrb	r3, [r7, #6]
 80029b4:	79f9      	ldrb	r1, [r7, #7]
 80029b6:	4a09      	ldr	r2, [pc, #36]	; (80029dc <HandlePlaceIllegalState+0x80>)
 80029b8:	6812      	ldr	r2, [r2, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 ffe8 	bl	8003990 <SetPiece>
	AddIllegalPiece(placedPiece, OFFBOARD_PIECE_COORDINATE);
 80029c0:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <HandlePlaceIllegalState+0x84>)
 80029c2:	6819      	ldr	r1, [r3, #0]
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 fc73 	bl	80032b0 <AddIllegalPiece>
}
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	200005d8 	.word	0x200005d8
 80029d4:	200006d9 	.word	0x200006d9
 80029d8:	200006d8 	.word	0x200006d8
 80029dc:	200005d0 	.word	0x200005d0
 80029e0:	20000014 	.word	0x20000014

080029e4 <HandlePlaceNoMove>:

static void HandlePlaceNoMove(struct PieceCoordinate placedPiece)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
	SetPiece(placedPiece.row, placedPiece.column, LastPickedUpPiece.piece);
 80029ec:	79bb      	ldrb	r3, [r7, #6]
 80029ee:	79f9      	ldrb	r1, [r7, #7]
 80029f0:	4a06      	ldr	r2, [pc, #24]	; (8002a0c <HandlePlaceNoMove+0x28>)
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 ffcb 	bl	8003990 <SetPiece>

	// Turn off all squares
	IlluminateCoordinates(NULL, 0);
 80029fa:	2100      	movs	r1, #0
 80029fc:	2000      	movs	r0, #0
 80029fe:	f000 fc17 	bl	8003230 <IlluminateCoordinates>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200005d0 	.word	0x200005d0

08002a10 <HandlePlaceKill>:

static void HandlePlaceKill(struct PieceCoordinate placedPiece)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	SetPiece(placedPiece.row, placedPiece.column, LastPickedUpPiece.piece);
 8002a18:	79bb      	ldrb	r3, [r7, #6]
 8002a1a:	79f9      	ldrb	r1, [r7, #7]
 8002a1c:	4a53      	ldr	r2, [pc, #332]	; (8002b6c <HandlePlaceKill+0x15c>)
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 ffb5 	bl	8003990 <SetPiece>

	// If player put killer in victim's place, clear PieceToKill
	if (IsPieceCoordinateSamePosition(PieceToKill, placedPiece))
 8002a26:	4b52      	ldr	r3, [pc, #328]	; (8002b70 <HandlePlaceKill+0x160>)
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	f001 f88a 	bl	8003b44 <IsPieceCoordinateSamePosition>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 8089 	beq.w	8002b4a <HandlePlaceKill+0x13a>
	{
		ClearPiece(&PieceToKill);
 8002a38:	484d      	ldr	r0, [pc, #308]	; (8002b70 <HandlePlaceKill+0x160>)
 8002a3a:	f000 ff99 	bl	8003970 <ClearPiece>
		EndTurn();
 8002a3e:	f000 fe49 	bl	80036d4 <EndTurn>

		// Get move from AI for BLACK
		if (LastPickedUpPiece.piece.owner == WHITE){
 8002a42:	4b4a      	ldr	r3, [pc, #296]	; (8002b6c <HandlePlaceKill+0x15c>)
 8002a44:	785b      	ldrb	r3, [r3, #1]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	f040 808c 	bne.w	8002b64 <HandlePlaceKill+0x154>
			MoveBuffer[2] = 'h' - placedPiece.column;
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	4b47      	ldr	r3, [pc, #284]	; (8002b74 <HandlePlaceKill+0x164>)
 8002a56:	709a      	strb	r2, [r3, #2]
			MoveBuffer[3] = '1' + placedPiece.row;
 8002a58:	79bb      	ldrb	r3, [r7, #6]
 8002a5a:	3331      	adds	r3, #49	; 0x31
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	4b45      	ldr	r3, [pc, #276]	; (8002b74 <HandlePlaceKill+0x164>)
 8002a60:	70da      	strb	r2, [r3, #3]
			ReceiveBuffer[0] = '-';
 8002a62:	4b45      	ldr	r3, [pc, #276]	; (8002b78 <HandlePlaceKill+0x168>)
 8002a64:	222d      	movs	r2, #45	; 0x2d
 8002a66:	701a      	strb	r2, [r3, #0]
			ReceiveBuffer[1] = '-';
 8002a68:	4b43      	ldr	r3, [pc, #268]	; (8002b78 <HandlePlaceKill+0x168>)
 8002a6a:	222d      	movs	r2, #45	; 0x2d
 8002a6c:	705a      	strb	r2, [r3, #1]
			ReceiveBuffer[2] = '-';
 8002a6e:	4b42      	ldr	r3, [pc, #264]	; (8002b78 <HandlePlaceKill+0x168>)
 8002a70:	222d      	movs	r2, #45	; 0x2d
 8002a72:	709a      	strb	r2, [r3, #2]
			ReceiveBuffer[3] = '-';
 8002a74:	4b40      	ldr	r3, [pc, #256]	; (8002b78 <HandlePlaceKill+0x168>)
 8002a76:	222d      	movs	r2, #45	; 0x2d
 8002a78:	70da      	strb	r2, [r3, #3]
			ReceiveBuffer[4] = '-';
 8002a7a:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <HandlePlaceKill+0x168>)
 8002a7c:	222d      	movs	r2, #45	; 0x2d
 8002a7e:	711a      	strb	r2, [r3, #4]
			sendMove(&huart1, MoveBuffer);
 8002a80:	493c      	ldr	r1, [pc, #240]	; (8002b74 <HandlePlaceKill+0x164>)
 8002a82:	483e      	ldr	r0, [pc, #248]	; (8002b7c <HandlePlaceKill+0x16c>)
 8002a84:	f001 f8ba 	bl	8003bfc <sendMove>
			receiveData(&huart1, ReceiveBuffer);
 8002a88:	493b      	ldr	r1, [pc, #236]	; (8002b78 <HandlePlaceKill+0x168>)
 8002a8a:	483c      	ldr	r0, [pc, #240]	; (8002b7c <HandlePlaceKill+0x16c>)
 8002a8c:	f001 f907 	bl	8003c9e <receiveData>
			if (memcmp(ReceiveBuffer, "-----", 5) != 0){
 8002a90:	2205      	movs	r2, #5
 8002a92:	493b      	ldr	r1, [pc, #236]	; (8002b80 <HandlePlaceKill+0x170>)
 8002a94:	4838      	ldr	r0, [pc, #224]	; (8002b78 <HandlePlaceKill+0x168>)
 8002a96:	f007 f9f9 	bl	8009e8c <memcmp>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d061      	beq.n	8002b64 <HandlePlaceKill+0x154>
				struct Coordinate from[2] = {0};
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
				from[0].row = (int8_t)(ReceiveBuffer[1] - '1');
 8002aa4:	4b34      	ldr	r3, [pc, #208]	; (8002b78 <HandlePlaceKill+0x168>)
 8002aa6:	785b      	ldrb	r3, [r3, #1]
 8002aa8:	3b31      	subs	r3, #49	; 0x31
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	b25b      	sxtb	r3, r3
 8002aae:	733b      	strb	r3, [r7, #12]
				from[0].column = (int8_t)('h' - ReceiveBuffer[0]);
 8002ab0:	4b31      	ldr	r3, [pc, #196]	; (8002b78 <HandlePlaceKill+0x168>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	b25b      	sxtb	r3, r3
 8002abc:	737b      	strb	r3, [r7, #13]
				from[1].row = (int8_t)(ReceiveBuffer[3] - '1');
 8002abe:	4b2e      	ldr	r3, [pc, #184]	; (8002b78 <HandlePlaceKill+0x168>)
 8002ac0:	78db      	ldrb	r3, [r3, #3]
 8002ac2:	3b31      	subs	r3, #49	; 0x31
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	b25b      	sxtb	r3, r3
 8002ac8:	73bb      	strb	r3, [r7, #14]
				from[1].column = (int8_t)('h' - ReceiveBuffer[2]);
 8002aca:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <HandlePlaceKill+0x168>)
 8002acc:	789b      	ldrb	r3, [r3, #2]
 8002ace:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	b25b      	sxtb	r3, r3
 8002ad6:	73fb      	strb	r3, [r7, #15]
				IlluminateCoordinates(from, 2);
 8002ad8:	f107 030c 	add.w	r3, r7, #12
 8002adc:	2102      	movs	r1, #2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 fba6 	bl	8003230 <IlluminateCoordinates>
				prepAudio(&hspi1, &hspi2, &hdac);
 8002ae4:	4a27      	ldr	r2, [pc, #156]	; (8002b84 <HandlePlaceKill+0x174>)
 8002ae6:	4928      	ldr	r1, [pc, #160]	; (8002b88 <HandlePlaceKill+0x178>)
 8002ae8:	4828      	ldr	r0, [pc, #160]	; (8002b8c <HandlePlaceKill+0x17c>)
 8002aea:	f001 fa83 	bl	8003ff4 <prepAudio>
				PlayAudio(audio[ReceiveBuffer[0] - 'a'], &hdac);
 8002aee:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <HandlePlaceKill+0x168>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	3b61      	subs	r3, #97	; 0x61
 8002af4:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <HandlePlaceKill+0x180>)
 8002af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afa:	4922      	ldr	r1, [pc, #136]	; (8002b84 <HandlePlaceKill+0x174>)
 8002afc:	4618      	mov	r0, r3
 8002afe:	f001 f91d 	bl	8003d3c <PlayAudio>
				PlayAudio(audio[ReceiveBuffer[1] - '1' + 8], &hdac);
 8002b02:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <HandlePlaceKill+0x168>)
 8002b04:	785b      	ldrb	r3, [r3, #1]
 8002b06:	3b29      	subs	r3, #41	; 0x29
 8002b08:	4a21      	ldr	r2, [pc, #132]	; (8002b90 <HandlePlaceKill+0x180>)
 8002b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0e:	491d      	ldr	r1, [pc, #116]	; (8002b84 <HandlePlaceKill+0x174>)
 8002b10:	4618      	mov	r0, r3
 8002b12:	f001 f913 	bl	8003d3c <PlayAudio>
				PlayAudio(audio[ReceiveBuffer[2] - 'a'], &hdac);
 8002b16:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <HandlePlaceKill+0x168>)
 8002b18:	789b      	ldrb	r3, [r3, #2]
 8002b1a:	3b61      	subs	r3, #97	; 0x61
 8002b1c:	4a1c      	ldr	r2, [pc, #112]	; (8002b90 <HandlePlaceKill+0x180>)
 8002b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b22:	4918      	ldr	r1, [pc, #96]	; (8002b84 <HandlePlaceKill+0x174>)
 8002b24:	4618      	mov	r0, r3
 8002b26:	f001 f909 	bl	8003d3c <PlayAudio>
				PlayAudio(audio[ReceiveBuffer[3] - '1' + 8], &hdac);
 8002b2a:	4b13      	ldr	r3, [pc, #76]	; (8002b78 <HandlePlaceKill+0x168>)
 8002b2c:	78db      	ldrb	r3, [r3, #3]
 8002b2e:	3b29      	subs	r3, #41	; 0x29
 8002b30:	4a17      	ldr	r2, [pc, #92]	; (8002b90 <HandlePlaceKill+0x180>)
 8002b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b36:	4913      	ldr	r1, [pc, #76]	; (8002b84 <HandlePlaceKill+0x174>)
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f001 f8ff 	bl	8003d3c <PlayAudio>
				resetAudio(&hspi1, &hspi2, &hdac);
 8002b3e:	4a11      	ldr	r2, [pc, #68]	; (8002b84 <HandlePlaceKill+0x174>)
 8002b40:	4911      	ldr	r1, [pc, #68]	; (8002b88 <HandlePlaceKill+0x178>)
 8002b42:	4812      	ldr	r0, [pc, #72]	; (8002b8c <HandlePlaceKill+0x17c>)
 8002b44:	f001 fa76 	bl	8004034 <resetAudio>
		struct PieceCoordinate killerDestination = PieceToKill;
		killerDestination.piece = LastPickedUpPiece.piece;
		AddIllegalPiece(placedPiece, killerDestination);
		SwitchTurnsAfterLegalState = 1;
	}
}
 8002b48:	e00c      	b.n	8002b64 <HandlePlaceKill+0x154>
		struct PieceCoordinate killerDestination = PieceToKill;
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <HandlePlaceKill+0x160>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60bb      	str	r3, [r7, #8]
		killerDestination.piece = LastPickedUpPiece.piece;
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HandlePlaceKill+0x15c>)
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	813b      	strh	r3, [r7, #8]
		AddIllegalPiece(placedPiece, killerDestination);
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 fba9 	bl	80032b0 <AddIllegalPiece>
		SwitchTurnsAfterLegalState = 1;
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <HandlePlaceKill+0x184>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	701a      	strb	r2, [r3, #0]
}
 8002b64:	bf00      	nop
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	200005d0 	.word	0x200005d0
 8002b70:	200005d4 	.word	0x200005d4
 8002b74:	200006ec 	.word	0x200006ec
 8002b78:	200006f0 	.word	0x200006f0
 8002b7c:	20001d14 	.word	0x20001d14
 8002b80:	08009f74 	.word	0x08009f74
 8002b84:	20001d58 	.word	0x20001d58
 8002b88:	20001ba4 	.word	0x20001ba4
 8002b8c:	20001db0 	.word	0x20001db0
 8002b90:	20000098 	.word	0x20000098
 8002b94:	200006d9 	.word	0x200006d9

08002b98 <HandlePlaceCastling>:

static void HandlePlaceCastling(struct PieceCoordinate placedPiece)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	// If placing a piece in the King's expected location, assume it's a king and place it
	if (IsPieceCoordinateSamePosition(ExpectedKingCastleCoordinate, placedPiece))
 8002ba0:	4b32      	ldr	r3, [pc, #200]	; (8002c6c <HandlePlaceCastling+0xd4>)
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	f000 ffcd 	bl	8003b44 <IsPieceCoordinateSamePosition>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00a      	beq.n	8002bc6 <HandlePlaceCastling+0x2e>
	{
		SetPiece(placedPiece.row, placedPiece.column, ExpectedKingCastleCoordinate.piece);
 8002bb0:	79bb      	ldrb	r3, [r7, #6]
 8002bb2:	79f9      	ldrb	r1, [r7, #7]
 8002bb4:	4a2d      	ldr	r2, [pc, #180]	; (8002c6c <HandlePlaceCastling+0xd4>)
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fee9 	bl	8003990 <SetPiece>
		ClearPiece(&ExpectedKingCastleCoordinate);
 8002bbe:	482b      	ldr	r0, [pc, #172]	; (8002c6c <HandlePlaceCastling+0xd4>)
 8002bc0:	f000 fed6 	bl	8003970 <ClearPiece>
 8002bc4:	e03e      	b.n	8002c44 <HandlePlaceCastling+0xac>
	}
	// If placing a piece in the Rook's expected location, assume it's a rook and place it
	else if (IsPieceCoordinateSamePosition(ExpectedRookCastleCoordinate, placedPiece))
 8002bc6:	4b2a      	ldr	r3, [pc, #168]	; (8002c70 <HandlePlaceCastling+0xd8>)
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	f000 ffba 	bl	8003b44 <IsPieceCoordinateSamePosition>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HandlePlaceCastling+0x54>
	{
		SetPiece(placedPiece.row, placedPiece.column, ExpectedRookCastleCoordinate.piece);
 8002bd6:	79bb      	ldrb	r3, [r7, #6]
 8002bd8:	79f9      	ldrb	r1, [r7, #7]
 8002bda:	4a25      	ldr	r2, [pc, #148]	; (8002c70 <HandlePlaceCastling+0xd8>)
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fed6 	bl	8003990 <SetPiece>
		ClearPiece(&ExpectedRookCastleCoordinate);
 8002be4:	4822      	ldr	r0, [pc, #136]	; (8002c70 <HandlePlaceCastling+0xd8>)
 8002be6:	f000 fec3 	bl	8003970 <ClearPiece>
 8002bea:	e02b      	b.n	8002c44 <HandlePlaceCastling+0xac>
	}
	// If placing piece in wrong location
	else
	{
		// If King wasn't already placed in correct spot, put it in the correct spot
		if (PieceExists(ExpectedKingCastleCoordinate))
 8002bec:	4b1f      	ldr	r3, [pc, #124]	; (8002c6c <HandlePlaceCastling+0xd4>)
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	f000 fea8 	bl	8003944 <PieceExists>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00e      	beq.n	8002c18 <HandlePlaceCastling+0x80>
		{
			SetPiece(placedPiece.row, placedPiece.column, ExpectedKingCastleCoordinate.piece); // Assume the king was placed here (doesn't matter)
 8002bfa:	79bb      	ldrb	r3, [r7, #6]
 8002bfc:	79f9      	ldrb	r1, [r7, #7]
 8002bfe:	4a1b      	ldr	r2, [pc, #108]	; (8002c6c <HandlePlaceCastling+0xd4>)
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fec4 	bl	8003990 <SetPiece>
			AddIllegalPiece(placedPiece, ExpectedKingCastleCoordinate);
 8002c08:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <HandlePlaceCastling+0xd4>)
 8002c0a:	6819      	ldr	r1, [r3, #0]
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fb4f 	bl	80032b0 <AddIllegalPiece>
			SwitchTurnsAfterLegalState = 1;
 8002c12:	4b18      	ldr	r3, [pc, #96]	; (8002c74 <HandlePlaceCastling+0xdc>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
		}

		// If Rook wasn't already placed in correct spot, put it in correct spot
		if (PieceExists(ExpectedRookCastleCoordinate))
 8002c18:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <HandlePlaceCastling+0xd8>)
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	f000 fe92 	bl	8003944 <PieceExists>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00e      	beq.n	8002c44 <HandlePlaceCastling+0xac>
		{
			SetPiece(placedPiece.row, placedPiece.column, ExpectedRookCastleCoordinate.piece); // Assume the rook was placed here (doesn't matter)
 8002c26:	79bb      	ldrb	r3, [r7, #6]
 8002c28:	79f9      	ldrb	r1, [r7, #7]
 8002c2a:	4a11      	ldr	r2, [pc, #68]	; (8002c70 <HandlePlaceCastling+0xd8>)
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 feae 	bl	8003990 <SetPiece>
			AddIllegalPiece(placedPiece, ExpectedRookCastleCoordinate);
 8002c34:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <HandlePlaceCastling+0xd8>)
 8002c36:	6819      	ldr	r1, [r3, #0]
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 fb39 	bl	80032b0 <AddIllegalPiece>
			SwitchTurnsAfterLegalState = 1;
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <HandlePlaceCastling+0xdc>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
		}
	}

	// If castling has been fulfilled
	if (!PieceExists(ExpectedKingCastleCoordinate) && !PieceExists(ExpectedRookCastleCoordinate))
 8002c44:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <HandlePlaceCastling+0xd4>)
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	f000 fe7c 	bl	8003944 <PieceExists>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d108      	bne.n	8002c64 <HandlePlaceCastling+0xcc>
 8002c52:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <HandlePlaceCastling+0xd8>)
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	f000 fe75 	bl	8003944 <PieceExists>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HandlePlaceCastling+0xcc>
	{
		EndTurn();
 8002c60:	f000 fd38 	bl	80036d4 <EndTurn>
	}
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	200006e0 	.word	0x200006e0
 8002c70:	200006e4 	.word	0x200006e4
 8002c74:	200006d9 	.word	0x200006d9

08002c78 <HandlePlaceMove>:

static void HandlePlaceMove(struct PieceCoordinate placedPiece)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	uint8_t isMoveValid = ValidateMove(LastPickedUpPiece, placedPiece);
 8002c80:	4b50      	ldr	r3, [pc, #320]	; (8002dc4 <HandlePlaceMove+0x14c>)
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	f000 fc3f 	bl	8003508 <ValidateMove>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	73fb      	strb	r3, [r7, #15]
	SetPiece(placedPiece.row, placedPiece.column, LastPickedUpPiece.piece);
 8002c8e:	79bb      	ldrb	r3, [r7, #6]
 8002c90:	79f9      	ldrb	r1, [r7, #7]
 8002c92:	4a4c      	ldr	r2, [pc, #304]	; (8002dc4 <HandlePlaceMove+0x14c>)
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 fe7a 	bl	8003990 <SetPiece>

	if (isMoveValid)
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 8086 	beq.w	8002db0 <HandlePlaceMove+0x138>
	{
		EndTurn();
 8002ca4:	f000 fd16 	bl	80036d4 <EndTurn>

		// Get move from AI for BLACK
		if (LastPickedUpPiece.piece.owner == WHITE){
 8002ca8:	4b46      	ldr	r3, [pc, #280]	; (8002dc4 <HandlePlaceMove+0x14c>)
 8002caa:	785b      	ldrb	r3, [r3, #1]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	f040 8084 	bne.w	8002dba <HandlePlaceMove+0x142>
			MoveBuffer[2] = 'h' - placedPiece.column;
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	4b43      	ldr	r3, [pc, #268]	; (8002dc8 <HandlePlaceMove+0x150>)
 8002cbc:	709a      	strb	r2, [r3, #2]
			MoveBuffer[3] = '1' + placedPiece.row;
 8002cbe:	79bb      	ldrb	r3, [r7, #6]
 8002cc0:	3331      	adds	r3, #49	; 0x31
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	4b40      	ldr	r3, [pc, #256]	; (8002dc8 <HandlePlaceMove+0x150>)
 8002cc6:	70da      	strb	r2, [r3, #3]
			ReceiveBuffer[0] = '-';
 8002cc8:	4b40      	ldr	r3, [pc, #256]	; (8002dcc <HandlePlaceMove+0x154>)
 8002cca:	222d      	movs	r2, #45	; 0x2d
 8002ccc:	701a      	strb	r2, [r3, #0]
			ReceiveBuffer[1] = '-';
 8002cce:	4b3f      	ldr	r3, [pc, #252]	; (8002dcc <HandlePlaceMove+0x154>)
 8002cd0:	222d      	movs	r2, #45	; 0x2d
 8002cd2:	705a      	strb	r2, [r3, #1]
			ReceiveBuffer[2] = '-';
 8002cd4:	4b3d      	ldr	r3, [pc, #244]	; (8002dcc <HandlePlaceMove+0x154>)
 8002cd6:	222d      	movs	r2, #45	; 0x2d
 8002cd8:	709a      	strb	r2, [r3, #2]
			ReceiveBuffer[3] = '-';
 8002cda:	4b3c      	ldr	r3, [pc, #240]	; (8002dcc <HandlePlaceMove+0x154>)
 8002cdc:	222d      	movs	r2, #45	; 0x2d
 8002cde:	70da      	strb	r2, [r3, #3]
			ReceiveBuffer[4] = '-';
 8002ce0:	4b3a      	ldr	r3, [pc, #232]	; (8002dcc <HandlePlaceMove+0x154>)
 8002ce2:	222d      	movs	r2, #45	; 0x2d
 8002ce4:	711a      	strb	r2, [r3, #4]
			sendMove(&huart1, MoveBuffer);
 8002ce6:	4938      	ldr	r1, [pc, #224]	; (8002dc8 <HandlePlaceMove+0x150>)
 8002ce8:	4839      	ldr	r0, [pc, #228]	; (8002dd0 <HandlePlaceMove+0x158>)
 8002cea:	f000 ff87 	bl	8003bfc <sendMove>
			receiveData(&huart1, ReceiveBuffer);
 8002cee:	4937      	ldr	r1, [pc, #220]	; (8002dcc <HandlePlaceMove+0x154>)
 8002cf0:	4837      	ldr	r0, [pc, #220]	; (8002dd0 <HandlePlaceMove+0x158>)
 8002cf2:	f000 ffd4 	bl	8003c9e <receiveData>
			if (memcmp(ReceiveBuffer, "-----", 5) != 0){
 8002cf6:	2205      	movs	r2, #5
 8002cf8:	4936      	ldr	r1, [pc, #216]	; (8002dd4 <HandlePlaceMove+0x15c>)
 8002cfa:	4834      	ldr	r0, [pc, #208]	; (8002dcc <HandlePlaceMove+0x154>)
 8002cfc:	f007 f8c6 	bl	8009e8c <memcmp>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d059      	beq.n	8002dba <HandlePlaceMove+0x142>
				struct Coordinate from[2] = {0};
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
				from[0].row = (int8_t)(ReceiveBuffer[1] - '1');
 8002d0a:	4b30      	ldr	r3, [pc, #192]	; (8002dcc <HandlePlaceMove+0x154>)
 8002d0c:	785b      	ldrb	r3, [r3, #1]
 8002d0e:	3b31      	subs	r3, #49	; 0x31
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	b25b      	sxtb	r3, r3
 8002d14:	723b      	strb	r3, [r7, #8]
				from[0].column = (int8_t)('h' - ReceiveBuffer[0]);
 8002d16:	4b2d      	ldr	r3, [pc, #180]	; (8002dcc <HandlePlaceMove+0x154>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	b25b      	sxtb	r3, r3
 8002d22:	727b      	strb	r3, [r7, #9]
				from[1].row = (int8_t)(ReceiveBuffer[3] - '1');
 8002d24:	4b29      	ldr	r3, [pc, #164]	; (8002dcc <HandlePlaceMove+0x154>)
 8002d26:	78db      	ldrb	r3, [r3, #3]
 8002d28:	3b31      	subs	r3, #49	; 0x31
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	b25b      	sxtb	r3, r3
 8002d2e:	72bb      	strb	r3, [r7, #10]
				from[1].column = (int8_t)('h' - ReceiveBuffer[2]);
 8002d30:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <HandlePlaceMove+0x154>)
 8002d32:	789b      	ldrb	r3, [r3, #2]
 8002d34:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	b25b      	sxtb	r3, r3
 8002d3c:	72fb      	strb	r3, [r7, #11]
				IlluminateCoordinates(from, 2);
 8002d3e:	f107 0308 	add.w	r3, r7, #8
 8002d42:	2102      	movs	r1, #2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fa73 	bl	8003230 <IlluminateCoordinates>
				prepAudio(&hspi1, &hspi2, &hdac);
 8002d4a:	4a23      	ldr	r2, [pc, #140]	; (8002dd8 <HandlePlaceMove+0x160>)
 8002d4c:	4923      	ldr	r1, [pc, #140]	; (8002ddc <HandlePlaceMove+0x164>)
 8002d4e:	4824      	ldr	r0, [pc, #144]	; (8002de0 <HandlePlaceMove+0x168>)
 8002d50:	f001 f950 	bl	8003ff4 <prepAudio>
				PlayAudio(audio[ReceiveBuffer[0] - 'a'], &hdac);
 8002d54:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <HandlePlaceMove+0x154>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	3b61      	subs	r3, #97	; 0x61
 8002d5a:	4a22      	ldr	r2, [pc, #136]	; (8002de4 <HandlePlaceMove+0x16c>)
 8002d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d60:	491d      	ldr	r1, [pc, #116]	; (8002dd8 <HandlePlaceMove+0x160>)
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 ffea 	bl	8003d3c <PlayAudio>
				PlayAudio(audio[ReceiveBuffer[1] - '1' + 8], &hdac);
 8002d68:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <HandlePlaceMove+0x154>)
 8002d6a:	785b      	ldrb	r3, [r3, #1]
 8002d6c:	3b29      	subs	r3, #41	; 0x29
 8002d6e:	4a1d      	ldr	r2, [pc, #116]	; (8002de4 <HandlePlaceMove+0x16c>)
 8002d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d74:	4918      	ldr	r1, [pc, #96]	; (8002dd8 <HandlePlaceMove+0x160>)
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 ffe0 	bl	8003d3c <PlayAudio>
				PlayAudio(audio[ReceiveBuffer[2] - 'a'], &hdac);
 8002d7c:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <HandlePlaceMove+0x154>)
 8002d7e:	789b      	ldrb	r3, [r3, #2]
 8002d80:	3b61      	subs	r3, #97	; 0x61
 8002d82:	4a18      	ldr	r2, [pc, #96]	; (8002de4 <HandlePlaceMove+0x16c>)
 8002d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d88:	4913      	ldr	r1, [pc, #76]	; (8002dd8 <HandlePlaceMove+0x160>)
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 ffd6 	bl	8003d3c <PlayAudio>
				PlayAudio(audio[ReceiveBuffer[3] - '1' + 8], &hdac);
 8002d90:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <HandlePlaceMove+0x154>)
 8002d92:	78db      	ldrb	r3, [r3, #3]
 8002d94:	3b29      	subs	r3, #41	; 0x29
 8002d96:	4a13      	ldr	r2, [pc, #76]	; (8002de4 <HandlePlaceMove+0x16c>)
 8002d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9c:	490e      	ldr	r1, [pc, #56]	; (8002dd8 <HandlePlaceMove+0x160>)
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 ffcc 	bl	8003d3c <PlayAudio>
				resetAudio(&hspi1, &hspi2, &hdac);
 8002da4:	4a0c      	ldr	r2, [pc, #48]	; (8002dd8 <HandlePlaceMove+0x160>)
 8002da6:	490d      	ldr	r1, [pc, #52]	; (8002ddc <HandlePlaceMove+0x164>)
 8002da8:	480d      	ldr	r0, [pc, #52]	; (8002de0 <HandlePlaceMove+0x168>)
 8002daa:	f001 f943 	bl	8004034 <resetAudio>
	// If move was invalid, put piece back
	else
	{
		AddIllegalPiece(placedPiece, LastPickedUpPiece);
	}
}
 8002dae:	e004      	b.n	8002dba <HandlePlaceMove+0x142>
		AddIllegalPiece(placedPiece, LastPickedUpPiece);
 8002db0:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <HandlePlaceMove+0x14c>)
 8002db2:	6819      	ldr	r1, [r3, #0]
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fa7b 	bl	80032b0 <AddIllegalPiece>
}
 8002dba:	bf00      	nop
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200005d0 	.word	0x200005d0
 8002dc8:	200006ec 	.word	0x200006ec
 8002dcc:	200006f0 	.word	0x200006f0
 8002dd0:	20001d14 	.word	0x20001d14
 8002dd4:	08009f74 	.word	0x08009f74
 8002dd8:	20001d58 	.word	0x20001d58
 8002ddc:	20001ba4 	.word	0x20001ba4
 8002de0:	20001db0 	.word	0x20001db0
 8002de4:	20000098 	.word	0x20000098

08002de8 <HandlePlacePreemptPromotion>:

static void HandlePlacePreemptPromotion(struct PieceCoordinate placedPiece)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
	PawnToPromote = placedPiece;
 8002df0:	4a05      	ldr	r2, [pc, #20]	; (8002e08 <HandlePlacePreemptPromotion+0x20>)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6013      	str	r3, [r2, #0]

	// Illuminate the PawnToPromote
	IlluminatePieceCoordinates(&PawnToPromote, 1);
 8002df6:	2101      	movs	r1, #1
 8002df8:	4803      	ldr	r0, [pc, #12]	; (8002e08 <HandlePlacePreemptPromotion+0x20>)
 8002dfa:	f000 f9db 	bl	80031b4 <IlluminatePieceCoordinates>
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200006e8 	.word	0x200006e8

08002e0c <HandlePlacePromotion>:

static void HandlePlacePromotion(struct PieceCoordinate placedPiece)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	// If placed the promoted piece back into the pawn's old spot, get the PieceType (knight or queen) from the last button pressed and set the piece as that type
	if (IsPieceCoordinateSamePosition(placedPiece, PawnToPromote))
 8002e14:	4b17      	ldr	r3, [pc, #92]	; (8002e74 <HandlePlacePromotion+0x68>)
 8002e16:	6819      	ldr	r1, [r3, #0]
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fe93 	bl	8003b44 <IsPieceCoordinateSamePosition>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01e      	beq.n	8002e62 <HandlePlacePromotion+0x56>
	{
		// Get last button pressed, choose the piece type based on which button was pressed
		enum PieceType selectedPieceType;
		switch(GetLastButtonPressed())
 8002e24:	f7fd fba0 	bl	8000568 <GetLastButtonPressed>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d002      	beq.n	8002e34 <HandlePlacePromotion+0x28>
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d003      	beq.n	8002e3a <HandlePlacePromotion+0x2e>
			case KNIGHT_BUTTON:
				selectedPieceType = KNIGHT;
				break;
			default:
				/// @todo: play audio cue to select the piece type to promote to
				return;
 8002e32:	e01b      	b.n	8002e6c <HandlePlacePromotion+0x60>
				selectedPieceType = QUEEN;
 8002e34:	2305      	movs	r3, #5
 8002e36:	73fb      	strb	r3, [r7, #15]
				break;
 8002e38:	e002      	b.n	8002e40 <HandlePlacePromotion+0x34>
				selectedPieceType = KNIGHT;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	73fb      	strb	r3, [r7, #15]
				break;
 8002e3e:	bf00      	nop
		}

		// Set piece on chessboard and end the turn
		struct Piece promotedPiece = {selectedPieceType, CurrentTurn};
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	733b      	strb	r3, [r7, #12]
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <HandlePlacePromotion+0x6c>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	737b      	strb	r3, [r7, #13]
		SetPiece(placedPiece.row, placedPiece.column, promotedPiece);
 8002e4a:	79bb      	ldrb	r3, [r7, #6]
 8002e4c:	79f9      	ldrb	r1, [r7, #7]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 fd9d 	bl	8003990 <SetPiece>
		ClearPiece(&PawnToPromote);
 8002e56:	4807      	ldr	r0, [pc, #28]	; (8002e74 <HandlePlacePromotion+0x68>)
 8002e58:	f000 fd8a 	bl	8003970 <ClearPiece>
		EndTurn();
 8002e5c:	f000 fc3a 	bl	80036d4 <EndTurn>
 8002e60:	e004      	b.n	8002e6c <HandlePlacePromotion+0x60>
	}

	// If player doesn't place the promotion into the pawn's old spot, it must be placed in the right spot
	else
	{
		AddIllegalPiece(placedPiece, PawnToPromote);
 8002e62:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <HandlePlacePromotion+0x68>)
 8002e64:	6819      	ldr	r1, [r3, #0]
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fa22 	bl	80032b0 <AddIllegalPiece>
	}
}
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200006e8 	.word	0x200006e8
 8002e78:	200005cc 	.word	0x200005cc

08002e7c <HandlePickup>:



static void HandlePickup(struct PieceCoordinate pickedUpPiece)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
	SetPiece(pickedUpPiece.row, pickedUpPiece.column, EMPTY_PIECE);
 8002e84:	79bb      	ldrb	r3, [r7, #6]
 8002e86:	79f9      	ldrb	r1, [r7, #7]
 8002e88:	4a21      	ldr	r2, [pc, #132]	; (8002f10 <HandlePickup+0x94>)
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fd7f 	bl	8003990 <SetPiece>

	// If a piece is picked up during an illegal state, if it's not an illegal piece it is NOW illegal
	if (NumIllegalPieces > 0)
 8002e92:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <HandlePickup+0x98>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HandlePickup+0x26>
	{
		HandlePickupIllegalState(pickedUpPiece);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f846 	bl	8002f2c <HandlePickupIllegalState>
 8002ea0:	e02b      	b.n	8002efa <HandlePickup+0x7e>
	}

	// If player picked up piece from other team, they will kill it
	else if (pickedUpPiece.piece.owner != CurrentTurn)
 8002ea2:	797a      	ldrb	r2, [r7, #5]
 8002ea4:	4b1c      	ldr	r3, [pc, #112]	; (8002f18 <HandlePickup+0x9c>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d003      	beq.n	8002eb4 <HandlePickup+0x38>
	{
		HandlePickupPreemptKill(pickedUpPiece);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f87f 	bl	8002fb0 <HandlePickupPreemptKill>
 8002eb2:	e022      	b.n	8002efa <HandlePickup+0x7e>
	}

	// If there's a piece to kill, this picked up piece must be able to kill it
	else if (PieceExists(PieceToKill))
 8002eb4:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <HandlePickup+0xa0>)
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	f000 fd44 	bl	8003944 <PieceExists>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HandlePickup+0x4e>
	{
		HandlePickupKill(pickedUpPiece);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f882 	bl	8002fcc <HandlePickupKill>
 8002ec8:	e017      	b.n	8002efa <HandlePickup+0x7e>
	}

	// If there's a pawn to promote, the picked up piece must be this pawn
	else if (PieceExists(PawnToPromote))
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <HandlePickup+0xa4>)
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	f000 fd39 	bl	8003944 <PieceExists>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HandlePickup+0x64>
	{
		HandlePickupPromotion(pickedUpPiece);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f919 	bl	8003110 <HandlePickupPromotion>
 8002ede:	e00c      	b.n	8002efa <HandlePickup+0x7e>
	}

	// Same team picked up piece twice in a row, so castling is occurring
	else if (DidSameTeamPickupLast(pickedUpPiece.piece))
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fdc7 	bl	8003a74 <DidSameTeamPickupLast>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HandlePickup+0x78>
	{
		HandlePickupCastling(pickedUpPiece);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f8a1 	bl	8003034 <HandlePickupCastling>
 8002ef2:	e002      	b.n	8002efa <HandlePickup+0x7e>
	}

	// If simple pickup
	else
	{
		HandlePickupMove(pickedUpPiece);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f925 	bl	8003144 <HandlePickupMove>
	}

	LastPickedUpPiece = pickedUpPiece;
 8002efa:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <HandlePickup+0xa8>)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6013      	str	r3, [r2, #0]
	LastTransitionType = PICKUP;
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HandlePickup+0xac>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	2000000c 	.word	0x2000000c
 8002f14:	200006d8 	.word	0x200006d8
 8002f18:	200005cc 	.word	0x200005cc
 8002f1c:	200005d4 	.word	0x200005d4
 8002f20:	200006e8 	.word	0x200006e8
 8002f24:	200005d0 	.word	0x200005d0
 8002f28:	200005cd 	.word	0x200005cd

08002f2c <HandlePickupIllegalState>:

static void HandlePickupIllegalState(struct PieceCoordinate pickedUpPiece)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < NumIllegalPieces; i++)
 8002f34:	2300      	movs	r3, #0
 8002f36:	73fb      	strb	r3, [r7, #15]
 8002f38:	e022      	b.n	8002f80 <HandlePickupIllegalState+0x54>
	{
		// If pickup for illegal piece, let it slide
		if (IsPieceCoordinateSamePosition(IllegalPieces[i].current, pickedUpPiece))
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	4a18      	ldr	r2, [pc, #96]	; (8002fa0 <HandlePickupIllegalState+0x74>)
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	6858      	ldr	r0, [r3, #4]
 8002f46:	f000 fdfd 	bl	8003b44 <IsPieceCoordinateSamePosition>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d014      	beq.n	8002f7a <HandlePickupIllegalState+0x4e>
		{
			// If pickup an illegal piece which is to be removed from the board is picked up, it is no longer illegal
			if (IsPieceCoordinateEqual(IllegalPieces[i].destination, OFFBOARD_PIECE_COORDINATE))
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	4914      	ldr	r1, [pc, #80]	; (8002fa4 <HandlePickupIllegalState+0x78>)
 8002f54:	4a12      	ldr	r2, [pc, #72]	; (8002fa0 <HandlePickupIllegalState+0x74>)
 8002f56:	6809      	ldr	r1, [r1, #0]
 8002f58:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002f5c:	f000 fdd6 	bl	8003b0c <IsPieceCoordinateEqual>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d017      	beq.n	8002f96 <HandlePickupIllegalState+0x6a>
			{
				// Remove from illegal pieces array
				RemoveIllegalPiece(i);
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fa29 	bl	80033c0 <RemoveIllegalPiece>

				// If chessboard is valid, switch turns if flagged to do so
				CheckChessboardValidity(SwitchTurnsAfterLegalState);
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <HandlePickupIllegalState+0x7c>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fa98 	bl	80034a8 <CheckChessboardValidity>
			}
			return;
 8002f78:	e00d      	b.n	8002f96 <HandlePickupIllegalState+0x6a>
	for (uint8_t i = 0; i < NumIllegalPieces; i++)
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <HandlePickupIllegalState+0x80>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	7bfa      	ldrb	r2, [r7, #15]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d3d7      	bcc.n	8002f3a <HandlePickupIllegalState+0xe>
		}
	}

	// Player picked up a piece that wasn't illegal, so it must be added as an illegal piece which must be placed back
	AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HandlePickupIllegalState+0x78>)
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	f000 f98e 	bl	80032b0 <AddIllegalPiece>
 8002f94:	e000      	b.n	8002f98 <HandlePickupIllegalState+0x6c>
			return;
 8002f96:	bf00      	nop
}
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	200005d8 	.word	0x200005d8
 8002fa4:	20000014 	.word	0x20000014
 8002fa8:	200006d9 	.word	0x200006d9
 8002fac:	200006d8 	.word	0x200006d8

08002fb0 <HandlePickupPreemptKill>:

static void HandlePickupPreemptKill(struct PieceCoordinate pickedUpPiece)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
	PieceToKill = pickedUpPiece;
 8002fb8:	4a03      	ldr	r2, [pc, #12]	; (8002fc8 <HandlePickupPreemptKill+0x18>)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6013      	str	r3, [r2, #0]
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	200005d4 	.word	0x200005d4

08002fcc <HandlePickupKill>:

static void HandlePickupKill(struct PieceCoordinate pickedUpPiece)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
	// If pickedUpPiece can kill it, illuminate PieceToKill's spot
	if(ValidateKill(PieceToKill, pickedUpPiece))
 8002fd4:	4b14      	ldr	r3, [pc, #80]	; (8003028 <HandlePickupKill+0x5c>)
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	f000 fa79 	bl	80034d0 <ValidateKill>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00f      	beq.n	8003004 <HandlePickupKill+0x38>
	{
		IlluminatePieceCoordinates(&PieceToKill, 1);
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	4810      	ldr	r0, [pc, #64]	; (8003028 <HandlePickupKill+0x5c>)
 8002fe8:	f000 f8e4 	bl	80031b4 <IlluminatePieceCoordinates>

		// Update Move Buffer
		MoveBuffer[0] = 'h' - pickedUpPiece.column;
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	4b0d      	ldr	r3, [pc, #52]	; (800302c <HandlePickupKill+0x60>)
 8002ff6:	701a      	strb	r2, [r3, #0]
		MoveBuffer[1] = '1' + pickedUpPiece.row;
 8002ff8:	79bb      	ldrb	r3, [r7, #6]
 8002ffa:	3331      	adds	r3, #49	; 0x31
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HandlePickupKill+0x60>)
 8003000:	705a      	strb	r2, [r3, #1]
	{
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, PieceToKill);
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
		ClearPiece(&PieceToKill);
	}
}
 8003002:	e00d      	b.n	8003020 <HandlePickupKill+0x54>
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, PieceToKill);
 8003004:	4a08      	ldr	r2, [pc, #32]	; (8003028 <HandlePickupKill+0x5c>)
 8003006:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <HandlePickupKill+0x64>)
 8003008:	6811      	ldr	r1, [r2, #0]
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	f000 f950 	bl	80032b0 <AddIllegalPiece>
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
 8003010:	4b07      	ldr	r3, [pc, #28]	; (8003030 <HandlePickupKill+0x64>)
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	f000 f94b 	bl	80032b0 <AddIllegalPiece>
		ClearPiece(&PieceToKill);
 800301a:	4803      	ldr	r0, [pc, #12]	; (8003028 <HandlePickupKill+0x5c>)
 800301c:	f000 fca8 	bl	8003970 <ClearPiece>
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	200005d4 	.word	0x200005d4
 800302c:	200006ec 	.word	0x200006ec
 8003030:	20000014 	.word	0x20000014

08003034 <HandlePickupCastling>:

static void HandlePickupCastling(struct PieceCoordinate pickedUpPiece)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
	struct PieceCoordinate rook;
	struct PieceCoordinate king;

	if (pickedUpPiece.piece.type == ROOK && LastPickedUpPiece.piece.type == KING)
 800303c:	793b      	ldrb	r3, [r7, #4]
 800303e:	2b04      	cmp	r3, #4
 8003040:	d109      	bne.n	8003056 <HandlePickupCastling+0x22>
 8003042:	4b2f      	ldr	r3, [pc, #188]	; (8003100 <HandlePickupCastling+0xcc>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b06      	cmp	r3, #6
 8003048:	d105      	bne.n	8003056 <HandlePickupCastling+0x22>
	{
		rook = pickedUpPiece;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	61fb      	str	r3, [r7, #28]
		king = LastPickedUpPiece;
 800304e:	4b2c      	ldr	r3, [pc, #176]	; (8003100 <HandlePickupCastling+0xcc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	61bb      	str	r3, [r7, #24]
 8003054:	e018      	b.n	8003088 <HandlePickupCastling+0x54>
	}
	else if (pickedUpPiece.piece.type == KING && LastPickedUpPiece.piece.type == ROOK)
 8003056:	793b      	ldrb	r3, [r7, #4]
 8003058:	2b06      	cmp	r3, #6
 800305a:	d109      	bne.n	8003070 <HandlePickupCastling+0x3c>
 800305c:	4b28      	ldr	r3, [pc, #160]	; (8003100 <HandlePickupCastling+0xcc>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b04      	cmp	r3, #4
 8003062:	d105      	bne.n	8003070 <HandlePickupCastling+0x3c>
	{
		rook = LastPickedUpPiece;
 8003064:	4b26      	ldr	r3, [pc, #152]	; (8003100 <HandlePickupCastling+0xcc>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	61fb      	str	r3, [r7, #28]
		king = pickedUpPiece;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	61bb      	str	r3, [r7, #24]
 800306e:	e00b      	b.n	8003088 <HandlePickupCastling+0x54>
	}
	// If the past two picked up pieces aren't a king and rook, put them back
	else
	{
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
 8003070:	4b24      	ldr	r3, [pc, #144]	; (8003104 <HandlePickupCastling+0xd0>)
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	f000 f91b 	bl	80032b0 <AddIllegalPiece>
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, LastPickedUpPiece);
 800307a:	4a21      	ldr	r2, [pc, #132]	; (8003100 <HandlePickupCastling+0xcc>)
 800307c:	4b21      	ldr	r3, [pc, #132]	; (8003104 <HandlePickupCastling+0xd0>)
 800307e:	6811      	ldr	r1, [r2, #0]
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	f000 f915 	bl	80032b0 <AddIllegalPiece>
		return;
 8003086:	e038      	b.n	80030fa <HandlePickupCastling+0xc6>
	}

	if (ValidateCastling(rook, king))
 8003088:	69b9      	ldr	r1, [r7, #24]
 800308a:	69f8      	ldr	r0, [r7, #28]
 800308c:	f000 fa4a 	bl	8003524 <ValidateCastling>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d026      	beq.n	80030e4 <HandlePickupCastling+0xb0>
	{
		struct PieceCoordinate expectedKingPieceCoordinate;
		struct PieceCoordinate expectedRookPieceCoordinate;
		CalculateCastlingPositions(rook, &expectedKingPieceCoordinate, &expectedRookPieceCoordinate);
 8003096:	f107 0210 	add.w	r2, r7, #16
 800309a:	f107 0314 	add.w	r3, r7, #20
 800309e:	4619      	mov	r1, r3
 80030a0:	69f8      	ldr	r0, [r7, #28]
 80030a2:	f7fe fe57 	bl	8001d54 <CalculateCastlingPositions>

		// If castling won't result in a self-check then it's valid so copy to globals. Otherwise fall through to AddIllegalPiece.
		if (!WillResultInSelfCheck(rook, expectedRookPieceCoordinate) && !WillResultInSelfCheck(king, expectedKingPieceCoordinate))
 80030a6:	6939      	ldr	r1, [r7, #16]
 80030a8:	69f8      	ldr	r0, [r7, #28]
 80030aa:	f7fe fd19 	bl	8001ae0 <WillResultInSelfCheck>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d117      	bne.n	80030e4 <HandlePickupCastling+0xb0>
 80030b4:	6979      	ldr	r1, [r7, #20]
 80030b6:	69b8      	ldr	r0, [r7, #24]
 80030b8:	f7fe fd12 	bl	8001ae0 <WillResultInSelfCheck>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d110      	bne.n	80030e4 <HandlePickupCastling+0xb0>
		{
			ExpectedKingCastleCoordinate = expectedKingPieceCoordinate;
 80030c2:	4a11      	ldr	r2, [pc, #68]	; (8003108 <HandlePickupCastling+0xd4>)
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	6013      	str	r3, [r2, #0]
			ExpectedRookCastleCoordinate = expectedRookPieceCoordinate;
 80030c8:	4a10      	ldr	r2, [pc, #64]	; (800310c <HandlePickupCastling+0xd8>)
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	6013      	str	r3, [r2, #0]

			// Illuminate LEDs to the target castling locations
			struct PieceCoordinate pieceCoordinatesToIlluminate[] = { expectedKingPieceCoordinate, expectedRookPieceCoordinate};
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	60fb      	str	r3, [r7, #12]
			IlluminatePieceCoordinates(pieceCoordinatesToIlluminate, sizeof(pieceCoordinatesToIlluminate) / sizeof(*pieceCoordinatesToIlluminate));
 80030d6:	f107 0308 	add.w	r3, r7, #8
 80030da:	2102      	movs	r1, #2
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 f869 	bl	80031b4 <IlluminatePieceCoordinates>
 80030e2:	e00a      	b.n	80030fa <HandlePickupCastling+0xc6>

			return;
		}
	}

	AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
 80030e4:	4b07      	ldr	r3, [pc, #28]	; (8003104 <HandlePickupCastling+0xd0>)
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	f000 f8e1 	bl	80032b0 <AddIllegalPiece>
	AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, LastPickedUpPiece);
 80030ee:	4a04      	ldr	r2, [pc, #16]	; (8003100 <HandlePickupCastling+0xcc>)
 80030f0:	4b04      	ldr	r3, [pc, #16]	; (8003104 <HandlePickupCastling+0xd0>)
 80030f2:	6811      	ldr	r1, [r2, #0]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	f000 f8db 	bl	80032b0 <AddIllegalPiece>
}
 80030fa:	3720      	adds	r7, #32
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	200005d0 	.word	0x200005d0
 8003104:	20000014 	.word	0x20000014
 8003108:	200006e0 	.word	0x200006e0
 800310c:	200006e4 	.word	0x200006e4

08003110 <HandlePickupPromotion>:

static void HandlePickupPromotion(struct PieceCoordinate pickedUpPiece)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
	// All picked up pieces during a promotion must be the PawnToPromote, otherwise they must be placed back
	if (!IsPieceCoordinateEqual(pickedUpPiece, PawnToPromote))
 8003118:	4b08      	ldr	r3, [pc, #32]	; (800313c <HandlePickupPromotion+0x2c>)
 800311a:	6819      	ldr	r1, [r3, #0]
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fcf5 	bl	8003b0c <IsPieceCoordinateEqual>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d104      	bne.n	8003132 <HandlePickupPromotion+0x22>
	{
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <HandlePickupPromotion+0x30>)
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	f000 f8bf 	bl	80032b0 <AddIllegalPiece>
	}
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	200006e8 	.word	0x200006e8
 8003140:	20000014 	.word	0x20000014

08003144 <HandlePickupMove>:

static void HandlePickupMove(struct PieceCoordinate pickedUpPiece)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b090      	sub	sp, #64	; 0x40
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
	// If this piece isn't owned by the current team, then they must put it back down
	if (pickedUpPiece.piece.owner != CurrentTurn)
 800314c:	797a      	ldrb	r2, [r7, #5]
 800314e:	4b16      	ldr	r3, [pc, #88]	; (80031a8 <HandlePickupMove+0x64>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d005      	beq.n	8003162 <HandlePickupMove+0x1e>
	{
		AddIllegalPiece(EMPTY_PIECE_COORDINATE, pickedUpPiece);
 8003156:	4b15      	ldr	r3, [pc, #84]	; (80031ac <HandlePickupMove+0x68>)
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	f000 f8a8 	bl	80032b0 <AddIllegalPiece>

		// Update Move Buffer
		MoveBuffer[0] = 'h' - pickedUpPiece.column;
		MoveBuffer[1] = '1' + pickedUpPiece.row;
	}
}
 8003160:	e01d      	b.n	800319e <HandlePickupMove+0x5a>
		CalculateAllLegalPathsAndChecks(pickedUpPiece, allLegalPaths, &numLegalPaths);
 8003162:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8003166:	f107 0308 	add.w	r3, r7, #8
 800316a:	4619      	mov	r1, r3
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7fe f8a1 	bl	80012b4 <CalculateAllLegalPathsAndChecks>
		if (pickedUpPiece.piece.owner == WHITE)
 8003172:	797b      	ldrb	r3, [r7, #5]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d107      	bne.n	8003188 <HandlePickupMove+0x44>
			IlluminateCoordinates(allLegalPaths, numLegalPaths);
 8003178:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800317c:	f107 0308 	add.w	r3, r7, #8
 8003180:	4611      	mov	r1, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f854 	bl	8003230 <IlluminateCoordinates>
		MoveBuffer[0] = 'h' - pickedUpPiece.column;
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 800318e:	b2da      	uxtb	r2, r3
 8003190:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <HandlePickupMove+0x6c>)
 8003192:	701a      	strb	r2, [r3, #0]
		MoveBuffer[1] = '1' + pickedUpPiece.row;
 8003194:	79bb      	ldrb	r3, [r7, #6]
 8003196:	3331      	adds	r3, #49	; 0x31
 8003198:	b2da      	uxtb	r2, r3
 800319a:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <HandlePickupMove+0x6c>)
 800319c:	705a      	strb	r2, [r3, #1]
}
 800319e:	bf00      	nop
 80031a0:	3740      	adds	r7, #64	; 0x40
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	200005cc 	.word	0x200005cc
 80031ac:	20000010 	.word	0x20000010
 80031b0:	200006ec 	.word	0x200006ec

080031b4 <IlluminatePieceCoordinates>:

static void IlluminatePieceCoordinates(struct PieceCoordinate* pieceCoordinates, uint8_t numPieceCoordinates)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b094      	sub	sp, #80	; 0x50
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	70fb      	strb	r3, [r7, #3]
	uint8_t board[NUM_ROWS][NUM_COLS] = {0};
 80031c0:	f107 030c 	add.w	r3, r7, #12
 80031c4:	2240      	movs	r2, #64	; 0x40
 80031c6:	2100      	movs	r1, #0
 80031c8:	4618      	mov	r0, r3
 80031ca:	f006 fe6d 	bl	8009ea8 <memset>
	for(uint8_t i = 0; i < numPieceCoordinates; i++)
 80031ce:	2300      	movs	r3, #0
 80031d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80031d4:	e01a      	b.n	800320c <IlluminatePieceCoordinates+0x58>
	{
		board[pieceCoordinates[i].row][pieceCoordinates[i].column] = 1;
 80031d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	4413      	add	r3, r2
 80031e0:	789b      	ldrb	r3, [r3, #2]
 80031e2:	4619      	mov	r1, r3
 80031e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	4413      	add	r3, r2
 80031ee:	78db      	ldrb	r3, [r3, #3]
 80031f0:	461a      	mov	r2, r3
 80031f2:	00cb      	lsls	r3, r1, #3
 80031f4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80031f8:	440b      	add	r3, r1
 80031fa:	4413      	add	r3, r2
 80031fc:	3b44      	subs	r3, #68	; 0x44
 80031fe:	2201      	movs	r2, #1
 8003200:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < numPieceCoordinates; i++)
 8003202:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003206:	3301      	adds	r3, #1
 8003208:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800320c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	429a      	cmp	r2, r3
 8003214:	d3df      	bcc.n	80031d6 <IlluminatePieceCoordinates+0x22>
	}
	writeBoardValue(&hspi1, board);
 8003216:	f107 030c 	add.w	r3, r7, #12
 800321a:	4619      	mov	r1, r3
 800321c:	4803      	ldr	r0, [pc, #12]	; (800322c <IlluminatePieceCoordinates+0x78>)
 800321e:	f7fd fb56 	bl	80008ce <writeBoardValue>
}
 8003222:	bf00      	nop
 8003224:	3750      	adds	r7, #80	; 0x50
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20001db0 	.word	0x20001db0

08003230 <IlluminateCoordinates>:

static void IlluminateCoordinates(struct Coordinate* coordinates, uint8_t numCoordinates)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b094      	sub	sp, #80	; 0x50
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	70fb      	strb	r3, [r7, #3]
	uint8_t board[NUM_ROWS][NUM_COLS] = {0};
 800323c:	f107 030c 	add.w	r3, r7, #12
 8003240:	2240      	movs	r2, #64	; 0x40
 8003242:	2100      	movs	r1, #0
 8003244:	4618      	mov	r0, r3
 8003246:	f006 fe2f 	bl	8009ea8 <memset>
	for(uint8_t i = 0; i < numCoordinates; i++)
 800324a:	2300      	movs	r3, #0
 800324c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003250:	e01c      	b.n	800328c <IlluminateCoordinates+0x5c>
	{
		board[coordinates[i].row][coordinates[i].column] = 1;
 8003252:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	4413      	add	r3, r2
 800325c:	f993 3000 	ldrsb.w	r3, [r3]
 8003260:	4619      	mov	r1, r3
 8003262:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	4413      	add	r3, r2
 800326c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003270:	461a      	mov	r2, r3
 8003272:	00cb      	lsls	r3, r1, #3
 8003274:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003278:	440b      	add	r3, r1
 800327a:	4413      	add	r3, r2
 800327c:	3b44      	subs	r3, #68	; 0x44
 800327e:	2201      	movs	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < numCoordinates; i++)
 8003282:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003286:	3301      	adds	r3, #1
 8003288:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800328c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	429a      	cmp	r2, r3
 8003294:	d3dd      	bcc.n	8003252 <IlluminateCoordinates+0x22>
	}
	writeBoardValue(&hspi1, board);
 8003296:	f107 030c 	add.w	r3, r7, #12
 800329a:	4619      	mov	r1, r3
 800329c:	4803      	ldr	r0, [pc, #12]	; (80032ac <IlluminateCoordinates+0x7c>)
 800329e:	f7fd fb16 	bl	80008ce <writeBoardValue>
}
 80032a2:	bf00      	nop
 80032a4:	3750      	adds	r7, #80	; 0x50
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20001db0 	.word	0x20001db0

080032b0 <AddIllegalPiece>:

/**
 * @brief Put an illegal piece in the IllegalPieceDestinations array. Destination is the correct destination of the piece and Current is the current position of the piece.
 */
static void AddIllegalPiece(struct PieceCoordinate current, struct PieceCoordinate destination)
{
 80032b0:	b590      	push	{r4, r7, lr}
 80032b2:	b0c5      	sub	sp, #276	; 0x114
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	6018      	str	r0, [r3, #0]
 80032ba:	463b      	mov	r3, r7
 80032bc:	6019      	str	r1, [r3, #0]
	current.piece = destination.piece;
 80032be:	1d3b      	adds	r3, r7, #4
 80032c0:	463a      	mov	r2, r7
 80032c2:	8812      	ldrh	r2, [r2, #0]
 80032c4:	801a      	strh	r2, [r3, #0]

	// Do not add duplicate pieces
	for(uint8_t i = 0; i < NumIllegalPieces; i++)
 80032c6:	2300      	movs	r3, #0
 80032c8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80032cc:	e011      	b.n	80032f2 <AddIllegalPiece+0x42>
	{
		if(IsPieceCoordinateSamePosition(IllegalPieces[i].current, current))
 80032ce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80032d2:	1d3a      	adds	r2, r7, #4
 80032d4:	4938      	ldr	r1, [pc, #224]	; (80033b8 <AddIllegalPiece+0x108>)
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	440b      	add	r3, r1
 80032da:	6811      	ldr	r1, [r2, #0]
 80032dc:	6858      	ldr	r0, [r3, #4]
 80032de:	f000 fc31 	bl	8003b44 <IsPieceCoordinateSamePosition>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d161      	bne.n	80033ac <AddIllegalPiece+0xfc>
	for(uint8_t i = 0; i < NumIllegalPieces; i++)
 80032e8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80032ec:	3301      	adds	r3, #1
 80032ee:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80032f2:	4b32      	ldr	r3, [pc, #200]	; (80033bc <AddIllegalPiece+0x10c>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d3e7      	bcc.n	80032ce <AddIllegalPiece+0x1e>
			return;
		}
	}

	// Add illegal pieces to array
	IllegalPieces[NumIllegalPieces].current = current;
 80032fe:	4b2f      	ldr	r3, [pc, #188]	; (80033bc <AddIllegalPiece+0x10c>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	4a2d      	ldr	r2, [pc, #180]	; (80033b8 <AddIllegalPiece+0x108>)
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4413      	add	r3, r2
 8003308:	1d3a      	adds	r2, r7, #4
 800330a:	6812      	ldr	r2, [r2, #0]
 800330c:	605a      	str	r2, [r3, #4]
	IllegalPieces[NumIllegalPieces].destination = destination;
 800330e:	4b2b      	ldr	r3, [pc, #172]	; (80033bc <AddIllegalPiece+0x10c>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	4619      	mov	r1, r3
 8003314:	4a28      	ldr	r2, [pc, #160]	; (80033b8 <AddIllegalPiece+0x108>)
 8003316:	463b      	mov	r3, r7
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
	NumIllegalPieces++;
 800331e:	4b27      	ldr	r3, [pc, #156]	; (80033bc <AddIllegalPiece+0x10c>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	3301      	adds	r3, #1
 8003324:	b2da      	uxtb	r2, r3
 8003326:	4b25      	ldr	r3, [pc, #148]	; (80033bc <AddIllegalPiece+0x10c>)
 8003328:	701a      	strb	r2, [r3, #0]

	// Illuminate all illegal pieces
	uint8_t j = 0;
 800332a:	2300      	movs	r3, #0
 800332c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	struct PieceCoordinate pieceCoordinates[2 * MAX_ILLEGAL_PIECES] = {0};
 8003330:	f107 030c 	add.w	r3, r7, #12
 8003334:	4618      	mov	r0, r3
 8003336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800333a:	461a      	mov	r2, r3
 800333c:	2100      	movs	r1, #0
 800333e:	f006 fdb3 	bl	8009ea8 <memset>
	for(uint8_t i = 0; i < NumIllegalPieces; i++)
 8003342:	2300      	movs	r3, #0
 8003344:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8003348:	e023      	b.n	8003392 <AddIllegalPiece+0xe2>
	{
		pieceCoordinates[j++] = IllegalPieces[i].current;
 800334a:	f897 110d 	ldrb.w	r1, [r7, #269]	; 0x10d
 800334e:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	f887 210e 	strb.w	r2, [r7, #270]	; 0x10e
 8003358:	461c      	mov	r4, r3
 800335a:	f107 020c 	add.w	r2, r7, #12
 800335e:	4816      	ldr	r0, [pc, #88]	; (80033b8 <AddIllegalPiece+0x108>)
 8003360:	00cb      	lsls	r3, r1, #3
 8003362:	4403      	add	r3, r0
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		pieceCoordinates[j++] = IllegalPieces[i].destination;
 800336a:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800336e:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8003372:	1c59      	adds	r1, r3, #1
 8003374:	f887 110e 	strb.w	r1, [r7, #270]	; 0x10e
 8003378:	4618      	mov	r0, r3
 800337a:	f107 030c 	add.w	r3, r7, #12
 800337e:	490e      	ldr	r1, [pc, #56]	; (80033b8 <AddIllegalPiece+0x108>)
 8003380:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8003384:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	for(uint8_t i = 0; i < NumIllegalPieces; i++)
 8003388:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800338c:	3301      	adds	r3, #1
 800338e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8003392:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <AddIllegalPiece+0x10c>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800339a:	429a      	cmp	r2, r3
 800339c:	d3d5      	bcc.n	800334a <AddIllegalPiece+0x9a>
	}
	IlluminatePieceCoordinates(pieceCoordinates, sizeof(pieceCoordinates) / sizeof(*pieceCoordinates));
 800339e:	f107 030c 	add.w	r3, r7, #12
 80033a2:	2140      	movs	r1, #64	; 0x40
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff05 	bl	80031b4 <IlluminatePieceCoordinates>
 80033aa:	e000      	b.n	80033ae <AddIllegalPiece+0xfe>
			return;
 80033ac:	bf00      	nop
}
 80033ae:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd90      	pop	{r4, r7, pc}
 80033b6:	bf00      	nop
 80033b8:	200005d8 	.word	0x200005d8
 80033bc:	200006d8 	.word	0x200006d8

080033c0 <RemoveIllegalPiece>:

/**
 * @brief Remove illegal piece from IllegalPieces array given its index
 */
static void RemoveIllegalPiece(uint8_t index)
{
 80033c0:	b590      	push	{r4, r7, lr}
 80033c2:	b0c5      	sub	sp, #276	; 0x114
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4602      	mov	r2, r0
 80033c8:	1dfb      	adds	r3, r7, #7
 80033ca:	701a      	strb	r2, [r3, #0]
	// Remove illegal piece from array
	NumIllegalPieces--;
 80033cc:	4b34      	ldr	r3, [pc, #208]	; (80034a0 <RemoveIllegalPiece+0xe0>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	4b32      	ldr	r3, [pc, #200]	; (80034a0 <RemoveIllegalPiece+0xe0>)
 80033d6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = index; i < NumIllegalPieces; i++)
 80033d8:	1dfb      	adds	r3, r7, #7
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80033e0:	e013      	b.n	800340a <RemoveIllegalPiece+0x4a>
	{
		IllegalPieces[i] = IllegalPieces[i + 1];
 80033e2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80033ec:	482d      	ldr	r0, [pc, #180]	; (80034a4 <RemoveIllegalPiece+0xe4>)
 80033ee:	492d      	ldr	r1, [pc, #180]	; (80034a4 <RemoveIllegalPiece+0xe4>)
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4403      	add	r3, r0
 80033f4:	00d2      	lsls	r2, r2, #3
 80033f6:	440a      	add	r2, r1
 80033f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033fc:	e883 0003 	stmia.w	r3, {r0, r1}
	for (uint8_t i = index; i < NumIllegalPieces; i++)
 8003400:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003404:	3301      	adds	r3, #1
 8003406:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800340a:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <RemoveIllegalPiece+0xe0>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8003412:	429a      	cmp	r2, r3
 8003414:	d3e5      	bcc.n	80033e2 <RemoveIllegalPiece+0x22>
	}

	// Unilluminate the piece that was removed
	uint8_t j = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	struct PieceCoordinate pieceCoordinates[2 * MAX_ILLEGAL_PIECES] = {0};
 800341c:	f107 030c 	add.w	r3, r7, #12
 8003420:	4618      	mov	r0, r3
 8003422:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003426:	461a      	mov	r2, r3
 8003428:	2100      	movs	r1, #0
 800342a:	f006 fd3d 	bl	8009ea8 <memset>
	for(uint8_t i = 0; i < NumIllegalPieces; i++)
 800342e:	2300      	movs	r3, #0
 8003430:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8003434:	e023      	b.n	800347e <RemoveIllegalPiece+0xbe>
	{
		pieceCoordinates[j++] = IllegalPieces[i].current;
 8003436:	f897 110d 	ldrb.w	r1, [r7, #269]	; 0x10d
 800343a:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	f887 210e 	strb.w	r2, [r7, #270]	; 0x10e
 8003444:	461c      	mov	r4, r3
 8003446:	f107 020c 	add.w	r2, r7, #12
 800344a:	4816      	ldr	r0, [pc, #88]	; (80034a4 <RemoveIllegalPiece+0xe4>)
 800344c:	00cb      	lsls	r3, r1, #3
 800344e:	4403      	add	r3, r0
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		pieceCoordinates[j++] = IllegalPieces[i].destination;
 8003456:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800345a:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800345e:	1c59      	adds	r1, r3, #1
 8003460:	f887 110e 	strb.w	r1, [r7, #270]	; 0x10e
 8003464:	4618      	mov	r0, r3
 8003466:	f107 030c 	add.w	r3, r7, #12
 800346a:	490e      	ldr	r1, [pc, #56]	; (80034a4 <RemoveIllegalPiece+0xe4>)
 800346c:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8003470:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	for(uint8_t i = 0; i < NumIllegalPieces; i++)
 8003474:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8003478:	3301      	adds	r3, #1
 800347a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800347e:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <RemoveIllegalPiece+0xe0>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8003486:	429a      	cmp	r2, r3
 8003488:	d3d5      	bcc.n	8003436 <RemoveIllegalPiece+0x76>
	}
	IlluminatePieceCoordinates(pieceCoordinates, sizeof(pieceCoordinates) / sizeof(*pieceCoordinates));
 800348a:	f107 030c 	add.w	r3, r7, #12
 800348e:	2140      	movs	r1, #64	; 0x40
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fe8f 	bl	80031b4 <IlluminatePieceCoordinates>
}
 8003496:	bf00      	nop
 8003498:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800349c:	46bd      	mov	sp, r7
 800349e:	bd90      	pop	{r4, r7, pc}
 80034a0:	200006d8 	.word	0x200006d8
 80034a4:	200005d8 	.word	0x200005d8

080034a8 <CheckChessboardValidity>:

/**
 * @brief Check if chessboard is valid and switch turns if flagged to do so
 */
static void CheckChessboardValidity(uint8_t switchTurns)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	71fb      	strb	r3, [r7, #7]
	if (NumIllegalPieces == 0)
 80034b2:	4b06      	ldr	r3, [pc, #24]	; (80034cc <CheckChessboardValidity+0x24>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d104      	bne.n	80034c4 <CheckChessboardValidity+0x1c>
	{
		if (switchTurns)
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <CheckChessboardValidity+0x1c>
		{
			EndTurn();
 80034c0:	f000 f908 	bl	80036d4 <EndTurn>
		}
	}
}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	200006d8 	.word	0x200006d8

080034d0 <ValidateKill>:
/**
 * @brief Return 1 if the given killer can take the victim, 0 otherwise. If the victim cannot be killed, then this is an illegal/impossible kill
 * so the victim and killer must return to their original spots, and a new move must be done.
 */
static uint8_t ValidateKill(struct PieceCoordinate victim, struct PieceCoordinate killer)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
	// Temporarily add back victim and then check if it can be killed (need to be done for PAWN)
	SetPieceCoordinate(victim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fa70 	bl	80039c0 <SetPieceCoordinate>

	uint8_t valid = ValidateMove(killer, victim);
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	6838      	ldr	r0, [r7, #0]
 80034e4:	f000 f810 	bl	8003508 <ValidateMove>
 80034e8:	4603      	mov	r3, r0
 80034ea:	73fb      	strb	r3, [r7, #15]

	// Clear victim again
	victim.piece = EMPTY_PIECE;
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <ValidateKill+0x34>)
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	80bb      	strh	r3, [r7, #4]
	SetPieceCoordinate(victim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fa64 	bl	80039c0 <SetPieceCoordinate>

	return valid;
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	2000000c 	.word	0x2000000c

08003508 <ValidateMove>:
/**
 * @brief Return 1 if the "to" is in the legal paths for "from", 0 otherwise. If the move is invalid, then the "from" must be placed back
 * in its original spot, and a new move must be done.
 */
static uint8_t ValidateMove(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
	return IsLegalMove(from, to);
 8003512:	6839      	ldr	r1, [r7, #0]
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7fd fe55 	bl	80011c4 <IsLegalMove>
 800351a:	4603      	mov	r3, r0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <ValidateCastling>:

/**
 * @brief Return 1 if the given rook can castle with the given king. If not, they should return to their original positions.
 */
static uint8_t ValidateCastling(struct PieceCoordinate rook, struct PieceCoordinate king)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
	// If white king can castle and the king and rook are in the starting row
	if (king.row == 0 && rook.row == 0 && CanWhiteKingCastle)
 800352e:	78bb      	ldrb	r3, [r7, #2]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d119      	bne.n	8003568 <ValidateCastling+0x44>
 8003534:	79bb      	ldrb	r3, [r7, #6]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d116      	bne.n	8003568 <ValidateCastling+0x44>
 800353a:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <ValidateCastling+0x8c>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d012      	beq.n	8003568 <ValidateCastling+0x44>
	{
		return (rook.column == 0 && CanA1Castle) || (rook.column == 7 && CanH1Castle);
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d103      	bne.n	8003550 <ValidateCastling+0x2c>
 8003548:	4b1a      	ldr	r3, [pc, #104]	; (80035b4 <ValidateCastling+0x90>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d106      	bne.n	800355e <ValidateCastling+0x3a>
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	2b07      	cmp	r3, #7
 8003554:	d105      	bne.n	8003562 <ValidateCastling+0x3e>
 8003556:	4b18      	ldr	r3, [pc, #96]	; (80035b8 <ValidateCastling+0x94>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <ValidateCastling+0x3e>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <ValidateCastling+0x40>
 8003562:	2300      	movs	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	e01d      	b.n	80035a4 <ValidateCastling+0x80>
	}
	// If black king can castle and the king and rook are in the starting row
	else if (king.row == 7 && rook.row == 7 && CanBlackKingCastle)
 8003568:	78bb      	ldrb	r3, [r7, #2]
 800356a:	2b07      	cmp	r3, #7
 800356c:	d119      	bne.n	80035a2 <ValidateCastling+0x7e>
 800356e:	79bb      	ldrb	r3, [r7, #6]
 8003570:	2b07      	cmp	r3, #7
 8003572:	d116      	bne.n	80035a2 <ValidateCastling+0x7e>
 8003574:	4b11      	ldr	r3, [pc, #68]	; (80035bc <ValidateCastling+0x98>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d012      	beq.n	80035a2 <ValidateCastling+0x7e>
	{
		return (rook.column == 0 && CanA8Castle) || (rook.column == 7 && CanH8Castle);
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d103      	bne.n	800358a <ValidateCastling+0x66>
 8003582:	4b0f      	ldr	r3, [pc, #60]	; (80035c0 <ValidateCastling+0x9c>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <ValidateCastling+0x74>
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	2b07      	cmp	r3, #7
 800358e:	d105      	bne.n	800359c <ValidateCastling+0x78>
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <ValidateCastling+0xa0>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <ValidateCastling+0x78>
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <ValidateCastling+0x7a>
 800359c:	2300      	movs	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	e000      	b.n	80035a4 <ValidateCastling+0x80>
	}
	return 0;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	200006de 	.word	0x200006de
 80035b4:	200006da 	.word	0x200006da
 80035b8:	200006db 	.word	0x200006db
 80035bc:	200006df 	.word	0x200006df
 80035c0:	200006dc 	.word	0x200006dc
 80035c4:	200006dd 	.word	0x200006dd

080035c8 <ValidateStartPositions>:

uint8_t ValidateStartPositions()
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b0a2      	sub	sp, #136	; 0x88
 80035cc:	af00      	add	r7, sp, #0
	struct Coordinate invalidCoordinates[NUM_COLS * NUM_ROWS] = {0};
 80035ce:	1d3b      	adds	r3, r7, #4
 80035d0:	2280      	movs	r2, #128	; 0x80
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f006 fc67 	bl	8009ea8 <memset>
	uint8_t numInvalidCoordinates = 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	for (uint8_t column = 0; column < NUM_COLS; column++)
 80035e0:	2300      	movs	r3, #0
 80035e2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80035e6:	e05c      	b.n	80036a2 <ValidateStartPositions+0xda>
	{
		WriteColumn(column);
 80035e8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff f84f 	bl	8002690 <WriteColumn>
		for (uint8_t row = 0; row < NUM_ROWS; row++)
 80035f2:	2300      	movs	r3, #0
 80035f4:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 80035f8:	e04a      	b.n	8003690 <ValidateStartPositions+0xc8>
		{
			GPIO_PinState cellValue = ReadRow(row);
 80035fa:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff f874 	bl	80026ec <ReadRow>
 8003604:	4603      	mov	r3, r0
 8003606:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
			struct Coordinate coordinate = {row, column};
 800360a:	f997 3085 	ldrsb.w	r3, [r7, #133]	; 0x85
 800360e:	703b      	strb	r3, [r7, #0]
 8003610:	f997 3086 	ldrsb.w	r3, [r7, #134]	; 0x86
 8003614:	707b      	strb	r3, [r7, #1]

			if(cellValue == GPIO_PIN_SET && INITIAL_CHESSBOARD[row][column].type == NONE)
 8003616:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800361a:	2b01      	cmp	r3, #1
 800361c:	d117      	bne.n	800364e <ValidateStartPositions+0x86>
 800361e:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8003622:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003626:	492a      	ldr	r1, [pc, #168]	; (80036d0 <ValidateStartPositions+0x108>)
 8003628:	00d2      	lsls	r2, r2, #3
 800362a:	4413      	add	r3, r2
 800362c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10b      	bne.n	800364e <ValidateStartPositions+0x86>
			{
				invalidCoordinates[numInvalidCoordinates++] = coordinate;
 8003636:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003646:	4413      	add	r3, r2
 8003648:	883a      	ldrh	r2, [r7, #0]
 800364a:	f823 2c84 	strh.w	r2, [r3, #-132]
			}

			if(cellValue == GPIO_PIN_RESET && INITIAL_CHESSBOARD[row][column].type != NONE)
 800364e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8003652:	2b00      	cmp	r3, #0
 8003654:	d117      	bne.n	8003686 <ValidateStartPositions+0xbe>
 8003656:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 800365a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800365e:	491c      	ldr	r1, [pc, #112]	; (80036d0 <ValidateStartPositions+0x108>)
 8003660:	00d2      	lsls	r2, r2, #3
 8003662:	4413      	add	r3, r2
 8003664:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00b      	beq.n	8003686 <ValidateStartPositions+0xbe>
			{
				invalidCoordinates[numInvalidCoordinates++] = coordinate;
 800366e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800367e:	4413      	add	r3, r2
 8003680:	883a      	ldrh	r2, [r7, #0]
 8003682:	f823 2c84 	strh.w	r2, [r3, #-132]
		for (uint8_t row = 0; row < NUM_ROWS; row++)
 8003686:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800368a:	3301      	adds	r3, #1
 800368c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8003690:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8003694:	2b07      	cmp	r3, #7
 8003696:	d9b0      	bls.n	80035fa <ValidateStartPositions+0x32>
	for (uint8_t column = 0; column < NUM_COLS; column++)
 8003698:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800369c:	3301      	adds	r3, #1
 800369e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80036a2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80036a6:	2b07      	cmp	r3, #7
 80036a8:	d99e      	bls.n	80035e8 <ValidateStartPositions+0x20>
			}
		}
	}


	IlluminateCoordinates(invalidCoordinates, numInvalidCoordinates);
 80036aa:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80036ae:	1d3b      	adds	r3, r7, #4
 80036b0:	4611      	mov	r1, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff fdbc 	bl	8003230 <IlluminateCoordinates>
	return (numInvalidCoordinates == 0);
 80036b8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80036bc:	2b00      	cmp	r3, #0
 80036be:	bf0c      	ite	eq
 80036c0:	2301      	moveq	r3, #1
 80036c2:	2300      	movne	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3788      	adds	r7, #136	; 0x88
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000018 	.word	0x20000018

080036d4 <EndTurn>:

static void EndTurn()
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
#ifndef TEST
	// Check for a promotion. If found, do not end turn, HandlePlacePreemptPromotion
	CheckForPromotion();
 80036d8:	f000 f828 	bl	800372c <CheckForPromotion>
	if (PieceExists(PawnToPromote))
 80036dc:	4b10      	ldr	r3, [pc, #64]	; (8003720 <EndTurn+0x4c>)
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	f000 f930 	bl	8003944 <PieceExists>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d117      	bne.n	800371a <EndTurn+0x46>
		return;
	}
#endif // !TEST

	// Turn LEDs off
	IlluminateCoordinates(NULL, 0);
 80036ea:	2100      	movs	r1, #0
 80036ec:	2000      	movs	r0, #0
 80036ee:	f7ff fd9f 	bl	8003230 <IlluminateCoordinates>

#ifndef TEST
	// Check if any rooks or kings moved so they can be flagged as not castleable
	UpdateCastleFlags();
 80036f2:	f000 f851 	bl	8003798 <UpdateCastleFlags>

	SwitchTurnsAfterLegalState = 0;
 80036f6:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <EndTurn+0x50>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]

	// Switch teams
	CurrentTurn = CurrentTurn == WHITE ? BLACK : WHITE;
 80036fc:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <EndTurn+0x54>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <EndTurn+0x34>
 8003704:	2202      	movs	r2, #2
 8003706:	e000      	b.n	800370a <EndTurn+0x36>
 8003708:	2201      	movs	r2, #1
 800370a:	4b07      	ldr	r3, [pc, #28]	; (8003728 <EndTurn+0x54>)
 800370c:	701a      	strb	r2, [r3, #0]
#endif // !TEST

	// Invoke PathFinder to store all legal moves for this team
	CalculateTeamsLegalMoves(CurrentTurn);
 800370e:	4b06      	ldr	r3, [pc, #24]	; (8003728 <EndTurn+0x54>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fd fcb2 	bl	800107c <CalculateTeamsLegalMoves>
 8003718:	e000      	b.n	800371c <EndTurn+0x48>
		return;
 800371a:	bf00      	nop
}
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	200006e8 	.word	0x200006e8
 8003724:	200006d9 	.word	0x200006d9
 8003728:	200005cc 	.word	0x200005cc

0800372c <CheckForPromotion>:

static void CheckForPromotion()
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08a      	sub	sp, #40	; 0x28
 8003730:	af00      	add	r7, sp, #0
	// Get all pawns
	struct PieceCoordinate pawns[NUM_PAWNS_PER_TEAM];
	uint8_t numPawns;
	GetPiecesForTeam(CurrentTurn, PAWN, pawns, &numPawns);
 8003732:	4b18      	ldr	r3, [pc, #96]	; (8003794 <CheckForPromotion+0x68>)
 8003734:	7818      	ldrb	r0, [r3, #0]
 8003736:	1cfb      	adds	r3, r7, #3
 8003738:	1d3a      	adds	r2, r7, #4
 800373a:	2101      	movs	r1, #1
 800373c:	f000 f896 	bl	800386c <GetPiecesForTeam>

	// If the pawn has reached the end, it must be promoted
	for (uint8_t i = 0; i < numPawns; i++)
 8003740:	2300      	movs	r3, #0
 8003742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003746:	e01b      	b.n	8003780 <CheckForPromotion+0x54>
	{
		if (PawnReachedEnd(pawns[i]))
 8003748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003752:	4413      	add	r3, r2
 8003754:	f853 0c24 	ldr.w	r0, [r3, #-36]
 8003758:	f000 f8d0 	bl	80038fc <PawnReachedEnd>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d009      	beq.n	8003776 <CheckForPromotion+0x4a>
		{
			HandlePlacePreemptPromotion(pawns[i]);
 8003762:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800376c:	4413      	add	r3, r2
 800376e:	f853 0c24 	ldr.w	r0, [r3, #-36]
 8003772:	f7ff fb39 	bl	8002de8 <HandlePlacePreemptPromotion>
	for (uint8_t i = 0; i < numPawns; i++)
 8003776:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800377a:	3301      	adds	r3, #1
 800377c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003786:	429a      	cmp	r2, r3
 8003788:	d3de      	bcc.n	8003748 <CheckForPromotion+0x1c>
		}
	}
}
 800378a:	bf00      	nop
 800378c:	bf00      	nop
 800378e:	3728      	adds	r7, #40	; 0x28
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	200005cc 	.word	0x200005cc

08003798 <UpdateCastleFlags>:

static void UpdateCastleFlags()
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
	// If any rooks moved, flag them as not castle-able
	if (CanA1Castle && !IsPiecePresent(A1_COORDINATE))
 800379c:	4b2d      	ldr	r3, [pc, #180]	; (8003854 <UpdateCastleFlags+0xbc>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <UpdateCastleFlags+0x22>
 80037a4:	2100      	movs	r1, #0
 80037a6:	2000      	movs	r0, #0
 80037a8:	f000 f994 	bl	8003ad4 <IsPiecePresent>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <UpdateCastleFlags+0x22>
	{
		CanA1Castle = 0;
 80037b2:	4b28      	ldr	r3, [pc, #160]	; (8003854 <UpdateCastleFlags+0xbc>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
 80037b8:	e04a      	b.n	8003850 <UpdateCastleFlags+0xb8>
	}
	else if (CanH1Castle && !IsPiecePresent(H1_COORDINATE))
 80037ba:	4b27      	ldr	r3, [pc, #156]	; (8003858 <UpdateCastleFlags+0xc0>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <UpdateCastleFlags+0x40>
 80037c2:	2107      	movs	r1, #7
 80037c4:	2000      	movs	r0, #0
 80037c6:	f000 f985 	bl	8003ad4 <IsPiecePresent>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d103      	bne.n	80037d8 <UpdateCastleFlags+0x40>
	{
		CanH1Castle = 0;
 80037d0:	4b21      	ldr	r3, [pc, #132]	; (8003858 <UpdateCastleFlags+0xc0>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	e03b      	b.n	8003850 <UpdateCastleFlags+0xb8>
	}
	else if (CanA8Castle && !IsPiecePresent(A8_COORDINATE))
 80037d8:	4b20      	ldr	r3, [pc, #128]	; (800385c <UpdateCastleFlags+0xc4>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <UpdateCastleFlags+0x5e>
 80037e0:	2100      	movs	r1, #0
 80037e2:	2007      	movs	r0, #7
 80037e4:	f000 f976 	bl	8003ad4 <IsPiecePresent>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d103      	bne.n	80037f6 <UpdateCastleFlags+0x5e>
	{
		CanA8Castle = 0;
 80037ee:	4b1b      	ldr	r3, [pc, #108]	; (800385c <UpdateCastleFlags+0xc4>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]
 80037f4:	e02c      	b.n	8003850 <UpdateCastleFlags+0xb8>
	}
	else if (CanH8Castle && !IsPiecePresent(H8_COORDINATE))
 80037f6:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <UpdateCastleFlags+0xc8>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <UpdateCastleFlags+0x7c>
 80037fe:	2107      	movs	r1, #7
 8003800:	2007      	movs	r0, #7
 8003802:	f000 f967 	bl	8003ad4 <IsPiecePresent>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d103      	bne.n	8003814 <UpdateCastleFlags+0x7c>
	{
		CanH8Castle = 0;
 800380c:	4b14      	ldr	r3, [pc, #80]	; (8003860 <UpdateCastleFlags+0xc8>)
 800380e:	2200      	movs	r2, #0
 8003810:	701a      	strb	r2, [r3, #0]
 8003812:	e01d      	b.n	8003850 <UpdateCastleFlags+0xb8>
	}
	// If any kings moved, flag them as not castle-able
	else if (CanWhiteKingCastle && !IsPiecePresent(E1_COORDINATE))
 8003814:	4b13      	ldr	r3, [pc, #76]	; (8003864 <UpdateCastleFlags+0xcc>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <UpdateCastleFlags+0x9a>
 800381c:	2104      	movs	r1, #4
 800381e:	2000      	movs	r0, #0
 8003820:	f000 f958 	bl	8003ad4 <IsPiecePresent>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d103      	bne.n	8003832 <UpdateCastleFlags+0x9a>
	{
		CanWhiteKingCastle = 0;
 800382a:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <UpdateCastleFlags+0xcc>)
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
 8003830:	e00e      	b.n	8003850 <UpdateCastleFlags+0xb8>
	}
	else if (CanBlackKingCastle && !IsPiecePresent(E8_COORDINATE))
 8003832:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <UpdateCastleFlags+0xd0>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <UpdateCastleFlags+0xb8>
 800383a:	2104      	movs	r1, #4
 800383c:	2007      	movs	r0, #7
 800383e:	f000 f949 	bl	8003ad4 <IsPiecePresent>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d103      	bne.n	8003850 <UpdateCastleFlags+0xb8>
	{
		CanBlackKingCastle = 0;
 8003848:	4b07      	ldr	r3, [pc, #28]	; (8003868 <UpdateCastleFlags+0xd0>)
 800384a:	2200      	movs	r2, #0
 800384c:	701a      	strb	r2, [r3, #0]
	}
}
 800384e:	e7ff      	b.n	8003850 <UpdateCastleFlags+0xb8>
 8003850:	bf00      	nop
 8003852:	bd80      	pop	{r7, pc}
 8003854:	200006da 	.word	0x200006da
 8003858:	200006db 	.word	0x200006db
 800385c:	200006dc 	.word	0x200006dc
 8003860:	200006dd 	.word	0x200006dd
 8003864:	200006de 	.word	0x200006de
 8003868:	200006df 	.word	0x200006df

0800386c <GetPiecesForTeam>:

static void GetPiecesForTeam(enum PieceOwner team, enum PieceType type, struct PieceCoordinate* pieces, uint8_t* numPieces)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60ba      	str	r2, [r7, #8]
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	4603      	mov	r3, r0
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	460b      	mov	r3, r1
 800387c:	73bb      	strb	r3, [r7, #14]
	*numPieces = 0;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
	for (uint8_t row = 0; row < NUM_ROWS; row++)
 8003884:	2300      	movs	r3, #0
 8003886:	75fb      	strb	r3, [r7, #23]
 8003888:	e02d      	b.n	80038e6 <GetPiecesForTeam+0x7a>
	{
		for (uint8_t col = 0; col < NUM_COLS; col++)
 800388a:	2300      	movs	r3, #0
 800388c:	75bb      	strb	r3, [r7, #22]
 800388e:	e024      	b.n	80038da <GetPiecesForTeam+0x6e>
		{
			struct PieceCoordinate pieceCoordinate = { Chessboard[row][col], row, col };
 8003890:	7dfa      	ldrb	r2, [r7, #23]
 8003892:	7dbb      	ldrb	r3, [r7, #22]
 8003894:	4918      	ldr	r1, [pc, #96]	; (80038f8 <GetPiecesForTeam+0x8c>)
 8003896:	00d2      	lsls	r2, r2, #3
 8003898:	4413      	add	r3, r2
 800389a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800389e:	823b      	strh	r3, [r7, #16]
 80038a0:	7dfb      	ldrb	r3, [r7, #23]
 80038a2:	74bb      	strb	r3, [r7, #18]
 80038a4:	7dbb      	ldrb	r3, [r7, #22]
 80038a6:	74fb      	strb	r3, [r7, #19]
			if (pieceCoordinate.piece.owner == team && pieceCoordinate.piece.type == type)
 80038a8:	7c7b      	ldrb	r3, [r7, #17]
 80038aa:	7bfa      	ldrb	r2, [r7, #15]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d111      	bne.n	80038d4 <GetPiecesForTeam+0x68>
 80038b0:	7c3b      	ldrb	r3, [r7, #16]
 80038b2:	7bba      	ldrb	r2, [r7, #14]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d10d      	bne.n	80038d4 <GetPiecesForTeam+0x68>
			{
				pieces[(*numPieces)++] = pieceCoordinate;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	b2d1      	uxtb	r1, r2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	7011      	strb	r1, [r2, #0]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	4413      	add	r3, r2
 80038ca:	461a      	mov	r2, r3
 80038cc:	f107 0310 	add.w	r3, r7, #16
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	6010      	str	r0, [r2, #0]
		for (uint8_t col = 0; col < NUM_COLS; col++)
 80038d4:	7dbb      	ldrb	r3, [r7, #22]
 80038d6:	3301      	adds	r3, #1
 80038d8:	75bb      	strb	r3, [r7, #22]
 80038da:	7dbb      	ldrb	r3, [r7, #22]
 80038dc:	2b07      	cmp	r3, #7
 80038de:	d9d7      	bls.n	8003890 <GetPiecesForTeam+0x24>
	for (uint8_t row = 0; row < NUM_ROWS; row++)
 80038e0:	7dfb      	ldrb	r3, [r7, #23]
 80038e2:	3301      	adds	r3, #1
 80038e4:	75fb      	strb	r3, [r7, #23]
 80038e6:	7dfb      	ldrb	r3, [r7, #23]
 80038e8:	2b07      	cmp	r3, #7
 80038ea:	d9ce      	bls.n	800388a <GetPiecesForTeam+0x1e>
			}
		}
	}
}
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr
 80038f8:	2000054c 	.word	0x2000054c

080038fc <PawnReachedEnd>:

uint8_t PawnReachedEnd(struct PieceCoordinate pieceCoordinate)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
	uint8_t finalRow = CurrentTurn == WHITE ? 7 : 0;
 8003904:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <PawnReachedEnd+0x44>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <PawnReachedEnd+0x14>
 800390c:	2307      	movs	r3, #7
 800390e:	e000      	b.n	8003912 <PawnReachedEnd+0x16>
 8003910:	2300      	movs	r3, #0
 8003912:	73fb      	strb	r3, [r7, #15]
	return (pieceCoordinate.piece.owner == CurrentTurn) && (pieceCoordinate.piece.type == PAWN) && (pieceCoordinate.row == finalRow);
 8003914:	797a      	ldrb	r2, [r7, #5]
 8003916:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <PawnReachedEnd+0x44>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d108      	bne.n	8003930 <PawnReachedEnd+0x34>
 800391e:	793b      	ldrb	r3, [r7, #4]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d105      	bne.n	8003930 <PawnReachedEnd+0x34>
 8003924:	79bb      	ldrb	r3, [r7, #6]
 8003926:	7bfa      	ldrb	r2, [r7, #15]
 8003928:	429a      	cmp	r2, r3
 800392a:	d101      	bne.n	8003930 <PawnReachedEnd+0x34>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <PawnReachedEnd+0x36>
 8003930:	2300      	movs	r3, #0
 8003932:	b2db      	uxtb	r3, r3
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	200005cc 	.word	0x200005cc

08003944 <PieceExists>:

inline uint8_t PieceExists(struct PieceCoordinate pieceCoordinate)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
	return !IsPieceCoordinateEqual(pieceCoordinate, EMPTY_PIECE_COORDINATE);
 800394c:	4b07      	ldr	r3, [pc, #28]	; (800396c <PieceExists+0x28>)
 800394e:	6819      	ldr	r1, [r3, #0]
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f8db 	bl	8003b0c <IsPieceCoordinateEqual>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	bf0c      	ite	eq
 800395c:	2301      	moveq	r3, #1
 800395e:	2300      	movne	r3, #0
 8003960:	b2db      	uxtb	r3, r3
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000010 	.word	0x20000010

08003970 <ClearPiece>:

inline void ClearPiece(struct PieceCoordinate* pieceCoordinate)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
	*pieceCoordinate = EMPTY_PIECE_COORDINATE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a04      	ldr	r2, [pc, #16]	; (800398c <ClearPiece+0x1c>)
 800397c:	6810      	ldr	r0, [r2, #0]
 800397e:	6018      	str	r0, [r3, #0]
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20000010 	.word	0x20000010

08003990 <SetPiece>:

inline void SetPiece(uint8_t row, uint8_t column, struct Piece piece)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	803a      	strh	r2, [r7, #0]
 800399a:	71fb      	strb	r3, [r7, #7]
 800399c:	460b      	mov	r3, r1
 800399e:	71bb      	strb	r3, [r7, #6]
	Chessboard[row][column] = piece;
 80039a0:	79fa      	ldrb	r2, [r7, #7]
 80039a2:	79bb      	ldrb	r3, [r7, #6]
 80039a4:	4905      	ldr	r1, [pc, #20]	; (80039bc <SetPiece+0x2c>)
 80039a6:	00d2      	lsls	r2, r2, #3
 80039a8:	4413      	add	r3, r2
 80039aa:	883a      	ldrh	r2, [r7, #0]
 80039ac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	2000054c 	.word	0x2000054c

080039c0 <SetPieceCoordinate>:

inline void SetPieceCoordinate(struct PieceCoordinate pieceCoordinate)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
	Chessboard[pieceCoordinate.row][pieceCoordinate.column] = pieceCoordinate.piece;
 80039c8:	79bb      	ldrb	r3, [r7, #6]
 80039ca:	79fa      	ldrb	r2, [r7, #7]
 80039cc:	4905      	ldr	r1, [pc, #20]	; (80039e4 <SetPieceCoordinate+0x24>)
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4413      	add	r3, r2
 80039d2:	88ba      	ldrh	r2, [r7, #4]
 80039d4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	2000054c 	.word	0x2000054c

080039e8 <GetPiece>:

inline struct Piece GetPiece(uint8_t row, uint8_t column)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	460a      	mov	r2, r1
 80039f2:	71fb      	strb	r3, [r7, #7]
 80039f4:	4613      	mov	r3, r2
 80039f6:	71bb      	strb	r3, [r7, #6]
	return Chessboard[row][column];
 80039f8:	79fa      	ldrb	r2, [r7, #7]
 80039fa:	79bb      	ldrb	r3, [r7, #6]
 80039fc:	4908      	ldr	r1, [pc, #32]	; (8003a20 <GetPiece+0x38>)
 80039fe:	00d2      	lsls	r2, r2, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003a06:	81bb      	strh	r3, [r7, #12]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	7b3a      	ldrb	r2, [r7, #12]
 8003a0c:	f362 0307 	bfi	r3, r2, #0, #8
 8003a10:	7b7a      	ldrb	r2, [r7, #13]
 8003a12:	f362 230f 	bfi	r3, r2, #8, #8
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	2000054c 	.word	0x2000054c

08003a24 <GetPieceCoordinate>:

inline struct PieceCoordinate GetPieceCoordinate(uint8_t row, uint8_t column)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	460a      	mov	r2, r1
 8003a2e:	71fb      	strb	r3, [r7, #7]
 8003a30:	4613      	mov	r3, r2
 8003a32:	71bb      	strb	r3, [r7, #6]
	struct PieceCoordinate pieceCoordinate = { GetPiece(row, column), row, column };
 8003a34:	79ba      	ldrb	r2, [r7, #6]
 8003a36:	79fb      	ldrb	r3, [r7, #7]
 8003a38:	4611      	mov	r1, r2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff ffd4 	bl	80039e8 <GetPiece>
 8003a40:	4603      	mov	r3, r0
 8003a42:	813b      	strh	r3, [r7, #8]
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	72bb      	strb	r3, [r7, #10]
 8003a48:	79bb      	ldrb	r3, [r7, #6]
 8003a4a:	72fb      	strb	r3, [r7, #11]
	return pieceCoordinate;
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	2300      	movs	r3, #0
 8003a52:	7b3a      	ldrb	r2, [r7, #12]
 8003a54:	f362 0307 	bfi	r3, r2, #0, #8
 8003a58:	7b7a      	ldrb	r2, [r7, #13]
 8003a5a:	f362 230f 	bfi	r3, r2, #8, #8
 8003a5e:	7bba      	ldrb	r2, [r7, #14]
 8003a60:	f362 4317 	bfi	r3, r2, #16, #8
 8003a64:	7bfa      	ldrb	r2, [r7, #15]
 8003a66:	f362 631f 	bfi	r3, r2, #24, #8
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <DidSameTeamPickupLast>:
{
	return LastTransitionType == PICKUP && LastPickedUpPiece.piece.owner != piece.owner;
}

inline uint8_t DidSameTeamPickupLast(struct Piece piece)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	80b8      	strh	r0, [r7, #4]
	return LastTransitionType == PICKUP && LastPickedUpPiece.piece.owner == piece.owner;
 8003a7c:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <DidSameTeamPickupLast+0x2c>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d106      	bne.n	8003a92 <DidSameTeamPickupLast+0x1e>
 8003a84:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <DidSameTeamPickupLast+0x30>)
 8003a86:	785a      	ldrb	r2, [r3, #1]
 8003a88:	797b      	ldrb	r3, [r7, #5]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d101      	bne.n	8003a92 <DidSameTeamPickupLast+0x1e>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <DidSameTeamPickupLast+0x20>
 8003a92:	2300      	movs	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	200005cd 	.word	0x200005cd
 8003aa4:	200005d0 	.word	0x200005d0

08003aa8 <IsPieceEqual>:

inline uint8_t IsPieceEqual(struct Piece piece1, struct Piece piece2)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	80b8      	strh	r0, [r7, #4]
 8003ab0:	8039      	strh	r1, [r7, #0]
	return piece1.owner == piece2.owner
 8003ab2:	797a      	ldrb	r2, [r7, #5]
 8003ab4:	787b      	ldrb	r3, [r7, #1]
		&& piece1.type == piece2.type;
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d105      	bne.n	8003ac6 <IsPieceEqual+0x1e>
 8003aba:	793a      	ldrb	r2, [r7, #4]
 8003abc:	783b      	ldrb	r3, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d101      	bne.n	8003ac6 <IsPieceEqual+0x1e>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <IsPieceEqual+0x20>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <IsPiecePresent>:

uint8_t IsPiecePresent(uint8_t row, uint8_t column)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	460a      	mov	r2, r1
 8003ade:	71fb      	strb	r3, [r7, #7]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	71bb      	strb	r3, [r7, #6]
	return Chessboard[row][column].type != NONE;
 8003ae4:	79fa      	ldrb	r2, [r7, #7]
 8003ae6:	79bb      	ldrb	r3, [r7, #6]
 8003ae8:	4907      	ldr	r1, [pc, #28]	; (8003b08 <IsPiecePresent+0x34>)
 8003aea:	00d2      	lsls	r2, r2, #3
 8003aec:	4413      	add	r3, r2
 8003aee:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	bf14      	ite	ne
 8003af6:	2301      	movne	r3, #1
 8003af8:	2300      	moveq	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	2000054c 	.word	0x2000054c

08003b0c <IsPieceCoordinateEqual>:

inline uint8_t IsPieceCoordinateEqual(struct PieceCoordinate pieceCoordinate1, struct PieceCoordinate pieceCoordinate2)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
	return IsPieceEqual(pieceCoordinate1.piece, pieceCoordinate2.piece)
 8003b16:	6839      	ldr	r1, [r7, #0]
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff ffc5 	bl	8003aa8 <IsPieceEqual>
 8003b1e:	4603      	mov	r3, r0
		&& pieceCoordinate1.row == pieceCoordinate2.row
		&& pieceCoordinate1.column == pieceCoordinate2.column;
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d009      	beq.n	8003b38 <IsPieceCoordinateEqual+0x2c>
		&& pieceCoordinate1.row == pieceCoordinate2.row
 8003b24:	79ba      	ldrb	r2, [r7, #6]
 8003b26:	78bb      	ldrb	r3, [r7, #2]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d105      	bne.n	8003b38 <IsPieceCoordinateEqual+0x2c>
		&& pieceCoordinate1.column == pieceCoordinate2.column;
 8003b2c:	79fa      	ldrb	r2, [r7, #7]
 8003b2e:	78fb      	ldrb	r3, [r7, #3]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d101      	bne.n	8003b38 <IsPieceCoordinateEqual+0x2c>
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <IsPieceCoordinateEqual+0x2e>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <IsPieceCoordinateSamePosition>:

inline uint8_t IsPieceCoordinateSamePosition(struct PieceCoordinate pieceCoordinate1, struct PieceCoordinate pieceCoordinate2)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
	return pieceCoordinate1.row == pieceCoordinate2.row && pieceCoordinate1.column == pieceCoordinate2.column;
 8003b4e:	79ba      	ldrb	r2, [r7, #6]
 8003b50:	78bb      	ldrb	r3, [r7, #2]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d105      	bne.n	8003b62 <IsPieceCoordinateSamePosition+0x1e>
 8003b56:	79fa      	ldrb	r2, [r7, #7]
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d101      	bne.n	8003b62 <IsPieceCoordinateSamePosition+0x1e>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <IsPieceCoordinateSamePosition+0x20>
 8003b62:	2300      	movs	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <EnableUart>:
#include "uart.h"

void EnableUart(UART_HandleTypeDef * huart){
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  huart->Instance = USART1;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a0f      	ldr	r2, [pc, #60]	; (8003bb8 <EnableUart+0x48>)
 8003b7c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 9600;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003b84:	605a      	str	r2, [r3, #4]
  //huart->Init.WordLength = UART_WORDLENGTH_9B;
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	60da      	str	r2, [r3, #12]
  //huart->Init.Parity = UART_PARITY_EVEN;
  huart->Init.Parity = UART_PARITY_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	220c      	movs	r2, #12
 8003b9c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	61da      	str	r2, [r3, #28]

  HAL_UART_Init(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f002 ffdc 	bl	8006b68 <HAL_UART_Init>
}
 8003bb0:	bf00      	nop
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40013800 	.word	0x40013800

08003bbc <sendData>:

void sendData(UART_HandleTypeDef * huart, char p1, char p2, char p3, char p4){
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4603      	mov	r3, r0
 8003bcc:	70fb      	strb	r3, [r7, #3]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	70bb      	strb	r3, [r7, #2]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	707b      	strb	r3, [r7, #1]
	uint8_t move[4] = {p1, p2, p3, p4};
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	733b      	strb	r3, [r7, #12]
 8003bda:	78bb      	ldrb	r3, [r7, #2]
 8003bdc:	737b      	strb	r3, [r7, #13]
 8003bde:	787b      	ldrb	r3, [r7, #1]
 8003be0:	73bb      	strb	r3, [r7, #14]
 8003be2:	7e3b      	ldrb	r3, [r7, #24]
 8003be4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(huart, move, 4, 10);
 8003be6:	f107 010c 	add.w	r1, r7, #12
 8003bea:	230a      	movs	r3, #10
 8003bec:	2204      	movs	r2, #4
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f003 f807 	bl	8006c02 <HAL_UART_Transmit>
}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <sendMove>:
void sendData2(UART_HandleTypeDef * huart, char p1, char p2){
	uint8_t move[2] = {p1, p2};
	HAL_UART_Transmit(huart, move, 2, 10);
}

void sendMove(UART_HandleTypeDef * huart, char buffer[]){
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t *)buffer, 4, 10);
 8003c06:	230a      	movs	r3, #10
 8003c08:	2204      	movs	r2, #4
 8003c0a:	6839      	ldr	r1, [r7, #0]
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f002 fff8 	bl	8006c02 <HAL_UART_Transmit>
}
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <sendStart>:

void sendStart(UART_HandleTypeDef * huart, uint8_t color, uint8_t edum){
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af02      	add	r7, sp, #8
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	460b      	mov	r3, r1
 8003c24:	70fb      	strb	r3, [r7, #3]
 8003c26:	4613      	mov	r3, r2
 8003c28:	70bb      	strb	r3, [r7, #2]
	sendData(huart, 'S', 'T', 'R', 'T');
 8003c2a:	2354      	movs	r3, #84	; 0x54
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	2352      	movs	r3, #82	; 0x52
 8003c30:	2254      	movs	r2, #84	; 0x54
 8003c32:	2153      	movs	r1, #83	; 0x53
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff ffc1 	bl	8003bbc <sendData>
	HAL_Delay(3000);
 8003c3a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003c3e:	f000 faa1 	bl	8004184 <HAL_Delay>
		sendData(huart, 'E', 'D', 'U', 'M');
	}
	else{
		sendData(huart, '-', '-', '-', '-');
	}*/
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <sendDifficulty>:

void sendDifficulty(UART_HandleTypeDef * huart, uint8_t df){
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af02      	add	r7, sp, #8
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	460b      	mov	r3, r1
 8003c54:	70fb      	strb	r3, [r7, #3]
	if (df == 1){
 8003c56:	78fb      	ldrb	r3, [r7, #3]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d108      	bne.n	8003c6e <sendDifficulty+0x24>
		sendData(huart, 'D', 'F', '0', '5');
 8003c5c:	2335      	movs	r3, #53	; 0x35
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	2330      	movs	r3, #48	; 0x30
 8003c62:	2246      	movs	r2, #70	; 0x46
 8003c64:	2144      	movs	r1, #68	; 0x44
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff ffa8 	bl	8003bbc <sendData>
		sendData(huart, 'D', 'F', '1', '5');
	}
	else {
		sendData(huart, 'D', 'F', '1', '0');
	}
}
 8003c6c:	e013      	b.n	8003c96 <sendDifficulty+0x4c>
	else if (df == 3){
 8003c6e:	78fb      	ldrb	r3, [r7, #3]
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d108      	bne.n	8003c86 <sendDifficulty+0x3c>
		sendData(huart, 'D', 'F', '1', '5');
 8003c74:	2335      	movs	r3, #53	; 0x35
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	2331      	movs	r3, #49	; 0x31
 8003c7a:	2246      	movs	r2, #70	; 0x46
 8003c7c:	2144      	movs	r1, #68	; 0x44
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff ff9c 	bl	8003bbc <sendData>
}
 8003c84:	e007      	b.n	8003c96 <sendDifficulty+0x4c>
		sendData(huart, 'D', 'F', '1', '0');
 8003c86:	2330      	movs	r3, #48	; 0x30
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	2331      	movs	r3, #49	; 0x31
 8003c8c:	2246      	movs	r2, #70	; 0x46
 8003c8e:	2144      	movs	r1, #68	; 0x44
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff ff93 	bl	8003bbc <sendData>
}
 8003c96:	bf00      	nop
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <receiveData>:

void receiveData(UART_HandleTypeDef * huart, char buffer[]){
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b082      	sub	sp, #8
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6039      	str	r1, [r7, #0]
	HAL_UART_Receive(huart, (uint8_t *)buffer, 5, 3000);
 8003ca8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003cac:	2205      	movs	r2, #5
 8003cae:	6839      	ldr	r1, [r7, #0]
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f003 f838 	bl	8006d26 <HAL_UART_Receive>
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <ResetAudio>:
static UINT playerReadBytes = 0;
static uint8_t isFinished = 0;

static volatile WAVEPLAYER_E waveplayerStatus = WAVEPLAYER_IDLE;

static void ResetAudio(){
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
	audioRemainSize = 0;
 8003cc4:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <ResetAudio+0x20>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]
	playerReadBytes = 0;
 8003cca:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <ResetAudio+0x24>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
	memset(audioBuffer, 128, AUDIO_BUFFER_SIZE * sizeof(audioBuffer[0]));
 8003cd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cd4:	2180      	movs	r1, #128	; 0x80
 8003cd6:	4804      	ldr	r0, [pc, #16]	; (8003ce8 <ResetAudio+0x28>)
 8003cd8:	f006 f8e6 	bl	8009ea8 <memset>
}
 8003cdc:	bf00      	nop
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20000b5c 	.word	0x20000b5c
 8003ce4:	20001b60 	.word	0x20001b60
 8003ce8:	20000b60 	.word	0x20000b60

08003cec <GetFile>:

void GetFile(const char* filePath){
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08e      	sub	sp, #56	; 0x38
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  WAV_Header wavHeader;
  UINT readBytes = 0;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60bb      	str	r3, [r7, #8]

  f_mount(&FatFs, "", 1);
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	490c      	ldr	r1, [pc, #48]	; (8003d2c <GetFile+0x40>)
 8003cfc:	480c      	ldr	r0, [pc, #48]	; (8003d30 <GetFile+0x44>)
 8003cfe:	f005 fc5b 	bl	80095b8 <f_mount>
  f_open(&wavFile, filePath, FA_READ);
 8003d02:	2201      	movs	r2, #1
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	480b      	ldr	r0, [pc, #44]	; (8003d34 <GetFile+0x48>)
 8003d08:	f005 fc9c 	bl	8009644 <f_open>

  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8003d0c:	f107 0308 	add.w	r3, r7, #8
 8003d10:	f107 010c 	add.w	r1, r7, #12
 8003d14:	222c      	movs	r2, #44	; 0x2c
 8003d16:	4807      	ldr	r0, [pc, #28]	; (8003d34 <GetFile+0x48>)
 8003d18:	f005 fe52 	bl	80099c0 <f_read>

  fileLength = wavHeader.FileSize;
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	4a06      	ldr	r2, [pc, #24]	; (8003d38 <GetFile+0x4c>)
 8003d20:	6013      	str	r3, [r2, #0]

}
 8003d22:	bf00      	nop
 8003d24:	3738      	adds	r7, #56	; 0x38
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	08009f7c 	.word	0x08009f7c
 8003d30:	20000928 	.word	0x20000928
 8003d34:	200006f8 	.word	0x200006f8
 8003d38:	20000b58 	.word	0x20000b58

08003d3c <PlayAudio>:

void PlayAudio(const char* filePath, DAC_HandleTypeDef * hdac){
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
	HAL_Delay(100);
 8003d46:	2064      	movs	r0, #100	; 0x64
 8003d48:	f000 fa1c 	bl	8004184 <HAL_Delay>
	GetFile(filePath);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff ffcd 	bl	8003cec <GetFile>
	isFinished = 0;
 8003d52:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <PlayAudio+0x58>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	701a      	strb	r2, [r3, #0]

	f_read(&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8003d58:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <PlayAudio+0x5c>)
 8003d5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d5e:	490f      	ldr	r1, [pc, #60]	; (8003d9c <PlayAudio+0x60>)
 8003d60:	480f      	ldr	r0, [pc, #60]	; (8003da0 <PlayAudio+0x64>)
 8003d62:	f005 fe2d 	bl	80099c0 <f_read>
	audioRemainSize = fileLength - playerReadBytes - sizeof(WAV_Header);
 8003d66:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <PlayAudio+0x68>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <PlayAudio+0x5c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	3b2c      	subs	r3, #44	; 0x2c
 8003d72:	4a0d      	ldr	r2, [pc, #52]	; (8003da8 <PlayAudio+0x6c>)
 8003d74:	6013      	str	r3, [r2, #0]

	//HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_2, (uint32_t *) audioBuffer, AUDIO_BUFFER_SIZE, DAC_ALIGN_8B_R);

	while(!GetAudioStatus()){
 8003d76:	e001      	b.n	8003d7c <PlayAudio+0x40>
		ProcessAudio();
 8003d78:	f000 f818 	bl	8003dac <ProcessAudio>
	while(!GetAudioStatus()){
 8003d7c:	f000 f88e 	bl	8003e9c <GetAudioStatus>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0f8      	beq.n	8003d78 <PlayAudio+0x3c>
	}
	//HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_2);
	HAL_Delay(200);
 8003d86:	20c8      	movs	r0, #200	; 0xc8
 8003d88:	f000 f9fc 	bl	8004184 <HAL_Delay>
}
 8003d8c:	bf00      	nop
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	20001b64 	.word	0x20001b64
 8003d98:	20001b60 	.word	0x20001b60
 8003d9c:	20000b60 	.word	0x20000b60
 8003da0:	200006f8 	.word	0x200006f8
 8003da4:	20000b58 	.word	0x20000b58
 8003da8:	20000b5c 	.word	0x20000b5c

08003dac <ProcessAudio>:

void ProcessAudio(){
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
	switch(waveplayerStatus) {
 8003db0:	4b32      	ldr	r3, [pc, #200]	; (8003e7c <ProcessAudio+0xd0>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d85e      	bhi.n	8003e78 <ProcessAudio+0xcc>
 8003dba:	a201      	add	r2, pc, #4	; (adr r2, 8003dc0 <ProcessAudio+0x14>)
 8003dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc0:	08003e77 	.word	0x08003e77
 8003dc4:	08003dd1 	.word	0x08003dd1
 8003dc8:	08003e13 	.word	0x08003e13
 8003dcc:	08003e55 	.word	0x08003e55
		case WAVEPLAYER_IDLE:
			break;

		case WAVEPLAYER_HALFBUFFER:
			playerReadBytes = 0;
 8003dd0:	4b2b      	ldr	r3, [pc, #172]	; (8003e80 <ProcessAudio+0xd4>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
			waveplayerStatus = WAVEPLAYER_IDLE;
 8003dd6:	4b29      	ldr	r3, [pc, #164]	; (8003e7c <ProcessAudio+0xd0>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	701a      	strb	r2, [r3, #0]
			f_read(&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE / 2, &playerReadBytes);
 8003ddc:	4b28      	ldr	r3, [pc, #160]	; (8003e80 <ProcessAudio+0xd4>)
 8003dde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003de2:	4928      	ldr	r1, [pc, #160]	; (8003e84 <ProcessAudio+0xd8>)
 8003de4:	4828      	ldr	r0, [pc, #160]	; (8003e88 <ProcessAudio+0xdc>)
 8003de6:	f005 fdeb 	bl	80099c0 <f_read>
			if (audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8003dea:	4b28      	ldr	r3, [pc, #160]	; (8003e8c <ProcessAudio+0xe0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df2:	d907      	bls.n	8003e04 <ProcessAudio+0x58>
				audioRemainSize -= playerReadBytes;
 8003df4:	4b25      	ldr	r3, [pc, #148]	; (8003e8c <ProcessAudio+0xe0>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	4b21      	ldr	r3, [pc, #132]	; (8003e80 <ProcessAudio+0xd4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	4a23      	ldr	r2, [pc, #140]	; (8003e8c <ProcessAudio+0xe0>)
 8003e00:	6013      	str	r3, [r2, #0]
			else {
				audioRemainSize = 0;
				waveplayerStatus = WAVEPLAYER_EOF;
			}
			break;
 8003e02:	e039      	b.n	8003e78 <ProcessAudio+0xcc>
				audioRemainSize = 0;
 8003e04:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <ProcessAudio+0xe0>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
				waveplayerStatus = WAVEPLAYER_EOF;
 8003e0a:	4b1c      	ldr	r3, [pc, #112]	; (8003e7c <ProcessAudio+0xd0>)
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	701a      	strb	r2, [r3, #0]
			break;
 8003e10:	e032      	b.n	8003e78 <ProcessAudio+0xcc>

		case WAVEPLAYER_FULLBUFFER:
			playerReadBytes = 0;
 8003e12:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <ProcessAudio+0xd4>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
			waveplayerStatus = WAVEPLAYER_IDLE;
 8003e18:	4b18      	ldr	r3, [pc, #96]	; (8003e7c <ProcessAudio+0xd0>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
			f_read(&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 2, &playerReadBytes);
 8003e1e:	4b18      	ldr	r3, [pc, #96]	; (8003e80 <ProcessAudio+0xd4>)
 8003e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e24:	491a      	ldr	r1, [pc, #104]	; (8003e90 <ProcessAudio+0xe4>)
 8003e26:	4818      	ldr	r0, [pc, #96]	; (8003e88 <ProcessAudio+0xdc>)
 8003e28:	f005 fdca 	bl	80099c0 <f_read>
			if (audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8003e2c:	4b17      	ldr	r3, [pc, #92]	; (8003e8c <ProcessAudio+0xe0>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e34:	d907      	bls.n	8003e46 <ProcessAudio+0x9a>
				audioRemainSize -= playerReadBytes;
 8003e36:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <ProcessAudio+0xe0>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <ProcessAudio+0xd4>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	4a12      	ldr	r2, [pc, #72]	; (8003e8c <ProcessAudio+0xe0>)
 8003e42:	6013      	str	r3, [r2, #0]
			else {
				audioRemainSize = 0;
				waveplayerStatus = WAVEPLAYER_EOF;
			}
			break;
 8003e44:	e018      	b.n	8003e78 <ProcessAudio+0xcc>
				audioRemainSize = 0;
 8003e46:	4b11      	ldr	r3, [pc, #68]	; (8003e8c <ProcessAudio+0xe0>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
				waveplayerStatus = WAVEPLAYER_EOF;
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <ProcessAudio+0xd0>)
 8003e4e:	2203      	movs	r2, #3
 8003e50:	701a      	strb	r2, [r3, #0]
			break;
 8003e52:	e011      	b.n	8003e78 <ProcessAudio+0xcc>

		case WAVEPLAYER_EOF:
			f_close(&wavFile);
 8003e54:	480c      	ldr	r0, [pc, #48]	; (8003e88 <ProcessAudio+0xdc>)
 8003e56:	f005 ff70 	bl	8009d3a <f_close>
			f_mount(NULL, "", 0);
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	490d      	ldr	r1, [pc, #52]	; (8003e94 <ProcessAudio+0xe8>)
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f005 fbaa 	bl	80095b8 <f_mount>
			ResetAudio();
 8003e64:	f7ff ff2c 	bl	8003cc0 <ResetAudio>
			isFinished = 1;
 8003e68:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <ProcessAudio+0xec>)
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	701a      	strb	r2, [r3, #0]
			waveplayerStatus = WAVEPLAYER_IDLE;
 8003e6e:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <ProcessAudio+0xd0>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	701a      	strb	r2, [r3, #0]
	}
}
 8003e74:	e000      	b.n	8003e78 <ProcessAudio+0xcc>
			break;
 8003e76:	bf00      	nop
}
 8003e78:	bf00      	nop
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20001b65 	.word	0x20001b65
 8003e80:	20001b60 	.word	0x20001b60
 8003e84:	20000b60 	.word	0x20000b60
 8003e88:	200006f8 	.word	0x200006f8
 8003e8c:	20000b5c 	.word	0x20000b5c
 8003e90:	20001360 	.word	0x20001360
 8003e94:	08009f7c 	.word	0x08009f7c
 8003e98:	20001b64 	.word	0x20001b64

08003e9c <GetAudioStatus>:

int GetAudioStatus(){
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return isFinished;
 8003ea0:	4b02      	ldr	r3, [pc, #8]	; (8003eac <GetAudioStatus+0x10>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr
 8003eac:	20001b64 	.word	0x20001b64

08003eb0 <HAL_DACEx_ConvCpltCallbackCh2>:

void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac){
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
	waveplayerStatus = WAVEPLAYER_FULLBUFFER;
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <HAL_DACEx_ConvCpltCallbackCh2+0x18>)
 8003eba:	2202      	movs	r2, #2
 8003ebc:	701a      	strb	r2, [r3, #0]
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr
 8003ec8:	20001b65 	.word	0x20001b65

08003ecc <HAL_DACEx_ConvHalfCpltCallbackCh2>:

void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac){
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	waveplayerStatus = WAVEPLAYER_HALFBUFFER;
 8003ed4:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <HAL_DACEx_ConvHalfCpltCallbackCh2+0x18>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	701a      	strb	r2, [r3, #0]
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr
 8003ee4:	20001b65 	.word	0x20001b65

08003ee8 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
	waveplayerStatus = WAVEPLAYER_FULLBUFFER;
 8003ef0:	4b03      	ldr	r3, [pc, #12]	; (8003f00 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	701a      	strb	r2, [r3, #0]
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr
 8003f00:	20001b65 	.word	0x20001b65

08003f04 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	waveplayerStatus = WAVEPLAYER_HALFBUFFER;
 8003f0c:	4b03      	ldr	r3, [pc, #12]	; (8003f1c <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	701a      	strb	r2, [r3, #0]
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr
 8003f1c:	20001b65 	.word	0x20001b65

08003f20 <WaveplayerInit>:

void WaveplayerInit(SPI_HandleTypeDef * hspi, DAC_HandleTypeDef *hdac){
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f2a:	f107 030c 	add.w	r3, r7, #12
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	605a      	str	r2, [r3, #4]
 8003f34:	609a      	str	r2, [r3, #8]
 8003f36:	60da      	str	r2, [r3, #12]
 8003f38:	611a      	str	r2, [r3, #16]

	// SPI setup
	hspi->Instance = SPI3;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a29      	ldr	r2, [pc, #164]	; (8003fe4 <WaveplayerInit+0xc4>)
 8003f3e:	601a      	str	r2, [r3, #0]
	hspi->Init.Mode = SPI_MODE_MASTER;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f46:	605a      	str	r2, [r3, #4]
	hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	609a      	str	r2, [r3, #8]
	hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	60da      	str	r2, [r3, #12]
	hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	611a      	str	r2, [r3, #16]
	hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	615a      	str	r2, [r3, #20]
	hspi->Init.NSS = SPI_NSS_SOFT;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f66:	619a      	str	r2, [r3, #24]
	hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2210      	movs	r2, #16
 8003f6c:	61da      	str	r2, [r3, #28]
	hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	621a      	str	r2, [r3, #32]
	hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	625a      	str	r2, [r3, #36]	; 0x24
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi->Init.CRCPolynomial = 10;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	220a      	movs	r2, #10
 8003f84:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_SPI_Init(hspi);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f001 fd92 	bl	8005ab0 <HAL_SPI_Init>

	// Setting up SD_CS
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003f8c:	4b16      	ldr	r3, [pc, #88]	; (8003fe8 <WaveplayerInit+0xc8>)
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <WaveplayerInit+0xc8>)
 8003f92:	f043 0308 	orr.w	r3, r3, #8
 8003f96:	61d3      	str	r3, [r2, #28]
 8003f98:	4b13      	ldr	r3, [pc, #76]	; (8003fe8 <WaveplayerInit+0xc8>)
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	68bb      	ldr	r3, [r7, #8]

	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	4810      	ldr	r0, [pc, #64]	; (8003fec <WaveplayerInit+0xcc>)
 8003faa:	f000 ffb4 	bl	8004f16 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = SD_CS_Pin;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8003fbe:	f107 030c 	add.w	r3, r7, #12
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4809      	ldr	r0, [pc, #36]	; (8003fec <WaveplayerInit+0xcc>)
 8003fc6:	f000 fdff 	bl	8004bc8 <HAL_GPIO_Init>

	MX_FATFS_Init();
 8003fca:	f003 f87d 	bl	80070c8 <MX_FATFS_Init>

	memset(audioBuffer, 128, AUDIO_BUFFER_SIZE * sizeof(audioBuffer[0]));
 8003fce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fd2:	2180      	movs	r1, #128	; 0x80
 8003fd4:	4806      	ldr	r0, [pc, #24]	; (8003ff0 <WaveplayerInit+0xd0>)
 8003fd6:	f005 ff67 	bl	8009ea8 <memset>
}
 8003fda:	bf00      	nop
 8003fdc:	3720      	adds	r7, #32
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40003c00 	.word	0x40003c00
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40020c00 	.word	0x40020c00
 8003ff0:	20000b60 	.word	0x20000b60

08003ff4 <prepAudio>:

void prepAudio(SPI_HandleTypeDef * hspi1, SPI_HandleTypeDef * hspi2, DAC_HandleTypeDef *hdac){
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af02      	add	r7, sp, #8
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
	disableOutput(hspi1);
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f7fc faf5 	bl	80005f0 <disableOutput>
	disableOutput(hspi2);
 8004006:	68b8      	ldr	r0, [r7, #8]
 8004008:	f7fc faf2 	bl	80005f0 <disableOutput>
	HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_2, (uint32_t *) audioBuffer, AUDIO_BUFFER_SIZE, DAC_ALIGN_8B_R);
 800400c:	2308      	movs	r3, #8
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004014:	4a06      	ldr	r2, [pc, #24]	; (8004030 <prepAudio+0x3c>)
 8004016:	2110      	movs	r1, #16
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fa05 	bl	8004428 <HAL_DAC_Start_DMA>
	HAL_Delay(1000);
 800401e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004022:	f000 f8af 	bl	8004184 <HAL_Delay>
}
 8004026:	bf00      	nop
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20000b60 	.word	0x20000b60

08004034 <resetAudio>:

void resetAudio(SPI_HandleTypeDef * hspi1, SPI_HandleTypeDef * hspi2, DAC_HandleTypeDef *hdac){
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
	HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_2);
 8004040:	2110      	movs	r1, #16
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fabc 	bl	80045c0 <HAL_DAC_Stop_DMA>
	enableOutput(hspi1);
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f7fc fac4 	bl	80005d6 <enableOutput>
	enableOutput(hspi2);
 800404e:	68b8      	ldr	r0, [r7, #8]
 8004050:	f7fc fac1 	bl	80005d6 <enableOutput>
}
 8004054:	bf00      	nop
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800405c:	480c      	ldr	r0, [pc, #48]	; (8004090 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800405e:	490d      	ldr	r1, [pc, #52]	; (8004094 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004060:	4a0d      	ldr	r2, [pc, #52]	; (8004098 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004064:	e002      	b.n	800406c <LoopCopyDataInit>

08004066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800406a:	3304      	adds	r3, #4

0800406c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800406c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800406e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004070:	d3f9      	bcc.n	8004066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004072:	4a0a      	ldr	r2, [pc, #40]	; (800409c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004074:	4c0a      	ldr	r4, [pc, #40]	; (80040a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004078:	e001      	b.n	800407e <LoopFillZerobss>

0800407a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800407a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800407c:	3204      	adds	r2, #4

0800407e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800407e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004080:	d3fb      	bcc.n	800407a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004082:	f7fe fa53 	bl	800252c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004086:	f005 fedd 	bl	8009e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800408a:	f7fc fcbb 	bl	8000a04 <main>
  bx lr
 800408e:	4770      	bx	lr
  ldr r0, =_sdata
 8004090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004094:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8004098:	0800a0b8 	.word	0x0800a0b8
  ldr r2, =_sbss
 800409c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80040a0:	200024bc 	.word	0x200024bc

080040a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040a4:	e7fe      	b.n	80040a4 <ADC1_IRQHandler>

080040a6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b082      	sub	sp, #8
 80040aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040b0:	2003      	movs	r0, #3
 80040b2:	f000 f955 	bl	8004360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040b6:	200f      	movs	r0, #15
 80040b8:	f000 f80e 	bl	80040d8 <HAL_InitTick>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	71fb      	strb	r3, [r7, #7]
 80040c6:	e001      	b.n	80040cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80040c8:	f7fd ffae 	bl	8002028 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80040cc:	79fb      	ldrb	r3, [r7, #7]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80040e4:	4b16      	ldr	r3, [pc, #88]	; (8004140 <HAL_InitTick+0x68>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d022      	beq.n	8004132 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80040ec:	4b15      	ldr	r3, [pc, #84]	; (8004144 <HAL_InitTick+0x6c>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	4b13      	ldr	r3, [pc, #76]	; (8004140 <HAL_InitTick+0x68>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80040f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	4618      	mov	r0, r3
 8004102:	f000 f962 	bl	80043ca <HAL_SYSTICK_Config>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10f      	bne.n	800412c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b0f      	cmp	r3, #15
 8004110:	d809      	bhi.n	8004126 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004112:	2200      	movs	r2, #0
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	f04f 30ff 	mov.w	r0, #4294967295
 800411a:	f000 f92c 	bl	8004376 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800411e:	4a0a      	ldr	r2, [pc, #40]	; (8004148 <HAL_InitTick+0x70>)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	e007      	b.n	8004136 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
 800412a:	e004      	b.n	8004136 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
 8004130:	e001      	b.n	8004136 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004136:	7bfb      	ldrb	r3, [r7, #15]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	200000e0 	.word	0x200000e0
 8004144:	20000008 	.word	0x20000008
 8004148:	200000dc 	.word	0x200000dc

0800414c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004150:	4b05      	ldr	r3, [pc, #20]	; (8004168 <HAL_IncTick+0x1c>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <HAL_IncTick+0x20>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4413      	add	r3, r2
 800415a:	4a03      	ldr	r2, [pc, #12]	; (8004168 <HAL_IncTick+0x1c>)
 800415c:	6013      	str	r3, [r2, #0]
}
 800415e:	bf00      	nop
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	20002048 	.word	0x20002048
 800416c:	200000e0 	.word	0x200000e0

08004170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  return uwTick;
 8004174:	4b02      	ldr	r3, [pc, #8]	; (8004180 <HAL_GetTick+0x10>)
 8004176:	681b      	ldr	r3, [r3, #0]
}
 8004178:	4618      	mov	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr
 8004180:	20002048 	.word	0x20002048

08004184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800418c:	f7ff fff0 	bl	8004170 <HAL_GetTick>
 8004190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d004      	beq.n	80041a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800419e:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <HAL_Delay+0x40>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4413      	add	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041a8:	bf00      	nop
 80041aa:	f7ff ffe1 	bl	8004170 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d8f7      	bhi.n	80041aa <HAL_Delay+0x26>
  {
  }
}
 80041ba:	bf00      	nop
 80041bc:	bf00      	nop
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	200000e0 	.word	0x200000e0

080041c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041d8:	4b0c      	ldr	r3, [pc, #48]	; (800420c <__NVIC_SetPriorityGrouping+0x44>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041e4:	4013      	ands	r3, r2
 80041e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041fa:	4a04      	ldr	r2, [pc, #16]	; (800420c <__NVIC_SetPriorityGrouping+0x44>)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	60d3      	str	r3, [r2, #12]
}
 8004200:	bf00      	nop
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004214:	4b04      	ldr	r3, [pc, #16]	; (8004228 <__NVIC_GetPriorityGrouping+0x18>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	0a1b      	lsrs	r3, r3, #8
 800421a:	f003 0307 	and.w	r3, r3, #7
}
 800421e:	4618      	mov	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	e000ed00 	.word	0xe000ed00

0800422c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423a:	2b00      	cmp	r3, #0
 800423c:	db0b      	blt.n	8004256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	f003 021f 	and.w	r2, r3, #31
 8004244:	4906      	ldr	r1, [pc, #24]	; (8004260 <__NVIC_EnableIRQ+0x34>)
 8004246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	2001      	movs	r0, #1
 800424e:	fa00 f202 	lsl.w	r2, r0, r2
 8004252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr
 8004260:	e000e100 	.word	0xe000e100

08004264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	6039      	str	r1, [r7, #0]
 800426e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004274:	2b00      	cmp	r3, #0
 8004276:	db0a      	blt.n	800428e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	b2da      	uxtb	r2, r3
 800427c:	490c      	ldr	r1, [pc, #48]	; (80042b0 <__NVIC_SetPriority+0x4c>)
 800427e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004282:	0112      	lsls	r2, r2, #4
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	440b      	add	r3, r1
 8004288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800428c:	e00a      	b.n	80042a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	4908      	ldr	r1, [pc, #32]	; (80042b4 <__NVIC_SetPriority+0x50>)
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	3b04      	subs	r3, #4
 800429c:	0112      	lsls	r2, r2, #4
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	440b      	add	r3, r1
 80042a2:	761a      	strb	r2, [r3, #24]
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	e000e100 	.word	0xe000e100
 80042b4:	e000ed00 	.word	0xe000ed00

080042b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b089      	sub	sp, #36	; 0x24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	f1c3 0307 	rsb	r3, r3, #7
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	bf28      	it	cs
 80042d6:	2304      	movcs	r3, #4
 80042d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	3304      	adds	r3, #4
 80042de:	2b06      	cmp	r3, #6
 80042e0:	d902      	bls.n	80042e8 <NVIC_EncodePriority+0x30>
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	3b03      	subs	r3, #3
 80042e6:	e000      	b.n	80042ea <NVIC_EncodePriority+0x32>
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042ec:	f04f 32ff 	mov.w	r2, #4294967295
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43da      	mvns	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	401a      	ands	r2, r3
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004300:	f04f 31ff 	mov.w	r1, #4294967295
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	fa01 f303 	lsl.w	r3, r1, r3
 800430a:	43d9      	mvns	r1, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004310:	4313      	orrs	r3, r2
         );
}
 8004312:	4618      	mov	r0, r3
 8004314:	3724      	adds	r7, #36	; 0x24
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3b01      	subs	r3, #1
 8004328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800432c:	d301      	bcc.n	8004332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800432e:	2301      	movs	r3, #1
 8004330:	e00f      	b.n	8004352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004332:	4a0a      	ldr	r2, [pc, #40]	; (800435c <SysTick_Config+0x40>)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3b01      	subs	r3, #1
 8004338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800433a:	210f      	movs	r1, #15
 800433c:	f04f 30ff 	mov.w	r0, #4294967295
 8004340:	f7ff ff90 	bl	8004264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <SysTick_Config+0x40>)
 8004346:	2200      	movs	r2, #0
 8004348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800434a:	4b04      	ldr	r3, [pc, #16]	; (800435c <SysTick_Config+0x40>)
 800434c:	2207      	movs	r2, #7
 800434e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	e000e010 	.word	0xe000e010

08004360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff ff2d 	bl	80041c8 <__NVIC_SetPriorityGrouping>
}
 800436e:	bf00      	nop
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b086      	sub	sp, #24
 800437a:	af00      	add	r7, sp, #0
 800437c:	4603      	mov	r3, r0
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	607a      	str	r2, [r7, #4]
 8004382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004384:	2300      	movs	r3, #0
 8004386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004388:	f7ff ff42 	bl	8004210 <__NVIC_GetPriorityGrouping>
 800438c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	6978      	ldr	r0, [r7, #20]
 8004394:	f7ff ff90 	bl	80042b8 <NVIC_EncodePriority>
 8004398:	4602      	mov	r2, r0
 800439a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800439e:	4611      	mov	r1, r2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff ff5f 	bl	8004264 <__NVIC_SetPriority>
}
 80043a6:	bf00      	nop
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b082      	sub	sp, #8
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	4603      	mov	r3, r0
 80043b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff ff35 	bl	800422c <__NVIC_EnableIRQ>
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b082      	sub	sp, #8
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff ffa2 	bl	800431c <SysTick_Config>
 80043d8:	4603      	mov	r3, r0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b082      	sub	sp, #8
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e014      	b.n	800441e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	791b      	ldrb	r3, [r3, #4]
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d105      	bne.n	800440a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7fd fe3d 	bl	8002084 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2202      	movs	r2, #2
 800440e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	795b      	ldrb	r3, [r3, #5]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_DAC_Start_DMA+0x1e>
 8004442:	2302      	movs	r3, #2
 8004444:	e0ab      	b.n	800459e <HAL_DAC_Start_DMA+0x176>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2201      	movs	r2, #1
 800444a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2202      	movs	r2, #2
 8004450:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d12f      	bne.n	80044b8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	4a52      	ldr	r2, [pc, #328]	; (80045a8 <HAL_DAC_Start_DMA+0x180>)
 800445e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	4a51      	ldr	r2, [pc, #324]	; (80045ac <HAL_DAC_Start_DMA+0x184>)
 8004466:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	4a50      	ldr	r2, [pc, #320]	; (80045b0 <HAL_DAC_Start_DMA+0x188>)
 800446e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800447e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	2b08      	cmp	r3, #8
 8004484:	d013      	beq.n	80044ae <HAL_DAC_Start_DMA+0x86>
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	2b08      	cmp	r3, #8
 800448a:	d845      	bhi.n	8004518 <HAL_DAC_Start_DMA+0xf0>
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_DAC_Start_DMA+0x72>
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	2b04      	cmp	r3, #4
 8004496:	d005      	beq.n	80044a4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004498:	e03e      	b.n	8004518 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3308      	adds	r3, #8
 80044a0:	613b      	str	r3, [r7, #16]
        break;
 80044a2:	e03c      	b.n	800451e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	330c      	adds	r3, #12
 80044aa:	613b      	str	r3, [r7, #16]
        break;
 80044ac:	e037      	b.n	800451e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3310      	adds	r3, #16
 80044b4:	613b      	str	r3, [r7, #16]
        break;
 80044b6:	e032      	b.n	800451e <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	4a3d      	ldr	r2, [pc, #244]	; (80045b4 <HAL_DAC_Start_DMA+0x18c>)
 80044be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	4a3c      	ldr	r2, [pc, #240]	; (80045b8 <HAL_DAC_Start_DMA+0x190>)
 80044c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	4a3b      	ldr	r2, [pc, #236]	; (80045bc <HAL_DAC_Start_DMA+0x194>)
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80044de:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d013      	beq.n	800450e <HAL_DAC_Start_DMA+0xe6>
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d817      	bhi.n	800451c <HAL_DAC_Start_DMA+0xf4>
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_DAC_Start_DMA+0xd2>
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d005      	beq.n	8004504 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80044f8:	e010      	b.n	800451c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3314      	adds	r3, #20
 8004500:	613b      	str	r3, [r7, #16]
        break;
 8004502:	e00c      	b.n	800451e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3318      	adds	r3, #24
 800450a:	613b      	str	r3, [r7, #16]
        break;
 800450c:	e007      	b.n	800451e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	331c      	adds	r3, #28
 8004514:	613b      	str	r3, [r7, #16]
        break;
 8004516:	e002      	b.n	800451e <HAL_DAC_Start_DMA+0xf6>
        break;
 8004518:	bf00      	nop
 800451a:	e000      	b.n	800451e <HAL_DAC_Start_DMA+0xf6>
        break;
 800451c:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d111      	bne.n	8004548 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004532:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6898      	ldr	r0, [r3, #8]
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	f000 f9c7 	bl	80048d0 <HAL_DMA_Start_IT>
 8004542:	4603      	mov	r3, r0
 8004544:	75fb      	strb	r3, [r7, #23]
 8004546:	e010      	b.n	800456a <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004556:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	68d8      	ldr	r0, [r3, #12]
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	f000 f9b5 	bl	80048d0 <HAL_DMA_Start_IT>
 8004566:	4603      	mov	r3, r0
 8004568:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004570:	7dfb      	ldrb	r3, [r7, #23]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10c      	bne.n	8004590 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6819      	ldr	r1, [r3, #0]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f003 0310 	and.w	r3, r3, #16
 8004582:	2201      	movs	r2, #1
 8004584:	409a      	lsls	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	e005      	b.n	800459c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f043 0204 	orr.w	r2, r3, #4
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800459c:	7dfb      	ldrb	r3, [r7, #23]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	080046ff 	.word	0x080046ff
 80045ac:	08004721 	.word	0x08004721
 80045b0:	0800473d 	.word	0x0800473d
 80045b4:	0800477d 	.word	0x0800477d
 80045b8:	0800479f 	.word	0x0800479f
 80045bc:	080047bb 	.word	0x080047bb

080045c0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6819      	ldr	r1, [r3, #0]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43da      	mvns	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	400a      	ands	r2, r1
 80045e6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6819      	ldr	r1, [r3, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	f003 0310 	and.w	r3, r3, #16
 80045f4:	2201      	movs	r2, #1
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	43da      	mvns	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	400a      	ands	r2, r1
 8004602:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10d      	bne.n	8004626 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 f9be 	bl	8004990 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	e00c      	b.n	8004640 <HAL_DAC_Stop_DMA+0x80>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 f9b0 	bl	8004990 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800463e:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr

08004662 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004662:	b480      	push	{r7}
 8004664:	b087      	sub	sp, #28
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	795b      	ldrb	r3, [r3, #5]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_DAC_ConfigChannel+0x18>
 8004676:	2302      	movs	r3, #2
 8004678:	e03c      	b.n	80046f4 <HAL_DAC_ConfigChannel+0x92>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2202      	movs	r2, #2
 8004684:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f003 0310 	and.w	r3, r3, #16
 8004694:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	43db      	mvns	r3, r3
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4013      	ands	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f003 0310 	and.w	r3, r3, #16
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6819      	ldr	r1, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f003 0310 	and.w	r3, r3, #16
 80046d6:	22c0      	movs	r2, #192	; 0xc0
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	43da      	mvns	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	400a      	ands	r2, r1
 80046e4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	371c      	adds	r7, #28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc80      	pop	{r7}
 80046fc:	4770      	bx	lr

080046fe <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f7ff fbeb 	bl	8003ee8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	711a      	strb	r2, [r3, #4]
}
 8004718:	bf00      	nop
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f7ff fbe8 	bl	8003f04 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004734:	bf00      	nop
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f043 0204 	orr.w	r2, r3, #4
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f7ff ff7a 	bl	8004650 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	711a      	strb	r2, [r3, #4]
}
 8004762:	bf00      	nop
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr

0800477c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f7ff fb90 	bl	8003eb0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	711a      	strb	r2, [r3, #4]
}
 8004796:	bf00      	nop
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f7ff fb8d 	bl	8003ecc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80047b2:	bf00      	nop
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f043 0204 	orr.w	r2, r3, #4
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f7ff ffc8 	bl	800476a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	711a      	strb	r2, [r3, #4]
}
 80047e0:	bf00      	nop
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e059      	b.n	80048ae <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	4b2d      	ldr	r3, [pc, #180]	; (80048b8 <HAL_DMA_Init+0xd0>)
 8004802:	429a      	cmp	r2, r3
 8004804:	d80f      	bhi.n	8004826 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	4b2b      	ldr	r3, [pc, #172]	; (80048bc <HAL_DMA_Init+0xd4>)
 800480e:	4413      	add	r3, r2
 8004810:	4a2b      	ldr	r2, [pc, #172]	; (80048c0 <HAL_DMA_Init+0xd8>)
 8004812:	fba2 2303 	umull	r2, r3, r2, r3
 8004816:	091b      	lsrs	r3, r3, #4
 8004818:	009a      	lsls	r2, r3, #2
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a28      	ldr	r2, [pc, #160]	; (80048c4 <HAL_DMA_Init+0xdc>)
 8004822:	63da      	str	r2, [r3, #60]	; 0x3c
 8004824:	e00e      	b.n	8004844 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	4b26      	ldr	r3, [pc, #152]	; (80048c8 <HAL_DMA_Init+0xe0>)
 800482e:	4413      	add	r3, r2
 8004830:	4a23      	ldr	r2, [pc, #140]	; (80048c0 <HAL_DMA_Init+0xd8>)
 8004832:	fba2 2303 	umull	r2, r3, r2, r3
 8004836:	091b      	lsrs	r3, r3, #4
 8004838:	009a      	lsls	r2, r3, #2
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a22      	ldr	r2, [pc, #136]	; (80048cc <HAL_DMA_Init+0xe4>)
 8004842:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800485a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004868:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004874:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004880:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr
 80048b8:	40026407 	.word	0x40026407
 80048bc:	bffd9ff8 	.word	0xbffd9ff8
 80048c0:	cccccccd 	.word	0xcccccccd
 80048c4:	40026000 	.word	0x40026000
 80048c8:	bffd9bf8 	.word	0xbffd9bf8
 80048cc:	40026400 	.word	0x40026400

080048d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
 80048dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_DMA_Start_IT+0x20>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e04b      	b.n	8004988 <HAL_DMA_Start_IT+0xb8>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b01      	cmp	r3, #1
 8004902:	d13a      	bne.n	800497a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0201 	bic.w	r2, r2, #1
 8004920:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	68b9      	ldr	r1, [r7, #8]
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 f91d 	bl	8004b68 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	2b00      	cmp	r3, #0
 8004934:	d008      	beq.n	8004948 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f042 020e 	orr.w	r2, r2, #14
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	e00f      	b.n	8004968 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0204 	bic.w	r2, r2, #4
 8004956:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 020a 	orr.w	r2, r2, #10
 8004966:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	e005      	b.n	8004986 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004982:	2302      	movs	r3, #2
 8004984:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004986:	7dfb      	ldrb	r3, [r7, #23]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d008      	beq.n	80049ba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2204      	movs	r2, #4
 80049ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e022      	b.n	8004a00 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 020e 	bic.w	r2, r2, #14
 80049c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0201 	bic.w	r2, r2, #1
 80049d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f003 021c 	and.w	r2, r3, #28
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e6:	2101      	movs	r1, #1
 80049e8:	fa01 f202 	lsl.w	r2, r1, r2
 80049ec:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr

08004a0a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f003 031c 	and.w	r3, r3, #28
 8004a2a:	2204      	movs	r2, #4
 8004a2c:	409a      	lsls	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d026      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x7a>
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d021      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d107      	bne.n	8004a5e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0204 	bic.w	r2, r2, #4
 8004a5c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	f003 021c 	and.w	r2, r3, #28
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6a:	2104      	movs	r1, #4
 8004a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a70:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d071      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004a82:	e06c      	b.n	8004b5e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	f003 031c 	and.w	r3, r3, #28
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	409a      	lsls	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4013      	ands	r3, r2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d02e      	beq.n	8004af6 <HAL_DMA_IRQHandler+0xec>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d029      	beq.n	8004af6 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0320 	and.w	r3, r3, #32
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10b      	bne.n	8004ac8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 020a 	bic.w	r2, r2, #10
 8004abe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004acc:	f003 021c 	and.w	r2, r3, #28
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad4:	2102      	movs	r1, #2
 8004ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8004ada:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d038      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004af4:	e033      	b.n	8004b5e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f003 031c 	and.w	r3, r3, #28
 8004afe:	2208      	movs	r2, #8
 8004b00:	409a      	lsls	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d02a      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x156>
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f003 0308 	and.w	r3, r3, #8
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d025      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 020e 	bic.w	r2, r2, #14
 8004b22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	f003 021c 	and.w	r2, r3, #28
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b30:	2101      	movs	r1, #1
 8004b32:	fa01 f202 	lsl.w	r2, r1, r2
 8004b36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d004      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b5e:	bf00      	nop
 8004b60:	bf00      	nop
}
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	f003 021c 	and.w	r2, r3, #28
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b82:	2101      	movs	r1, #1
 8004b84:	fa01 f202 	lsl.w	r2, r1, r2
 8004b88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b10      	cmp	r3, #16
 8004b98:	d108      	bne.n	8004bac <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004baa:	e007      	b.n	8004bbc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	60da      	str	r2, [r3, #12]
}
 8004bbc:	bf00      	nop
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bc80      	pop	{r7}
 8004bc4:	4770      	bx	lr
	...

08004bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004bde:	e160      	b.n	8004ea2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	2101      	movs	r1, #1
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bec:	4013      	ands	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 8152 	beq.w	8004e9c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f003 0303 	and.w	r3, r3, #3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d005      	beq.n	8004c10 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d130      	bne.n	8004c72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	43db      	mvns	r3, r3
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4013      	ands	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8004c46:	2201      	movs	r2, #1
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4013      	ands	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	091b      	lsrs	r3, r3, #4
 8004c5c:	f003 0201 	and.w	r2, r3, #1
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d017      	beq.n	8004cae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	2203      	movs	r2, #3
 8004c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8e:	43db      	mvns	r3, r3
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4013      	ands	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d123      	bne.n	8004d02 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	08da      	lsrs	r2, r3, #3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3208      	adds	r2, #8
 8004cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	220f      	movs	r2, #15
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	fa02 f303 	lsl.w	r3, r2, r3
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	08da      	lsrs	r2, r3, #3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3208      	adds	r2, #8
 8004cfc:	6939      	ldr	r1, [r7, #16]
 8004cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	43db      	mvns	r3, r3
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4013      	ands	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 0203 	and.w	r2, r3, #3
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 80ac 	beq.w	8004e9c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d44:	4b5e      	ldr	r3, [pc, #376]	; (8004ec0 <HAL_GPIO_Init+0x2f8>)
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	4a5d      	ldr	r2, [pc, #372]	; (8004ec0 <HAL_GPIO_Init+0x2f8>)
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	6213      	str	r3, [r2, #32]
 8004d50:	4b5b      	ldr	r3, [pc, #364]	; (8004ec0 <HAL_GPIO_Init+0x2f8>)
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8004d5c:	4a59      	ldr	r2, [pc, #356]	; (8004ec4 <HAL_GPIO_Init+0x2fc>)
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	089b      	lsrs	r3, r3, #2
 8004d62:	3302      	adds	r3, #2
 8004d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f003 0303 	and.w	r3, r3, #3
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	220f      	movs	r2, #15
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a51      	ldr	r2, [pc, #324]	; (8004ec8 <HAL_GPIO_Init+0x300>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d025      	beq.n	8004dd4 <HAL_GPIO_Init+0x20c>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a50      	ldr	r2, [pc, #320]	; (8004ecc <HAL_GPIO_Init+0x304>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d01f      	beq.n	8004dd0 <HAL_GPIO_Init+0x208>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a4f      	ldr	r2, [pc, #316]	; (8004ed0 <HAL_GPIO_Init+0x308>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d019      	beq.n	8004dcc <HAL_GPIO_Init+0x204>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a4e      	ldr	r2, [pc, #312]	; (8004ed4 <HAL_GPIO_Init+0x30c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d013      	beq.n	8004dc8 <HAL_GPIO_Init+0x200>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a4d      	ldr	r2, [pc, #308]	; (8004ed8 <HAL_GPIO_Init+0x310>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00d      	beq.n	8004dc4 <HAL_GPIO_Init+0x1fc>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a4c      	ldr	r2, [pc, #304]	; (8004edc <HAL_GPIO_Init+0x314>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d007      	beq.n	8004dc0 <HAL_GPIO_Init+0x1f8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a4b      	ldr	r2, [pc, #300]	; (8004ee0 <HAL_GPIO_Init+0x318>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d101      	bne.n	8004dbc <HAL_GPIO_Init+0x1f4>
 8004db8:	2306      	movs	r3, #6
 8004dba:	e00c      	b.n	8004dd6 <HAL_GPIO_Init+0x20e>
 8004dbc:	2307      	movs	r3, #7
 8004dbe:	e00a      	b.n	8004dd6 <HAL_GPIO_Init+0x20e>
 8004dc0:	2305      	movs	r3, #5
 8004dc2:	e008      	b.n	8004dd6 <HAL_GPIO_Init+0x20e>
 8004dc4:	2304      	movs	r3, #4
 8004dc6:	e006      	b.n	8004dd6 <HAL_GPIO_Init+0x20e>
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e004      	b.n	8004dd6 <HAL_GPIO_Init+0x20e>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e002      	b.n	8004dd6 <HAL_GPIO_Init+0x20e>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e000      	b.n	8004dd6 <HAL_GPIO_Init+0x20e>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	f002 0203 	and.w	r2, r2, #3
 8004ddc:	0092      	lsls	r2, r2, #2
 8004dde:	4093      	lsls	r3, r2
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004de6:	4937      	ldr	r1, [pc, #220]	; (8004ec4 <HAL_GPIO_Init+0x2fc>)
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	089b      	lsrs	r3, r3, #2
 8004dec:	3302      	adds	r3, #2
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004df4:	4b3b      	ldr	r3, [pc, #236]	; (8004ee4 <HAL_GPIO_Init+0x31c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4013      	ands	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d003      	beq.n	8004e18 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004e18:	4a32      	ldr	r2, [pc, #200]	; (8004ee4 <HAL_GPIO_Init+0x31c>)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004e1e:	4b31      	ldr	r3, [pc, #196]	; (8004ee4 <HAL_GPIO_Init+0x31c>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	43db      	mvns	r3, r3
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004e42:	4a28      	ldr	r2, [pc, #160]	; (8004ee4 <HAL_GPIO_Init+0x31c>)
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e48:	4b26      	ldr	r3, [pc, #152]	; (8004ee4 <HAL_GPIO_Init+0x31c>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	43db      	mvns	r3, r3
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4013      	ands	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004e6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ee4 <HAL_GPIO_Init+0x31c>)
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e72:	4b1c      	ldr	r3, [pc, #112]	; (8004ee4 <HAL_GPIO_Init+0x31c>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	43db      	mvns	r3, r3
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004e96:	4a13      	ldr	r2, [pc, #76]	; (8004ee4 <HAL_GPIO_Init+0x31c>)
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f47f ae97 	bne.w	8004be0 <HAL_GPIO_Init+0x18>
  }
}
 8004eb2:	bf00      	nop
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc80      	pop	{r7}
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	40020000 	.word	0x40020000
 8004ecc:	40020400 	.word	0x40020400
 8004ed0:	40020800 	.word	0x40020800
 8004ed4:	40020c00 	.word	0x40020c00
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	40021400 	.word	0x40021400
 8004ee0:	40021800 	.word	0x40021800
 8004ee4:	40010400 	.word	0x40010400

08004ee8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	887b      	ldrh	r3, [r7, #2]
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f00:	2301      	movs	r3, #1
 8004f02:	73fb      	strb	r3, [r7, #15]
 8004f04:	e001      	b.n	8004f0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f06:	2300      	movs	r3, #0
 8004f08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bc80      	pop	{r7}
 8004f14:	4770      	bx	lr

08004f16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	807b      	strh	r3, [r7, #2]
 8004f22:	4613      	mov	r3, r2
 8004f24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f26:	787b      	ldrb	r3, [r7, #1]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f2c:	887a      	ldrh	r2, [r7, #2]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8004f32:	e003      	b.n	8004f3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8004f34:	887b      	ldrh	r3, [r7, #2]
 8004f36:	041a      	lsls	r2, r3, #16
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	619a      	str	r2, [r3, #24]
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bc80      	pop	{r7}
 8004f44:	4770      	bx	lr
	...

08004f48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004f52:	4b08      	ldr	r3, [pc, #32]	; (8004f74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f54:	695a      	ldr	r2, [r3, #20]
 8004f56:	88fb      	ldrh	r3, [r7, #6]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d006      	beq.n	8004f6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f5e:	4a05      	ldr	r2, [pc, #20]	; (8004f74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f60:	88fb      	ldrh	r3, [r7, #6]
 8004f62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f64:	88fb      	ldrh	r3, [r7, #6]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fc f86c 	bl	8001044 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f6c:	bf00      	nop
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40010400 	.word	0x40010400

08004f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e31d      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f8a:	4b94      	ldr	r3, [pc, #592]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 030c 	and.w	r3, r3, #12
 8004f92:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f94:	4b91      	ldr	r3, [pc, #580]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f9c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d07b      	beq.n	80050a2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d006      	beq.n	8004fbe <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	2b0c      	cmp	r3, #12
 8004fb4:	d10f      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x5e>
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fbc:	d10b      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fbe:	4b87      	ldr	r3, [pc, #540]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d06a      	beq.n	80050a0 <HAL_RCC_OscConfig+0x128>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d166      	bne.n	80050a0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e2f7      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d106      	bne.n	8004fec <HAL_RCC_OscConfig+0x74>
 8004fde:	4b7f      	ldr	r3, [pc, #508]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a7e      	ldr	r2, [pc, #504]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 8004fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	e02d      	b.n	8005048 <HAL_RCC_OscConfig+0xd0>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10c      	bne.n	800500e <HAL_RCC_OscConfig+0x96>
 8004ff4:	4b79      	ldr	r3, [pc, #484]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a78      	ldr	r2, [pc, #480]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 8004ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	4b76      	ldr	r3, [pc, #472]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a75      	ldr	r2, [pc, #468]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 8005006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	e01c      	b.n	8005048 <HAL_RCC_OscConfig+0xd0>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b05      	cmp	r3, #5
 8005014:	d10c      	bne.n	8005030 <HAL_RCC_OscConfig+0xb8>
 8005016:	4b71      	ldr	r3, [pc, #452]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a70      	ldr	r2, [pc, #448]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 800501c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	4b6e      	ldr	r3, [pc, #440]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a6d      	ldr	r2, [pc, #436]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 8005028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	e00b      	b.n	8005048 <HAL_RCC_OscConfig+0xd0>
 8005030:	4b6a      	ldr	r3, [pc, #424]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a69      	ldr	r2, [pc, #420]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 8005036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	4b67      	ldr	r3, [pc, #412]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a66      	ldr	r2, [pc, #408]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 8005042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d013      	beq.n	8005078 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005050:	f7ff f88e 	bl	8004170 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005058:	f7ff f88a 	bl	8004170 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b64      	cmp	r3, #100	; 0x64
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e2ad      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800506a:	4b5c      	ldr	r3, [pc, #368]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f0      	beq.n	8005058 <HAL_RCC_OscConfig+0xe0>
 8005076:	e014      	b.n	80050a2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005078:	f7ff f87a 	bl	8004170 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005080:	f7ff f876 	bl	8004170 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b64      	cmp	r3, #100	; 0x64
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e299      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005092:	4b52      	ldr	r3, [pc, #328]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1f0      	bne.n	8005080 <HAL_RCC_OscConfig+0x108>
 800509e:	e000      	b.n	80050a2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d05a      	beq.n	8005164 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	d005      	beq.n	80050c0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	2b0c      	cmp	r3, #12
 80050b8:	d119      	bne.n	80050ee <HAL_RCC_OscConfig+0x176>
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d116      	bne.n	80050ee <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050c0:	4b46      	ldr	r3, [pc, #280]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <HAL_RCC_OscConfig+0x160>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d001      	beq.n	80050d8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e276      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d8:	4b40      	ldr	r3, [pc, #256]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	021b      	lsls	r3, r3, #8
 80050e6:	493d      	ldr	r1, [pc, #244]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ec:	e03a      	b.n	8005164 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d020      	beq.n	8005138 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050f6:	4b3a      	ldr	r3, [pc, #232]	; (80051e0 <HAL_RCC_OscConfig+0x268>)
 80050f8:	2201      	movs	r2, #1
 80050fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fc:	f7ff f838 	bl	8004170 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005104:	f7ff f834 	bl	8004170 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e257      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005116:	4b31      	ldr	r3, [pc, #196]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0f0      	beq.n	8005104 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005122:	4b2e      	ldr	r3, [pc, #184]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	492a      	ldr	r1, [pc, #168]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 8005132:	4313      	orrs	r3, r2
 8005134:	604b      	str	r3, [r1, #4]
 8005136:	e015      	b.n	8005164 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005138:	4b29      	ldr	r3, [pc, #164]	; (80051e0 <HAL_RCC_OscConfig+0x268>)
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513e:	f7ff f817 	bl	8004170 <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005146:	f7ff f813 	bl	8004170 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e236      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005158:	4b20      	ldr	r3, [pc, #128]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1f0      	bne.n	8005146 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0310 	and.w	r3, r3, #16
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 80b8 	beq.w	80052e2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d170      	bne.n	800525a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005178:	4b18      	ldr	r3, [pc, #96]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <HAL_RCC_OscConfig+0x218>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e21a      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a1a      	ldr	r2, [r3, #32]
 8005194:	4b11      	ldr	r3, [pc, #68]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800519c:	429a      	cmp	r2, r3
 800519e:	d921      	bls.n	80051e4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fc23 	bl	80059f0 <RCC_SetFlashLatencyFromMSIRange>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e208      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051b4:	4b09      	ldr	r3, [pc, #36]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	4906      	ldr	r1, [pc, #24]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051c6:	4b05      	ldr	r3, [pc, #20]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	061b      	lsls	r3, r3, #24
 80051d4:	4901      	ldr	r1, [pc, #4]	; (80051dc <HAL_RCC_OscConfig+0x264>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	604b      	str	r3, [r1, #4]
 80051da:	e020      	b.n	800521e <HAL_RCC_OscConfig+0x2a6>
 80051dc:	40023800 	.word	0x40023800
 80051e0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051e4:	4ba4      	ldr	r3, [pc, #656]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	49a1      	ldr	r1, [pc, #644]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051f6:	4ba0      	ldr	r3, [pc, #640]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	061b      	lsls	r3, r3, #24
 8005204:	499c      	ldr	r1, [pc, #624]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 8005206:	4313      	orrs	r3, r2
 8005208:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fbee 	bl	80059f0 <RCC_SetFlashLatencyFromMSIRange>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e1d3      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	0b5b      	lsrs	r3, r3, #13
 8005224:	3301      	adds	r3, #1
 8005226:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800522e:	4a92      	ldr	r2, [pc, #584]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 8005230:	6892      	ldr	r2, [r2, #8]
 8005232:	0912      	lsrs	r2, r2, #4
 8005234:	f002 020f 	and.w	r2, r2, #15
 8005238:	4990      	ldr	r1, [pc, #576]	; (800547c <HAL_RCC_OscConfig+0x504>)
 800523a:	5c8a      	ldrb	r2, [r1, r2]
 800523c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800523e:	4a90      	ldr	r2, [pc, #576]	; (8005480 <HAL_RCC_OscConfig+0x508>)
 8005240:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005242:	4b90      	ldr	r3, [pc, #576]	; (8005484 <HAL_RCC_OscConfig+0x50c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f7fe ff46 	bl	80040d8 <HAL_InitTick>
 800524c:	4603      	mov	r3, r0
 800524e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005250:	7bfb      	ldrb	r3, [r7, #15]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d045      	beq.n	80052e2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	e1b5      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d029      	beq.n	80052b6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005262:	4b89      	ldr	r3, [pc, #548]	; (8005488 <HAL_RCC_OscConfig+0x510>)
 8005264:	2201      	movs	r2, #1
 8005266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005268:	f7fe ff82 	bl	8004170 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005270:	f7fe ff7e 	bl	8004170 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e1a1      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005282:	4b7d      	ldr	r3, [pc, #500]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0f0      	beq.n	8005270 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800528e:	4b7a      	ldr	r3, [pc, #488]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	4977      	ldr	r1, [pc, #476]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 800529c:	4313      	orrs	r3, r2
 800529e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052a0:	4b75      	ldr	r3, [pc, #468]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	061b      	lsls	r3, r3, #24
 80052ae:	4972      	ldr	r1, [pc, #456]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	604b      	str	r3, [r1, #4]
 80052b4:	e015      	b.n	80052e2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052b6:	4b74      	ldr	r3, [pc, #464]	; (8005488 <HAL_RCC_OscConfig+0x510>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052bc:	f7fe ff58 	bl	8004170 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052c4:	f7fe ff54 	bl	8004170 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e177      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80052d6:	4b68      	ldr	r3, [pc, #416]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1f0      	bne.n	80052c4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d030      	beq.n	8005350 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d016      	beq.n	8005324 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052f6:	4b65      	ldr	r3, [pc, #404]	; (800548c <HAL_RCC_OscConfig+0x514>)
 80052f8:	2201      	movs	r2, #1
 80052fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052fc:	f7fe ff38 	bl	8004170 <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005304:	f7fe ff34 	bl	8004170 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e157      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005316:	4b58      	ldr	r3, [pc, #352]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 8005318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0f0      	beq.n	8005304 <HAL_RCC_OscConfig+0x38c>
 8005322:	e015      	b.n	8005350 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005324:	4b59      	ldr	r3, [pc, #356]	; (800548c <HAL_RCC_OscConfig+0x514>)
 8005326:	2200      	movs	r2, #0
 8005328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800532a:	f7fe ff21 	bl	8004170 <HAL_GetTick>
 800532e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005330:	e008      	b.n	8005344 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005332:	f7fe ff1d 	bl	8004170 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e140      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005344:	4b4c      	ldr	r3, [pc, #304]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 8005346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1f0      	bne.n	8005332 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 80b5 	beq.w	80054c8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800535e:	2300      	movs	r3, #0
 8005360:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005362:	4b45      	ldr	r3, [pc, #276]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10d      	bne.n	800538a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800536e:	4b42      	ldr	r3, [pc, #264]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	4a41      	ldr	r2, [pc, #260]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 8005374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005378:	6253      	str	r3, [r2, #36]	; 0x24
 800537a:	4b3f      	ldr	r3, [pc, #252]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005382:	60bb      	str	r3, [r7, #8]
 8005384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005386:	2301      	movs	r3, #1
 8005388:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800538a:	4b41      	ldr	r3, [pc, #260]	; (8005490 <HAL_RCC_OscConfig+0x518>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005392:	2b00      	cmp	r3, #0
 8005394:	d118      	bne.n	80053c8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005396:	4b3e      	ldr	r3, [pc, #248]	; (8005490 <HAL_RCC_OscConfig+0x518>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a3d      	ldr	r2, [pc, #244]	; (8005490 <HAL_RCC_OscConfig+0x518>)
 800539c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053a2:	f7fe fee5 	bl	8004170 <HAL_GetTick>
 80053a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a8:	e008      	b.n	80053bc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053aa:	f7fe fee1 	bl	8004170 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b64      	cmp	r3, #100	; 0x64
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e104      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053bc:	4b34      	ldr	r3, [pc, #208]	; (8005490 <HAL_RCC_OscConfig+0x518>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0f0      	beq.n	80053aa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d106      	bne.n	80053de <HAL_RCC_OscConfig+0x466>
 80053d0:	4b29      	ldr	r3, [pc, #164]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 80053d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d4:	4a28      	ldr	r2, [pc, #160]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 80053d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053da:	6353      	str	r3, [r2, #52]	; 0x34
 80053dc:	e02d      	b.n	800543a <HAL_RCC_OscConfig+0x4c2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10c      	bne.n	8005400 <HAL_RCC_OscConfig+0x488>
 80053e6:	4b24      	ldr	r3, [pc, #144]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 80053e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ea:	4a23      	ldr	r2, [pc, #140]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 80053ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053f0:	6353      	str	r3, [r2, #52]	; 0x34
 80053f2:	4b21      	ldr	r3, [pc, #132]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 80053f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f6:	4a20      	ldr	r2, [pc, #128]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 80053f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053fc:	6353      	str	r3, [r2, #52]	; 0x34
 80053fe:	e01c      	b.n	800543a <HAL_RCC_OscConfig+0x4c2>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	2b05      	cmp	r3, #5
 8005406:	d10c      	bne.n	8005422 <HAL_RCC_OscConfig+0x4aa>
 8005408:	4b1b      	ldr	r3, [pc, #108]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 800540a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540c:	4a1a      	ldr	r2, [pc, #104]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 800540e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005412:	6353      	str	r3, [r2, #52]	; 0x34
 8005414:	4b18      	ldr	r3, [pc, #96]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 8005416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005418:	4a17      	ldr	r2, [pc, #92]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 800541a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800541e:	6353      	str	r3, [r2, #52]	; 0x34
 8005420:	e00b      	b.n	800543a <HAL_RCC_OscConfig+0x4c2>
 8005422:	4b15      	ldr	r3, [pc, #84]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 8005424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005426:	4a14      	ldr	r2, [pc, #80]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 8005428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800542c:	6353      	str	r3, [r2, #52]	; 0x34
 800542e:	4b12      	ldr	r3, [pc, #72]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 8005430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005432:	4a11      	ldr	r2, [pc, #68]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 8005434:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005438:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d015      	beq.n	800546e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005442:	f7fe fe95 	bl	8004170 <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005448:	e00a      	b.n	8005460 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800544a:	f7fe fe91 	bl	8004170 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	f241 3288 	movw	r2, #5000	; 0x1388
 8005458:	4293      	cmp	r3, r2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e0b2      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005460:	4b05      	ldr	r3, [pc, #20]	; (8005478 <HAL_RCC_OscConfig+0x500>)
 8005462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0ee      	beq.n	800544a <HAL_RCC_OscConfig+0x4d2>
 800546c:	e023      	b.n	80054b6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800546e:	f7fe fe7f 	bl	8004170 <HAL_GetTick>
 8005472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005474:	e019      	b.n	80054aa <HAL_RCC_OscConfig+0x532>
 8005476:	bf00      	nop
 8005478:	40023800 	.word	0x40023800
 800547c:	08009fd0 	.word	0x08009fd0
 8005480:	20000008 	.word	0x20000008
 8005484:	200000dc 	.word	0x200000dc
 8005488:	42470020 	.word	0x42470020
 800548c:	42470680 	.word	0x42470680
 8005490:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005494:	f7fe fe6c 	bl	8004170 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e08d      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054aa:	4b49      	ldr	r3, [pc, #292]	; (80055d0 <HAL_RCC_OscConfig+0x658>)
 80054ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1ee      	bne.n	8005494 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054b6:	7ffb      	ldrb	r3, [r7, #31]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d105      	bne.n	80054c8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054bc:	4b44      	ldr	r3, [pc, #272]	; (80055d0 <HAL_RCC_OscConfig+0x658>)
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	4a43      	ldr	r2, [pc, #268]	; (80055d0 <HAL_RCC_OscConfig+0x658>)
 80054c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054c6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d079      	beq.n	80055c4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	2b0c      	cmp	r3, #12
 80054d4:	d056      	beq.n	8005584 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d13b      	bne.n	8005556 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054de:	4b3d      	ldr	r3, [pc, #244]	; (80055d4 <HAL_RCC_OscConfig+0x65c>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e4:	f7fe fe44 	bl	8004170 <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ec:	f7fe fe40 	bl	8004170 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e063      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054fe:	4b34      	ldr	r3, [pc, #208]	; (80055d0 <HAL_RCC_OscConfig+0x658>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1f0      	bne.n	80054ec <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800550a:	4b31      	ldr	r3, [pc, #196]	; (80055d0 <HAL_RCC_OscConfig+0x658>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551a:	4319      	orrs	r1, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005520:	430b      	orrs	r3, r1
 8005522:	492b      	ldr	r1, [pc, #172]	; (80055d0 <HAL_RCC_OscConfig+0x658>)
 8005524:	4313      	orrs	r3, r2
 8005526:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005528:	4b2a      	ldr	r3, [pc, #168]	; (80055d4 <HAL_RCC_OscConfig+0x65c>)
 800552a:	2201      	movs	r2, #1
 800552c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552e:	f7fe fe1f 	bl	8004170 <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005536:	f7fe fe1b 	bl	8004170 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e03e      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005548:	4b21      	ldr	r3, [pc, #132]	; (80055d0 <HAL_RCC_OscConfig+0x658>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0f0      	beq.n	8005536 <HAL_RCC_OscConfig+0x5be>
 8005554:	e036      	b.n	80055c4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005556:	4b1f      	ldr	r3, [pc, #124]	; (80055d4 <HAL_RCC_OscConfig+0x65c>)
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555c:	f7fe fe08 	bl	8004170 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005564:	f7fe fe04 	bl	8004170 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e027      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005576:	4b16      	ldr	r3, [pc, #88]	; (80055d0 <HAL_RCC_OscConfig+0x658>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f0      	bne.n	8005564 <HAL_RCC_OscConfig+0x5ec>
 8005582:	e01f      	b.n	80055c4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e01a      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005590:	4b0f      	ldr	r3, [pc, #60]	; (80055d0 <HAL_RCC_OscConfig+0x658>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d10d      	bne.n	80055c0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d106      	bne.n	80055c0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80055bc:	429a      	cmp	r2, r3
 80055be:	d001      	beq.n	80055c4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3720      	adds	r7, #32
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	40023800 	.word	0x40023800
 80055d4:	42470060 	.word	0x42470060

080055d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e11a      	b.n	8005822 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055ec:	4b8f      	ldr	r3, [pc, #572]	; (800582c <HAL_RCC_ClockConfig+0x254>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d919      	bls.n	800562e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d105      	bne.n	800560c <HAL_RCC_ClockConfig+0x34>
 8005600:	4b8a      	ldr	r3, [pc, #552]	; (800582c <HAL_RCC_ClockConfig+0x254>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a89      	ldr	r2, [pc, #548]	; (800582c <HAL_RCC_ClockConfig+0x254>)
 8005606:	f043 0304 	orr.w	r3, r3, #4
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	4b87      	ldr	r3, [pc, #540]	; (800582c <HAL_RCC_ClockConfig+0x254>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f023 0201 	bic.w	r2, r3, #1
 8005614:	4985      	ldr	r1, [pc, #532]	; (800582c <HAL_RCC_ClockConfig+0x254>)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	4313      	orrs	r3, r2
 800561a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800561c:	4b83      	ldr	r3, [pc, #524]	; (800582c <HAL_RCC_ClockConfig+0x254>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d001      	beq.n	800562e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e0f9      	b.n	8005822 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d008      	beq.n	800564c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800563a:	4b7d      	ldr	r3, [pc, #500]	; (8005830 <HAL_RCC_ClockConfig+0x258>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	497a      	ldr	r1, [pc, #488]	; (8005830 <HAL_RCC_ClockConfig+0x258>)
 8005648:	4313      	orrs	r3, r2
 800564a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 808e 	beq.w	8005776 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2b02      	cmp	r3, #2
 8005660:	d107      	bne.n	8005672 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005662:	4b73      	ldr	r3, [pc, #460]	; (8005830 <HAL_RCC_ClockConfig+0x258>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d121      	bne.n	80056b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e0d7      	b.n	8005822 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b03      	cmp	r3, #3
 8005678:	d107      	bne.n	800568a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800567a:	4b6d      	ldr	r3, [pc, #436]	; (8005830 <HAL_RCC_ClockConfig+0x258>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d115      	bne.n	80056b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e0cb      	b.n	8005822 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d107      	bne.n	80056a2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005692:	4b67      	ldr	r3, [pc, #412]	; (8005830 <HAL_RCC_ClockConfig+0x258>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d109      	bne.n	80056b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e0bf      	b.n	8005822 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80056a2:	4b63      	ldr	r3, [pc, #396]	; (8005830 <HAL_RCC_ClockConfig+0x258>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e0b7      	b.n	8005822 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056b2:	4b5f      	ldr	r3, [pc, #380]	; (8005830 <HAL_RCC_ClockConfig+0x258>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f023 0203 	bic.w	r2, r3, #3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	495c      	ldr	r1, [pc, #368]	; (8005830 <HAL_RCC_ClockConfig+0x258>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056c4:	f7fe fd54 	bl	8004170 <HAL_GetTick>
 80056c8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d112      	bne.n	80056f8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80056d2:	e00a      	b.n	80056ea <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056d4:	f7fe fd4c 	bl	8004170 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e09b      	b.n	8005822 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80056ea:	4b51      	ldr	r3, [pc, #324]	; (8005830 <HAL_RCC_ClockConfig+0x258>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 030c 	and.w	r3, r3, #12
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d1ee      	bne.n	80056d4 <HAL_RCC_ClockConfig+0xfc>
 80056f6:	e03e      	b.n	8005776 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2b03      	cmp	r3, #3
 80056fe:	d112      	bne.n	8005726 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005700:	e00a      	b.n	8005718 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005702:	f7fe fd35 	bl	8004170 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005710:	4293      	cmp	r3, r2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e084      	b.n	8005822 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005718:	4b45      	ldr	r3, [pc, #276]	; (8005830 <HAL_RCC_ClockConfig+0x258>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f003 030c 	and.w	r3, r3, #12
 8005720:	2b0c      	cmp	r3, #12
 8005722:	d1ee      	bne.n	8005702 <HAL_RCC_ClockConfig+0x12a>
 8005724:	e027      	b.n	8005776 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d11d      	bne.n	800576a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800572e:	e00a      	b.n	8005746 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005730:	f7fe fd1e 	bl	8004170 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	f241 3288 	movw	r2, #5000	; 0x1388
 800573e:	4293      	cmp	r3, r2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e06d      	b.n	8005822 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005746:	4b3a      	ldr	r3, [pc, #232]	; (8005830 <HAL_RCC_ClockConfig+0x258>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 030c 	and.w	r3, r3, #12
 800574e:	2b04      	cmp	r3, #4
 8005750:	d1ee      	bne.n	8005730 <HAL_RCC_ClockConfig+0x158>
 8005752:	e010      	b.n	8005776 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005754:	f7fe fd0c 	bl	8004170 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005762:	4293      	cmp	r3, r2
 8005764:	d901      	bls.n	800576a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e05b      	b.n	8005822 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800576a:	4b31      	ldr	r3, [pc, #196]	; (8005830 <HAL_RCC_ClockConfig+0x258>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 030c 	and.w	r3, r3, #12
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1ee      	bne.n	8005754 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005776:	4b2d      	ldr	r3, [pc, #180]	; (800582c <HAL_RCC_ClockConfig+0x254>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d219      	bcs.n	80057b8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d105      	bne.n	8005796 <HAL_RCC_ClockConfig+0x1be>
 800578a:	4b28      	ldr	r3, [pc, #160]	; (800582c <HAL_RCC_ClockConfig+0x254>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a27      	ldr	r2, [pc, #156]	; (800582c <HAL_RCC_ClockConfig+0x254>)
 8005790:	f043 0304 	orr.w	r3, r3, #4
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	4b25      	ldr	r3, [pc, #148]	; (800582c <HAL_RCC_ClockConfig+0x254>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f023 0201 	bic.w	r2, r3, #1
 800579e:	4923      	ldr	r1, [pc, #140]	; (800582c <HAL_RCC_ClockConfig+0x254>)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a6:	4b21      	ldr	r3, [pc, #132]	; (800582c <HAL_RCC_ClockConfig+0x254>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d001      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e034      	b.n	8005822 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d008      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057c4:	4b1a      	ldr	r3, [pc, #104]	; (8005830 <HAL_RCC_ClockConfig+0x258>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	4917      	ldr	r1, [pc, #92]	; (8005830 <HAL_RCC_ClockConfig+0x258>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0308 	and.w	r3, r3, #8
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d009      	beq.n	80057f6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057e2:	4b13      	ldr	r3, [pc, #76]	; (8005830 <HAL_RCC_ClockConfig+0x258>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	490f      	ldr	r1, [pc, #60]	; (8005830 <HAL_RCC_ClockConfig+0x258>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057f6:	f000 f823 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 80057fa:	4602      	mov	r2, r0
 80057fc:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <HAL_RCC_ClockConfig+0x258>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	091b      	lsrs	r3, r3, #4
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	490b      	ldr	r1, [pc, #44]	; (8005834 <HAL_RCC_ClockConfig+0x25c>)
 8005808:	5ccb      	ldrb	r3, [r1, r3]
 800580a:	fa22 f303 	lsr.w	r3, r2, r3
 800580e:	4a0a      	ldr	r2, [pc, #40]	; (8005838 <HAL_RCC_ClockConfig+0x260>)
 8005810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005812:	4b0a      	ldr	r3, [pc, #40]	; (800583c <HAL_RCC_ClockConfig+0x264>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f7fe fc5e 	bl	80040d8 <HAL_InitTick>
 800581c:	4603      	mov	r3, r0
 800581e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005820:	7afb      	ldrb	r3, [r7, #11]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	40023c00 	.word	0x40023c00
 8005830:	40023800 	.word	0x40023800
 8005834:	08009fd0 	.word	0x08009fd0
 8005838:	20000008 	.word	0x20000008
 800583c:	200000dc 	.word	0x200000dc

08005840 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005840:	b5b0      	push	{r4, r5, r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8005846:	4b4d      	ldr	r3, [pc, #308]	; (800597c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 030c 	and.w	r3, r3, #12
 8005852:	2b0c      	cmp	r3, #12
 8005854:	d00c      	beq.n	8005870 <HAL_RCC_GetSysClockFreq+0x30>
 8005856:	2b0c      	cmp	r3, #12
 8005858:	d87c      	bhi.n	8005954 <HAL_RCC_GetSysClockFreq+0x114>
 800585a:	2b04      	cmp	r3, #4
 800585c:	d002      	beq.n	8005864 <HAL_RCC_GetSysClockFreq+0x24>
 800585e:	2b08      	cmp	r3, #8
 8005860:	d003      	beq.n	800586a <HAL_RCC_GetSysClockFreq+0x2a>
 8005862:	e077      	b.n	8005954 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005864:	4b46      	ldr	r3, [pc, #280]	; (8005980 <HAL_RCC_GetSysClockFreq+0x140>)
 8005866:	613b      	str	r3, [r7, #16]
      break;
 8005868:	e082      	b.n	8005970 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800586a:	4b46      	ldr	r3, [pc, #280]	; (8005984 <HAL_RCC_GetSysClockFreq+0x144>)
 800586c:	613b      	str	r3, [r7, #16]
      break;
 800586e:	e07f      	b.n	8005970 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	0c9b      	lsrs	r3, r3, #18
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	4a43      	ldr	r2, [pc, #268]	; (8005988 <HAL_RCC_GetSysClockFreq+0x148>)
 800587a:	5cd3      	ldrb	r3, [r2, r3]
 800587c:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	0d9b      	lsrs	r3, r3, #22
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	3301      	adds	r3, #1
 8005888:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800588a:	4b3c      	ldr	r3, [pc, #240]	; (800597c <HAL_RCC_GetSysClockFreq+0x13c>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d01a      	beq.n	80058cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	461a      	mov	r2, r3
 800589a:	f04f 0300 	mov.w	r3, #0
 800589e:	4939      	ldr	r1, [pc, #228]	; (8005984 <HAL_RCC_GetSysClockFreq+0x144>)
 80058a0:	fb01 f003 	mul.w	r0, r1, r3
 80058a4:	2100      	movs	r1, #0
 80058a6:	fb01 f102 	mul.w	r1, r1, r2
 80058aa:	1844      	adds	r4, r0, r1
 80058ac:	4935      	ldr	r1, [pc, #212]	; (8005984 <HAL_RCC_GetSysClockFreq+0x144>)
 80058ae:	fba2 0101 	umull	r0, r1, r2, r1
 80058b2:	1863      	adds	r3, r4, r1
 80058b4:	4619      	mov	r1, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	461a      	mov	r2, r3
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	f7fa fc5d 	bl	800017c <__aeabi_uldivmod>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4613      	mov	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]
 80058ca:	e040      	b.n	800594e <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	461c      	mov	r4, r3
 80058d0:	f04f 0500 	mov.w	r5, #0
 80058d4:	4620      	mov	r0, r4
 80058d6:	4629      	mov	r1, r5
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	f04f 0300 	mov.w	r3, #0
 80058e0:	014b      	lsls	r3, r1, #5
 80058e2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80058e6:	0142      	lsls	r2, r0, #5
 80058e8:	4610      	mov	r0, r2
 80058ea:	4619      	mov	r1, r3
 80058ec:	1b00      	subs	r0, r0, r4
 80058ee:	eb61 0105 	sbc.w	r1, r1, r5
 80058f2:	f04f 0200 	mov.w	r2, #0
 80058f6:	f04f 0300 	mov.w	r3, #0
 80058fa:	018b      	lsls	r3, r1, #6
 80058fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005900:	0182      	lsls	r2, r0, #6
 8005902:	1a12      	subs	r2, r2, r0
 8005904:	eb63 0301 	sbc.w	r3, r3, r1
 8005908:	f04f 0000 	mov.w	r0, #0
 800590c:	f04f 0100 	mov.w	r1, #0
 8005910:	00d9      	lsls	r1, r3, #3
 8005912:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005916:	00d0      	lsls	r0, r2, #3
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	1912      	adds	r2, r2, r4
 800591e:	eb45 0303 	adc.w	r3, r5, r3
 8005922:	f04f 0000 	mov.w	r0, #0
 8005926:	f04f 0100 	mov.w	r1, #0
 800592a:	0299      	lsls	r1, r3, #10
 800592c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005930:	0290      	lsls	r0, r2, #10
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	4610      	mov	r0, r2
 8005938:	4619      	mov	r1, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	461a      	mov	r2, r3
 800593e:	f04f 0300 	mov.w	r3, #0
 8005942:	f7fa fc1b 	bl	800017c <__aeabi_uldivmod>
 8005946:	4602      	mov	r2, r0
 8005948:	460b      	mov	r3, r1
 800594a:	4613      	mov	r3, r2
 800594c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	613b      	str	r3, [r7, #16]
      break;
 8005952:	e00d      	b.n	8005970 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005954:	4b09      	ldr	r3, [pc, #36]	; (800597c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	0b5b      	lsrs	r3, r3, #13
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	3301      	adds	r3, #1
 8005964:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005968:	fa02 f303 	lsl.w	r3, r2, r3
 800596c:	613b      	str	r3, [r7, #16]
      break;
 800596e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005970:	693b      	ldr	r3, [r7, #16]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bdb0      	pop	{r4, r5, r7, pc}
 800597a:	bf00      	nop
 800597c:	40023800 	.word	0x40023800
 8005980:	00f42400 	.word	0x00f42400
 8005984:	016e3600 	.word	0x016e3600
 8005988:	08009fc4 	.word	0x08009fc4

0800598c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005990:	4b02      	ldr	r3, [pc, #8]	; (800599c <HAL_RCC_GetHCLKFreq+0x10>)
 8005992:	681b      	ldr	r3, [r3, #0]
}
 8005994:	4618      	mov	r0, r3
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr
 800599c:	20000008 	.word	0x20000008

080059a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059a4:	f7ff fff2 	bl	800598c <HAL_RCC_GetHCLKFreq>
 80059a8:	4602      	mov	r2, r0
 80059aa:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	0a1b      	lsrs	r3, r3, #8
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	4903      	ldr	r1, [pc, #12]	; (80059c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059b6:	5ccb      	ldrb	r3, [r1, r3]
 80059b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059bc:	4618      	mov	r0, r3
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40023800 	.word	0x40023800
 80059c4:	08009fe0 	.word	0x08009fe0

080059c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059cc:	f7ff ffde 	bl	800598c <HAL_RCC_GetHCLKFreq>
 80059d0:	4602      	mov	r2, r0
 80059d2:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	0adb      	lsrs	r3, r3, #11
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	4903      	ldr	r1, [pc, #12]	; (80059ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80059de:	5ccb      	ldrb	r3, [r1, r3]
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40023800 	.word	0x40023800
 80059ec:	08009fe0 	.word	0x08009fe0

080059f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80059f8:	2300      	movs	r3, #0
 80059fa:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80059fc:	4b29      	ldr	r3, [pc, #164]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d12c      	bne.n	8005a62 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005a08:	4b26      	ldr	r3, [pc, #152]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d005      	beq.n	8005a20 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005a14:	4b24      	ldr	r3, [pc, #144]	; (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005a1c:	617b      	str	r3, [r7, #20]
 8005a1e:	e016      	b.n	8005a4e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a20:	4b20      	ldr	r3, [pc, #128]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	4a1f      	ldr	r2, [pc, #124]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a2a:	6253      	str	r3, [r2, #36]	; 0x24
 8005a2c:	4b1d      	ldr	r3, [pc, #116]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005a38:	4b1b      	ldr	r3, [pc, #108]	; (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005a40:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a42:	4b18      	ldr	r3, [pc, #96]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	4a17      	ldr	r2, [pc, #92]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a4c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005a54:	d105      	bne.n	8005a62 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a5c:	d101      	bne.n	8005a62 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005a5e:	2301      	movs	r3, #1
 8005a60:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d105      	bne.n	8005a74 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005a68:	4b10      	ldr	r3, [pc, #64]	; (8005aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a0f      	ldr	r2, [pc, #60]	; (8005aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a6e:	f043 0304 	orr.w	r3, r3, #4
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	4b0d      	ldr	r3, [pc, #52]	; (8005aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f023 0201 	bic.w	r2, r3, #1
 8005a7c:	490b      	ldr	r1, [pc, #44]	; (8005aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a84:	4b09      	ldr	r3, [pc, #36]	; (8005aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d001      	beq.n	8005a96 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	371c      	adds	r7, #28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bc80      	pop	{r7}
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	40023800 	.word	0x40023800
 8005aa8:	40007000 	.word	0x40007000
 8005aac:	40023c00 	.word	0x40023c00

08005ab0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e07b      	b.n	8005bba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d108      	bne.n	8005adc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ad2:	d009      	beq.n	8005ae8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	61da      	str	r2, [r3, #28]
 8005ada:	e005      	b.n	8005ae8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fc fb28 	bl	8002158 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	431a      	orrs	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b62:	431a      	orrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6c:	ea42 0103 	orr.w	r1, r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	0c1b      	lsrs	r3, r3, #16
 8005b86:	f003 0104 	and.w	r1, r3, #4
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	f003 0210 	and.w	r2, r3, #16
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69da      	ldr	r2, [r3, #28]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ba8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b088      	sub	sp, #32
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	603b      	str	r3, [r7, #0]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d101      	bne.n	8005be4 <HAL_SPI_Transmit+0x22>
 8005be0:	2302      	movs	r3, #2
 8005be2:	e126      	b.n	8005e32 <HAL_SPI_Transmit+0x270>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bec:	f7fe fac0 	bl	8004170 <HAL_GetTick>
 8005bf0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005bf2:	88fb      	ldrh	r3, [r7, #6]
 8005bf4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d002      	beq.n	8005c08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c02:	2302      	movs	r3, #2
 8005c04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c06:	e10b      	b.n	8005e20 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <HAL_SPI_Transmit+0x52>
 8005c0e:	88fb      	ldrh	r3, [r7, #6]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d102      	bne.n	8005c1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c18:	e102      	b.n	8005e20 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2203      	movs	r2, #3
 8005c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	88fa      	ldrh	r2, [r7, #6]
 8005c32:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	88fa      	ldrh	r2, [r7, #6]
 8005c38:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c60:	d10f      	bne.n	8005c82 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d007      	beq.n	8005ca0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ca8:	d14b      	bne.n	8005d42 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <HAL_SPI_Transmit+0xf6>
 8005cb2:	8afb      	ldrh	r3, [r7, #22]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d13e      	bne.n	8005d36 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	881a      	ldrh	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	1c9a      	adds	r2, r3, #2
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005cdc:	e02b      	b.n	8005d36 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d112      	bne.n	8005d12 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf0:	881a      	ldrh	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfc:	1c9a      	adds	r2, r3, #2
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d10:	e011      	b.n	8005d36 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d12:	f7fe fa2d 	bl	8004170 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d803      	bhi.n	8005d2a <HAL_SPI_Transmit+0x168>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d28:	d102      	bne.n	8005d30 <HAL_SPI_Transmit+0x16e>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d102      	bne.n	8005d36 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d34:	e074      	b.n	8005e20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1ce      	bne.n	8005cde <HAL_SPI_Transmit+0x11c>
 8005d40:	e04c      	b.n	8005ddc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <HAL_SPI_Transmit+0x18e>
 8005d4a:	8afb      	ldrh	r3, [r7, #22]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d140      	bne.n	8005dd2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	330c      	adds	r3, #12
 8005d5a:	7812      	ldrb	r2, [r2, #0]
 8005d5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d76:	e02c      	b.n	8005dd2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d113      	bne.n	8005dae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	330c      	adds	r3, #12
 8005d90:	7812      	ldrb	r2, [r2, #0]
 8005d92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	86da      	strh	r2, [r3, #54]	; 0x36
 8005dac:	e011      	b.n	8005dd2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dae:	f7fe f9df 	bl	8004170 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d803      	bhi.n	8005dc6 <HAL_SPI_Transmit+0x204>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc4:	d102      	bne.n	8005dcc <HAL_SPI_Transmit+0x20a>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d102      	bne.n	8005dd2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005dd0:	e026      	b.n	8005e20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1cd      	bne.n	8005d78 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	6839      	ldr	r1, [r7, #0]
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f000 fa55 	bl	8006290 <SPI_EndRxTxTransaction>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2220      	movs	r2, #32
 8005df0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10a      	bne.n	8005e10 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	613b      	str	r3, [r7, #16]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	613b      	str	r3, [r7, #16]
 8005e0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	77fb      	strb	r3, [r7, #31]
 8005e1c:	e000      	b.n	8005e20 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005e1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e30:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3720      	adds	r7, #32
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b08c      	sub	sp, #48	; 0x30
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	60f8      	str	r0, [r7, #12]
 8005e42:	60b9      	str	r1, [r7, #8]
 8005e44:	607a      	str	r2, [r7, #4]
 8005e46:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d101      	bne.n	8005e60 <HAL_SPI_TransmitReceive+0x26>
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	e18a      	b.n	8006176 <HAL_SPI_TransmitReceive+0x33c>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e68:	f7fe f982 	bl	8004170 <HAL_GetTick>
 8005e6c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e7e:	887b      	ldrh	r3, [r7, #2]
 8005e80:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d00f      	beq.n	8005eaa <HAL_SPI_TransmitReceive+0x70>
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e90:	d107      	bne.n	8005ea2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d103      	bne.n	8005ea2 <HAL_SPI_TransmitReceive+0x68>
 8005e9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d003      	beq.n	8005eaa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ea8:	e15b      	b.n	8006162 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <HAL_SPI_TransmitReceive+0x82>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_SPI_TransmitReceive+0x82>
 8005eb6:	887b      	ldrh	r3, [r7, #2]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d103      	bne.n	8005ec4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ec2:	e14e      	b.n	8006162 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d003      	beq.n	8005ed8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2205      	movs	r2, #5
 8005ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	887a      	ldrh	r2, [r7, #2]
 8005ee8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	887a      	ldrh	r2, [r7, #2]
 8005eee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	887a      	ldrh	r2, [r7, #2]
 8005efa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	887a      	ldrh	r2, [r7, #2]
 8005f00:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f18:	2b40      	cmp	r3, #64	; 0x40
 8005f1a:	d007      	beq.n	8005f2c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f34:	d178      	bne.n	8006028 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <HAL_SPI_TransmitReceive+0x10a>
 8005f3e:	8b7b      	ldrh	r3, [r7, #26]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d166      	bne.n	8006012 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	881a      	ldrh	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f54:	1c9a      	adds	r2, r3, #2
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	3b01      	subs	r3, #1
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f68:	e053      	b.n	8006012 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d11b      	bne.n	8005fb0 <HAL_SPI_TransmitReceive+0x176>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d016      	beq.n	8005fb0 <HAL_SPI_TransmitReceive+0x176>
 8005f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d113      	bne.n	8005fb0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8c:	881a      	ldrh	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f98:	1c9a      	adds	r2, r3, #2
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d119      	bne.n	8005ff2 <HAL_SPI_TransmitReceive+0x1b8>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d014      	beq.n	8005ff2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	b292      	uxth	r2, r2
 8005fd4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fda:	1c9a      	adds	r2, r3, #2
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ff2:	f7fe f8bd 	bl	8004170 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d807      	bhi.n	8006012 <HAL_SPI_TransmitReceive+0x1d8>
 8006002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006008:	d003      	beq.n	8006012 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006010:	e0a7      	b.n	8006162 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006016:	b29b      	uxth	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1a6      	bne.n	8005f6a <HAL_SPI_TransmitReceive+0x130>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1a1      	bne.n	8005f6a <HAL_SPI_TransmitReceive+0x130>
 8006026:	e07c      	b.n	8006122 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <HAL_SPI_TransmitReceive+0x1fc>
 8006030:	8b7b      	ldrh	r3, [r7, #26]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d16b      	bne.n	800610e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	330c      	adds	r3, #12
 8006040:	7812      	ldrb	r2, [r2, #0]
 8006042:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006052:	b29b      	uxth	r3, r3
 8006054:	3b01      	subs	r3, #1
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800605c:	e057      	b.n	800610e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f003 0302 	and.w	r3, r3, #2
 8006068:	2b02      	cmp	r3, #2
 800606a:	d11c      	bne.n	80060a6 <HAL_SPI_TransmitReceive+0x26c>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d017      	beq.n	80060a6 <HAL_SPI_TransmitReceive+0x26c>
 8006076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006078:	2b01      	cmp	r3, #1
 800607a:	d114      	bne.n	80060a6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	330c      	adds	r3, #12
 8006086:	7812      	ldrb	r2, [r2, #0]
 8006088:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006098:	b29b      	uxth	r3, r3
 800609a:	3b01      	subs	r3, #1
 800609c:	b29a      	uxth	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d119      	bne.n	80060e8 <HAL_SPI_TransmitReceive+0x2ae>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d014      	beq.n	80060e8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68da      	ldr	r2, [r3, #12]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	b2d2      	uxtb	r2, r2
 80060ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060da:	b29b      	uxth	r3, r3
 80060dc:	3b01      	subs	r3, #1
 80060de:	b29a      	uxth	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060e4:	2301      	movs	r3, #1
 80060e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80060e8:	f7fe f842 	bl	8004170 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d803      	bhi.n	8006100 <HAL_SPI_TransmitReceive+0x2c6>
 80060f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fe:	d102      	bne.n	8006106 <HAL_SPI_TransmitReceive+0x2cc>
 8006100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006102:	2b00      	cmp	r3, #0
 8006104:	d103      	bne.n	800610e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800610c:	e029      	b.n	8006162 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006112:	b29b      	uxth	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1a2      	bne.n	800605e <HAL_SPI_TransmitReceive+0x224>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d19d      	bne.n	800605e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006124:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 f8b2 	bl	8006290 <SPI_EndRxTxTransaction>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d006      	beq.n	8006140 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2220      	movs	r2, #32
 800613c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800613e:	e010      	b.n	8006162 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10b      	bne.n	8006160 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006148:	2300      	movs	r3, #0
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	e000      	b.n	8006162 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006160:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006172:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006176:	4618      	mov	r0, r3
 8006178:	3730      	adds	r7, #48	; 0x30
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	603b      	str	r3, [r7, #0]
 800618c:	4613      	mov	r3, r2
 800618e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006190:	f7fd ffee 	bl	8004170 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	1a9b      	subs	r3, r3, r2
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	4413      	add	r3, r2
 800619e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061a0:	f7fd ffe6 	bl	8004170 <HAL_GetTick>
 80061a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061a6:	4b39      	ldr	r3, [pc, #228]	; (800628c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	015b      	lsls	r3, r3, #5
 80061ac:	0d1b      	lsrs	r3, r3, #20
 80061ae:	69fa      	ldr	r2, [r7, #28]
 80061b0:	fb02 f303 	mul.w	r3, r2, r3
 80061b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061b6:	e054      	b.n	8006262 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061be:	d050      	beq.n	8006262 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061c0:	f7fd ffd6 	bl	8004170 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	69fa      	ldr	r2, [r7, #28]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d902      	bls.n	80061d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d13d      	bne.n	8006252 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061ee:	d111      	bne.n	8006214 <SPI_WaitFlagStateUntilTimeout+0x94>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f8:	d004      	beq.n	8006204 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006202:	d107      	bne.n	8006214 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006212:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800621c:	d10f      	bne.n	800623e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800623c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e017      	b.n	8006282 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d101      	bne.n	800625c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	3b01      	subs	r3, #1
 8006260:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	4013      	ands	r3, r2
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	429a      	cmp	r2, r3
 8006270:	bf0c      	ite	eq
 8006272:	2301      	moveq	r3, #1
 8006274:	2300      	movne	r3, #0
 8006276:	b2db      	uxtb	r3, r3
 8006278:	461a      	mov	r2, r3
 800627a:	79fb      	ldrb	r3, [r7, #7]
 800627c:	429a      	cmp	r2, r3
 800627e:	d19b      	bne.n	80061b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3720      	adds	r7, #32
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	20000008 	.word	0x20000008

08006290 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af02      	add	r7, sp, #8
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800629c:	4b1b      	ldr	r3, [pc, #108]	; (800630c <SPI_EndRxTxTransaction+0x7c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1b      	ldr	r2, [pc, #108]	; (8006310 <SPI_EndRxTxTransaction+0x80>)
 80062a2:	fba2 2303 	umull	r2, r3, r2, r3
 80062a6:	0d5b      	lsrs	r3, r3, #21
 80062a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062ac:	fb02 f303 	mul.w	r3, r2, r3
 80062b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ba:	d112      	bne.n	80062e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2200      	movs	r2, #0
 80062c4:	2180      	movs	r1, #128	; 0x80
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f7ff ff5a 	bl	8006180 <SPI_WaitFlagStateUntilTimeout>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d016      	beq.n	8006300 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d6:	f043 0220 	orr.w	r2, r3, #32
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e00f      	b.n	8006302 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00a      	beq.n	80062fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	3b01      	subs	r3, #1
 80062ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f8:	2b80      	cmp	r3, #128	; 0x80
 80062fa:	d0f2      	beq.n	80062e2 <SPI_EndRxTxTransaction+0x52>
 80062fc:	e000      	b.n	8006300 <SPI_EndRxTxTransaction+0x70>
        break;
 80062fe:	bf00      	nop
  }

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	20000008 	.word	0x20000008
 8006310:	165e9f81 	.word	0x165e9f81

08006314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e031      	b.n	800638a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d106      	bne.n	8006340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7fb ffd4 	bl	80022e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3304      	adds	r3, #4
 8006350:	4619      	mov	r1, r3
 8006352:	4610      	mov	r0, r2
 8006354:	f000 faa4 	bl	80068a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d001      	beq.n	80063ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e032      	b.n	8006412 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2202      	movs	r2, #2
 80063b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063bc:	d00e      	beq.n	80063dc <HAL_TIM_Base_Start+0x48>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a16      	ldr	r2, [pc, #88]	; (800641c <HAL_TIM_Base_Start+0x88>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d009      	beq.n	80063dc <HAL_TIM_Base_Start+0x48>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a14      	ldr	r2, [pc, #80]	; (8006420 <HAL_TIM_Base_Start+0x8c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d004      	beq.n	80063dc <HAL_TIM_Base_Start+0x48>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a13      	ldr	r2, [pc, #76]	; (8006424 <HAL_TIM_Base_Start+0x90>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d111      	bne.n	8006400 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2b06      	cmp	r3, #6
 80063ec:	d010      	beq.n	8006410 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f042 0201 	orr.w	r2, r2, #1
 80063fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063fe:	e007      	b.n	8006410 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr
 800641c:	40000400 	.word	0x40000400
 8006420:	40000800 	.word	0x40000800
 8006424:	40010800 	.word	0x40010800

08006428 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b01      	cmp	r3, #1
 800643a:	d001      	beq.n	8006440 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e03a      	b.n	80064b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0201 	orr.w	r2, r2, #1
 8006456:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006460:	d00e      	beq.n	8006480 <HAL_TIM_Base_Start_IT+0x58>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a16      	ldr	r2, [pc, #88]	; (80064c0 <HAL_TIM_Base_Start_IT+0x98>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d009      	beq.n	8006480 <HAL_TIM_Base_Start_IT+0x58>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a14      	ldr	r2, [pc, #80]	; (80064c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d004      	beq.n	8006480 <HAL_TIM_Base_Start_IT+0x58>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a13      	ldr	r2, [pc, #76]	; (80064c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d111      	bne.n	80064a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f003 0307 	and.w	r3, r3, #7
 800648a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b06      	cmp	r3, #6
 8006490:	d010      	beq.n	80064b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f042 0201 	orr.w	r2, r2, #1
 80064a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a2:	e007      	b.n	80064b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0201 	orr.w	r2, r2, #1
 80064b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bc80      	pop	{r7}
 80064be:	4770      	bx	lr
 80064c0:	40000400 	.word	0x40000400
 80064c4:	40000800 	.word	0x40000800
 80064c8:	40010800 	.word	0x40010800

080064cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0201 	bic.w	r2, r2, #1
 80064e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6a1a      	ldr	r2, [r3, #32]
 80064ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80064ee:	4013      	ands	r3, r2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d107      	bne.n	8006504 <HAL_TIM_Base_Stop_IT+0x38>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0201 	bic.w	r2, r2, #1
 8006502:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	bc80      	pop	{r7}
 8006516:	4770      	bx	lr

08006518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b02      	cmp	r3, #2
 800652c:	d122      	bne.n	8006574 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b02      	cmp	r3, #2
 800653a:	d11b      	bne.n	8006574 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f06f 0202 	mvn.w	r2, #2
 8006544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	f003 0303 	and.w	r3, r3, #3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f985 	bl	800686a <HAL_TIM_IC_CaptureCallback>
 8006560:	e005      	b.n	800656e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f978 	bl	8006858 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f987 	bl	800687c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 0304 	and.w	r3, r3, #4
 800657e:	2b04      	cmp	r3, #4
 8006580:	d122      	bne.n	80065c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b04      	cmp	r3, #4
 800658e:	d11b      	bne.n	80065c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f06f 0204 	mvn.w	r2, #4
 8006598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2202      	movs	r2, #2
 800659e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f95b 	bl	800686a <HAL_TIM_IC_CaptureCallback>
 80065b4:	e005      	b.n	80065c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f94e 	bl	8006858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f95d 	bl	800687c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f003 0308 	and.w	r3, r3, #8
 80065d2:	2b08      	cmp	r3, #8
 80065d4:	d122      	bne.n	800661c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f003 0308 	and.w	r3, r3, #8
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d11b      	bne.n	800661c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f06f 0208 	mvn.w	r2, #8
 80065ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2204      	movs	r2, #4
 80065f2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f931 	bl	800686a <HAL_TIM_IC_CaptureCallback>
 8006608:	e005      	b.n	8006616 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f924 	bl	8006858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f933 	bl	800687c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	f003 0310 	and.w	r3, r3, #16
 8006626:	2b10      	cmp	r3, #16
 8006628:	d122      	bne.n	8006670 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f003 0310 	and.w	r3, r3, #16
 8006634:	2b10      	cmp	r3, #16
 8006636:	d11b      	bne.n	8006670 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f06f 0210 	mvn.w	r2, #16
 8006640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2208      	movs	r2, #8
 8006646:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f907 	bl	800686a <HAL_TIM_IC_CaptureCallback>
 800665c:	e005      	b.n	800666a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f8fa 	bl	8006858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f909 	bl	800687c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b01      	cmp	r3, #1
 800667c:	d10e      	bne.n	800669c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b01      	cmp	r3, #1
 800668a:	d107      	bne.n	800669c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f06f 0201 	mvn.w	r2, #1
 8006694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7fa fca4 	bl	8000fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a6:	2b40      	cmp	r3, #64	; 0x40
 80066a8:	d10e      	bne.n	80066c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b4:	2b40      	cmp	r3, #64	; 0x40
 80066b6:	d107      	bne.n	80066c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f8e3 	bl	800688e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066c8:	bf00      	nop
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d101      	bne.n	80066e8 <HAL_TIM_ConfigClockSource+0x18>
 80066e4:	2302      	movs	r3, #2
 80066e6:	e0b3      	b.n	8006850 <HAL_TIM_ConfigClockSource+0x180>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006706:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800670e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006720:	d03e      	beq.n	80067a0 <HAL_TIM_ConfigClockSource+0xd0>
 8006722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006726:	f200 8087 	bhi.w	8006838 <HAL_TIM_ConfigClockSource+0x168>
 800672a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800672e:	f000 8085 	beq.w	800683c <HAL_TIM_ConfigClockSource+0x16c>
 8006732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006736:	d87f      	bhi.n	8006838 <HAL_TIM_ConfigClockSource+0x168>
 8006738:	2b70      	cmp	r3, #112	; 0x70
 800673a:	d01a      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0xa2>
 800673c:	2b70      	cmp	r3, #112	; 0x70
 800673e:	d87b      	bhi.n	8006838 <HAL_TIM_ConfigClockSource+0x168>
 8006740:	2b60      	cmp	r3, #96	; 0x60
 8006742:	d050      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x116>
 8006744:	2b60      	cmp	r3, #96	; 0x60
 8006746:	d877      	bhi.n	8006838 <HAL_TIM_ConfigClockSource+0x168>
 8006748:	2b50      	cmp	r3, #80	; 0x50
 800674a:	d03c      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0xf6>
 800674c:	2b50      	cmp	r3, #80	; 0x50
 800674e:	d873      	bhi.n	8006838 <HAL_TIM_ConfigClockSource+0x168>
 8006750:	2b40      	cmp	r3, #64	; 0x40
 8006752:	d058      	beq.n	8006806 <HAL_TIM_ConfigClockSource+0x136>
 8006754:	2b40      	cmp	r3, #64	; 0x40
 8006756:	d86f      	bhi.n	8006838 <HAL_TIM_ConfigClockSource+0x168>
 8006758:	2b30      	cmp	r3, #48	; 0x30
 800675a:	d064      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x156>
 800675c:	2b30      	cmp	r3, #48	; 0x30
 800675e:	d86b      	bhi.n	8006838 <HAL_TIM_ConfigClockSource+0x168>
 8006760:	2b20      	cmp	r3, #32
 8006762:	d060      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x156>
 8006764:	2b20      	cmp	r3, #32
 8006766:	d867      	bhi.n	8006838 <HAL_TIM_ConfigClockSource+0x168>
 8006768:	2b00      	cmp	r3, #0
 800676a:	d05c      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x156>
 800676c:	2b10      	cmp	r3, #16
 800676e:	d05a      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006770:	e062      	b.n	8006838 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6818      	ldr	r0, [r3, #0]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	6899      	ldr	r1, [r3, #8]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f000 f974 	bl	8006a6e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006794:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	609a      	str	r2, [r3, #8]
      break;
 800679e:	e04e      	b.n	800683e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6818      	ldr	r0, [r3, #0]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	6899      	ldr	r1, [r3, #8]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f000 f95d 	bl	8006a6e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689a      	ldr	r2, [r3, #8]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067c2:	609a      	str	r2, [r3, #8]
      break;
 80067c4:	e03b      	b.n	800683e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	6859      	ldr	r1, [r3, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	461a      	mov	r2, r3
 80067d4:	f000 f8d4 	bl	8006980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2150      	movs	r1, #80	; 0x50
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 f92b 	bl	8006a3a <TIM_ITRx_SetConfig>
      break;
 80067e4:	e02b      	b.n	800683e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6818      	ldr	r0, [r3, #0]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	6859      	ldr	r1, [r3, #4]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	461a      	mov	r2, r3
 80067f4:	f000 f8f2 	bl	80069dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2160      	movs	r1, #96	; 0x60
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 f91b 	bl	8006a3a <TIM_ITRx_SetConfig>
      break;
 8006804:	e01b      	b.n	800683e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	6859      	ldr	r1, [r3, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	461a      	mov	r2, r3
 8006814:	f000 f8b4 	bl	8006980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2140      	movs	r1, #64	; 0x40
 800681e:	4618      	mov	r0, r3
 8006820:	f000 f90b 	bl	8006a3a <TIM_ITRx_SetConfig>
      break;
 8006824:	e00b      	b.n	800683e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4619      	mov	r1, r3
 8006830:	4610      	mov	r0, r2
 8006832:	f000 f902 	bl	8006a3a <TIM_ITRx_SetConfig>
        break;
 8006836:	e002      	b.n	800683e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006838:	bf00      	nop
 800683a:	e000      	b.n	800683e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800683c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	bc80      	pop	{r7}
 8006868:	4770      	bx	lr

0800686a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006872:	bf00      	nop
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr

0800687c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	bc80      	pop	{r7}
 800688c:	4770      	bx	lr

0800688e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	bc80      	pop	{r7}
 800689e:	4770      	bx	lr

080068a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b6:	d00f      	beq.n	80068d8 <TIM_Base_SetConfig+0x38>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a2b      	ldr	r2, [pc, #172]	; (8006968 <TIM_Base_SetConfig+0xc8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00b      	beq.n	80068d8 <TIM_Base_SetConfig+0x38>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a2a      	ldr	r2, [pc, #168]	; (800696c <TIM_Base_SetConfig+0xcc>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d007      	beq.n	80068d8 <TIM_Base_SetConfig+0x38>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a29      	ldr	r2, [pc, #164]	; (8006970 <TIM_Base_SetConfig+0xd0>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d003      	beq.n	80068d8 <TIM_Base_SetConfig+0x38>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a28      	ldr	r2, [pc, #160]	; (8006974 <TIM_Base_SetConfig+0xd4>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d108      	bne.n	80068ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f0:	d017      	beq.n	8006922 <TIM_Base_SetConfig+0x82>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a1c      	ldr	r2, [pc, #112]	; (8006968 <TIM_Base_SetConfig+0xc8>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d013      	beq.n	8006922 <TIM_Base_SetConfig+0x82>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a1b      	ldr	r2, [pc, #108]	; (800696c <TIM_Base_SetConfig+0xcc>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d00f      	beq.n	8006922 <TIM_Base_SetConfig+0x82>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a1a      	ldr	r2, [pc, #104]	; (8006970 <TIM_Base_SetConfig+0xd0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d00b      	beq.n	8006922 <TIM_Base_SetConfig+0x82>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a19      	ldr	r2, [pc, #100]	; (8006974 <TIM_Base_SetConfig+0xd4>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d007      	beq.n	8006922 <TIM_Base_SetConfig+0x82>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a18      	ldr	r2, [pc, #96]	; (8006978 <TIM_Base_SetConfig+0xd8>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d003      	beq.n	8006922 <TIM_Base_SetConfig+0x82>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a17      	ldr	r2, [pc, #92]	; (800697c <TIM_Base_SetConfig+0xdc>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d108      	bne.n	8006934 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4313      	orrs	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	4313      	orrs	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	615a      	str	r2, [r3, #20]
}
 800695e:	bf00      	nop
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	bc80      	pop	{r7}
 8006966:	4770      	bx	lr
 8006968:	40000400 	.word	0x40000400
 800696c:	40000800 	.word	0x40000800
 8006970:	40000c00 	.word	0x40000c00
 8006974:	40010800 	.word	0x40010800
 8006978:	40010c00 	.word	0x40010c00
 800697c:	40011000 	.word	0x40011000

08006980 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	f023 0201 	bic.w	r2, r3, #1
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f023 030a 	bic.w	r3, r3, #10
 80069bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	621a      	str	r2, [r3, #32]
}
 80069d2:	bf00      	nop
 80069d4:	371c      	adds	r7, #28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr

080069dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	f023 0210 	bic.w	r2, r3, #16
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	031b      	lsls	r3, r3, #12
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	011b      	lsls	r3, r3, #4
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	621a      	str	r2, [r3, #32]
}
 8006a30:	bf00      	nop
 8006a32:	371c      	adds	r7, #28
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bc80      	pop	{r7}
 8006a38:	4770      	bx	lr

08006a3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b085      	sub	sp, #20
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	f043 0307 	orr.w	r3, r3, #7
 8006a5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	609a      	str	r2, [r3, #8]
}
 8006a64:	bf00      	nop
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bc80      	pop	{r7}
 8006a6c:	4770      	bx	lr

08006a6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b087      	sub	sp, #28
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	60f8      	str	r0, [r7, #12]
 8006a76:	60b9      	str	r1, [r7, #8]
 8006a78:	607a      	str	r2, [r7, #4]
 8006a7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	021a      	lsls	r2, r3, #8
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	431a      	orrs	r2, r3
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	609a      	str	r2, [r3, #8]
}
 8006aa2:	bf00      	nop
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bc80      	pop	{r7}
 8006aaa:	4770      	bx	lr

08006aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d101      	bne.n	8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e046      	b.n	8006b52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b06:	d00e      	beq.n	8006b26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a13      	ldr	r2, [pc, #76]	; (8006b5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d009      	beq.n	8006b26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a12      	ldr	r2, [pc, #72]	; (8006b60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d004      	beq.n	8006b26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a10      	ldr	r2, [pc, #64]	; (8006b64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d10c      	bne.n	8006b40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr
 8006b5c:	40000400 	.word	0x40000400
 8006b60:	40000800 	.word	0x40000800
 8006b64:	40010800 	.word	0x40010800

08006b68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e03f      	b.n	8006bfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d106      	bne.n	8006b94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7fb fc22 	bl	80023d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2224      	movs	r2, #36	; 0x24
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006baa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f9a7 	bl	8006f00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	691a      	ldr	r2, [r3, #16]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	695a      	ldr	r2, [r3, #20]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68da      	ldr	r2, [r3, #12]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006be0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2220      	movs	r2, #32
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b08a      	sub	sp, #40	; 0x28
 8006c06:	af02      	add	r7, sp, #8
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	603b      	str	r3, [r7, #0]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b20      	cmp	r3, #32
 8006c20:	d17c      	bne.n	8006d1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <HAL_UART_Transmit+0x2c>
 8006c28:	88fb      	ldrh	r3, [r7, #6]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e075      	b.n	8006d1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d101      	bne.n	8006c40 <HAL_UART_Transmit+0x3e>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e06e      	b.n	8006d1e <HAL_UART_Transmit+0x11c>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2221      	movs	r2, #33	; 0x21
 8006c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c56:	f7fd fa8b 	bl	8004170 <HAL_GetTick>
 8006c5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	88fa      	ldrh	r2, [r7, #6]
 8006c60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	88fa      	ldrh	r2, [r7, #6]
 8006c66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c70:	d108      	bne.n	8006c84 <HAL_UART_Transmit+0x82>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d104      	bne.n	8006c84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	61bb      	str	r3, [r7, #24]
 8006c82:	e003      	b.n	8006c8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006c94:	e02a      	b.n	8006cec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2180      	movs	r1, #128	; 0x80
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 f8e2 	bl	8006e6a <UART_WaitOnFlagUntilTimeout>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e036      	b.n	8006d1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10b      	bne.n	8006cce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	3302      	adds	r3, #2
 8006cca:	61bb      	str	r3, [r7, #24]
 8006ccc:	e007      	b.n	8006cde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	781a      	ldrb	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1cf      	bne.n	8006c96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2140      	movs	r1, #64	; 0x40
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 f8b2 	bl	8006e6a <UART_WaitOnFlagUntilTimeout>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e006      	b.n	8006d1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e000      	b.n	8006d1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006d1c:	2302      	movs	r3, #2
  }
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3720      	adds	r7, #32
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b08a      	sub	sp, #40	; 0x28
 8006d2a:	af02      	add	r7, sp, #8
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	603b      	str	r3, [r7, #0]
 8006d32:	4613      	mov	r3, r2
 8006d34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b20      	cmp	r3, #32
 8006d44:	f040 808c 	bne.w	8006e60 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d002      	beq.n	8006d54 <HAL_UART_Receive+0x2e>
 8006d4e:	88fb      	ldrh	r3, [r7, #6]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e084      	b.n	8006e62 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d101      	bne.n	8006d66 <HAL_UART_Receive+0x40>
 8006d62:	2302      	movs	r3, #2
 8006d64:	e07d      	b.n	8006e62 <HAL_UART_Receive+0x13c>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2222      	movs	r2, #34	; 0x22
 8006d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d82:	f7fd f9f5 	bl	8004170 <HAL_GetTick>
 8006d86:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	88fa      	ldrh	r2, [r7, #6]
 8006d8c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	88fa      	ldrh	r2, [r7, #6]
 8006d92:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d9c:	d108      	bne.n	8006db0 <HAL_UART_Receive+0x8a>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d104      	bne.n	8006db0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006da6:	2300      	movs	r3, #0
 8006da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	61bb      	str	r3, [r7, #24]
 8006dae:	e003      	b.n	8006db8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006db4:	2300      	movs	r3, #0
 8006db6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006dc0:	e043      	b.n	8006e4a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	2120      	movs	r1, #32
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 f84c 	bl	8006e6a <UART_WaitOnFlagUntilTimeout>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e042      	b.n	8006e62 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10c      	bne.n	8006dfc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	3302      	adds	r3, #2
 8006df8:	61bb      	str	r3, [r7, #24]
 8006dfa:	e01f      	b.n	8006e3c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e04:	d007      	beq.n	8006e16 <HAL_UART_Receive+0xf0>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10a      	bne.n	8006e24 <HAL_UART_Receive+0xfe>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d106      	bne.n	8006e24 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	e008      	b.n	8006e36 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	3b01      	subs	r3, #1
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1b6      	bne.n	8006dc2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2220      	movs	r2, #32
 8006e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	e000      	b.n	8006e62 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006e60:	2302      	movs	r3, #2
  }
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3720      	adds	r7, #32
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	60f8      	str	r0, [r7, #12]
 8006e72:	60b9      	str	r1, [r7, #8]
 8006e74:	603b      	str	r3, [r7, #0]
 8006e76:	4613      	mov	r3, r2
 8006e78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e7a:	e02c      	b.n	8006ed6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e82:	d028      	beq.n	8006ed6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d007      	beq.n	8006e9a <UART_WaitOnFlagUntilTimeout+0x30>
 8006e8a:	f7fd f971 	bl	8004170 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d21d      	bcs.n	8006ed6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68da      	ldr	r2, [r3, #12]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ea8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	695a      	ldr	r2, [r3, #20]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0201 	bic.w	r2, r2, #1
 8006eb8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2220      	movs	r2, #32
 8006ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e00f      	b.n	8006ef6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	4013      	ands	r3, r2
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	bf0c      	ite	eq
 8006ee6:	2301      	moveq	r3, #1
 8006ee8:	2300      	movne	r3, #0
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	461a      	mov	r2, r3
 8006eee:	79fb      	ldrb	r3, [r7, #7]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d0c3      	beq.n	8006e7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
	...

08006f00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	689a      	ldr	r2, [r3, #8]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	431a      	orrs	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006f40:	f023 030c 	bic.w	r3, r3, #12
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	6812      	ldr	r2, [r2, #0]
 8006f48:	68b9      	ldr	r1, [r7, #8]
 8006f4a:	430b      	orrs	r3, r1
 8006f4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	699a      	ldr	r2, [r3, #24]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	430a      	orrs	r2, r1
 8006f62:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a55      	ldr	r2, [pc, #340]	; (80070c0 <UART_SetConfig+0x1c0>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d103      	bne.n	8006f76 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006f6e:	f7fe fd2b 	bl	80059c8 <HAL_RCC_GetPCLK2Freq>
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	e002      	b.n	8006f7c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006f76:	f7fe fd13 	bl	80059a0 <HAL_RCC_GetPCLK1Freq>
 8006f7a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f84:	d14c      	bne.n	8007020 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	009a      	lsls	r2, r3, #2
 8006f90:	441a      	add	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f9c:	4a49      	ldr	r2, [pc, #292]	; (80070c4 <UART_SetConfig+0x1c4>)
 8006f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa2:	095b      	lsrs	r3, r3, #5
 8006fa4:	0119      	lsls	r1, r3, #4
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	009a      	lsls	r2, r3, #2
 8006fb0:	441a      	add	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	005b      	lsls	r3, r3, #1
 8006fb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006fbc:	4b41      	ldr	r3, [pc, #260]	; (80070c4 <UART_SetConfig+0x1c4>)
 8006fbe:	fba3 0302 	umull	r0, r3, r3, r2
 8006fc2:	095b      	lsrs	r3, r3, #5
 8006fc4:	2064      	movs	r0, #100	; 0x64
 8006fc6:	fb00 f303 	mul.w	r3, r0, r3
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	00db      	lsls	r3, r3, #3
 8006fce:	3332      	adds	r3, #50	; 0x32
 8006fd0:	4a3c      	ldr	r2, [pc, #240]	; (80070c4 <UART_SetConfig+0x1c4>)
 8006fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd6:	095b      	lsrs	r3, r3, #5
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006fde:	4419      	add	r1, r3
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	009a      	lsls	r2, r3, #2
 8006fea:	441a      	add	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ff6:	4b33      	ldr	r3, [pc, #204]	; (80070c4 <UART_SetConfig+0x1c4>)
 8006ff8:	fba3 0302 	umull	r0, r3, r3, r2
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	2064      	movs	r0, #100	; 0x64
 8007000:	fb00 f303 	mul.w	r3, r0, r3
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	00db      	lsls	r3, r3, #3
 8007008:	3332      	adds	r3, #50	; 0x32
 800700a:	4a2e      	ldr	r2, [pc, #184]	; (80070c4 <UART_SetConfig+0x1c4>)
 800700c:	fba2 2303 	umull	r2, r3, r2, r3
 8007010:	095b      	lsrs	r3, r3, #5
 8007012:	f003 0207 	and.w	r2, r3, #7
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	440a      	add	r2, r1
 800701c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800701e:	e04a      	b.n	80070b6 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	4613      	mov	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	009a      	lsls	r2, r3, #2
 800702a:	441a      	add	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	fbb2 f3f3 	udiv	r3, r2, r3
 8007036:	4a23      	ldr	r2, [pc, #140]	; (80070c4 <UART_SetConfig+0x1c4>)
 8007038:	fba2 2303 	umull	r2, r3, r2, r3
 800703c:	095b      	lsrs	r3, r3, #5
 800703e:	0119      	lsls	r1, r3, #4
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	4613      	mov	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	009a      	lsls	r2, r3, #2
 800704a:	441a      	add	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	fbb2 f2f3 	udiv	r2, r2, r3
 8007056:	4b1b      	ldr	r3, [pc, #108]	; (80070c4 <UART_SetConfig+0x1c4>)
 8007058:	fba3 0302 	umull	r0, r3, r3, r2
 800705c:	095b      	lsrs	r3, r3, #5
 800705e:	2064      	movs	r0, #100	; 0x64
 8007060:	fb00 f303 	mul.w	r3, r0, r3
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	011b      	lsls	r3, r3, #4
 8007068:	3332      	adds	r3, #50	; 0x32
 800706a:	4a16      	ldr	r2, [pc, #88]	; (80070c4 <UART_SetConfig+0x1c4>)
 800706c:	fba2 2303 	umull	r2, r3, r2, r3
 8007070:	095b      	lsrs	r3, r3, #5
 8007072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007076:	4419      	add	r1, r3
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	009a      	lsls	r2, r3, #2
 8007082:	441a      	add	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	fbb2 f2f3 	udiv	r2, r2, r3
 800708e:	4b0d      	ldr	r3, [pc, #52]	; (80070c4 <UART_SetConfig+0x1c4>)
 8007090:	fba3 0302 	umull	r0, r3, r3, r2
 8007094:	095b      	lsrs	r3, r3, #5
 8007096:	2064      	movs	r0, #100	; 0x64
 8007098:	fb00 f303 	mul.w	r3, r0, r3
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	011b      	lsls	r3, r3, #4
 80070a0:	3332      	adds	r3, #50	; 0x32
 80070a2:	4a08      	ldr	r2, [pc, #32]	; (80070c4 <UART_SetConfig+0x1c4>)
 80070a4:	fba2 2303 	umull	r2, r3, r2, r3
 80070a8:	095b      	lsrs	r3, r3, #5
 80070aa:	f003 020f 	and.w	r2, r3, #15
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	440a      	add	r2, r1
 80070b4:	609a      	str	r2, [r3, #8]
}
 80070b6:	bf00      	nop
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	40013800 	.word	0x40013800
 80070c4:	51eb851f 	.word	0x51eb851f

080070c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80070cc:	4904      	ldr	r1, [pc, #16]	; (80070e0 <MX_FATFS_Init+0x18>)
 80070ce:	4805      	ldr	r0, [pc, #20]	; (80070e4 <MX_FATFS_Init+0x1c>)
 80070d0:	f002 fea8 	bl	8009e24 <FATFS_LinkDriver>
 80070d4:	4603      	mov	r3, r0
 80070d6:	461a      	mov	r2, r3
 80070d8:	4b03      	ldr	r3, [pc, #12]	; (80070e8 <MX_FATFS_Init+0x20>)
 80070da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80070dc:	bf00      	nop
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	2000204c 	.word	0x2000204c
 80070e4:	200000e4 	.word	0x200000e4
 80070e8:	20002050 	.word	0x20002050

080070ec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80070ec:	b480      	push	{r7}
 80070ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80070f0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bc80      	pop	{r7}
 80070f8:	4770      	bx	lr

080070fa <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b082      	sub	sp, #8
 80070fe:	af00      	add	r7, sp, #0
 8007100:	4603      	mov	r3, r0
 8007102:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8007104:	79fb      	ldrb	r3, [r7, #7]
 8007106:	4618      	mov	r0, r3
 8007108:	f000 f9d8 	bl	80074bc <USER_SPI_initialize>
 800710c:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800710e:	4618      	mov	r0, r3
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b082      	sub	sp, #8
 800711a:	af00      	add	r7, sp, #0
 800711c:	4603      	mov	r3, r0
 800711e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8007120:	79fb      	ldrb	r3, [r7, #7]
 8007122:	4618      	mov	r0, r3
 8007124:	f000 fab6 	bl	8007694 <USER_SPI_status>
 8007128:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800712a:	4618      	mov	r0, r3
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b084      	sub	sp, #16
 8007136:	af00      	add	r7, sp, #0
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	603b      	str	r3, [r7, #0]
 800713e:	4603      	mov	r3, r0
 8007140:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8007142:	7bf8      	ldrb	r0, [r7, #15]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	68b9      	ldr	r1, [r7, #8]
 800714a:	f000 fab7 	bl	80076bc <USER_SPI_read>
 800714e:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	60b9      	str	r1, [r7, #8]
 8007160:	607a      	str	r2, [r7, #4]
 8007162:	603b      	str	r3, [r7, #0]
 8007164:	4603      	mov	r3, r0
 8007166:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8007168:	7bf8      	ldrb	r0, [r7, #15]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	68b9      	ldr	r1, [r7, #8]
 8007170:	f000 fb0a 	bl	8007788 <USER_SPI_write>
 8007174:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b082      	sub	sp, #8
 8007182:	af00      	add	r7, sp, #0
 8007184:	4603      	mov	r3, r0
 8007186:	603a      	str	r2, [r7, #0]
 8007188:	71fb      	strb	r3, [r7, #7]
 800718a:	460b      	mov	r3, r1
 800718c:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800718e:	79b9      	ldrb	r1, [r7, #6]
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	4618      	mov	r0, r3
 8007196:	f000 fb73 	bl	8007880 <USER_SPI_ioctl>
 800719a:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80071ac:	f7fc ffe0 	bl	8004170 <HAL_GetTick>
 80071b0:	4603      	mov	r3, r0
 80071b2:	4a04      	ldr	r2, [pc, #16]	; (80071c4 <SPI_Timer_On+0x20>)
 80071b4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80071b6:	4a04      	ldr	r2, [pc, #16]	; (80071c8 <SPI_Timer_On+0x24>)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6013      	str	r3, [r2, #0]
}
 80071bc:	bf00      	nop
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	200024b4 	.word	0x200024b4
 80071c8:	200024b8 	.word	0x200024b8

080071cc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80071cc:	b580      	push	{r7, lr}
 80071ce:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80071d0:	f7fc ffce 	bl	8004170 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	4b06      	ldr	r3, [pc, #24]	; (80071f0 <SPI_Timer_Status+0x24>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	1ad2      	subs	r2, r2, r3
 80071dc:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <SPI_Timer_Status+0x28>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	bf34      	ite	cc
 80071e4:	2301      	movcc	r3, #1
 80071e6:	2300      	movcs	r3, #0
 80071e8:	b2db      	uxtb	r3, r3
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	200024b4 	.word	0x200024b4
 80071f4:	200024b8 	.word	0x200024b8

080071f8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	4603      	mov	r3, r0
 8007200:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8007202:	f107 020f 	add.w	r2, r7, #15
 8007206:	1df9      	adds	r1, r7, #7
 8007208:	2332      	movs	r3, #50	; 0x32
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	2301      	movs	r3, #1
 800720e:	4804      	ldr	r0, [pc, #16]	; (8007220 <xchg_spi+0x28>)
 8007210:	f7fe fe13 	bl	8005e3a <HAL_SPI_TransmitReceive>
    return rxDat;
 8007214:	7bfb      	ldrb	r3, [r7, #15]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	20001cbc 	.word	0x20001cbc

08007224 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007224:	b590      	push	{r4, r7, lr}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800722e:	2300      	movs	r3, #0
 8007230:	60fb      	str	r3, [r7, #12]
 8007232:	e00a      	b.n	800724a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	18d4      	adds	r4, r2, r3
 800723a:	20ff      	movs	r0, #255	; 0xff
 800723c:	f7ff ffdc 	bl	80071f8 <xchg_spi>
 8007240:	4603      	mov	r3, r0
 8007242:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	3301      	adds	r3, #1
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	429a      	cmp	r2, r3
 8007250:	d3f0      	bcc.n	8007234 <rcvr_spi_multi+0x10>
	}
}
 8007252:	bf00      	nop
 8007254:	bf00      	nop
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	bd90      	pop	{r4, r7, pc}

0800725c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8007266:	2300      	movs	r3, #0
 8007268:	60fb      	str	r3, [r7, #12]
 800726a:	e009      	b.n	8007280 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	4413      	add	r3, r2
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	4618      	mov	r0, r3
 8007276:	f7ff ffbf 	bl	80071f8 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	3301      	adds	r3, #1
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	429a      	cmp	r2, r3
 8007286:	d3f1      	bcc.n	800726c <xmit_spi_multi+0x10>
	}
}
 8007288:	bf00      	nop
 800728a:	bf00      	nop
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b086      	sub	sp, #24
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800729a:	f7fc ff69 	bl	8004170 <HAL_GetTick>
 800729e:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80072a4:	20ff      	movs	r0, #255	; 0xff
 80072a6:	f7ff ffa7 	bl	80071f8 <xchg_spi>
 80072aa:	4603      	mov	r3, r0
 80072ac:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80072ae:	7bfb      	ldrb	r3, [r7, #15]
 80072b0:	2bff      	cmp	r3, #255	; 0xff
 80072b2:	d007      	beq.n	80072c4 <wait_ready+0x32>
 80072b4:	f7fc ff5c 	bl	8004170 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d8ef      	bhi.n	80072a4 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
 80072c6:	2bff      	cmp	r3, #255	; 0xff
 80072c8:	bf0c      	ite	eq
 80072ca:	2301      	moveq	r3, #1
 80072cc:	2300      	movne	r3, #0
 80072ce:	b2db      	uxtb	r3, r3
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80072dc:	2201      	movs	r2, #1
 80072de:	2101      	movs	r1, #1
 80072e0:	4803      	ldr	r0, [pc, #12]	; (80072f0 <despiselect+0x18>)
 80072e2:	f7fd fe18 	bl	8004f16 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80072e6:	20ff      	movs	r0, #255	; 0xff
 80072e8:	f7ff ff86 	bl	80071f8 <xchg_spi>

}
 80072ec:	bf00      	nop
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	40020c00 	.word	0x40020c00

080072f4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80072f8:	2200      	movs	r2, #0
 80072fa:	2101      	movs	r1, #1
 80072fc:	4809      	ldr	r0, [pc, #36]	; (8007324 <spiselect+0x30>)
 80072fe:	f7fd fe0a 	bl	8004f16 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007302:	20ff      	movs	r0, #255	; 0xff
 8007304:	f7ff ff78 	bl	80071f8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8007308:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800730c:	f7ff ffc1 	bl	8007292 <wait_ready>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <spiselect+0x26>
 8007316:	2301      	movs	r3, #1
 8007318:	e002      	b.n	8007320 <spiselect+0x2c>

	despiselect();
 800731a:	f7ff ffdd 	bl	80072d8 <despiselect>
	return 0;	/* Timeout */
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	bd80      	pop	{r7, pc}
 8007324:	40020c00 	.word	0x40020c00

08007328 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8007332:	20c8      	movs	r0, #200	; 0xc8
 8007334:	f7ff ff36 	bl	80071a4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8007338:	20ff      	movs	r0, #255	; 0xff
 800733a:	f7ff ff5d 	bl	80071f8 <xchg_spi>
 800733e:	4603      	mov	r3, r0
 8007340:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	2bff      	cmp	r3, #255	; 0xff
 8007346:	d104      	bne.n	8007352 <rcvr_datablock+0x2a>
 8007348:	f7ff ff40 	bl	80071cc <SPI_Timer_Status>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1f2      	bne.n	8007338 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8007352:	7bfb      	ldrb	r3, [r7, #15]
 8007354:	2bfe      	cmp	r3, #254	; 0xfe
 8007356:	d001      	beq.n	800735c <rcvr_datablock+0x34>
 8007358:	2300      	movs	r3, #0
 800735a:	e00a      	b.n	8007372 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7ff ff60 	bl	8007224 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007364:	20ff      	movs	r0, #255	; 0xff
 8007366:	f7ff ff47 	bl	80071f8 <xchg_spi>
 800736a:	20ff      	movs	r0, #255	; 0xff
 800736c:	f7ff ff44 	bl	80071f8 <xchg_spi>

	return 1;						/* Function succeeded */
 8007370:	2301      	movs	r3, #1
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	460b      	mov	r3, r1
 8007384:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007386:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800738a:	f7ff ff82 	bl	8007292 <wait_ready>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <xmit_datablock+0x1e>
 8007394:	2300      	movs	r3, #0
 8007396:	e01e      	b.n	80073d6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007398:	78fb      	ldrb	r3, [r7, #3]
 800739a:	4618      	mov	r0, r3
 800739c:	f7ff ff2c 	bl	80071f8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	2bfd      	cmp	r3, #253	; 0xfd
 80073a4:	d016      	beq.n	80073d4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80073a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7ff ff56 	bl	800725c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80073b0:	20ff      	movs	r0, #255	; 0xff
 80073b2:	f7ff ff21 	bl	80071f8 <xchg_spi>
 80073b6:	20ff      	movs	r0, #255	; 0xff
 80073b8:	f7ff ff1e 	bl	80071f8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80073bc:	20ff      	movs	r0, #255	; 0xff
 80073be:	f7ff ff1b 	bl	80071f8 <xchg_spi>
 80073c2:	4603      	mov	r3, r0
 80073c4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
 80073c8:	f003 031f 	and.w	r3, r3, #31
 80073cc:	2b05      	cmp	r3, #5
 80073ce:	d001      	beq.n	80073d4 <xmit_datablock+0x5a>
 80073d0:	2300      	movs	r3, #0
 80073d2:	e000      	b.n	80073d6 <xmit_datablock+0x5c>
	}
	return 1;
 80073d4:	2301      	movs	r3, #1
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	4603      	mov	r3, r0
 80073e6:	6039      	str	r1, [r7, #0]
 80073e8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80073ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	da0e      	bge.n	8007410 <send_cmd+0x32>
		cmd &= 0x7F;
 80073f2:	79fb      	ldrb	r3, [r7, #7]
 80073f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073f8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80073fa:	2100      	movs	r1, #0
 80073fc:	2037      	movs	r0, #55	; 0x37
 80073fe:	f7ff ffee 	bl	80073de <send_cmd>
 8007402:	4603      	mov	r3, r0
 8007404:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8007406:	7bbb      	ldrb	r3, [r7, #14]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d901      	bls.n	8007410 <send_cmd+0x32>
 800740c:	7bbb      	ldrb	r3, [r7, #14]
 800740e:	e051      	b.n	80074b4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007410:	79fb      	ldrb	r3, [r7, #7]
 8007412:	2b0c      	cmp	r3, #12
 8007414:	d008      	beq.n	8007428 <send_cmd+0x4a>
		despiselect();
 8007416:	f7ff ff5f 	bl	80072d8 <despiselect>
		if (!spiselect()) return 0xFF;
 800741a:	f7ff ff6b 	bl	80072f4 <spiselect>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <send_cmd+0x4a>
 8007424:	23ff      	movs	r3, #255	; 0xff
 8007426:	e045      	b.n	80074b4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007428:	79fb      	ldrb	r3, [r7, #7]
 800742a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800742e:	b2db      	uxtb	r3, r3
 8007430:	4618      	mov	r0, r3
 8007432:	f7ff fee1 	bl	80071f8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	0e1b      	lsrs	r3, r3, #24
 800743a:	b2db      	uxtb	r3, r3
 800743c:	4618      	mov	r0, r3
 800743e:	f7ff fedb 	bl	80071f8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	0c1b      	lsrs	r3, r3, #16
 8007446:	b2db      	uxtb	r3, r3
 8007448:	4618      	mov	r0, r3
 800744a:	f7ff fed5 	bl	80071f8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	0a1b      	lsrs	r3, r3, #8
 8007452:	b2db      	uxtb	r3, r3
 8007454:	4618      	mov	r0, r3
 8007456:	f7ff fecf 	bl	80071f8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	b2db      	uxtb	r3, r3
 800745e:	4618      	mov	r0, r3
 8007460:	f7ff feca 	bl	80071f8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007464:	2301      	movs	r3, #1
 8007466:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007468:	79fb      	ldrb	r3, [r7, #7]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <send_cmd+0x94>
 800746e:	2395      	movs	r3, #149	; 0x95
 8007470:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007472:	79fb      	ldrb	r3, [r7, #7]
 8007474:	2b08      	cmp	r3, #8
 8007476:	d101      	bne.n	800747c <send_cmd+0x9e>
 8007478:	2387      	movs	r3, #135	; 0x87
 800747a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	4618      	mov	r0, r3
 8007480:	f7ff feba 	bl	80071f8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007484:	79fb      	ldrb	r3, [r7, #7]
 8007486:	2b0c      	cmp	r3, #12
 8007488:	d102      	bne.n	8007490 <send_cmd+0xb2>
 800748a:	20ff      	movs	r0, #255	; 0xff
 800748c:	f7ff feb4 	bl	80071f8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8007490:	230a      	movs	r3, #10
 8007492:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007494:	20ff      	movs	r0, #255	; 0xff
 8007496:	f7ff feaf 	bl	80071f8 <xchg_spi>
 800749a:	4603      	mov	r3, r0
 800749c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800749e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	da05      	bge.n	80074b2 <send_cmd+0xd4>
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
 80074a8:	3b01      	subs	r3, #1
 80074aa:	73fb      	strb	r3, [r7, #15]
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1f0      	bne.n	8007494 <send_cmd+0xb6>

	return res;							/* Return received response */
 80074b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80074bc:	b590      	push	{r4, r7, lr}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	4603      	mov	r3, r0
 80074c4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <USER_SPI_initialize+0x14>
 80074cc:	2301      	movs	r3, #1
 80074ce:	e0d6      	b.n	800767e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80074d0:	4b6d      	ldr	r3, [pc, #436]	; (8007688 <USER_SPI_initialize+0x1cc>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <USER_SPI_initialize+0x2a>
 80074de:	4b6a      	ldr	r3, [pc, #424]	; (8007688 <USER_SPI_initialize+0x1cc>)
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	e0cb      	b.n	800767e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80074e6:	4b69      	ldr	r3, [pc, #420]	; (800768c <USER_SPI_initialize+0x1d0>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80074f0:	4b66      	ldr	r3, [pc, #408]	; (800768c <USER_SPI_initialize+0x1d0>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80074f8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80074fa:	230a      	movs	r3, #10
 80074fc:	73fb      	strb	r3, [r7, #15]
 80074fe:	e005      	b.n	800750c <USER_SPI_initialize+0x50>
 8007500:	20ff      	movs	r0, #255	; 0xff
 8007502:	f7ff fe79 	bl	80071f8 <xchg_spi>
 8007506:	7bfb      	ldrb	r3, [r7, #15]
 8007508:	3b01      	subs	r3, #1
 800750a:	73fb      	strb	r3, [r7, #15]
 800750c:	7bfb      	ldrb	r3, [r7, #15]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1f6      	bne.n	8007500 <USER_SPI_initialize+0x44>

	ty = 0;
 8007512:	2300      	movs	r3, #0
 8007514:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007516:	2100      	movs	r1, #0
 8007518:	2000      	movs	r0, #0
 800751a:	f7ff ff60 	bl	80073de <send_cmd>
 800751e:	4603      	mov	r3, r0
 8007520:	2b01      	cmp	r3, #1
 8007522:	f040 808b 	bne.w	800763c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007526:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800752a:	f7ff fe3b 	bl	80071a4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800752e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007532:	2008      	movs	r0, #8
 8007534:	f7ff ff53 	bl	80073de <send_cmd>
 8007538:	4603      	mov	r3, r0
 800753a:	2b01      	cmp	r3, #1
 800753c:	d151      	bne.n	80075e2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800753e:	2300      	movs	r3, #0
 8007540:	73fb      	strb	r3, [r7, #15]
 8007542:	e00d      	b.n	8007560 <USER_SPI_initialize+0xa4>
 8007544:	7bfc      	ldrb	r4, [r7, #15]
 8007546:	20ff      	movs	r0, #255	; 0xff
 8007548:	f7ff fe56 	bl	80071f8 <xchg_spi>
 800754c:	4603      	mov	r3, r0
 800754e:	461a      	mov	r2, r3
 8007550:	f107 0310 	add.w	r3, r7, #16
 8007554:	4423      	add	r3, r4
 8007556:	f803 2c08 	strb.w	r2, [r3, #-8]
 800755a:	7bfb      	ldrb	r3, [r7, #15]
 800755c:	3301      	adds	r3, #1
 800755e:	73fb      	strb	r3, [r7, #15]
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	2b03      	cmp	r3, #3
 8007564:	d9ee      	bls.n	8007544 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007566:	7abb      	ldrb	r3, [r7, #10]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d167      	bne.n	800763c <USER_SPI_initialize+0x180>
 800756c:	7afb      	ldrb	r3, [r7, #11]
 800756e:	2baa      	cmp	r3, #170	; 0xaa
 8007570:	d164      	bne.n	800763c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8007572:	bf00      	nop
 8007574:	f7ff fe2a 	bl	80071cc <SPI_Timer_Status>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d007      	beq.n	800758e <USER_SPI_initialize+0xd2>
 800757e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007582:	20a9      	movs	r0, #169	; 0xa9
 8007584:	f7ff ff2b 	bl	80073de <send_cmd>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1f2      	bne.n	8007574 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800758e:	f7ff fe1d 	bl	80071cc <SPI_Timer_Status>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d051      	beq.n	800763c <USER_SPI_initialize+0x180>
 8007598:	2100      	movs	r1, #0
 800759a:	203a      	movs	r0, #58	; 0x3a
 800759c:	f7ff ff1f 	bl	80073de <send_cmd>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d14a      	bne.n	800763c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80075a6:	2300      	movs	r3, #0
 80075a8:	73fb      	strb	r3, [r7, #15]
 80075aa:	e00d      	b.n	80075c8 <USER_SPI_initialize+0x10c>
 80075ac:	7bfc      	ldrb	r4, [r7, #15]
 80075ae:	20ff      	movs	r0, #255	; 0xff
 80075b0:	f7ff fe22 	bl	80071f8 <xchg_spi>
 80075b4:	4603      	mov	r3, r0
 80075b6:	461a      	mov	r2, r3
 80075b8:	f107 0310 	add.w	r3, r7, #16
 80075bc:	4423      	add	r3, r4
 80075be:	f803 2c08 	strb.w	r2, [r3, #-8]
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	3301      	adds	r3, #1
 80075c6:	73fb      	strb	r3, [r7, #15]
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d9ee      	bls.n	80075ac <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80075ce:	7a3b      	ldrb	r3, [r7, #8]
 80075d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <USER_SPI_initialize+0x120>
 80075d8:	230c      	movs	r3, #12
 80075da:	e000      	b.n	80075de <USER_SPI_initialize+0x122>
 80075dc:	2304      	movs	r3, #4
 80075de:	737b      	strb	r3, [r7, #13]
 80075e0:	e02c      	b.n	800763c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80075e2:	2100      	movs	r1, #0
 80075e4:	20a9      	movs	r0, #169	; 0xa9
 80075e6:	f7ff fefa 	bl	80073de <send_cmd>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d804      	bhi.n	80075fa <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80075f0:	2302      	movs	r3, #2
 80075f2:	737b      	strb	r3, [r7, #13]
 80075f4:	23a9      	movs	r3, #169	; 0xa9
 80075f6:	73bb      	strb	r3, [r7, #14]
 80075f8:	e003      	b.n	8007602 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80075fa:	2301      	movs	r3, #1
 80075fc:	737b      	strb	r3, [r7, #13]
 80075fe:	2301      	movs	r3, #1
 8007600:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007602:	bf00      	nop
 8007604:	f7ff fde2 	bl	80071cc <SPI_Timer_Status>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d007      	beq.n	800761e <USER_SPI_initialize+0x162>
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	2100      	movs	r1, #0
 8007612:	4618      	mov	r0, r3
 8007614:	f7ff fee3 	bl	80073de <send_cmd>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1f2      	bne.n	8007604 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800761e:	f7ff fdd5 	bl	80071cc <SPI_Timer_Status>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d007      	beq.n	8007638 <USER_SPI_initialize+0x17c>
 8007628:	f44f 7100 	mov.w	r1, #512	; 0x200
 800762c:	2010      	movs	r0, #16
 800762e:	f7ff fed6 	bl	80073de <send_cmd>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <USER_SPI_initialize+0x180>
				ty = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800763c:	4a14      	ldr	r2, [pc, #80]	; (8007690 <USER_SPI_initialize+0x1d4>)
 800763e:	7b7b      	ldrb	r3, [r7, #13]
 8007640:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007642:	f7ff fe49 	bl	80072d8 <despiselect>

	if (ty) {			/* OK */
 8007646:	7b7b      	ldrb	r3, [r7, #13]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d012      	beq.n	8007672 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800764c:	4b0f      	ldr	r3, [pc, #60]	; (800768c <USER_SPI_initialize+0x1d0>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007656:	4b0d      	ldr	r3, [pc, #52]	; (800768c <USER_SPI_initialize+0x1d0>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f042 0210 	orr.w	r2, r2, #16
 800765e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007660:	4b09      	ldr	r3, [pc, #36]	; (8007688 <USER_SPI_initialize+0x1cc>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	f023 0301 	bic.w	r3, r3, #1
 800766a:	b2da      	uxtb	r2, r3
 800766c:	4b06      	ldr	r3, [pc, #24]	; (8007688 <USER_SPI_initialize+0x1cc>)
 800766e:	701a      	strb	r2, [r3, #0]
 8007670:	e002      	b.n	8007678 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007672:	4b05      	ldr	r3, [pc, #20]	; (8007688 <USER_SPI_initialize+0x1cc>)
 8007674:	2201      	movs	r2, #1
 8007676:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007678:	4b03      	ldr	r3, [pc, #12]	; (8007688 <USER_SPI_initialize+0x1cc>)
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	b2db      	uxtb	r3, r3
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	bd90      	pop	{r4, r7, pc}
 8007686:	bf00      	nop
 8007688:	200000f8 	.word	0x200000f8
 800768c:	20001cbc 	.word	0x20001cbc
 8007690:	20001b66 	.word	0x20001b66

08007694 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	4603      	mov	r3, r0
 800769c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800769e:	79fb      	ldrb	r3, [r7, #7]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d001      	beq.n	80076a8 <USER_SPI_status+0x14>
 80076a4:	2301      	movs	r3, #1
 80076a6:	e002      	b.n	80076ae <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80076a8:	4b03      	ldr	r3, [pc, #12]	; (80076b8 <USER_SPI_status+0x24>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	b2db      	uxtb	r3, r3
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bc80      	pop	{r7}
 80076b6:	4770      	bx	lr
 80076b8:	200000f8 	.word	0x200000f8

080076bc <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60b9      	str	r1, [r7, #8]
 80076c4:	607a      	str	r2, [r7, #4]
 80076c6:	603b      	str	r3, [r7, #0]
 80076c8:	4603      	mov	r3, r0
 80076ca:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d102      	bne.n	80076d8 <USER_SPI_read+0x1c>
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <USER_SPI_read+0x20>
 80076d8:	2304      	movs	r3, #4
 80076da:	e04d      	b.n	8007778 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80076dc:	4b28      	ldr	r3, [pc, #160]	; (8007780 <USER_SPI_read+0xc4>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <USER_SPI_read+0x32>
 80076ea:	2303      	movs	r3, #3
 80076ec:	e044      	b.n	8007778 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80076ee:	4b25      	ldr	r3, [pc, #148]	; (8007784 <USER_SPI_read+0xc8>)
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	f003 0308 	and.w	r3, r3, #8
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d102      	bne.n	8007700 <USER_SPI_read+0x44>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	025b      	lsls	r3, r3, #9
 80076fe:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d111      	bne.n	800772a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007706:	6879      	ldr	r1, [r7, #4]
 8007708:	2011      	movs	r0, #17
 800770a:	f7ff fe68 	bl	80073de <send_cmd>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d129      	bne.n	8007768 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007714:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007718:	68b8      	ldr	r0, [r7, #8]
 800771a:	f7ff fe05 	bl	8007328 <rcvr_datablock>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d021      	beq.n	8007768 <USER_SPI_read+0xac>
			count = 0;
 8007724:	2300      	movs	r3, #0
 8007726:	603b      	str	r3, [r7, #0]
 8007728:	e01e      	b.n	8007768 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800772a:	6879      	ldr	r1, [r7, #4]
 800772c:	2012      	movs	r0, #18
 800772e:	f7ff fe56 	bl	80073de <send_cmd>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d117      	bne.n	8007768 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800773c:	68b8      	ldr	r0, [r7, #8]
 800773e:	f7ff fdf3 	bl	8007328 <rcvr_datablock>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00a      	beq.n	800775e <USER_SPI_read+0xa2>
				buff += 512;
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800774e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	3b01      	subs	r3, #1
 8007754:	603b      	str	r3, [r7, #0]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1ed      	bne.n	8007738 <USER_SPI_read+0x7c>
 800775c:	e000      	b.n	8007760 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800775e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007760:	2100      	movs	r1, #0
 8007762:	200c      	movs	r0, #12
 8007764:	f7ff fe3b 	bl	80073de <send_cmd>
		}
	}
	despiselect();
 8007768:	f7ff fdb6 	bl	80072d8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	bf14      	ite	ne
 8007772:	2301      	movne	r3, #1
 8007774:	2300      	moveq	r3, #0
 8007776:	b2db      	uxtb	r3, r3
}
 8007778:	4618      	mov	r0, r3
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	200000f8 	.word	0x200000f8
 8007784:	20001b66 	.word	0x20001b66

08007788 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	607a      	str	r2, [r7, #4]
 8007792:	603b      	str	r3, [r7, #0]
 8007794:	4603      	mov	r3, r0
 8007796:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007798:	7bfb      	ldrb	r3, [r7, #15]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d102      	bne.n	80077a4 <USER_SPI_write+0x1c>
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <USER_SPI_write+0x20>
 80077a4:	2304      	movs	r3, #4
 80077a6:	e063      	b.n	8007870 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80077a8:	4b33      	ldr	r3, [pc, #204]	; (8007878 <USER_SPI_write+0xf0>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <USER_SPI_write+0x32>
 80077b6:	2303      	movs	r3, #3
 80077b8:	e05a      	b.n	8007870 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80077ba:	4b2f      	ldr	r3, [pc, #188]	; (8007878 <USER_SPI_write+0xf0>)
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <USER_SPI_write+0x44>
 80077c8:	2302      	movs	r3, #2
 80077ca:	e051      	b.n	8007870 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80077cc:	4b2b      	ldr	r3, [pc, #172]	; (800787c <USER_SPI_write+0xf4>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	f003 0308 	and.w	r3, r3, #8
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d102      	bne.n	80077de <USER_SPI_write+0x56>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	025b      	lsls	r3, r3, #9
 80077dc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d110      	bne.n	8007806 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80077e4:	6879      	ldr	r1, [r7, #4]
 80077e6:	2018      	movs	r0, #24
 80077e8:	f7ff fdf9 	bl	80073de <send_cmd>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d136      	bne.n	8007860 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80077f2:	21fe      	movs	r1, #254	; 0xfe
 80077f4:	68b8      	ldr	r0, [r7, #8]
 80077f6:	f7ff fdc0 	bl	800737a <xmit_datablock>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d02f      	beq.n	8007860 <USER_SPI_write+0xd8>
			count = 0;
 8007800:	2300      	movs	r3, #0
 8007802:	603b      	str	r3, [r7, #0]
 8007804:	e02c      	b.n	8007860 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007806:	4b1d      	ldr	r3, [pc, #116]	; (800787c <USER_SPI_write+0xf4>)
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	f003 0306 	and.w	r3, r3, #6
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <USER_SPI_write+0x92>
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	2097      	movs	r0, #151	; 0x97
 8007816:	f7ff fde2 	bl	80073de <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800781a:	6879      	ldr	r1, [r7, #4]
 800781c:	2019      	movs	r0, #25
 800781e:	f7ff fdde 	bl	80073de <send_cmd>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d11b      	bne.n	8007860 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007828:	21fc      	movs	r1, #252	; 0xfc
 800782a:	68b8      	ldr	r0, [r7, #8]
 800782c:	f7ff fda5 	bl	800737a <xmit_datablock>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00a      	beq.n	800784c <USER_SPI_write+0xc4>
				buff += 512;
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800783c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	3b01      	subs	r3, #1
 8007842:	603b      	str	r3, [r7, #0]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1ee      	bne.n	8007828 <USER_SPI_write+0xa0>
 800784a:	e000      	b.n	800784e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800784c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800784e:	21fd      	movs	r1, #253	; 0xfd
 8007850:	2000      	movs	r0, #0
 8007852:	f7ff fd92 	bl	800737a <xmit_datablock>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d101      	bne.n	8007860 <USER_SPI_write+0xd8>
 800785c:	2301      	movs	r3, #1
 800785e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007860:	f7ff fd3a 	bl	80072d8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	bf14      	ite	ne
 800786a:	2301      	movne	r3, #1
 800786c:	2300      	moveq	r3, #0
 800786e:	b2db      	uxtb	r3, r3
}
 8007870:	4618      	mov	r0, r3
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	200000f8 	.word	0x200000f8
 800787c:	20001b66 	.word	0x20001b66

08007880 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b08c      	sub	sp, #48	; 0x30
 8007884:	af00      	add	r7, sp, #0
 8007886:	4603      	mov	r3, r0
 8007888:	603a      	str	r2, [r7, #0]
 800788a:	71fb      	strb	r3, [r7, #7]
 800788c:	460b      	mov	r3, r1
 800788e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007890:	79fb      	ldrb	r3, [r7, #7]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <USER_SPI_ioctl+0x1a>
 8007896:	2304      	movs	r3, #4
 8007898:	e15a      	b.n	8007b50 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800789a:	4baf      	ldr	r3, [pc, #700]	; (8007b58 <USER_SPI_ioctl+0x2d8>)
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <USER_SPI_ioctl+0x2c>
 80078a8:	2303      	movs	r3, #3
 80078aa:	e151      	b.n	8007b50 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80078b2:	79bb      	ldrb	r3, [r7, #6]
 80078b4:	2b04      	cmp	r3, #4
 80078b6:	f200 8136 	bhi.w	8007b26 <USER_SPI_ioctl+0x2a6>
 80078ba:	a201      	add	r2, pc, #4	; (adr r2, 80078c0 <USER_SPI_ioctl+0x40>)
 80078bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c0:	080078d5 	.word	0x080078d5
 80078c4:	080078e9 	.word	0x080078e9
 80078c8:	08007b27 	.word	0x08007b27
 80078cc:	08007995 	.word	0x08007995
 80078d0:	08007a8b 	.word	0x08007a8b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80078d4:	f7ff fd0e 	bl	80072f4 <spiselect>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 8127 	beq.w	8007b2e <USER_SPI_ioctl+0x2ae>
 80078e0:	2300      	movs	r3, #0
 80078e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80078e6:	e122      	b.n	8007b2e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80078e8:	2100      	movs	r1, #0
 80078ea:	2009      	movs	r0, #9
 80078ec:	f7ff fd77 	bl	80073de <send_cmd>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f040 811d 	bne.w	8007b32 <USER_SPI_ioctl+0x2b2>
 80078f8:	f107 030c 	add.w	r3, r7, #12
 80078fc:	2110      	movs	r1, #16
 80078fe:	4618      	mov	r0, r3
 8007900:	f7ff fd12 	bl	8007328 <rcvr_datablock>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 8113 	beq.w	8007b32 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800790c:	7b3b      	ldrb	r3, [r7, #12]
 800790e:	099b      	lsrs	r3, r3, #6
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b01      	cmp	r3, #1
 8007914:	d111      	bne.n	800793a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8007916:	7d7b      	ldrb	r3, [r7, #21]
 8007918:	461a      	mov	r2, r3
 800791a:	7d3b      	ldrb	r3, [r7, #20]
 800791c:	021b      	lsls	r3, r3, #8
 800791e:	4413      	add	r3, r2
 8007920:	461a      	mov	r2, r3
 8007922:	7cfb      	ldrb	r3, [r7, #19]
 8007924:	041b      	lsls	r3, r3, #16
 8007926:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800792a:	4413      	add	r3, r2
 800792c:	3301      	adds	r3, #1
 800792e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	029a      	lsls	r2, r3, #10
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	601a      	str	r2, [r3, #0]
 8007938:	e028      	b.n	800798c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800793a:	7c7b      	ldrb	r3, [r7, #17]
 800793c:	f003 030f 	and.w	r3, r3, #15
 8007940:	b2da      	uxtb	r2, r3
 8007942:	7dbb      	ldrb	r3, [r7, #22]
 8007944:	09db      	lsrs	r3, r3, #7
 8007946:	b2db      	uxtb	r3, r3
 8007948:	4413      	add	r3, r2
 800794a:	b2da      	uxtb	r2, r3
 800794c:	7d7b      	ldrb	r3, [r7, #21]
 800794e:	005b      	lsls	r3, r3, #1
 8007950:	b2db      	uxtb	r3, r3
 8007952:	f003 0306 	and.w	r3, r3, #6
 8007956:	b2db      	uxtb	r3, r3
 8007958:	4413      	add	r3, r2
 800795a:	b2db      	uxtb	r3, r3
 800795c:	3302      	adds	r3, #2
 800795e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007962:	7d3b      	ldrb	r3, [r7, #20]
 8007964:	099b      	lsrs	r3, r3, #6
 8007966:	b2db      	uxtb	r3, r3
 8007968:	461a      	mov	r2, r3
 800796a:	7cfb      	ldrb	r3, [r7, #19]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	441a      	add	r2, r3
 8007970:	7cbb      	ldrb	r3, [r7, #18]
 8007972:	029b      	lsls	r3, r3, #10
 8007974:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007978:	4413      	add	r3, r2
 800797a:	3301      	adds	r3, #1
 800797c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800797e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007982:	3b09      	subs	r3, #9
 8007984:	69fa      	ldr	r2, [r7, #28]
 8007986:	409a      	lsls	r2, r3
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007992:	e0ce      	b.n	8007b32 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007994:	4b71      	ldr	r3, [pc, #452]	; (8007b5c <USER_SPI_ioctl+0x2dc>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	f003 0304 	and.w	r3, r3, #4
 800799c:	2b00      	cmp	r3, #0
 800799e:	d031      	beq.n	8007a04 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80079a0:	2100      	movs	r1, #0
 80079a2:	208d      	movs	r0, #141	; 0x8d
 80079a4:	f7ff fd1b 	bl	80073de <send_cmd>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f040 80c3 	bne.w	8007b36 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80079b0:	20ff      	movs	r0, #255	; 0xff
 80079b2:	f7ff fc21 	bl	80071f8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80079b6:	f107 030c 	add.w	r3, r7, #12
 80079ba:	2110      	movs	r1, #16
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff fcb3 	bl	8007328 <rcvr_datablock>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 80b6 	beq.w	8007b36 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80079ca:	2330      	movs	r3, #48	; 0x30
 80079cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80079d0:	e007      	b.n	80079e2 <USER_SPI_ioctl+0x162>
 80079d2:	20ff      	movs	r0, #255	; 0xff
 80079d4:	f7ff fc10 	bl	80071f8 <xchg_spi>
 80079d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80079dc:	3b01      	subs	r3, #1
 80079de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80079e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1f3      	bne.n	80079d2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80079ea:	7dbb      	ldrb	r3, [r7, #22]
 80079ec:	091b      	lsrs	r3, r3, #4
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	461a      	mov	r2, r3
 80079f2:	2310      	movs	r3, #16
 80079f4:	fa03 f202 	lsl.w	r2, r3, r2
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007a02:	e098      	b.n	8007b36 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007a04:	2100      	movs	r1, #0
 8007a06:	2009      	movs	r0, #9
 8007a08:	f7ff fce9 	bl	80073de <send_cmd>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f040 8091 	bne.w	8007b36 <USER_SPI_ioctl+0x2b6>
 8007a14:	f107 030c 	add.w	r3, r7, #12
 8007a18:	2110      	movs	r1, #16
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7ff fc84 	bl	8007328 <rcvr_datablock>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 8087 	beq.w	8007b36 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007a28:	4b4c      	ldr	r3, [pc, #304]	; (8007b5c <USER_SPI_ioctl+0x2dc>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d012      	beq.n	8007a5a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007a34:	7dbb      	ldrb	r3, [r7, #22]
 8007a36:	005b      	lsls	r3, r3, #1
 8007a38:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007a3c:	7dfa      	ldrb	r2, [r7, #23]
 8007a3e:	09d2      	lsrs	r2, r2, #7
 8007a40:	b2d2      	uxtb	r2, r2
 8007a42:	4413      	add	r3, r2
 8007a44:	1c5a      	adds	r2, r3, #1
 8007a46:	7e7b      	ldrb	r3, [r7, #25]
 8007a48:	099b      	lsrs	r3, r3, #6
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a52:	461a      	mov	r2, r3
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	601a      	str	r2, [r3, #0]
 8007a58:	e013      	b.n	8007a82 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007a5a:	7dbb      	ldrb	r3, [r7, #22]
 8007a5c:	109b      	asrs	r3, r3, #2
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	f003 031f 	and.w	r3, r3, #31
 8007a64:	3301      	adds	r3, #1
 8007a66:	7dfa      	ldrb	r2, [r7, #23]
 8007a68:	00d2      	lsls	r2, r2, #3
 8007a6a:	f002 0218 	and.w	r2, r2, #24
 8007a6e:	7df9      	ldrb	r1, [r7, #23]
 8007a70:	0949      	lsrs	r1, r1, #5
 8007a72:	b2c9      	uxtb	r1, r1
 8007a74:	440a      	add	r2, r1
 8007a76:	3201      	adds	r2, #1
 8007a78:	fb02 f303 	mul.w	r3, r2, r3
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007a88:	e055      	b.n	8007b36 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007a8a:	4b34      	ldr	r3, [pc, #208]	; (8007b5c <USER_SPI_ioctl+0x2dc>)
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	f003 0306 	and.w	r3, r3, #6
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d051      	beq.n	8007b3a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007a96:	f107 020c 	add.w	r2, r7, #12
 8007a9a:	79fb      	ldrb	r3, [r7, #7]
 8007a9c:	210b      	movs	r1, #11
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff feee 	bl	8007880 <USER_SPI_ioctl>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d149      	bne.n	8007b3e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007aaa:	7b3b      	ldrb	r3, [r7, #12]
 8007aac:	099b      	lsrs	r3, r3, #6
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d104      	bne.n	8007abe <USER_SPI_ioctl+0x23e>
 8007ab4:	7dbb      	ldrb	r3, [r7, #22]
 8007ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d041      	beq.n	8007b42 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	623b      	str	r3, [r7, #32]
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8007ace:	4b23      	ldr	r3, [pc, #140]	; (8007b5c <USER_SPI_ioctl+0x2dc>)
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	f003 0308 	and.w	r3, r3, #8
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d105      	bne.n	8007ae6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007adc:	025b      	lsls	r3, r3, #9
 8007ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	025b      	lsls	r3, r3, #9
 8007ae4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007ae6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ae8:	2020      	movs	r0, #32
 8007aea:	f7ff fc78 	bl	80073de <send_cmd>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d128      	bne.n	8007b46 <USER_SPI_ioctl+0x2c6>
 8007af4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007af6:	2021      	movs	r0, #33	; 0x21
 8007af8:	f7ff fc71 	bl	80073de <send_cmd>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d121      	bne.n	8007b46 <USER_SPI_ioctl+0x2c6>
 8007b02:	2100      	movs	r1, #0
 8007b04:	2026      	movs	r0, #38	; 0x26
 8007b06:	f7ff fc6a 	bl	80073de <send_cmd>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d11a      	bne.n	8007b46 <USER_SPI_ioctl+0x2c6>
 8007b10:	f247 5030 	movw	r0, #30000	; 0x7530
 8007b14:	f7ff fbbd 	bl	8007292 <wait_ready>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d013      	beq.n	8007b46 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007b1e:	2300      	movs	r3, #0
 8007b20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007b24:	e00f      	b.n	8007b46 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007b26:	2304      	movs	r3, #4
 8007b28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007b2c:	e00c      	b.n	8007b48 <USER_SPI_ioctl+0x2c8>
		break;
 8007b2e:	bf00      	nop
 8007b30:	e00a      	b.n	8007b48 <USER_SPI_ioctl+0x2c8>
		break;
 8007b32:	bf00      	nop
 8007b34:	e008      	b.n	8007b48 <USER_SPI_ioctl+0x2c8>
		break;
 8007b36:	bf00      	nop
 8007b38:	e006      	b.n	8007b48 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007b3a:	bf00      	nop
 8007b3c:	e004      	b.n	8007b48 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007b3e:	bf00      	nop
 8007b40:	e002      	b.n	8007b48 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007b42:	bf00      	nop
 8007b44:	e000      	b.n	8007b48 <USER_SPI_ioctl+0x2c8>
		break;
 8007b46:	bf00      	nop
	}

	despiselect();
 8007b48:	f7ff fbc6 	bl	80072d8 <despiselect>

	return res;
 8007b4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3730      	adds	r7, #48	; 0x30
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	200000f8 	.word	0x200000f8
 8007b5c:	20001b66 	.word	0x20001b66

08007b60 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	4603      	mov	r3, r0
 8007b68:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007b6a:	79fb      	ldrb	r3, [r7, #7]
 8007b6c:	4a08      	ldr	r2, [pc, #32]	; (8007b90 <disk_status+0x30>)
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	79fa      	ldrb	r2, [r7, #7]
 8007b78:	4905      	ldr	r1, [pc, #20]	; (8007b90 <disk_status+0x30>)
 8007b7a:	440a      	add	r2, r1
 8007b7c:	7a12      	ldrb	r2, [r2, #8]
 8007b7e:	4610      	mov	r0, r2
 8007b80:	4798      	blx	r3
 8007b82:	4603      	mov	r3, r0
 8007b84:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	20001b90 	.word	0x20001b90

08007b94 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007ba2:	79fb      	ldrb	r3, [r7, #7]
 8007ba4:	4a0d      	ldr	r2, [pc, #52]	; (8007bdc <disk_initialize+0x48>)
 8007ba6:	5cd3      	ldrb	r3, [r2, r3]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d111      	bne.n	8007bd0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007bac:	79fb      	ldrb	r3, [r7, #7]
 8007bae:	4a0b      	ldr	r2, [pc, #44]	; (8007bdc <disk_initialize+0x48>)
 8007bb0:	2101      	movs	r1, #1
 8007bb2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	4a09      	ldr	r2, [pc, #36]	; (8007bdc <disk_initialize+0x48>)
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	79fa      	ldrb	r2, [r7, #7]
 8007bc2:	4906      	ldr	r1, [pc, #24]	; (8007bdc <disk_initialize+0x48>)
 8007bc4:	440a      	add	r2, r1
 8007bc6:	7a12      	ldrb	r2, [r2, #8]
 8007bc8:	4610      	mov	r0, r2
 8007bca:	4798      	blx	r3
 8007bcc:	4603      	mov	r3, r0
 8007bce:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20001b90 	.word	0x20001b90

08007be0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007be0:	b590      	push	{r4, r7, lr}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60b9      	str	r1, [r7, #8]
 8007be8:	607a      	str	r2, [r7, #4]
 8007bea:	603b      	str	r3, [r7, #0]
 8007bec:	4603      	mov	r3, r0
 8007bee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
 8007bf2:	4a0a      	ldr	r2, [pc, #40]	; (8007c1c <disk_read+0x3c>)
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	689c      	ldr	r4, [r3, #8]
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
 8007bfe:	4a07      	ldr	r2, [pc, #28]	; (8007c1c <disk_read+0x3c>)
 8007c00:	4413      	add	r3, r2
 8007c02:	7a18      	ldrb	r0, [r3, #8]
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	68b9      	ldr	r1, [r7, #8]
 8007c0a:	47a0      	blx	r4
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	371c      	adds	r7, #28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd90      	pop	{r4, r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	20001b90 	.word	0x20001b90

08007c20 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007c20:	b590      	push	{r4, r7, lr}
 8007c22:	b087      	sub	sp, #28
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60b9      	str	r1, [r7, #8]
 8007c28:	607a      	str	r2, [r7, #4]
 8007c2a:	603b      	str	r3, [r7, #0]
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
 8007c32:	4a0a      	ldr	r2, [pc, #40]	; (8007c5c <disk_write+0x3c>)
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	68dc      	ldr	r4, [r3, #12]
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
 8007c3e:	4a07      	ldr	r2, [pc, #28]	; (8007c5c <disk_write+0x3c>)
 8007c40:	4413      	add	r3, r2
 8007c42:	7a18      	ldrb	r0, [r3, #8]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	68b9      	ldr	r1, [r7, #8]
 8007c4a:	47a0      	blx	r4
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	371c      	adds	r7, #28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd90      	pop	{r4, r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20001b90 	.word	0x20001b90

08007c60 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	4603      	mov	r3, r0
 8007c68:	603a      	str	r2, [r7, #0]
 8007c6a:	71fb      	strb	r3, [r7, #7]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007c70:	79fb      	ldrb	r3, [r7, #7]
 8007c72:	4a09      	ldr	r2, [pc, #36]	; (8007c98 <disk_ioctl+0x38>)
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	79fa      	ldrb	r2, [r7, #7]
 8007c7e:	4906      	ldr	r1, [pc, #24]	; (8007c98 <disk_ioctl+0x38>)
 8007c80:	440a      	add	r2, r1
 8007c82:	7a10      	ldrb	r0, [r2, #8]
 8007c84:	79b9      	ldrb	r1, [r7, #6]
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	4798      	blx	r3
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	73fb      	strb	r3, [r7, #15]
  return res;
 8007c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	20001b90 	.word	0x20001b90

08007c9c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007cac:	89fb      	ldrh	r3, [r7, #14]
 8007cae:	021b      	lsls	r3, r3, #8
 8007cb0:	b21a      	sxth	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	b21b      	sxth	r3, r3
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	b21b      	sxth	r3, r3
 8007cbc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007cbe:	89fb      	ldrh	r3, [r7, #14]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bc80      	pop	{r7}
 8007cc8:	4770      	bx	lr

08007cca <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b085      	sub	sp, #20
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	3303      	adds	r3, #3
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	021b      	lsls	r3, r3, #8
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	3202      	adds	r2, #2
 8007ce2:	7812      	ldrb	r2, [r2, #0]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	021b      	lsls	r3, r3, #8
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	3201      	adds	r2, #1
 8007cf0:	7812      	ldrb	r2, [r2, #0]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	021b      	lsls	r3, r3, #8
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	7812      	ldrb	r2, [r2, #0]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	60fb      	str	r3, [r7, #12]
	return rv;
 8007d02:	68fb      	ldr	r3, [r7, #12]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bc80      	pop	{r7}
 8007d0c:	4770      	bx	lr

08007d0e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	460b      	mov	r3, r1
 8007d18:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	1c5a      	adds	r2, r3, #1
 8007d1e:	607a      	str	r2, [r7, #4]
 8007d20:	887a      	ldrh	r2, [r7, #2]
 8007d22:	b2d2      	uxtb	r2, r2
 8007d24:	701a      	strb	r2, [r3, #0]
 8007d26:	887b      	ldrh	r3, [r7, #2]
 8007d28:	0a1b      	lsrs	r3, r3, #8
 8007d2a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	607a      	str	r2, [r7, #4]
 8007d32:	887a      	ldrh	r2, [r7, #2]
 8007d34:	b2d2      	uxtb	r2, r2
 8007d36:	701a      	strb	r2, [r3, #0]
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bc80      	pop	{r7}
 8007d40:	4770      	bx	lr

08007d42 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007d42:	b480      	push	{r7}
 8007d44:	b083      	sub	sp, #12
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	607a      	str	r2, [r7, #4]
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	b2d2      	uxtb	r2, r2
 8007d56:	701a      	strb	r2, [r3, #0]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	0a1b      	lsrs	r3, r3, #8
 8007d5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	b2d2      	uxtb	r2, r2
 8007d68:	701a      	strb	r2, [r3, #0]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	0a1b      	lsrs	r3, r3, #8
 8007d6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	607a      	str	r2, [r7, #4]
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	b2d2      	uxtb	r2, r2
 8007d7a:	701a      	strb	r2, [r3, #0]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	0a1b      	lsrs	r3, r3, #8
 8007d80:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	1c5a      	adds	r2, r3, #1
 8007d86:	607a      	str	r2, [r7, #4]
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	b2d2      	uxtb	r2, r2
 8007d8c:	701a      	strb	r2, [r3, #0]
}
 8007d8e:	bf00      	nop
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bc80      	pop	{r7}
 8007d96:	4770      	bx	lr

08007d98 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007d98:	b480      	push	{r7}
 8007d9a:	b087      	sub	sp, #28
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00d      	beq.n	8007dce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	1c53      	adds	r3, r2, #1
 8007db6:	613b      	str	r3, [r7, #16]
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	1c59      	adds	r1, r3, #1
 8007dbc:	6179      	str	r1, [r7, #20]
 8007dbe:	7812      	ldrb	r2, [r2, #0]
 8007dc0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	607b      	str	r3, [r7, #4]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1f1      	bne.n	8007db2 <mem_cpy+0x1a>
	}
}
 8007dce:	bf00      	nop
 8007dd0:	371c      	adds	r7, #28
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bc80      	pop	{r7}
 8007dd6:	4770      	bx	lr

08007dd8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007dd8:	b480      	push	{r7}
 8007dda:	b087      	sub	sp, #28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	617a      	str	r2, [r7, #20]
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	b2d2      	uxtb	r2, r2
 8007df2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	3b01      	subs	r3, #1
 8007df8:	607b      	str	r3, [r7, #4]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1f3      	bne.n	8007de8 <mem_set+0x10>
}
 8007e00:	bf00      	nop
 8007e02:	bf00      	nop
 8007e04:	371c      	adds	r7, #28
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bc80      	pop	{r7}
 8007e0a:	4770      	bx	lr

08007e0c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007e0c:	b480      	push	{r7}
 8007e0e:	b089      	sub	sp, #36	; 0x24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	61fb      	str	r3, [r7, #28]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007e20:	2300      	movs	r3, #0
 8007e22:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	1c5a      	adds	r2, r3, #1
 8007e28:	61fa      	str	r2, [r7, #28]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	1c5a      	adds	r2, r3, #1
 8007e32:	61ba      	str	r2, [r7, #24]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	1acb      	subs	r3, r1, r3
 8007e38:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	607b      	str	r3, [r7, #4]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d002      	beq.n	8007e4c <mem_cmp+0x40>
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d0eb      	beq.n	8007e24 <mem_cmp+0x18>

	return r;
 8007e4c:	697b      	ldr	r3, [r7, #20]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3724      	adds	r7, #36	; 0x24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bc80      	pop	{r7}
 8007e56:	4770      	bx	lr

08007e58 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007e62:	e002      	b.n	8007e6a <chk_chr+0x12>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3301      	adds	r3, #1
 8007e68:	607b      	str	r3, [r7, #4]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d005      	beq.n	8007e7e <chk_chr+0x26>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	461a      	mov	r2, r3
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d1f2      	bne.n	8007e64 <chk_chr+0xc>
	return *str;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	781b      	ldrb	r3, [r3, #0]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bc80      	pop	{r7}
 8007e8a:	4770      	bx	lr

08007e8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007e96:	2300      	movs	r3, #0
 8007e98:	60bb      	str	r3, [r7, #8]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	60fb      	str	r3, [r7, #12]
 8007e9e:	e029      	b.n	8007ef4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007ea0:	4a26      	ldr	r2, [pc, #152]	; (8007f3c <chk_lock+0xb0>)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	011b      	lsls	r3, r3, #4
 8007ea6:	4413      	add	r3, r2
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d01d      	beq.n	8007eea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007eae:	4a23      	ldr	r2, [pc, #140]	; (8007f3c <chk_lock+0xb0>)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	011b      	lsls	r3, r3, #4
 8007eb4:	4413      	add	r3, r2
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d116      	bne.n	8007eee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007ec0:	4a1e      	ldr	r2, [pc, #120]	; (8007f3c <chk_lock+0xb0>)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	011b      	lsls	r3, r3, #4
 8007ec6:	4413      	add	r3, r2
 8007ec8:	3304      	adds	r3, #4
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d10c      	bne.n	8007eee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007ed4:	4a19      	ldr	r2, [pc, #100]	; (8007f3c <chk_lock+0xb0>)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	011b      	lsls	r3, r3, #4
 8007eda:	4413      	add	r3, r2
 8007edc:	3308      	adds	r3, #8
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d102      	bne.n	8007eee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007ee8:	e007      	b.n	8007efa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007eea:	2301      	movs	r3, #1
 8007eec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d9d2      	bls.n	8007ea0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d109      	bne.n	8007f14 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d102      	bne.n	8007f0c <chk_lock+0x80>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d101      	bne.n	8007f10 <chk_lock+0x84>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	e010      	b.n	8007f32 <chk_lock+0xa6>
 8007f10:	2312      	movs	r3, #18
 8007f12:	e00e      	b.n	8007f32 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d108      	bne.n	8007f2c <chk_lock+0xa0>
 8007f1a:	4a08      	ldr	r2, [pc, #32]	; (8007f3c <chk_lock+0xb0>)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	011b      	lsls	r3, r3, #4
 8007f20:	4413      	add	r3, r2
 8007f22:	330c      	adds	r3, #12
 8007f24:	881b      	ldrh	r3, [r3, #0]
 8007f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f2a:	d101      	bne.n	8007f30 <chk_lock+0xa4>
 8007f2c:	2310      	movs	r3, #16
 8007f2e:	e000      	b.n	8007f32 <chk_lock+0xa6>
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bc80      	pop	{r7}
 8007f3a:	4770      	bx	lr
 8007f3c:	20001b70 	.word	0x20001b70

08007f40 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007f46:	2300      	movs	r3, #0
 8007f48:	607b      	str	r3, [r7, #4]
 8007f4a:	e002      	b.n	8007f52 <enq_lock+0x12>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	607b      	str	r3, [r7, #4]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d806      	bhi.n	8007f66 <enq_lock+0x26>
 8007f58:	4a08      	ldr	r2, [pc, #32]	; (8007f7c <enq_lock+0x3c>)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	011b      	lsls	r3, r3, #4
 8007f5e:	4413      	add	r3, r2
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1f2      	bne.n	8007f4c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	bf14      	ite	ne
 8007f6c:	2301      	movne	r3, #1
 8007f6e:	2300      	moveq	r3, #0
 8007f70:	b2db      	uxtb	r3, r3
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bc80      	pop	{r7}
 8007f7a:	4770      	bx	lr
 8007f7c:	20001b70 	.word	0x20001b70

08007f80 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	60fb      	str	r3, [r7, #12]
 8007f8e:	e01f      	b.n	8007fd0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007f90:	4a41      	ldr	r2, [pc, #260]	; (8008098 <inc_lock+0x118>)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	011b      	lsls	r3, r3, #4
 8007f96:	4413      	add	r3, r2
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d113      	bne.n	8007fca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007fa2:	4a3d      	ldr	r2, [pc, #244]	; (8008098 <inc_lock+0x118>)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	011b      	lsls	r3, r3, #4
 8007fa8:	4413      	add	r3, r2
 8007faa:	3304      	adds	r3, #4
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d109      	bne.n	8007fca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007fb6:	4a38      	ldr	r2, [pc, #224]	; (8008098 <inc_lock+0x118>)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	011b      	lsls	r3, r3, #4
 8007fbc:	4413      	add	r3, r2
 8007fbe:	3308      	adds	r3, #8
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d006      	beq.n	8007fd8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d9dc      	bls.n	8007f90 <inc_lock+0x10>
 8007fd6:	e000      	b.n	8007fda <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007fd8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d132      	bne.n	8008046 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	60fb      	str	r3, [r7, #12]
 8007fe4:	e002      	b.n	8007fec <inc_lock+0x6c>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d806      	bhi.n	8008000 <inc_lock+0x80>
 8007ff2:	4a29      	ldr	r2, [pc, #164]	; (8008098 <inc_lock+0x118>)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	011b      	lsls	r3, r3, #4
 8007ff8:	4413      	add	r3, r2
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1f2      	bne.n	8007fe6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2b02      	cmp	r3, #2
 8008004:	d101      	bne.n	800800a <inc_lock+0x8a>
 8008006:	2300      	movs	r3, #0
 8008008:	e040      	b.n	800808c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	4922      	ldr	r1, [pc, #136]	; (8008098 <inc_lock+0x118>)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	011b      	lsls	r3, r3, #4
 8008014:	440b      	add	r3, r1
 8008016:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	689a      	ldr	r2, [r3, #8]
 800801c:	491e      	ldr	r1, [pc, #120]	; (8008098 <inc_lock+0x118>)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	011b      	lsls	r3, r3, #4
 8008022:	440b      	add	r3, r1
 8008024:	3304      	adds	r3, #4
 8008026:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	695a      	ldr	r2, [r3, #20]
 800802c:	491a      	ldr	r1, [pc, #104]	; (8008098 <inc_lock+0x118>)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	011b      	lsls	r3, r3, #4
 8008032:	440b      	add	r3, r1
 8008034:	3308      	adds	r3, #8
 8008036:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008038:	4a17      	ldr	r2, [pc, #92]	; (8008098 <inc_lock+0x118>)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	4413      	add	r3, r2
 8008040:	330c      	adds	r3, #12
 8008042:	2200      	movs	r2, #0
 8008044:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d009      	beq.n	8008060 <inc_lock+0xe0>
 800804c:	4a12      	ldr	r2, [pc, #72]	; (8008098 <inc_lock+0x118>)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	011b      	lsls	r3, r3, #4
 8008052:	4413      	add	r3, r2
 8008054:	330c      	adds	r3, #12
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <inc_lock+0xe0>
 800805c:	2300      	movs	r3, #0
 800805e:	e015      	b.n	800808c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d108      	bne.n	8008078 <inc_lock+0xf8>
 8008066:	4a0c      	ldr	r2, [pc, #48]	; (8008098 <inc_lock+0x118>)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	011b      	lsls	r3, r3, #4
 800806c:	4413      	add	r3, r2
 800806e:	330c      	adds	r3, #12
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	3301      	adds	r3, #1
 8008074:	b29a      	uxth	r2, r3
 8008076:	e001      	b.n	800807c <inc_lock+0xfc>
 8008078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800807c:	4906      	ldr	r1, [pc, #24]	; (8008098 <inc_lock+0x118>)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	011b      	lsls	r3, r3, #4
 8008082:	440b      	add	r3, r1
 8008084:	330c      	adds	r3, #12
 8008086:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	3301      	adds	r3, #1
}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	bc80      	pop	{r7}
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	20001b70 	.word	0x20001b70

0800809c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	607b      	str	r3, [r7, #4]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d825      	bhi.n	80080fc <dec_lock+0x60>
		n = Files[i].ctr;
 80080b0:	4a16      	ldr	r2, [pc, #88]	; (800810c <dec_lock+0x70>)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	011b      	lsls	r3, r3, #4
 80080b6:	4413      	add	r3, r2
 80080b8:	330c      	adds	r3, #12
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80080be:	89fb      	ldrh	r3, [r7, #14]
 80080c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080c4:	d101      	bne.n	80080ca <dec_lock+0x2e>
 80080c6:	2300      	movs	r3, #0
 80080c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80080ca:	89fb      	ldrh	r3, [r7, #14]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <dec_lock+0x3a>
 80080d0:	89fb      	ldrh	r3, [r7, #14]
 80080d2:	3b01      	subs	r3, #1
 80080d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80080d6:	4a0d      	ldr	r2, [pc, #52]	; (800810c <dec_lock+0x70>)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	011b      	lsls	r3, r3, #4
 80080dc:	4413      	add	r3, r2
 80080de:	330c      	adds	r3, #12
 80080e0:	89fa      	ldrh	r2, [r7, #14]
 80080e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80080e4:	89fb      	ldrh	r3, [r7, #14]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d105      	bne.n	80080f6 <dec_lock+0x5a>
 80080ea:	4a08      	ldr	r2, [pc, #32]	; (800810c <dec_lock+0x70>)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	011b      	lsls	r3, r3, #4
 80080f0:	4413      	add	r3, r2
 80080f2:	2200      	movs	r2, #0
 80080f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	737b      	strb	r3, [r7, #13]
 80080fa:	e001      	b.n	8008100 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80080fc:	2302      	movs	r3, #2
 80080fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008100:	7b7b      	ldrb	r3, [r7, #13]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3714      	adds	r7, #20
 8008106:	46bd      	mov	sp, r7
 8008108:	bc80      	pop	{r7}
 800810a:	4770      	bx	lr
 800810c:	20001b70 	.word	0x20001b70

08008110 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008118:	2300      	movs	r3, #0
 800811a:	60fb      	str	r3, [r7, #12]
 800811c:	e010      	b.n	8008140 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800811e:	4a0d      	ldr	r2, [pc, #52]	; (8008154 <clear_lock+0x44>)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	011b      	lsls	r3, r3, #4
 8008124:	4413      	add	r3, r2
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	429a      	cmp	r2, r3
 800812c:	d105      	bne.n	800813a <clear_lock+0x2a>
 800812e:	4a09      	ldr	r2, [pc, #36]	; (8008154 <clear_lock+0x44>)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	011b      	lsls	r3, r3, #4
 8008134:	4413      	add	r3, r2
 8008136:	2200      	movs	r2, #0
 8008138:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3301      	adds	r3, #1
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2b01      	cmp	r3, #1
 8008144:	d9eb      	bls.n	800811e <clear_lock+0xe>
	}
}
 8008146:	bf00      	nop
 8008148:	bf00      	nop
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	bc80      	pop	{r7}
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	20001b70 	.word	0x20001b70

08008158 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	78db      	ldrb	r3, [r3, #3]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d034      	beq.n	80081d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008170:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	7858      	ldrb	r0, [r3, #1]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800817c:	2301      	movs	r3, #1
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	f7ff fd4e 	bl	8007c20 <disk_write>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <sync_window+0x38>
			res = FR_DISK_ERR;
 800818a:	2301      	movs	r3, #1
 800818c:	73fb      	strb	r3, [r7, #15]
 800818e:	e022      	b.n	80081d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	1ad2      	subs	r2, r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d217      	bcs.n	80081d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	789b      	ldrb	r3, [r3, #2]
 80081aa:	613b      	str	r3, [r7, #16]
 80081ac:	e010      	b.n	80081d0 <sync_window+0x78>
					wsect += fs->fsize;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	4413      	add	r3, r2
 80081b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	7858      	ldrb	r0, [r3, #1]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80081c2:	2301      	movs	r3, #1
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	f7ff fd2b 	bl	8007c20 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	613b      	str	r3, [r7, #16]
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d8eb      	bhi.n	80081ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3718      	adds	r7, #24
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d01b      	beq.n	8008230 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff ffad 	bl	8008158 <sync_window>
 80081fe:	4603      	mov	r3, r0
 8008200:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008202:	7bfb      	ldrb	r3, [r7, #15]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d113      	bne.n	8008230 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	7858      	ldrb	r0, [r3, #1]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008212:	2301      	movs	r3, #1
 8008214:	683a      	ldr	r2, [r7, #0]
 8008216:	f7ff fce3 	bl	8007be0 <disk_read>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d004      	beq.n	800822a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008220:	f04f 33ff 	mov.w	r3, #4294967295
 8008224:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008226:	2301      	movs	r3, #1
 8008228:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	683a      	ldr	r2, [r7, #0]
 800822e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008230:	7bfb      	ldrb	r3, [r7, #15]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
	...

0800823c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f7ff ff87 	bl	8008158 <sync_window>
 800824a:	4603      	mov	r3, r0
 800824c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800824e:	7bfb      	ldrb	r3, [r7, #15]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d158      	bne.n	8008306 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	2b03      	cmp	r3, #3
 800825a:	d148      	bne.n	80082ee <sync_fs+0xb2>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	791b      	ldrb	r3, [r3, #4]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d144      	bne.n	80082ee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3330      	adds	r3, #48	; 0x30
 8008268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800826c:	2100      	movs	r1, #0
 800826e:	4618      	mov	r0, r3
 8008270:	f7ff fdb2 	bl	8007dd8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	3330      	adds	r3, #48	; 0x30
 8008278:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800827c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008280:	4618      	mov	r0, r3
 8008282:	f7ff fd44 	bl	8007d0e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	3330      	adds	r3, #48	; 0x30
 800828a:	4921      	ldr	r1, [pc, #132]	; (8008310 <sync_fs+0xd4>)
 800828c:	4618      	mov	r0, r3
 800828e:	f7ff fd58 	bl	8007d42 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	3330      	adds	r3, #48	; 0x30
 8008296:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800829a:	491e      	ldr	r1, [pc, #120]	; (8008314 <sync_fs+0xd8>)
 800829c:	4618      	mov	r0, r3
 800829e:	f7ff fd50 	bl	8007d42 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3330      	adds	r3, #48	; 0x30
 80082a6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	4619      	mov	r1, r3
 80082b0:	4610      	mov	r0, r2
 80082b2:	f7ff fd46 	bl	8007d42 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	3330      	adds	r3, #48	; 0x30
 80082ba:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	4619      	mov	r1, r3
 80082c4:	4610      	mov	r0, r2
 80082c6:	f7ff fd3c 	bl	8007d42 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	1c5a      	adds	r2, r3, #1
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	7858      	ldrb	r0, [r3, #1]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e2:	2301      	movs	r3, #1
 80082e4:	f7ff fc9c 	bl	8007c20 <disk_write>
			fs->fsi_flag = 0;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	785b      	ldrb	r3, [r3, #1]
 80082f2:	2200      	movs	r2, #0
 80082f4:	2100      	movs	r1, #0
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7ff fcb2 	bl	8007c60 <disk_ioctl>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <sync_fs+0xca>
 8008302:	2301      	movs	r3, #1
 8008304:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008306:	7bfb      	ldrb	r3, [r7, #15]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	41615252 	.word	0x41615252
 8008314:	61417272 	.word	0x61417272

08008318 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	3b02      	subs	r3, #2
 8008326:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	695b      	ldr	r3, [r3, #20]
 800832c:	3b02      	subs	r3, #2
 800832e:	683a      	ldr	r2, [r7, #0]
 8008330:	429a      	cmp	r2, r3
 8008332:	d301      	bcc.n	8008338 <clust2sect+0x20>
 8008334:	2300      	movs	r3, #0
 8008336:	e008      	b.n	800834a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	895b      	ldrh	r3, [r3, #10]
 800833c:	461a      	mov	r2, r3
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	fb03 f202 	mul.w	r2, r3, r2
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008348:	4413      	add	r3, r2
}
 800834a:	4618      	mov	r0, r3
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	bc80      	pop	{r7}
 8008352:	4770      	bx	lr

08008354 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d904      	bls.n	8008374 <get_fat+0x20>
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	429a      	cmp	r2, r3
 8008372:	d302      	bcc.n	800837a <get_fat+0x26>
		val = 1;	/* Internal error */
 8008374:	2301      	movs	r3, #1
 8008376:	617b      	str	r3, [r7, #20]
 8008378:	e08f      	b.n	800849a <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800837a:	f04f 33ff 	mov.w	r3, #4294967295
 800837e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	2b03      	cmp	r3, #3
 8008386:	d062      	beq.n	800844e <get_fat+0xfa>
 8008388:	2b03      	cmp	r3, #3
 800838a:	dc7c      	bgt.n	8008486 <get_fat+0x132>
 800838c:	2b01      	cmp	r3, #1
 800838e:	d002      	beq.n	8008396 <get_fat+0x42>
 8008390:	2b02      	cmp	r3, #2
 8008392:	d042      	beq.n	800841a <get_fat+0xc6>
 8008394:	e077      	b.n	8008486 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	60fb      	str	r3, [r7, #12]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	085b      	lsrs	r3, r3, #1
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	4413      	add	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	6a1a      	ldr	r2, [r3, #32]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	0a5b      	lsrs	r3, r3, #9
 80083ac:	4413      	add	r3, r2
 80083ae:	4619      	mov	r1, r3
 80083b0:	6938      	ldr	r0, [r7, #16]
 80083b2:	f7ff ff15 	bl	80081e0 <move_window>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d167      	bne.n	800848c <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	1c5a      	adds	r2, r3, #1
 80083c0:	60fa      	str	r2, [r7, #12]
 80083c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083c6:	693a      	ldr	r2, [r7, #16]
 80083c8:	4413      	add	r3, r2
 80083ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80083ce:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	6a1a      	ldr	r2, [r3, #32]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	0a5b      	lsrs	r3, r3, #9
 80083d8:	4413      	add	r3, r2
 80083da:	4619      	mov	r1, r3
 80083dc:	6938      	ldr	r0, [r7, #16]
 80083de:	f7ff feff 	bl	80081e0 <move_window>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d153      	bne.n	8008490 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	4413      	add	r3, r2
 80083f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80083f6:	021b      	lsls	r3, r3, #8
 80083f8:	461a      	mov	r2, r3
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	2b00      	cmp	r3, #0
 8008408:	d002      	beq.n	8008410 <get_fat+0xbc>
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	091b      	lsrs	r3, r3, #4
 800840e:	e002      	b.n	8008416 <get_fat+0xc2>
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008416:	617b      	str	r3, [r7, #20]
			break;
 8008418:	e03f      	b.n	800849a <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	6a1a      	ldr	r2, [r3, #32]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	0a1b      	lsrs	r3, r3, #8
 8008422:	4413      	add	r3, r2
 8008424:	4619      	mov	r1, r3
 8008426:	6938      	ldr	r0, [r7, #16]
 8008428:	f7ff feda 	bl	80081e0 <move_window>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d130      	bne.n	8008494 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008440:	4413      	add	r3, r2
 8008442:	4618      	mov	r0, r3
 8008444:	f7ff fc2a 	bl	8007c9c <ld_word>
 8008448:	4603      	mov	r3, r0
 800844a:	617b      	str	r3, [r7, #20]
			break;
 800844c:	e025      	b.n	800849a <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	6a1a      	ldr	r2, [r3, #32]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	09db      	lsrs	r3, r3, #7
 8008456:	4413      	add	r3, r2
 8008458:	4619      	mov	r1, r3
 800845a:	6938      	ldr	r0, [r7, #16]
 800845c:	f7ff fec0 	bl	80081e0 <move_window>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d118      	bne.n	8008498 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008474:	4413      	add	r3, r2
 8008476:	4618      	mov	r0, r3
 8008478:	f7ff fc27 	bl	8007cca <ld_dword>
 800847c:	4603      	mov	r3, r0
 800847e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008482:	617b      	str	r3, [r7, #20]
			break;
 8008484:	e009      	b.n	800849a <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008486:	2301      	movs	r3, #1
 8008488:	617b      	str	r3, [r7, #20]
 800848a:	e006      	b.n	800849a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800848c:	bf00      	nop
 800848e:	e004      	b.n	800849a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008490:	bf00      	nop
 8008492:	e002      	b.n	800849a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008494:	bf00      	nop
 8008496:	e000      	b.n	800849a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008498:	bf00      	nop
		}
	}

	return val;
 800849a:	697b      	ldr	r3, [r7, #20]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80084a4:	b590      	push	{r4, r7, lr}
 80084a6:	b089      	sub	sp, #36	; 0x24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80084b0:	2302      	movs	r3, #2
 80084b2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	f240 80d2 	bls.w	8008660 <put_fat+0x1bc>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	f080 80cc 	bcs.w	8008660 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	2b03      	cmp	r3, #3
 80084ce:	f000 8096 	beq.w	80085fe <put_fat+0x15a>
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	f300 80cd 	bgt.w	8008672 <put_fat+0x1ce>
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d002      	beq.n	80084e2 <put_fat+0x3e>
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d06e      	beq.n	80085be <put_fat+0x11a>
 80084e0:	e0c7      	b.n	8008672 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	61bb      	str	r3, [r7, #24]
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	085b      	lsrs	r3, r3, #1
 80084ea:	69ba      	ldr	r2, [r7, #24]
 80084ec:	4413      	add	r3, r2
 80084ee:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6a1a      	ldr	r2, [r3, #32]
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	0a5b      	lsrs	r3, r3, #9
 80084f8:	4413      	add	r3, r2
 80084fa:	4619      	mov	r1, r3
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f7ff fe6f 	bl	80081e0 <move_window>
 8008502:	4603      	mov	r3, r0
 8008504:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008506:	7ffb      	ldrb	r3, [r7, #31]
 8008508:	2b00      	cmp	r3, #0
 800850a:	f040 80ab 	bne.w	8008664 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	1c59      	adds	r1, r3, #1
 8008518:	61b9      	str	r1, [r7, #24]
 800851a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800851e:	4413      	add	r3, r2
 8008520:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00d      	beq.n	8008548 <put_fat+0xa4>
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	b25b      	sxtb	r3, r3
 8008532:	f003 030f 	and.w	r3, r3, #15
 8008536:	b25a      	sxtb	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	b2db      	uxtb	r3, r3
 800853c:	011b      	lsls	r3, r3, #4
 800853e:	b25b      	sxtb	r3, r3
 8008540:	4313      	orrs	r3, r2
 8008542:	b25b      	sxtb	r3, r3
 8008544:	b2db      	uxtb	r3, r3
 8008546:	e001      	b.n	800854c <put_fat+0xa8>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	b2db      	uxtb	r3, r3
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2201      	movs	r2, #1
 8008554:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6a1a      	ldr	r2, [r3, #32]
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	0a5b      	lsrs	r3, r3, #9
 800855e:	4413      	add	r3, r2
 8008560:	4619      	mov	r1, r3
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f7ff fe3c 	bl	80081e0 <move_window>
 8008568:	4603      	mov	r3, r0
 800856a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800856c:	7ffb      	ldrb	r3, [r7, #31]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d17a      	bne.n	8008668 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800857e:	4413      	add	r3, r2
 8008580:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	f003 0301 	and.w	r3, r3, #1
 8008588:	2b00      	cmp	r3, #0
 800858a:	d003      	beq.n	8008594 <put_fat+0xf0>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	091b      	lsrs	r3, r3, #4
 8008590:	b2db      	uxtb	r3, r3
 8008592:	e00e      	b.n	80085b2 <put_fat+0x10e>
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	b25b      	sxtb	r3, r3
 800859a:	f023 030f 	bic.w	r3, r3, #15
 800859e:	b25a      	sxtb	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	0a1b      	lsrs	r3, r3, #8
 80085a4:	b25b      	sxtb	r3, r3
 80085a6:	f003 030f 	and.w	r3, r3, #15
 80085aa:	b25b      	sxtb	r3, r3
 80085ac:	4313      	orrs	r3, r2
 80085ae:	b25b      	sxtb	r3, r3
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2201      	movs	r2, #1
 80085ba:	70da      	strb	r2, [r3, #3]
			break;
 80085bc:	e059      	b.n	8008672 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6a1a      	ldr	r2, [r3, #32]
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	0a1b      	lsrs	r3, r3, #8
 80085c6:	4413      	add	r3, r2
 80085c8:	4619      	mov	r1, r3
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f7ff fe08 	bl	80081e0 <move_window>
 80085d0:	4603      	mov	r3, r0
 80085d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80085d4:	7ffb      	ldrb	r3, [r7, #31]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d148      	bne.n	800866c <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	005b      	lsls	r3, r3, #1
 80085e4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80085e8:	4413      	add	r3, r2
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	b292      	uxth	r2, r2
 80085ee:	4611      	mov	r1, r2
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7ff fb8c 	bl	8007d0e <st_word>
			fs->wflag = 1;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2201      	movs	r2, #1
 80085fa:	70da      	strb	r2, [r3, #3]
			break;
 80085fc:	e039      	b.n	8008672 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6a1a      	ldr	r2, [r3, #32]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	09db      	lsrs	r3, r3, #7
 8008606:	4413      	add	r3, r2
 8008608:	4619      	mov	r1, r3
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f7ff fde8 	bl	80081e0 <move_window>
 8008610:	4603      	mov	r3, r0
 8008612:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008614:	7ffb      	ldrb	r3, [r7, #31]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d12a      	bne.n	8008670 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800862e:	4413      	add	r3, r2
 8008630:	4618      	mov	r0, r3
 8008632:	f7ff fb4a 	bl	8007cca <ld_dword>
 8008636:	4603      	mov	r3, r0
 8008638:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800863c:	4323      	orrs	r3, r4
 800863e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800864e:	4413      	add	r3, r2
 8008650:	6879      	ldr	r1, [r7, #4]
 8008652:	4618      	mov	r0, r3
 8008654:	f7ff fb75 	bl	8007d42 <st_dword>
			fs->wflag = 1;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2201      	movs	r2, #1
 800865c:	70da      	strb	r2, [r3, #3]
			break;
 800865e:	e008      	b.n	8008672 <put_fat+0x1ce>
		}
	}
 8008660:	bf00      	nop
 8008662:	e006      	b.n	8008672 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008664:	bf00      	nop
 8008666:	e004      	b.n	8008672 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008668:	bf00      	nop
 800866a:	e002      	b.n	8008672 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800866c:	bf00      	nop
 800866e:	e000      	b.n	8008672 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008670:	bf00      	nop
	return res;
 8008672:	7ffb      	ldrb	r3, [r7, #31]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3724      	adds	r7, #36	; 0x24
 8008678:	46bd      	mov	sp, r7
 800867a:	bd90      	pop	{r4, r7, pc}

0800867c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b088      	sub	sp, #32
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d904      	bls.n	80086a2 <remove_chain+0x26>
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d301      	bcc.n	80086a6 <remove_chain+0x2a>
 80086a2:	2302      	movs	r3, #2
 80086a4:	e04b      	b.n	800873e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00c      	beq.n	80086c6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80086ac:	f04f 32ff 	mov.w	r2, #4294967295
 80086b0:	6879      	ldr	r1, [r7, #4]
 80086b2:	69b8      	ldr	r0, [r7, #24]
 80086b4:	f7ff fef6 	bl	80084a4 <put_fat>
 80086b8:	4603      	mov	r3, r0
 80086ba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80086bc:	7ffb      	ldrb	r3, [r7, #31]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d001      	beq.n	80086c6 <remove_chain+0x4a>
 80086c2:	7ffb      	ldrb	r3, [r7, #31]
 80086c4:	e03b      	b.n	800873e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80086c6:	68b9      	ldr	r1, [r7, #8]
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f7ff fe43 	bl	8008354 <get_fat>
 80086ce:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d031      	beq.n	800873a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d101      	bne.n	80086e0 <remove_chain+0x64>
 80086dc:	2302      	movs	r3, #2
 80086de:	e02e      	b.n	800873e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e6:	d101      	bne.n	80086ec <remove_chain+0x70>
 80086e8:	2301      	movs	r3, #1
 80086ea:	e028      	b.n	800873e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80086ec:	2200      	movs	r2, #0
 80086ee:	68b9      	ldr	r1, [r7, #8]
 80086f0:	69b8      	ldr	r0, [r7, #24]
 80086f2:	f7ff fed7 	bl	80084a4 <put_fat>
 80086f6:	4603      	mov	r3, r0
 80086f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80086fa:	7ffb      	ldrb	r3, [r7, #31]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d001      	beq.n	8008704 <remove_chain+0x88>
 8008700:	7ffb      	ldrb	r3, [r7, #31]
 8008702:	e01c      	b.n	800873e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	691a      	ldr	r2, [r3, #16]
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	3b02      	subs	r3, #2
 800870e:	429a      	cmp	r2, r3
 8008710:	d20b      	bcs.n	800872a <remove_chain+0xae>
			fs->free_clst++;
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	1c5a      	adds	r2, r3, #1
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	791b      	ldrb	r3, [r3, #4]
 8008720:	f043 0301 	orr.w	r3, r3, #1
 8008724:	b2da      	uxtb	r2, r3
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	429a      	cmp	r2, r3
 8008736:	d3c6      	bcc.n	80086c6 <remove_chain+0x4a>
 8008738:	e000      	b.n	800873c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800873a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3720      	adds	r7, #32
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b088      	sub	sp, #32
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10d      	bne.n	8008778 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d004      	beq.n	8008772 <create_chain+0x2c>
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	429a      	cmp	r2, r3
 8008770:	d31b      	bcc.n	80087aa <create_chain+0x64>
 8008772:	2301      	movs	r3, #1
 8008774:	61bb      	str	r3, [r7, #24]
 8008776:	e018      	b.n	80087aa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7ff fdea 	bl	8008354 <get_fat>
 8008780:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d801      	bhi.n	800878c <create_chain+0x46>
 8008788:	2301      	movs	r3, #1
 800878a:	e070      	b.n	800886e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008792:	d101      	bne.n	8008798 <create_chain+0x52>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	e06a      	b.n	800886e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d201      	bcs.n	80087a6 <create_chain+0x60>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	e063      	b.n	800886e <create_chain+0x128>
		scl = clst;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	3301      	adds	r3, #1
 80087b2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	69fa      	ldr	r2, [r7, #28]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d307      	bcc.n	80087ce <create_chain+0x88>
				ncl = 2;
 80087be:	2302      	movs	r3, #2
 80087c0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80087c2:	69fa      	ldr	r2, [r7, #28]
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d901      	bls.n	80087ce <create_chain+0x88>
 80087ca:	2300      	movs	r3, #0
 80087cc:	e04f      	b.n	800886e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80087ce:	69f9      	ldr	r1, [r7, #28]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f7ff fdbf 	bl	8008354 <get_fat>
 80087d6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00e      	beq.n	80087fc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d003      	beq.n	80087ec <create_chain+0xa6>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ea:	d101      	bne.n	80087f0 <create_chain+0xaa>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	e03e      	b.n	800886e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80087f0:	69fa      	ldr	r2, [r7, #28]
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d1da      	bne.n	80087ae <create_chain+0x68>
 80087f8:	2300      	movs	r3, #0
 80087fa:	e038      	b.n	800886e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80087fc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80087fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008802:	69f9      	ldr	r1, [r7, #28]
 8008804:	6938      	ldr	r0, [r7, #16]
 8008806:	f7ff fe4d 	bl	80084a4 <put_fat>
 800880a:	4603      	mov	r3, r0
 800880c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800880e:	7dfb      	ldrb	r3, [r7, #23]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d109      	bne.n	8008828 <create_chain+0xe2>
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d006      	beq.n	8008828 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800881a:	69fa      	ldr	r2, [r7, #28]
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	6938      	ldr	r0, [r7, #16]
 8008820:	f7ff fe40 	bl	80084a4 <put_fat>
 8008824:	4603      	mov	r3, r0
 8008826:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008828:	7dfb      	ldrb	r3, [r7, #23]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d116      	bne.n	800885c <create_chain+0x116>
		fs->last_clst = ncl;
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	69fa      	ldr	r2, [r7, #28]
 8008832:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	691a      	ldr	r2, [r3, #16]
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	695b      	ldr	r3, [r3, #20]
 800883c:	3b02      	subs	r3, #2
 800883e:	429a      	cmp	r2, r3
 8008840:	d804      	bhi.n	800884c <create_chain+0x106>
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	1e5a      	subs	r2, r3, #1
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	791b      	ldrb	r3, [r3, #4]
 8008850:	f043 0301 	orr.w	r3, r3, #1
 8008854:	b2da      	uxtb	r2, r3
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	711a      	strb	r2, [r3, #4]
 800885a:	e007      	b.n	800886c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800885c:	7dfb      	ldrb	r3, [r7, #23]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d102      	bne.n	8008868 <create_chain+0x122>
 8008862:	f04f 33ff 	mov.w	r3, #4294967295
 8008866:	e000      	b.n	800886a <create_chain+0x124>
 8008868:	2301      	movs	r3, #1
 800886a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800886c:	69fb      	ldr	r3, [r7, #28]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3720      	adds	r7, #32
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008876:	b480      	push	{r7}
 8008878:	b087      	sub	sp, #28
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888a:	3304      	adds	r3, #4
 800888c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	0a5b      	lsrs	r3, r3, #9
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	8952      	ldrh	r2, [r2, #10]
 8008896:	fbb3 f3f2 	udiv	r3, r3, r2
 800889a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	1d1a      	adds	r2, r3, #4
 80088a0:	613a      	str	r2, [r7, #16]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <clmt_clust+0x3a>
 80088ac:	2300      	movs	r3, #0
 80088ae:	e010      	b.n	80088d2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80088b0:	697a      	ldr	r2, [r7, #20]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d307      	bcc.n	80088c8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	617b      	str	r3, [r7, #20]
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	3304      	adds	r3, #4
 80088c4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80088c6:	e7e9      	b.n	800889c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80088c8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	4413      	add	r3, r2
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	371c      	adds	r7, #28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bc80      	pop	{r7}
 80088da:	4770      	bx	lr

080088dc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088f2:	d204      	bcs.n	80088fe <dir_sdi+0x22>
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	f003 031f 	and.w	r3, r3, #31
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d001      	beq.n	8008902 <dir_sdi+0x26>
		return FR_INT_ERR;
 80088fe:	2302      	movs	r3, #2
 8008900:	e063      	b.n	80089ca <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d106      	bne.n	8008922 <dir_sdi+0x46>
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	2b02      	cmp	r3, #2
 800891a:	d902      	bls.n	8008922 <dir_sdi+0x46>
		clst = fs->dirbase;
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008920:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10c      	bne.n	8008942 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	095b      	lsrs	r3, r3, #5
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	8912      	ldrh	r2, [r2, #8]
 8008930:	4293      	cmp	r3, r2
 8008932:	d301      	bcc.n	8008938 <dir_sdi+0x5c>
 8008934:	2302      	movs	r3, #2
 8008936:	e048      	b.n	80089ca <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	61da      	str	r2, [r3, #28]
 8008940:	e029      	b.n	8008996 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	895b      	ldrh	r3, [r3, #10]
 8008946:	025b      	lsls	r3, r3, #9
 8008948:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800894a:	e019      	b.n	8008980 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6979      	ldr	r1, [r7, #20]
 8008950:	4618      	mov	r0, r3
 8008952:	f7ff fcff 	bl	8008354 <get_fat>
 8008956:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895e:	d101      	bne.n	8008964 <dir_sdi+0x88>
 8008960:	2301      	movs	r3, #1
 8008962:	e032      	b.n	80089ca <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d904      	bls.n	8008974 <dir_sdi+0x98>
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	429a      	cmp	r2, r3
 8008972:	d301      	bcc.n	8008978 <dir_sdi+0x9c>
 8008974:	2302      	movs	r3, #2
 8008976:	e028      	b.n	80089ca <dir_sdi+0xee>
			ofs -= csz;
 8008978:	683a      	ldr	r2, [r7, #0]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008980:	683a      	ldr	r2, [r7, #0]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	429a      	cmp	r2, r3
 8008986:	d2e1      	bcs.n	800894c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008988:	6979      	ldr	r1, [r7, #20]
 800898a:	6938      	ldr	r0, [r7, #16]
 800898c:	f7ff fcc4 	bl	8008318 <clust2sect>
 8008990:	4602      	mov	r2, r0
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	69db      	ldr	r3, [r3, #28]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d101      	bne.n	80089a8 <dir_sdi+0xcc>
 80089a4:	2302      	movs	r3, #2
 80089a6:	e010      	b.n	80089ca <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	69da      	ldr	r2, [r3, #28]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	0a5b      	lsrs	r3, r3, #9
 80089b0:	441a      	add	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c2:	441a      	add	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3718      	adds	r7, #24
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b086      	sub	sp, #24
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	3320      	adds	r3, #32
 80089e8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	69db      	ldr	r3, [r3, #28]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d003      	beq.n	80089fa <dir_next+0x28>
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089f8:	d301      	bcc.n	80089fe <dir_next+0x2c>
 80089fa:	2304      	movs	r3, #4
 80089fc:	e0aa      	b.n	8008b54 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f040 8098 	bne.w	8008b3a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	69db      	ldr	r3, [r3, #28]
 8008a0e:	1c5a      	adds	r2, r3, #1
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10b      	bne.n	8008a34 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	095b      	lsrs	r3, r3, #5
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	8912      	ldrh	r2, [r2, #8]
 8008a24:	4293      	cmp	r3, r2
 8008a26:	f0c0 8088 	bcc.w	8008b3a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	61da      	str	r2, [r3, #28]
 8008a30:	2304      	movs	r3, #4
 8008a32:	e08f      	b.n	8008b54 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	0a5b      	lsrs	r3, r3, #9
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	8952      	ldrh	r2, [r2, #10]
 8008a3c:	3a01      	subs	r2, #1
 8008a3e:	4013      	ands	r3, r2
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d17a      	bne.n	8008b3a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	4610      	mov	r0, r2
 8008a4e:	f7ff fc81 	bl	8008354 <get_fat>
 8008a52:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d801      	bhi.n	8008a5e <dir_next+0x8c>
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	e07a      	b.n	8008b54 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a64:	d101      	bne.n	8008a6a <dir_next+0x98>
 8008a66:	2301      	movs	r3, #1
 8008a68:	e074      	b.n	8008b54 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d358      	bcc.n	8008b26 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d104      	bne.n	8008a84 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	61da      	str	r2, [r3, #28]
 8008a80:	2304      	movs	r3, #4
 8008a82:	e067      	b.n	8008b54 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	f7ff fe5a 	bl	8008746 <create_chain>
 8008a92:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <dir_next+0xcc>
 8008a9a:	2307      	movs	r3, #7
 8008a9c:	e05a      	b.n	8008b54 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d101      	bne.n	8008aa8 <dir_next+0xd6>
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	e055      	b.n	8008b54 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aae:	d101      	bne.n	8008ab4 <dir_next+0xe2>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e04f      	b.n	8008b54 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f7ff fb4f 	bl	8008158 <sync_window>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <dir_next+0xf2>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e047      	b.n	8008b54 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3330      	adds	r3, #48	; 0x30
 8008ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008acc:	2100      	movs	r1, #0
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7ff f982 	bl	8007dd8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	613b      	str	r3, [r7, #16]
 8008ad8:	6979      	ldr	r1, [r7, #20]
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f7ff fc1c 	bl	8008318 <clust2sect>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	62da      	str	r2, [r3, #44]	; 0x2c
 8008ae6:	e012      	b.n	8008b0e <dir_next+0x13c>
						fs->wflag = 1;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2201      	movs	r2, #1
 8008aec:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f7ff fb32 	bl	8008158 <sync_window>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d001      	beq.n	8008afe <dir_next+0x12c>
 8008afa:	2301      	movs	r3, #1
 8008afc:	e02a      	b.n	8008b54 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	3301      	adds	r3, #1
 8008b02:	613b      	str	r3, [r7, #16]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b08:	1c5a      	adds	r2, r3, #1
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	895b      	ldrh	r3, [r3, #10]
 8008b12:	461a      	mov	r2, r3
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d3e6      	bcc.n	8008ae8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	1ad2      	subs	r2, r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	697a      	ldr	r2, [r7, #20]
 8008b2a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008b2c:	6979      	ldr	r1, [r7, #20]
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f7ff fbf2 	bl	8008318 <clust2sect>
 8008b34:	4602      	mov	r2, r0
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b4c:	441a      	add	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3718      	adds	r7, #24
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7ff feb4 	bl	80088dc <dir_sdi>
 8008b74:	4603      	mov	r3, r0
 8008b76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008b78:	7dfb      	ldrb	r3, [r7, #23]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d12b      	bne.n	8008bd6 <dir_alloc+0x7a>
		n = 0;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	69db      	ldr	r3, [r3, #28]
 8008b86:	4619      	mov	r1, r3
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f7ff fb29 	bl	80081e0 <move_window>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008b92:	7dfb      	ldrb	r3, [r7, #23]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d11d      	bne.n	8008bd4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6a1b      	ldr	r3, [r3, #32]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	2be5      	cmp	r3, #229	; 0xe5
 8008ba0:	d004      	beq.n	8008bac <dir_alloc+0x50>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d107      	bne.n	8008bbc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	613b      	str	r3, [r7, #16]
 8008bb2:	693a      	ldr	r2, [r7, #16]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d102      	bne.n	8008bc0 <dir_alloc+0x64>
 8008bba:	e00c      	b.n	8008bd6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7ff ff05 	bl	80089d2 <dir_next>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008bcc:	7dfb      	ldrb	r3, [r7, #23]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d0d7      	beq.n	8008b82 <dir_alloc+0x26>
 8008bd2:	e000      	b.n	8008bd6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008bd4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	2b04      	cmp	r3, #4
 8008bda:	d101      	bne.n	8008be0 <dir_alloc+0x84>
 8008bdc:	2307      	movs	r3, #7
 8008bde:	75fb      	strb	r3, [r7, #23]
	return res;
 8008be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3718      	adds	r7, #24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b084      	sub	sp, #16
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	331a      	adds	r3, #26
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7ff f84f 	bl	8007c9c <ld_word>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d109      	bne.n	8008c1e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	3314      	adds	r3, #20
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7ff f844 	bl	8007c9c <ld_word>
 8008c14:	4603      	mov	r3, r0
 8008c16:	041b      	lsls	r3, r3, #16
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	331a      	adds	r3, #26
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	b292      	uxth	r2, r2
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7ff f865 	bl	8007d0e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d109      	bne.n	8008c60 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	f103 0214 	add.w	r2, r3, #20
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	0c1b      	lsrs	r3, r3, #16
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	4619      	mov	r1, r3
 8008c5a:	4610      	mov	r0, r2
 8008c5c:	f7ff f857 	bl	8007d0e <st_word>
	}
}
 8008c60:	bf00      	nop
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b086      	sub	sp, #24
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008c76:	2100      	movs	r1, #0
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff fe2f 	bl	80088dc <dir_sdi>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008c82:	7dfb      	ldrb	r3, [r7, #23]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d001      	beq.n	8008c8c <dir_find+0x24>
 8008c88:	7dfb      	ldrb	r3, [r7, #23]
 8008c8a:	e03e      	b.n	8008d0a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	69db      	ldr	r3, [r3, #28]
 8008c90:	4619      	mov	r1, r3
 8008c92:	6938      	ldr	r0, [r7, #16]
 8008c94:	f7ff faa4 	bl	80081e0 <move_window>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008c9c:	7dfb      	ldrb	r3, [r7, #23]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d12f      	bne.n	8008d02 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d102      	bne.n	8008cb6 <dir_find+0x4e>
 8008cb0:	2304      	movs	r3, #4
 8008cb2:	75fb      	strb	r3, [r7, #23]
 8008cb4:	e028      	b.n	8008d08 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
 8008cba:	330b      	adds	r3, #11
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cc2:	b2da      	uxtb	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a1b      	ldr	r3, [r3, #32]
 8008ccc:	330b      	adds	r3, #11
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	f003 0308 	and.w	r3, r3, #8
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d10a      	bne.n	8008cee <dir_find+0x86>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a18      	ldr	r0, [r3, #32]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	3324      	adds	r3, #36	; 0x24
 8008ce0:	220b      	movs	r2, #11
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	f7ff f892 	bl	8007e0c <mem_cmp>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00b      	beq.n	8008d06 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008cee:	2100      	movs	r1, #0
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f7ff fe6e 	bl	80089d2 <dir_next>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008cfa:	7dfb      	ldrb	r3, [r7, #23]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d0c5      	beq.n	8008c8c <dir_find+0x24>
 8008d00:	e002      	b.n	8008d08 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008d02:	bf00      	nop
 8008d04:	e000      	b.n	8008d08 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008d06:	bf00      	nop

	return res;
 8008d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3718      	adds	r7, #24
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b084      	sub	sp, #16
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008d20:	2101      	movs	r1, #1
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f7ff ff1a 	bl	8008b5c <dir_alloc>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d11c      	bne.n	8008d6c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	69db      	ldr	r3, [r3, #28]
 8008d36:	4619      	mov	r1, r3
 8008d38:	68b8      	ldr	r0, [r7, #8]
 8008d3a:	f7ff fa51 	bl	80081e0 <move_window>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d111      	bne.n	8008d6c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6a1b      	ldr	r3, [r3, #32]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	2100      	movs	r1, #0
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7ff f841 	bl	8007dd8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a18      	ldr	r0, [r3, #32]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	3324      	adds	r3, #36	; 0x24
 8008d5e:	220b      	movs	r2, #11
 8008d60:	4619      	mov	r1, r3
 8008d62:	f7ff f819 	bl	8007d98 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
	...

08008d78 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b088      	sub	sp, #32
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	3324      	adds	r3, #36	; 0x24
 8008d8c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008d8e:	220b      	movs	r2, #11
 8008d90:	2120      	movs	r1, #32
 8008d92:	68b8      	ldr	r0, [r7, #8]
 8008d94:	f7ff f820 	bl	8007dd8 <mem_set>
	si = i = 0; ni = 8;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	613b      	str	r3, [r7, #16]
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	61fb      	str	r3, [r7, #28]
 8008da0:	2308      	movs	r3, #8
 8008da2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	61fa      	str	r2, [r7, #28]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	4413      	add	r3, r2
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008db2:	7efb      	ldrb	r3, [r7, #27]
 8008db4:	2b20      	cmp	r3, #32
 8008db6:	d94e      	bls.n	8008e56 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008db8:	7efb      	ldrb	r3, [r7, #27]
 8008dba:	2b2f      	cmp	r3, #47	; 0x2f
 8008dbc:	d006      	beq.n	8008dcc <create_name+0x54>
 8008dbe:	7efb      	ldrb	r3, [r7, #27]
 8008dc0:	2b5c      	cmp	r3, #92	; 0x5c
 8008dc2:	d110      	bne.n	8008de6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008dc4:	e002      	b.n	8008dcc <create_name+0x54>
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	61fb      	str	r3, [r7, #28]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	2b2f      	cmp	r3, #47	; 0x2f
 8008dd6:	d0f6      	beq.n	8008dc6 <create_name+0x4e>
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	4413      	add	r3, r2
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	2b5c      	cmp	r3, #92	; 0x5c
 8008de2:	d0f0      	beq.n	8008dc6 <create_name+0x4e>
			break;
 8008de4:	e038      	b.n	8008e58 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008de6:	7efb      	ldrb	r3, [r7, #27]
 8008de8:	2b2e      	cmp	r3, #46	; 0x2e
 8008dea:	d003      	beq.n	8008df4 <create_name+0x7c>
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d30c      	bcc.n	8008e0e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	2b0b      	cmp	r3, #11
 8008df8:	d002      	beq.n	8008e00 <create_name+0x88>
 8008dfa:	7efb      	ldrb	r3, [r7, #27]
 8008dfc:	2b2e      	cmp	r3, #46	; 0x2e
 8008dfe:	d001      	beq.n	8008e04 <create_name+0x8c>
 8008e00:	2306      	movs	r3, #6
 8008e02:	e044      	b.n	8008e8e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008e04:	2308      	movs	r3, #8
 8008e06:	613b      	str	r3, [r7, #16]
 8008e08:	230b      	movs	r3, #11
 8008e0a:	617b      	str	r3, [r7, #20]
			continue;
 8008e0c:	e022      	b.n	8008e54 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008e0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	da04      	bge.n	8008e20 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008e16:	7efb      	ldrb	r3, [r7, #27]
 8008e18:	3b80      	subs	r3, #128	; 0x80
 8008e1a:	4a1f      	ldr	r2, [pc, #124]	; (8008e98 <create_name+0x120>)
 8008e1c:	5cd3      	ldrb	r3, [r2, r3]
 8008e1e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008e20:	7efb      	ldrb	r3, [r7, #27]
 8008e22:	4619      	mov	r1, r3
 8008e24:	481d      	ldr	r0, [pc, #116]	; (8008e9c <create_name+0x124>)
 8008e26:	f7ff f817 	bl	8007e58 <chk_chr>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <create_name+0xbc>
 8008e30:	2306      	movs	r3, #6
 8008e32:	e02c      	b.n	8008e8e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008e34:	7efb      	ldrb	r3, [r7, #27]
 8008e36:	2b60      	cmp	r3, #96	; 0x60
 8008e38:	d905      	bls.n	8008e46 <create_name+0xce>
 8008e3a:	7efb      	ldrb	r3, [r7, #27]
 8008e3c:	2b7a      	cmp	r3, #122	; 0x7a
 8008e3e:	d802      	bhi.n	8008e46 <create_name+0xce>
 8008e40:	7efb      	ldrb	r3, [r7, #27]
 8008e42:	3b20      	subs	r3, #32
 8008e44:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	1c5a      	adds	r2, r3, #1
 8008e4a:	613a      	str	r2, [r7, #16]
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	4413      	add	r3, r2
 8008e50:	7efa      	ldrb	r2, [r7, #27]
 8008e52:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008e54:	e7a6      	b.n	8008da4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008e56:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	441a      	add	r2, r3
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <create_name+0xf4>
 8008e68:	2306      	movs	r3, #6
 8008e6a:	e010      	b.n	8008e8e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	2be5      	cmp	r3, #229	; 0xe5
 8008e72:	d102      	bne.n	8008e7a <create_name+0x102>
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	2205      	movs	r2, #5
 8008e78:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008e7a:	7efb      	ldrb	r3, [r7, #27]
 8008e7c:	2b20      	cmp	r3, #32
 8008e7e:	d801      	bhi.n	8008e84 <create_name+0x10c>
 8008e80:	2204      	movs	r2, #4
 8008e82:	e000      	b.n	8008e86 <create_name+0x10e>
 8008e84:	2200      	movs	r2, #0
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	330b      	adds	r3, #11
 8008e8a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008e8c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3720      	adds	r7, #32
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	0800a028 	.word	0x0800a028
 8008e9c:	08009f80 	.word	0x08009f80

08008ea0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008eb4:	e002      	b.n	8008ebc <follow_path+0x1c>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	603b      	str	r3, [r7, #0]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	2b2f      	cmp	r3, #47	; 0x2f
 8008ec2:	d0f8      	beq.n	8008eb6 <follow_path+0x16>
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	2b5c      	cmp	r3, #92	; 0x5c
 8008eca:	d0f4      	beq.n	8008eb6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	2b1f      	cmp	r3, #31
 8008ed8:	d80a      	bhi.n	8008ef0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2280      	movs	r2, #128	; 0x80
 8008ede:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f7ff fcf9 	bl	80088dc <dir_sdi>
 8008eea:	4603      	mov	r3, r0
 8008eec:	75fb      	strb	r3, [r7, #23]
 8008eee:	e043      	b.n	8008f78 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008ef0:	463b      	mov	r3, r7
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f7ff ff3f 	bl	8008d78 <create_name>
 8008efa:	4603      	mov	r3, r0
 8008efc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008efe:	7dfb      	ldrb	r3, [r7, #23]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d134      	bne.n	8008f6e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f7ff feaf 	bl	8008c68 <dir_find>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008f14:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008f16:	7dfb      	ldrb	r3, [r7, #23]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00a      	beq.n	8008f32 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008f1c:	7dfb      	ldrb	r3, [r7, #23]
 8008f1e:	2b04      	cmp	r3, #4
 8008f20:	d127      	bne.n	8008f72 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008f22:	7afb      	ldrb	r3, [r7, #11]
 8008f24:	f003 0304 	and.w	r3, r3, #4
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d122      	bne.n	8008f72 <follow_path+0xd2>
 8008f2c:	2305      	movs	r3, #5
 8008f2e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008f30:	e01f      	b.n	8008f72 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008f32:	7afb      	ldrb	r3, [r7, #11]
 8008f34:	f003 0304 	and.w	r3, r3, #4
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d11c      	bne.n	8008f76 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	799b      	ldrb	r3, [r3, #6]
 8008f40:	f003 0310 	and.w	r3, r3, #16
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d102      	bne.n	8008f4e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008f48:	2305      	movs	r3, #5
 8008f4a:	75fb      	strb	r3, [r7, #23]
 8008f4c:	e014      	b.n	8008f78 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	695b      	ldr	r3, [r3, #20]
 8008f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f5c:	4413      	add	r3, r2
 8008f5e:	4619      	mov	r1, r3
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f7ff fe42 	bl	8008bea <ld_clust>
 8008f66:	4602      	mov	r2, r0
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008f6c:	e7c0      	b.n	8008ef0 <follow_path+0x50>
			if (res != FR_OK) break;
 8008f6e:	bf00      	nop
 8008f70:	e002      	b.n	8008f78 <follow_path+0xd8>
				break;
 8008f72:	bf00      	nop
 8008f74:	e000      	b.n	8008f78 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008f76:	bf00      	nop
			}
		}
	}

	return res;
 8008f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3718      	adds	r7, #24
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008f82:	b480      	push	{r7}
 8008f84:	b087      	sub	sp, #28
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f8e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d031      	beq.n	8008ffc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	617b      	str	r3, [r7, #20]
 8008f9e:	e002      	b.n	8008fa6 <get_ldnumber+0x24>
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	617b      	str	r3, [r7, #20]
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	2b20      	cmp	r3, #32
 8008fac:	d903      	bls.n	8008fb6 <get_ldnumber+0x34>
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	2b3a      	cmp	r3, #58	; 0x3a
 8008fb4:	d1f4      	bne.n	8008fa0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	2b3a      	cmp	r3, #58	; 0x3a
 8008fbc:	d11c      	bne.n	8008ff8 <get_ldnumber+0x76>
			tp = *path;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	1c5a      	adds	r2, r3, #1
 8008fc8:	60fa      	str	r2, [r7, #12]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	3b30      	subs	r3, #48	; 0x30
 8008fce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	2b09      	cmp	r3, #9
 8008fd4:	d80e      	bhi.n	8008ff4 <get_ldnumber+0x72>
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d10a      	bne.n	8008ff4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d107      	bne.n	8008ff4 <get_ldnumber+0x72>
					vol = (int)i;
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	3301      	adds	r3, #1
 8008fec:	617b      	str	r3, [r7, #20]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	697a      	ldr	r2, [r7, #20]
 8008ff2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	e002      	b.n	8008ffe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008ffc:	693b      	ldr	r3, [r7, #16]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	371c      	adds	r7, #28
 8009002:	46bd      	mov	sp, r7
 8009004:	bc80      	pop	{r7}
 8009006:	4770      	bx	lr

08009008 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	70da      	strb	r2, [r3, #3]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f04f 32ff 	mov.w	r2, #4294967295
 800901e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009020:	6839      	ldr	r1, [r7, #0]
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7ff f8dc 	bl	80081e0 <move_window>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <check_fs+0x2a>
 800902e:	2304      	movs	r3, #4
 8009030:	e038      	b.n	80090a4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	3330      	adds	r3, #48	; 0x30
 8009036:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800903a:	4618      	mov	r0, r3
 800903c:	f7fe fe2e 	bl	8007c9c <ld_word>
 8009040:	4603      	mov	r3, r0
 8009042:	461a      	mov	r2, r3
 8009044:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009048:	429a      	cmp	r2, r3
 800904a:	d001      	beq.n	8009050 <check_fs+0x48>
 800904c:	2303      	movs	r3, #3
 800904e:	e029      	b.n	80090a4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009056:	2be9      	cmp	r3, #233	; 0xe9
 8009058:	d009      	beq.n	800906e <check_fs+0x66>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009060:	2beb      	cmp	r3, #235	; 0xeb
 8009062:	d11e      	bne.n	80090a2 <check_fs+0x9a>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800906a:	2b90      	cmp	r3, #144	; 0x90
 800906c:	d119      	bne.n	80090a2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	3330      	adds	r3, #48	; 0x30
 8009072:	3336      	adds	r3, #54	; 0x36
 8009074:	4618      	mov	r0, r3
 8009076:	f7fe fe28 	bl	8007cca <ld_dword>
 800907a:	4603      	mov	r3, r0
 800907c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009080:	4a0a      	ldr	r2, [pc, #40]	; (80090ac <check_fs+0xa4>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d101      	bne.n	800908a <check_fs+0x82>
 8009086:	2300      	movs	r3, #0
 8009088:	e00c      	b.n	80090a4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	3330      	adds	r3, #48	; 0x30
 800908e:	3352      	adds	r3, #82	; 0x52
 8009090:	4618      	mov	r0, r3
 8009092:	f7fe fe1a 	bl	8007cca <ld_dword>
 8009096:	4603      	mov	r3, r0
 8009098:	4a05      	ldr	r2, [pc, #20]	; (80090b0 <check_fs+0xa8>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d101      	bne.n	80090a2 <check_fs+0x9a>
 800909e:	2300      	movs	r3, #0
 80090a0:	e000      	b.n	80090a4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80090a2:	2302      	movs	r3, #2
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	00544146 	.word	0x00544146
 80090b0:	33544146 	.word	0x33544146

080090b4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b096      	sub	sp, #88	; 0x58
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	4613      	mov	r3, r2
 80090c0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	2200      	movs	r2, #0
 80090c6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f7ff ff5a 	bl	8008f82 <get_ldnumber>
 80090ce:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80090d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	da01      	bge.n	80090da <find_volume+0x26>
 80090d6:	230b      	movs	r3, #11
 80090d8:	e22e      	b.n	8009538 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80090da:	4aa8      	ldr	r2, [pc, #672]	; (800937c <find_volume+0x2c8>)
 80090dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090e2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80090e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <find_volume+0x3a>
 80090ea:	230c      	movs	r3, #12
 80090ec:	e224      	b.n	8009538 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090f2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80090f4:	79fb      	ldrb	r3, [r7, #7]
 80090f6:	f023 0301 	bic.w	r3, r3, #1
 80090fa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80090fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d01a      	beq.n	800913a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009106:	785b      	ldrb	r3, [r3, #1]
 8009108:	4618      	mov	r0, r3
 800910a:	f7fe fd29 	bl	8007b60 <disk_status>
 800910e:	4603      	mov	r3, r0
 8009110:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009114:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009118:	f003 0301 	and.w	r3, r3, #1
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10c      	bne.n	800913a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009120:	79fb      	ldrb	r3, [r7, #7]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d007      	beq.n	8009136 <find_volume+0x82>
 8009126:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800912a:	f003 0304 	and.w	r3, r3, #4
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009132:	230a      	movs	r3, #10
 8009134:	e200      	b.n	8009538 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8009136:	2300      	movs	r3, #0
 8009138:	e1fe      	b.n	8009538 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800913a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913c:	2200      	movs	r2, #0
 800913e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009142:	b2da      	uxtb	r2, r3
 8009144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009146:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914a:	785b      	ldrb	r3, [r3, #1]
 800914c:	4618      	mov	r0, r3
 800914e:	f7fe fd21 	bl	8007b94 <disk_initialize>
 8009152:	4603      	mov	r3, r0
 8009154:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009158:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	2b00      	cmp	r3, #0
 8009162:	d001      	beq.n	8009168 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009164:	2303      	movs	r3, #3
 8009166:	e1e7      	b.n	8009538 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009168:	79fb      	ldrb	r3, [r7, #7]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d007      	beq.n	800917e <find_volume+0xca>
 800916e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009172:	f003 0304 	and.w	r3, r3, #4
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800917a:	230a      	movs	r3, #10
 800917c:	e1dc      	b.n	8009538 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800917e:	2300      	movs	r3, #0
 8009180:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009182:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009184:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009186:	f7ff ff3f 	bl	8009008 <check_fs>
 800918a:	4603      	mov	r3, r0
 800918c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009190:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009194:	2b02      	cmp	r3, #2
 8009196:	d14b      	bne.n	8009230 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009198:	2300      	movs	r3, #0
 800919a:	643b      	str	r3, [r7, #64]	; 0x40
 800919c:	e01f      	b.n	80091de <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800919e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80091a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091a6:	011b      	lsls	r3, r3, #4
 80091a8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80091ac:	4413      	add	r3, r2
 80091ae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80091b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b2:	3304      	adds	r3, #4
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d006      	beq.n	80091c8 <find_volume+0x114>
 80091ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091bc:	3308      	adds	r3, #8
 80091be:	4618      	mov	r0, r3
 80091c0:	f7fe fd83 	bl	8007cca <ld_dword>
 80091c4:	4602      	mov	r2, r0
 80091c6:	e000      	b.n	80091ca <find_volume+0x116>
 80091c8:	2200      	movs	r2, #0
 80091ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80091d2:	440b      	add	r3, r1
 80091d4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80091d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091da:	3301      	adds	r3, #1
 80091dc:	643b      	str	r3, [r7, #64]	; 0x40
 80091de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091e0:	2b03      	cmp	r3, #3
 80091e2:	d9dc      	bls.n	800919e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80091e4:	2300      	movs	r3, #0
 80091e6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80091e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d002      	beq.n	80091f4 <find_volume+0x140>
 80091ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091f0:	3b01      	subs	r3, #1
 80091f2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80091f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80091fc:	4413      	add	r3, r2
 80091fe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009202:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009206:	2b00      	cmp	r3, #0
 8009208:	d005      	beq.n	8009216 <find_volume+0x162>
 800920a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800920c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800920e:	f7ff fefb 	bl	8009008 <check_fs>
 8009212:	4603      	mov	r3, r0
 8009214:	e000      	b.n	8009218 <find_volume+0x164>
 8009216:	2303      	movs	r3, #3
 8009218:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800921c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009220:	2b01      	cmp	r3, #1
 8009222:	d905      	bls.n	8009230 <find_volume+0x17c>
 8009224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009226:	3301      	adds	r3, #1
 8009228:	643b      	str	r3, [r7, #64]	; 0x40
 800922a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800922c:	2b03      	cmp	r3, #3
 800922e:	d9e1      	bls.n	80091f4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009230:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009234:	2b04      	cmp	r3, #4
 8009236:	d101      	bne.n	800923c <find_volume+0x188>
 8009238:	2301      	movs	r3, #1
 800923a:	e17d      	b.n	8009538 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800923c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009240:	2b01      	cmp	r3, #1
 8009242:	d901      	bls.n	8009248 <find_volume+0x194>
 8009244:	230d      	movs	r3, #13
 8009246:	e177      	b.n	8009538 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924a:	3330      	adds	r3, #48	; 0x30
 800924c:	330b      	adds	r3, #11
 800924e:	4618      	mov	r0, r3
 8009250:	f7fe fd24 	bl	8007c9c <ld_word>
 8009254:	4603      	mov	r3, r0
 8009256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800925a:	d001      	beq.n	8009260 <find_volume+0x1ac>
 800925c:	230d      	movs	r3, #13
 800925e:	e16b      	b.n	8009538 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009262:	3330      	adds	r3, #48	; 0x30
 8009264:	3316      	adds	r3, #22
 8009266:	4618      	mov	r0, r3
 8009268:	f7fe fd18 	bl	8007c9c <ld_word>
 800926c:	4603      	mov	r3, r0
 800926e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009272:	2b00      	cmp	r3, #0
 8009274:	d106      	bne.n	8009284 <find_volume+0x1d0>
 8009276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009278:	3330      	adds	r3, #48	; 0x30
 800927a:	3324      	adds	r3, #36	; 0x24
 800927c:	4618      	mov	r0, r3
 800927e:	f7fe fd24 	bl	8007cca <ld_dword>
 8009282:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009286:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009288:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800928a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009292:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009296:	789b      	ldrb	r3, [r3, #2]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d005      	beq.n	80092a8 <find_volume+0x1f4>
 800929c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929e:	789b      	ldrb	r3, [r3, #2]
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d001      	beq.n	80092a8 <find_volume+0x1f4>
 80092a4:	230d      	movs	r3, #13
 80092a6:	e147      	b.n	8009538 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80092a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092aa:	789b      	ldrb	r3, [r3, #2]
 80092ac:	461a      	mov	r2, r3
 80092ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092b0:	fb02 f303 	mul.w	r3, r2, r3
 80092b4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80092b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092bc:	b29a      	uxth	r2, r3
 80092be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80092c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c4:	895b      	ldrh	r3, [r3, #10]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d008      	beq.n	80092dc <find_volume+0x228>
 80092ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092cc:	895b      	ldrh	r3, [r3, #10]
 80092ce:	461a      	mov	r2, r3
 80092d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d2:	895b      	ldrh	r3, [r3, #10]
 80092d4:	3b01      	subs	r3, #1
 80092d6:	4013      	ands	r3, r2
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d001      	beq.n	80092e0 <find_volume+0x22c>
 80092dc:	230d      	movs	r3, #13
 80092de:	e12b      	b.n	8009538 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80092e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e2:	3330      	adds	r3, #48	; 0x30
 80092e4:	3311      	adds	r3, #17
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fe fcd8 	bl	8007c9c <ld_word>
 80092ec:	4603      	mov	r3, r0
 80092ee:	461a      	mov	r2, r3
 80092f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80092f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f6:	891b      	ldrh	r3, [r3, #8]
 80092f8:	f003 030f 	and.w	r3, r3, #15
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <find_volume+0x252>
 8009302:	230d      	movs	r3, #13
 8009304:	e118      	b.n	8009538 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009308:	3330      	adds	r3, #48	; 0x30
 800930a:	3313      	adds	r3, #19
 800930c:	4618      	mov	r0, r3
 800930e:	f7fe fcc5 	bl	8007c9c <ld_word>
 8009312:	4603      	mov	r3, r0
 8009314:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009318:	2b00      	cmp	r3, #0
 800931a:	d106      	bne.n	800932a <find_volume+0x276>
 800931c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931e:	3330      	adds	r3, #48	; 0x30
 8009320:	3320      	adds	r3, #32
 8009322:	4618      	mov	r0, r3
 8009324:	f7fe fcd1 	bl	8007cca <ld_dword>
 8009328:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800932a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932c:	3330      	adds	r3, #48	; 0x30
 800932e:	330e      	adds	r3, #14
 8009330:	4618      	mov	r0, r3
 8009332:	f7fe fcb3 	bl	8007c9c <ld_word>
 8009336:	4603      	mov	r3, r0
 8009338:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800933a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800933c:	2b00      	cmp	r3, #0
 800933e:	d101      	bne.n	8009344 <find_volume+0x290>
 8009340:	230d      	movs	r3, #13
 8009342:	e0f9      	b.n	8009538 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009344:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009348:	4413      	add	r3, r2
 800934a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800934c:	8912      	ldrh	r2, [r2, #8]
 800934e:	0912      	lsrs	r2, r2, #4
 8009350:	b292      	uxth	r2, r2
 8009352:	4413      	add	r3, r2
 8009354:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009356:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935a:	429a      	cmp	r2, r3
 800935c:	d201      	bcs.n	8009362 <find_volume+0x2ae>
 800935e:	230d      	movs	r3, #13
 8009360:	e0ea      	b.n	8009538 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800936a:	8952      	ldrh	r2, [r2, #10]
 800936c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009370:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009374:	2b00      	cmp	r3, #0
 8009376:	d103      	bne.n	8009380 <find_volume+0x2cc>
 8009378:	230d      	movs	r3, #13
 800937a:	e0dd      	b.n	8009538 <find_volume+0x484>
 800937c:	20001b68 	.word	0x20001b68
		fmt = FS_FAT32;
 8009380:	2303      	movs	r3, #3
 8009382:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009388:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800938c:	4293      	cmp	r3, r2
 800938e:	d802      	bhi.n	8009396 <find_volume+0x2e2>
 8009390:	2302      	movs	r3, #2
 8009392:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009398:	f640 72f5 	movw	r2, #4085	; 0xff5
 800939c:	4293      	cmp	r3, r2
 800939e:	d802      	bhi.n	80093a6 <find_volume+0x2f2>
 80093a0:	2301      	movs	r3, #1
 80093a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80093a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a8:	1c9a      	adds	r2, r3, #2
 80093aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ac:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80093ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80093b2:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80093b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80093b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093b8:	441a      	add	r2, r3
 80093ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093bc:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80093be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80093c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c2:	441a      	add	r2, r3
 80093c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c6:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80093c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093cc:	2b03      	cmp	r3, #3
 80093ce:	d11e      	bne.n	800940e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80093d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d2:	3330      	adds	r3, #48	; 0x30
 80093d4:	332a      	adds	r3, #42	; 0x2a
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fe fc60 	bl	8007c9c <ld_word>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <find_volume+0x332>
 80093e2:	230d      	movs	r3, #13
 80093e4:	e0a8      	b.n	8009538 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80093e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e8:	891b      	ldrh	r3, [r3, #8]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <find_volume+0x33e>
 80093ee:	230d      	movs	r3, #13
 80093f0:	e0a2      	b.n	8009538 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80093f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f4:	3330      	adds	r3, #48	; 0x30
 80093f6:	332c      	adds	r3, #44	; 0x2c
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fe fc66 	bl	8007cca <ld_dword>
 80093fe:	4602      	mov	r2, r0
 8009400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009402:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009406:	695b      	ldr	r3, [r3, #20]
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	647b      	str	r3, [r7, #68]	; 0x44
 800940c:	e01f      	b.n	800944e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800940e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009410:	891b      	ldrh	r3, [r3, #8]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d101      	bne.n	800941a <find_volume+0x366>
 8009416:	230d      	movs	r3, #13
 8009418:	e08e      	b.n	8009538 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800941a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941c:	6a1a      	ldr	r2, [r3, #32]
 800941e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009420:	441a      	add	r2, r3
 8009422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009424:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009426:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800942a:	2b02      	cmp	r3, #2
 800942c:	d103      	bne.n	8009436 <find_volume+0x382>
 800942e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009430:	695b      	ldr	r3, [r3, #20]
 8009432:	005b      	lsls	r3, r3, #1
 8009434:	e00a      	b.n	800944c <find_volume+0x398>
 8009436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009438:	695a      	ldr	r2, [r3, #20]
 800943a:	4613      	mov	r3, r2
 800943c:	005b      	lsls	r3, r3, #1
 800943e:	4413      	add	r3, r2
 8009440:	085a      	lsrs	r2, r3, #1
 8009442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009444:	695b      	ldr	r3, [r3, #20]
 8009446:	f003 0301 	and.w	r3, r3, #1
 800944a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800944c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800944e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009450:	699a      	ldr	r2, [r3, #24]
 8009452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009454:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009458:	0a5b      	lsrs	r3, r3, #9
 800945a:	429a      	cmp	r2, r3
 800945c:	d201      	bcs.n	8009462 <find_volume+0x3ae>
 800945e:	230d      	movs	r3, #13
 8009460:	e06a      	b.n	8009538 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009464:	f04f 32ff 	mov.w	r2, #4294967295
 8009468:	611a      	str	r2, [r3, #16]
 800946a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946c:	691a      	ldr	r2, [r3, #16]
 800946e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009470:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009474:	2280      	movs	r2, #128	; 0x80
 8009476:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009478:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800947c:	2b03      	cmp	r3, #3
 800947e:	d149      	bne.n	8009514 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009482:	3330      	adds	r3, #48	; 0x30
 8009484:	3330      	adds	r3, #48	; 0x30
 8009486:	4618      	mov	r0, r3
 8009488:	f7fe fc08 	bl	8007c9c <ld_word>
 800948c:	4603      	mov	r3, r0
 800948e:	2b01      	cmp	r3, #1
 8009490:	d140      	bne.n	8009514 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009494:	3301      	adds	r3, #1
 8009496:	4619      	mov	r1, r3
 8009498:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800949a:	f7fe fea1 	bl	80081e0 <move_window>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d137      	bne.n	8009514 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80094a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a6:	2200      	movs	r2, #0
 80094a8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80094aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ac:	3330      	adds	r3, #48	; 0x30
 80094ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fe fbf2 	bl	8007c9c <ld_word>
 80094b8:	4603      	mov	r3, r0
 80094ba:	461a      	mov	r2, r3
 80094bc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d127      	bne.n	8009514 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80094c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c6:	3330      	adds	r3, #48	; 0x30
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7fe fbfe 	bl	8007cca <ld_dword>
 80094ce:	4603      	mov	r3, r0
 80094d0:	4a1b      	ldr	r2, [pc, #108]	; (8009540 <find_volume+0x48c>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d11e      	bne.n	8009514 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80094d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d8:	3330      	adds	r3, #48	; 0x30
 80094da:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fe fbf3 	bl	8007cca <ld_dword>
 80094e4:	4603      	mov	r3, r0
 80094e6:	4a17      	ldr	r2, [pc, #92]	; (8009544 <find_volume+0x490>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d113      	bne.n	8009514 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80094ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ee:	3330      	adds	r3, #48	; 0x30
 80094f0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7fe fbe8 	bl	8007cca <ld_dword>
 80094fa:	4602      	mov	r2, r0
 80094fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fe:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009502:	3330      	adds	r3, #48	; 0x30
 8009504:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009508:	4618      	mov	r0, r3
 800950a:	f7fe fbde 	bl	8007cca <ld_dword>
 800950e:	4602      	mov	r2, r0
 8009510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009512:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009516:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800951a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800951c:	4b0a      	ldr	r3, [pc, #40]	; (8009548 <find_volume+0x494>)
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	3301      	adds	r3, #1
 8009522:	b29a      	uxth	r2, r3
 8009524:	4b08      	ldr	r3, [pc, #32]	; (8009548 <find_volume+0x494>)
 8009526:	801a      	strh	r2, [r3, #0]
 8009528:	4b07      	ldr	r3, [pc, #28]	; (8009548 <find_volume+0x494>)
 800952a:	881a      	ldrh	r2, [r3, #0]
 800952c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009530:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009532:	f7fe fded 	bl	8008110 <clear_lock>
#endif
	return FR_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3758      	adds	r7, #88	; 0x58
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	41615252 	.word	0x41615252
 8009544:	61417272 	.word	0x61417272
 8009548:	20001b6c 	.word	0x20001b6c

0800954c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009556:	2309      	movs	r3, #9
 8009558:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d01c      	beq.n	800959a <validate+0x4e>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d018      	beq.n	800959a <validate+0x4e>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d013      	beq.n	800959a <validate+0x4e>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	889a      	ldrh	r2, [r3, #4]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	88db      	ldrh	r3, [r3, #6]
 800957c:	429a      	cmp	r2, r3
 800957e:	d10c      	bne.n	800959a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	785b      	ldrb	r3, [r3, #1]
 8009586:	4618      	mov	r0, r3
 8009588:	f7fe faea 	bl	8007b60 <disk_status>
 800958c:	4603      	mov	r3, r0
 800958e:	f003 0301 	and.w	r3, r3, #1
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <validate+0x4e>
			res = FR_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800959a:	7bfb      	ldrb	r3, [r7, #15]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d102      	bne.n	80095a6 <validate+0x5a>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	e000      	b.n	80095a8 <validate+0x5c>
 80095a6:	2300      	movs	r3, #0
 80095a8:	683a      	ldr	r2, [r7, #0]
 80095aa:	6013      	str	r3, [r2, #0]
	return res;
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
	...

080095b8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b088      	sub	sp, #32
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	4613      	mov	r3, r2
 80095c4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80095ca:	f107 0310 	add.w	r3, r7, #16
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7ff fcd7 	bl	8008f82 <get_ldnumber>
 80095d4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	da01      	bge.n	80095e0 <f_mount+0x28>
 80095dc:	230b      	movs	r3, #11
 80095de:	e02b      	b.n	8009638 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80095e0:	4a17      	ldr	r2, [pc, #92]	; (8009640 <f_mount+0x88>)
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095e8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d005      	beq.n	80095fc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80095f0:	69b8      	ldr	r0, [r7, #24]
 80095f2:	f7fe fd8d 	bl	8008110 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	2200      	movs	r2, #0
 80095fa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d002      	beq.n	8009608 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2200      	movs	r2, #0
 8009606:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	490d      	ldr	r1, [pc, #52]	; (8009640 <f_mount+0x88>)
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <f_mount+0x66>
 8009618:	79fb      	ldrb	r3, [r7, #7]
 800961a:	2b01      	cmp	r3, #1
 800961c:	d001      	beq.n	8009622 <f_mount+0x6a>
 800961e:	2300      	movs	r3, #0
 8009620:	e00a      	b.n	8009638 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009622:	f107 010c 	add.w	r1, r7, #12
 8009626:	f107 0308 	add.w	r3, r7, #8
 800962a:	2200      	movs	r2, #0
 800962c:	4618      	mov	r0, r3
 800962e:	f7ff fd41 	bl	80090b4 <find_volume>
 8009632:	4603      	mov	r3, r0
 8009634:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009636:	7dfb      	ldrb	r3, [r7, #23]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3720      	adds	r7, #32
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	20001b68 	.word	0x20001b68

08009644 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b098      	sub	sp, #96	; 0x60
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	4613      	mov	r3, r2
 8009650:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d101      	bne.n	800965c <f_open+0x18>
 8009658:	2309      	movs	r3, #9
 800965a:	e1ad      	b.n	80099b8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800965c:	79fb      	ldrb	r3, [r7, #7]
 800965e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009662:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009664:	79fa      	ldrb	r2, [r7, #7]
 8009666:	f107 0110 	add.w	r1, r7, #16
 800966a:	f107 0308 	add.w	r3, r7, #8
 800966e:	4618      	mov	r0, r3
 8009670:	f7ff fd20 	bl	80090b4 <find_volume>
 8009674:	4603      	mov	r3, r0
 8009676:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800967a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800967e:	2b00      	cmp	r3, #0
 8009680:	f040 8191 	bne.w	80099a6 <f_open+0x362>
		dj.obj.fs = fs;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	f107 0314 	add.w	r3, r7, #20
 800968e:	4611      	mov	r1, r2
 8009690:	4618      	mov	r0, r3
 8009692:	f7ff fc05 	bl	8008ea0 <follow_path>
 8009696:	4603      	mov	r3, r0
 8009698:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800969c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d11a      	bne.n	80096da <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80096a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80096a8:	b25b      	sxtb	r3, r3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	da03      	bge.n	80096b6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80096ae:	2306      	movs	r3, #6
 80096b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80096b4:	e011      	b.n	80096da <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80096b6:	79fb      	ldrb	r3, [r7, #7]
 80096b8:	f023 0301 	bic.w	r3, r3, #1
 80096bc:	2b00      	cmp	r3, #0
 80096be:	bf14      	ite	ne
 80096c0:	2301      	movne	r3, #1
 80096c2:	2300      	moveq	r3, #0
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	461a      	mov	r2, r3
 80096c8:	f107 0314 	add.w	r3, r7, #20
 80096cc:	4611      	mov	r1, r2
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fe fbdc 	bl	8007e8c <chk_lock>
 80096d4:	4603      	mov	r3, r0
 80096d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80096da:	79fb      	ldrb	r3, [r7, #7]
 80096dc:	f003 031c 	and.w	r3, r3, #28
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d07f      	beq.n	80097e4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80096e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d017      	beq.n	800971c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80096ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096f0:	2b04      	cmp	r3, #4
 80096f2:	d10e      	bne.n	8009712 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80096f4:	f7fe fc24 	bl	8007f40 <enq_lock>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d006      	beq.n	800970c <f_open+0xc8>
 80096fe:	f107 0314 	add.w	r3, r7, #20
 8009702:	4618      	mov	r0, r3
 8009704:	f7ff fb05 	bl	8008d12 <dir_register>
 8009708:	4603      	mov	r3, r0
 800970a:	e000      	b.n	800970e <f_open+0xca>
 800970c:	2312      	movs	r3, #18
 800970e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009712:	79fb      	ldrb	r3, [r7, #7]
 8009714:	f043 0308 	orr.w	r3, r3, #8
 8009718:	71fb      	strb	r3, [r7, #7]
 800971a:	e010      	b.n	800973e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800971c:	7ebb      	ldrb	r3, [r7, #26]
 800971e:	f003 0311 	and.w	r3, r3, #17
 8009722:	2b00      	cmp	r3, #0
 8009724:	d003      	beq.n	800972e <f_open+0xea>
					res = FR_DENIED;
 8009726:	2307      	movs	r3, #7
 8009728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800972c:	e007      	b.n	800973e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800972e:	79fb      	ldrb	r3, [r7, #7]
 8009730:	f003 0304 	and.w	r3, r3, #4
 8009734:	2b00      	cmp	r3, #0
 8009736:	d002      	beq.n	800973e <f_open+0xfa>
 8009738:	2308      	movs	r3, #8
 800973a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800973e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009742:	2b00      	cmp	r3, #0
 8009744:	d168      	bne.n	8009818 <f_open+0x1d4>
 8009746:	79fb      	ldrb	r3, [r7, #7]
 8009748:	f003 0308 	and.w	r3, r3, #8
 800974c:	2b00      	cmp	r3, #0
 800974e:	d063      	beq.n	8009818 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009750:	f7fd fccc 	bl	80070ec <get_fattime>
 8009754:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009758:	330e      	adds	r3, #14
 800975a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800975c:	4618      	mov	r0, r3
 800975e:	f7fe faf0 	bl	8007d42 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009764:	3316      	adds	r3, #22
 8009766:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009768:	4618      	mov	r0, r3
 800976a:	f7fe faea 	bl	8007d42 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800976e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009770:	330b      	adds	r3, #11
 8009772:	2220      	movs	r2, #32
 8009774:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800977a:	4611      	mov	r1, r2
 800977c:	4618      	mov	r0, r3
 800977e:	f7ff fa34 	bl	8008bea <ld_clust>
 8009782:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009788:	2200      	movs	r2, #0
 800978a:	4618      	mov	r0, r3
 800978c:	f7ff fa4c 	bl	8008c28 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009792:	331c      	adds	r3, #28
 8009794:	2100      	movs	r1, #0
 8009796:	4618      	mov	r0, r3
 8009798:	f7fe fad3 	bl	8007d42 <st_dword>
					fs->wflag = 1;
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	2201      	movs	r2, #1
 80097a0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80097a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d037      	beq.n	8009818 <f_open+0x1d4>
						dw = fs->winsect;
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ac:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80097ae:	f107 0314 	add.w	r3, r7, #20
 80097b2:	2200      	movs	r2, #0
 80097b4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fe ff60 	bl	800867c <remove_chain>
 80097bc:	4603      	mov	r3, r0
 80097be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80097c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d126      	bne.n	8009818 <f_open+0x1d4>
							res = move_window(fs, dw);
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fe fd06 	bl	80081e0 <move_window>
 80097d4:	4603      	mov	r3, r0
 80097d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097de:	3a01      	subs	r2, #1
 80097e0:	60da      	str	r2, [r3, #12]
 80097e2:	e019      	b.n	8009818 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80097e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d115      	bne.n	8009818 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80097ec:	7ebb      	ldrb	r3, [r7, #26]
 80097ee:	f003 0310 	and.w	r3, r3, #16
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d003      	beq.n	80097fe <f_open+0x1ba>
					res = FR_NO_FILE;
 80097f6:	2304      	movs	r3, #4
 80097f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80097fc:	e00c      	b.n	8009818 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80097fe:	79fb      	ldrb	r3, [r7, #7]
 8009800:	f003 0302 	and.w	r3, r3, #2
 8009804:	2b00      	cmp	r3, #0
 8009806:	d007      	beq.n	8009818 <f_open+0x1d4>
 8009808:	7ebb      	ldrb	r3, [r7, #26]
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	2b00      	cmp	r3, #0
 8009810:	d002      	beq.n	8009818 <f_open+0x1d4>
						res = FR_DENIED;
 8009812:	2307      	movs	r3, #7
 8009814:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009818:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800981c:	2b00      	cmp	r3, #0
 800981e:	d128      	bne.n	8009872 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009820:	79fb      	ldrb	r3, [r7, #7]
 8009822:	f003 0308 	and.w	r3, r3, #8
 8009826:	2b00      	cmp	r3, #0
 8009828:	d003      	beq.n	8009832 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800982a:	79fb      	ldrb	r3, [r7, #7]
 800982c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009830:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800983a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009840:	79fb      	ldrb	r3, [r7, #7]
 8009842:	f023 0301 	bic.w	r3, r3, #1
 8009846:	2b00      	cmp	r3, #0
 8009848:	bf14      	ite	ne
 800984a:	2301      	movne	r3, #1
 800984c:	2300      	moveq	r3, #0
 800984e:	b2db      	uxtb	r3, r3
 8009850:	461a      	mov	r2, r3
 8009852:	f107 0314 	add.w	r3, r7, #20
 8009856:	4611      	mov	r1, r2
 8009858:	4618      	mov	r0, r3
 800985a:	f7fe fb91 	bl	8007f80 <inc_lock>
 800985e:	4602      	mov	r2, r0
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d102      	bne.n	8009872 <f_open+0x22e>
 800986c:	2302      	movs	r3, #2
 800986e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009872:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009876:	2b00      	cmp	r3, #0
 8009878:	f040 8095 	bne.w	80099a6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009880:	4611      	mov	r1, r2
 8009882:	4618      	mov	r0, r3
 8009884:	f7ff f9b1 	bl	8008bea <ld_clust>
 8009888:	4602      	mov	r2, r0
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800988e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009890:	331c      	adds	r3, #28
 8009892:	4618      	mov	r0, r3
 8009894:	f7fe fa19 	bl	8007cca <ld_dword>
 8009898:	4602      	mov	r2, r0
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80098a4:	693a      	ldr	r2, [r7, #16]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	88da      	ldrh	r2, [r3, #6]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	79fa      	ldrb	r2, [r7, #7]
 80098b6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2200      	movs	r2, #0
 80098bc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2200      	movs	r2, #0
 80098c8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3330      	adds	r3, #48	; 0x30
 80098ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098d2:	2100      	movs	r1, #0
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7fe fa7f 	bl	8007dd8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80098da:	79fb      	ldrb	r3, [r7, #7]
 80098dc:	f003 0320 	and.w	r3, r3, #32
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d060      	beq.n	80099a6 <f_open+0x362>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d05c      	beq.n	80099a6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	68da      	ldr	r2, [r3, #12]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	895b      	ldrh	r3, [r3, #10]
 80098f8:	025b      	lsls	r3, r3, #9
 80098fa:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	657b      	str	r3, [r7, #84]	; 0x54
 8009908:	e016      	b.n	8009938 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800990e:	4618      	mov	r0, r3
 8009910:	f7fe fd20 	bl	8008354 <get_fat>
 8009914:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009918:	2b01      	cmp	r3, #1
 800991a:	d802      	bhi.n	8009922 <f_open+0x2de>
 800991c:	2302      	movs	r3, #2
 800991e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009928:	d102      	bne.n	8009930 <f_open+0x2ec>
 800992a:	2301      	movs	r3, #1
 800992c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009930:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	657b      	str	r3, [r7, #84]	; 0x54
 8009938:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800993c:	2b00      	cmp	r3, #0
 800993e:	d103      	bne.n	8009948 <f_open+0x304>
 8009940:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009944:	429a      	cmp	r2, r3
 8009946:	d8e0      	bhi.n	800990a <f_open+0x2c6>
				}
				fp->clust = clst;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800994c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800994e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009952:	2b00      	cmp	r3, #0
 8009954:	d127      	bne.n	80099a6 <f_open+0x362>
 8009956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800995c:	2b00      	cmp	r3, #0
 800995e:	d022      	beq.n	80099a6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009964:	4618      	mov	r0, r3
 8009966:	f7fe fcd7 	bl	8008318 <clust2sect>
 800996a:	6478      	str	r0, [r7, #68]	; 0x44
 800996c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800996e:	2b00      	cmp	r3, #0
 8009970:	d103      	bne.n	800997a <f_open+0x336>
						res = FR_INT_ERR;
 8009972:	2302      	movs	r3, #2
 8009974:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009978:	e015      	b.n	80099a6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800997a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800997c:	0a5a      	lsrs	r2, r3, #9
 800997e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009980:	441a      	add	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	7858      	ldrb	r0, [r3, #1]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6a1a      	ldr	r2, [r3, #32]
 8009994:	2301      	movs	r3, #1
 8009996:	f7fe f923 	bl	8007be0 <disk_read>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d002      	beq.n	80099a6 <f_open+0x362>
 80099a0:	2301      	movs	r3, #1
 80099a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80099a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d002      	beq.n	80099b4 <f_open+0x370>
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80099b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3760      	adds	r7, #96	; 0x60
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b08e      	sub	sp, #56	; 0x38
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
 80099cc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	2200      	movs	r2, #0
 80099d6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f107 0214 	add.w	r2, r7, #20
 80099de:	4611      	mov	r1, r2
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7ff fdb3 	bl	800954c <validate>
 80099e6:	4603      	mov	r3, r0
 80099e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80099ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d107      	bne.n	8009a04 <f_read+0x44>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	7d5b      	ldrb	r3, [r3, #21]
 80099f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80099fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <f_read+0x4a>
 8009a04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a08:	e115      	b.n	8009c36 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	7d1b      	ldrb	r3, [r3, #20]
 8009a0e:	f003 0301 	and.w	r3, r3, #1
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d101      	bne.n	8009a1a <f_read+0x5a>
 8009a16:	2307      	movs	r3, #7
 8009a18:	e10d      	b.n	8009c36 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	68da      	ldr	r2, [r3, #12]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	699b      	ldr	r3, [r3, #24]
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	6a3b      	ldr	r3, [r7, #32]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	f240 80fe 	bls.w	8009c2c <f_read+0x26c>
 8009a30:	6a3b      	ldr	r3, [r7, #32]
 8009a32:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009a34:	e0fa      	b.n	8009c2c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f040 80c6 	bne.w	8009bd0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	699b      	ldr	r3, [r3, #24]
 8009a48:	0a5b      	lsrs	r3, r3, #9
 8009a4a:	697a      	ldr	r2, [r7, #20]
 8009a4c:	8952      	ldrh	r2, [r2, #10]
 8009a4e:	3a01      	subs	r2, #1
 8009a50:	4013      	ands	r3, r2
 8009a52:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d12f      	bne.n	8009aba <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	699b      	ldr	r3, [r3, #24]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d103      	bne.n	8009a6a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	633b      	str	r3, [r7, #48]	; 0x30
 8009a68:	e013      	b.n	8009a92 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d007      	beq.n	8009a82 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	4619      	mov	r1, r3
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f7fe fefc 	bl	8008876 <clmt_clust>
 8009a7e:	6338      	str	r0, [r7, #48]	; 0x30
 8009a80:	e007      	b.n	8009a92 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	69db      	ldr	r3, [r3, #28]
 8009a88:	4619      	mov	r1, r3
 8009a8a:	4610      	mov	r0, r2
 8009a8c:	f7fe fc62 	bl	8008354 <get_fat>
 8009a90:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d804      	bhi.n	8009aa2 <f_read+0xe2>
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	755a      	strb	r2, [r3, #21]
 8009a9e:	2302      	movs	r3, #2
 8009aa0:	e0c9      	b.n	8009c36 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa8:	d104      	bne.n	8009ab4 <f_read+0xf4>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2201      	movs	r2, #1
 8009aae:	755a      	strb	r2, [r3, #21]
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e0c0      	b.n	8009c36 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ab8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009aba:	697a      	ldr	r2, [r7, #20]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	69db      	ldr	r3, [r3, #28]
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	4610      	mov	r0, r2
 8009ac4:	f7fe fc28 	bl	8008318 <clust2sect>
 8009ac8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d104      	bne.n	8009ada <f_read+0x11a>
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2202      	movs	r2, #2
 8009ad4:	755a      	strb	r2, [r3, #21]
 8009ad6:	2302      	movs	r3, #2
 8009ad8:	e0ad      	b.n	8009c36 <f_read+0x276>
			sect += csect;
 8009ada:	69ba      	ldr	r2, [r7, #24]
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	4413      	add	r3, r2
 8009ae0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	0a5b      	lsrs	r3, r3, #9
 8009ae6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d039      	beq.n	8009b62 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009aee:	69fa      	ldr	r2, [r7, #28]
 8009af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af2:	4413      	add	r3, r2
 8009af4:	697a      	ldr	r2, [r7, #20]
 8009af6:	8952      	ldrh	r2, [r2, #10]
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d905      	bls.n	8009b08 <f_read+0x148>
					cc = fs->csize - csect;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	895b      	ldrh	r3, [r3, #10]
 8009b00:	461a      	mov	r2, r3
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	7858      	ldrb	r0, [r3, #1]
 8009b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0e:	69ba      	ldr	r2, [r7, #24]
 8009b10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b12:	f7fe f865 	bl	8007be0 <disk_read>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d004      	beq.n	8009b26 <f_read+0x166>
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	755a      	strb	r2, [r3, #21]
 8009b22:	2301      	movs	r3, #1
 8009b24:	e087      	b.n	8009c36 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	7d1b      	ldrb	r3, [r3, #20]
 8009b2a:	b25b      	sxtb	r3, r3
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	da14      	bge.n	8009b5a <f_read+0x19a>
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6a1a      	ldr	r2, [r3, #32]
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d90d      	bls.n	8009b5a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6a1a      	ldr	r2, [r3, #32]
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	1ad3      	subs	r3, r2, r3
 8009b46:	025b      	lsls	r3, r3, #9
 8009b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b4a:	18d0      	adds	r0, r2, r3
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	3330      	adds	r3, #48	; 0x30
 8009b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b54:	4619      	mov	r1, r3
 8009b56:	f7fe f91f 	bl	8007d98 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5c:	025b      	lsls	r3, r3, #9
 8009b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009b60:	e050      	b.n	8009c04 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6a1b      	ldr	r3, [r3, #32]
 8009b66:	69ba      	ldr	r2, [r7, #24]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d02e      	beq.n	8009bca <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	7d1b      	ldrb	r3, [r3, #20]
 8009b70:	b25b      	sxtb	r3, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	da18      	bge.n	8009ba8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	7858      	ldrb	r0, [r3, #1]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6a1a      	ldr	r2, [r3, #32]
 8009b84:	2301      	movs	r3, #1
 8009b86:	f7fe f84b 	bl	8007c20 <disk_write>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d004      	beq.n	8009b9a <f_read+0x1da>
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2201      	movs	r2, #1
 8009b94:	755a      	strb	r2, [r3, #21]
 8009b96:	2301      	movs	r3, #1
 8009b98:	e04d      	b.n	8009c36 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	7d1b      	ldrb	r3, [r3, #20]
 8009b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	7858      	ldrb	r0, [r3, #1]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	69ba      	ldr	r2, [r7, #24]
 8009bb6:	f7fe f813 	bl	8007be0 <disk_read>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d004      	beq.n	8009bca <f_read+0x20a>
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	755a      	strb	r2, [r3, #21]
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e035      	b.n	8009c36 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	69ba      	ldr	r2, [r7, #24]
 8009bce:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	699b      	ldr	r3, [r3, #24]
 8009bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009bde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d901      	bls.n	8009bea <f_read+0x22a>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bf8:	4413      	add	r3, r2
 8009bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c00:	f7fe f8ca 	bl	8007d98 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c08:	4413      	add	r3, r2
 8009c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	699a      	ldr	r2, [r3, #24]
 8009c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c12:	441a      	add	r2, r3
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	619a      	str	r2, [r3, #24]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1e:	441a      	add	r2, r3
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	601a      	str	r2, [r3, #0]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	f47f af01 	bne.w	8009a36 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3738      	adds	r7, #56	; 0x38
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b086      	sub	sp, #24
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f107 0208 	add.w	r2, r7, #8
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7ff fc7c 	bl	800954c <validate>
 8009c54:	4603      	mov	r3, r0
 8009c56:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009c58:	7dfb      	ldrb	r3, [r7, #23]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d168      	bne.n	8009d30 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	7d1b      	ldrb	r3, [r3, #20]
 8009c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d062      	beq.n	8009d30 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	7d1b      	ldrb	r3, [r3, #20]
 8009c6e:	b25b      	sxtb	r3, r3
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	da15      	bge.n	8009ca0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	7858      	ldrb	r0, [r3, #1]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a1a      	ldr	r2, [r3, #32]
 8009c82:	2301      	movs	r3, #1
 8009c84:	f7fd ffcc 	bl	8007c20 <disk_write>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d001      	beq.n	8009c92 <f_sync+0x54>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e04f      	b.n	8009d32 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	7d1b      	ldrb	r3, [r3, #20]
 8009c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c9a:	b2da      	uxtb	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009ca0:	f7fd fa24 	bl	80070ec <get_fattime>
 8009ca4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cac:	4619      	mov	r1, r3
 8009cae:	4610      	mov	r0, r2
 8009cb0:	f7fe fa96 	bl	80081e0 <move_window>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009cb8:	7dfb      	ldrb	r3, [r7, #23]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d138      	bne.n	8009d30 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	330b      	adds	r3, #11
 8009cc8:	781a      	ldrb	r2, [r3, #0]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	330b      	adds	r3, #11
 8009cce:	f042 0220 	orr.w	r2, r2, #32
 8009cd2:	b2d2      	uxtb	r2, r2
 8009cd4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6818      	ldr	r0, [r3, #0]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	68f9      	ldr	r1, [r7, #12]
 8009ce2:	f7fe ffa1 	bl	8008c28 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f103 021c 	add.w	r2, r3, #28
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	4610      	mov	r0, r2
 8009cf4:	f7fe f825 	bl	8007d42 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	3316      	adds	r3, #22
 8009cfc:	6939      	ldr	r1, [r7, #16]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fe f81f 	bl	8007d42 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	3312      	adds	r3, #18
 8009d08:	2100      	movs	r1, #0
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fd ffff 	bl	8007d0e <st_word>
					fs->wflag = 1;
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	2201      	movs	r2, #1
 8009d14:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7fe fa8f 	bl	800823c <sync_fs>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	7d1b      	ldrb	r3, [r3, #20]
 8009d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d2a:	b2da      	uxtb	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3718      	adds	r7, #24
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b084      	sub	sp, #16
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7ff ff7b 	bl	8009c3e <f_sync>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d118      	bne.n	8009d84 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f107 0208 	add.w	r2, r7, #8
 8009d58:	4611      	mov	r1, r2
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7ff fbf6 	bl	800954c <validate>
 8009d60:	4603      	mov	r3, r0
 8009d62:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009d64:	7bfb      	ldrb	r3, [r7, #15]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10c      	bne.n	8009d84 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7fe f994 	bl	800809c <dec_lock>
 8009d74:	4603      	mov	r3, r0
 8009d76:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009d78:	7bfb      	ldrb	r3, [r7, #15]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d102      	bne.n	8009d84 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
	...

08009d90 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b087      	sub	sp, #28
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009da2:	2300      	movs	r3, #0
 8009da4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009da6:	4b1e      	ldr	r3, [pc, #120]	; (8009e20 <FATFS_LinkDriverEx+0x90>)
 8009da8:	7a5b      	ldrb	r3, [r3, #9]
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d131      	bne.n	8009e14 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009db0:	4b1b      	ldr	r3, [pc, #108]	; (8009e20 <FATFS_LinkDriverEx+0x90>)
 8009db2:	7a5b      	ldrb	r3, [r3, #9]
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	461a      	mov	r2, r3
 8009db8:	4b19      	ldr	r3, [pc, #100]	; (8009e20 <FATFS_LinkDriverEx+0x90>)
 8009dba:	2100      	movs	r1, #0
 8009dbc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009dbe:	4b18      	ldr	r3, [pc, #96]	; (8009e20 <FATFS_LinkDriverEx+0x90>)
 8009dc0:	7a5b      	ldrb	r3, [r3, #9]
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	4a16      	ldr	r2, [pc, #88]	; (8009e20 <FATFS_LinkDriverEx+0x90>)
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4413      	add	r3, r2
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009dce:	4b14      	ldr	r3, [pc, #80]	; (8009e20 <FATFS_LinkDriverEx+0x90>)
 8009dd0:	7a5b      	ldrb	r3, [r3, #9]
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	4b12      	ldr	r3, [pc, #72]	; (8009e20 <FATFS_LinkDriverEx+0x90>)
 8009dd8:	4413      	add	r3, r2
 8009dda:	79fa      	ldrb	r2, [r7, #7]
 8009ddc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009dde:	4b10      	ldr	r3, [pc, #64]	; (8009e20 <FATFS_LinkDriverEx+0x90>)
 8009de0:	7a5b      	ldrb	r3, [r3, #9]
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	1c5a      	adds	r2, r3, #1
 8009de6:	b2d1      	uxtb	r1, r2
 8009de8:	4a0d      	ldr	r2, [pc, #52]	; (8009e20 <FATFS_LinkDriverEx+0x90>)
 8009dea:	7251      	strb	r1, [r2, #9]
 8009dec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009dee:	7dbb      	ldrb	r3, [r7, #22]
 8009df0:	3330      	adds	r3, #48	; 0x30
 8009df2:	b2da      	uxtb	r2, r3
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	223a      	movs	r2, #58	; 0x3a
 8009dfe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	3302      	adds	r3, #2
 8009e04:	222f      	movs	r2, #47	; 0x2f
 8009e06:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	3303      	adds	r3, #3
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009e10:	2300      	movs	r3, #0
 8009e12:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	371c      	adds	r7, #28
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bc80      	pop	{r7}
 8009e1e:	4770      	bx	lr
 8009e20:	20001b90 	.word	0x20001b90

08009e24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009e2e:	2200      	movs	r2, #0
 8009e30:	6839      	ldr	r1, [r7, #0]
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f7ff ffac 	bl	8009d90 <FATFS_LinkDriverEx>
 8009e38:	4603      	mov	r3, r0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
	...

08009e44 <__libc_init_array>:
 8009e44:	b570      	push	{r4, r5, r6, lr}
 8009e46:	2600      	movs	r6, #0
 8009e48:	4d0c      	ldr	r5, [pc, #48]	; (8009e7c <__libc_init_array+0x38>)
 8009e4a:	4c0d      	ldr	r4, [pc, #52]	; (8009e80 <__libc_init_array+0x3c>)
 8009e4c:	1b64      	subs	r4, r4, r5
 8009e4e:	10a4      	asrs	r4, r4, #2
 8009e50:	42a6      	cmp	r6, r4
 8009e52:	d109      	bne.n	8009e68 <__libc_init_array+0x24>
 8009e54:	f000 f830 	bl	8009eb8 <_init>
 8009e58:	2600      	movs	r6, #0
 8009e5a:	4d0a      	ldr	r5, [pc, #40]	; (8009e84 <__libc_init_array+0x40>)
 8009e5c:	4c0a      	ldr	r4, [pc, #40]	; (8009e88 <__libc_init_array+0x44>)
 8009e5e:	1b64      	subs	r4, r4, r5
 8009e60:	10a4      	asrs	r4, r4, #2
 8009e62:	42a6      	cmp	r6, r4
 8009e64:	d105      	bne.n	8009e72 <__libc_init_array+0x2e>
 8009e66:	bd70      	pop	{r4, r5, r6, pc}
 8009e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e6c:	4798      	blx	r3
 8009e6e:	3601      	adds	r6, #1
 8009e70:	e7ee      	b.n	8009e50 <__libc_init_array+0xc>
 8009e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e76:	4798      	blx	r3
 8009e78:	3601      	adds	r6, #1
 8009e7a:	e7f2      	b.n	8009e62 <__libc_init_array+0x1e>
 8009e7c:	0800a0b0 	.word	0x0800a0b0
 8009e80:	0800a0b0 	.word	0x0800a0b0
 8009e84:	0800a0b0 	.word	0x0800a0b0
 8009e88:	0800a0b4 	.word	0x0800a0b4

08009e8c <memcmp>:
 8009e8c:	b530      	push	{r4, r5, lr}
 8009e8e:	2400      	movs	r4, #0
 8009e90:	3901      	subs	r1, #1
 8009e92:	42a2      	cmp	r2, r4
 8009e94:	d101      	bne.n	8009e9a <memcmp+0xe>
 8009e96:	2000      	movs	r0, #0
 8009e98:	e005      	b.n	8009ea6 <memcmp+0x1a>
 8009e9a:	5d03      	ldrb	r3, [r0, r4]
 8009e9c:	3401      	adds	r4, #1
 8009e9e:	5d0d      	ldrb	r5, [r1, r4]
 8009ea0:	42ab      	cmp	r3, r5
 8009ea2:	d0f6      	beq.n	8009e92 <memcmp+0x6>
 8009ea4:	1b58      	subs	r0, r3, r5
 8009ea6:	bd30      	pop	{r4, r5, pc}

08009ea8 <memset>:
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	4402      	add	r2, r0
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d100      	bne.n	8009eb2 <memset+0xa>
 8009eb0:	4770      	bx	lr
 8009eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8009eb6:	e7f9      	b.n	8009eac <memset+0x4>

08009eb8 <_init>:
 8009eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eba:	bf00      	nop
 8009ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ebe:	bc08      	pop	{r3}
 8009ec0:	469e      	mov	lr, r3
 8009ec2:	4770      	bx	lr

08009ec4 <_fini>:
 8009ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec6:	bf00      	nop
 8009ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eca:	bc08      	pop	{r3}
 8009ecc:	469e      	mov	lr, r3
 8009ece:	4770      	bx	lr
