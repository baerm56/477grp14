
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064b8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080065f4  080065f4  000165f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066ec  080066ec  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080066ec  080066ec  000166ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066f4  080066f4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066f4  080066f4  000166f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066f8  080066f8  000166f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080066fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ec8  20000024  08006720  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000eec  08006720  00020eec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001751e  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003504  00000000  00000000  0003756b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  0003aa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  0003bae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187b0  00000000  00000000  0003c9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c6a  00000000  00000000  00055188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e0a5  00000000  00000000  00069df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7e97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042f4  00000000  00000000  000f7eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000024 	.word	0x20000024
 8000158:	00000000 	.word	0x00000000
 800015c:	080065dc 	.word	0x080065dc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000028 	.word	0x20000028
 8000178:	080065dc 	.word	0x080065dc

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <enableHex>:
#include "leds.h"

void enableHex(SPI_HandleTypeDef * hspi){
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	writeHexVal(hspi, LED_DECODE_MODE, 0xFF);
 800047c:	22ff      	movs	r2, #255	; 0xff
 800047e:	2101      	movs	r1, #1
 8000480:	6878      	ldr	r0, [r7, #4]
 8000482:	f000 f8a5 	bl	80005d0 <writeHexVal>
}
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <setIntensity>:

void setIntensity(SPI_HandleTypeDef * hspi, uint8_t val){
 800048e:	b580      	push	{r7, lr}
 8000490:	b082      	sub	sp, #8
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
 8000496:	460b      	mov	r3, r1
 8000498:	70fb      	strb	r3, [r7, #3]
	writeHexVal(hspi, LED_INTENSITY, val);
 800049a:	78fb      	ldrb	r3, [r7, #3]
 800049c:	461a      	mov	r2, r3
 800049e:	2102      	movs	r1, #2
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	f000 f895 	bl	80005d0 <writeHexVal>
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <setScanLimit>:

void setScanLimit(SPI_HandleTypeDef * hspi, uint8_t val){
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b082      	sub	sp, #8
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
 80004b6:	460b      	mov	r3, r1
 80004b8:	70fb      	strb	r3, [r7, #3]
	writeHexVal(hspi, LED_SCAN_LIMIT, val);
 80004ba:	78fb      	ldrb	r3, [r7, #3]
 80004bc:	461a      	mov	r2, r3
 80004be:	2103      	movs	r1, #3
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f000 f885 	bl	80005d0 <writeHexVal>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <enableOutput>:

void enableOutput(SPI_HandleTypeDef * hspi){
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
	writeHexVal(hspi, LED_CONFIGURATION, 0x01);
 80004d6:	2201      	movs	r2, #1
 80004d8:	2104      	movs	r1, #4
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f000 f878 	bl	80005d0 <writeHexVal>
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <LEDSInit>:

void LEDSInit(SPI_HandleTypeDef * hspi){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f0:	f107 030c 	add.w	r3, r7, #12
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]

	// SPI setup
	hspi->Instance = SPI1;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4a25      	ldr	r2, [pc, #148]	; (8000598 <LEDSInit+0xb0>)
 8000504:	601a      	str	r2, [r3, #0]
	hspi->Init.Mode = SPI_MODE_MASTER;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f44f 7282 	mov.w	r2, #260	; 0x104
 800050c:	605a      	str	r2, [r3, #4]
	hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
	hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2200      	movs	r2, #0
 8000518:	60da      	str	r2, [r3, #12]
	hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2200      	movs	r2, #0
 800051e:	611a      	str	r2, [r3, #16]
	hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2200      	movs	r2, #0
 8000524:	615a      	str	r2, [r3, #20]
	hspi->Init.NSS = SPI_NSS_SOFT;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800052c:	619a      	str	r2, [r3, #24]
	hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2228      	movs	r2, #40	; 0x28
 8000532:	61da      	str	r2, [r3, #28]
	hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2200      	movs	r2, #0
 8000538:	621a      	str	r2, [r3, #32]
	hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2200      	movs	r2, #0
 800053e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2200      	movs	r2, #0
 8000544:	629a      	str	r2, [r3, #40]	; 0x28
	hspi->Init.CRCPolynomial = 10;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	220a      	movs	r2, #10
 800054a:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_SPI_Init(hspi);
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f002 f925 	bl	800279c <HAL_SPI_Init>

	// Setting up PA4 for CS
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <LEDSInit+0xb4>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	4a11      	ldr	r2, [pc, #68]	; (800059c <LEDSInit+0xb4>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	61d3      	str	r3, [r2, #28]
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <LEDSInit+0xb4>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800056a:	2201      	movs	r2, #1
 800056c:	2120      	movs	r1, #32
 800056e:	480c      	ldr	r0, [pc, #48]	; (80005a0 <LEDSInit+0xb8>)
 8000570:	f001 fb44 	bl	8001bfc <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000574:	2320      	movs	r3, #32
 8000576:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2300      	movs	r3, #0
 8000582:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	4619      	mov	r1, r3
 800058a:	4805      	ldr	r0, [pc, #20]	; (80005a0 <LEDSInit+0xb8>)
 800058c:	f001 f9a6 	bl	80018dc <HAL_GPIO_Init>

}
 8000590:	bf00      	nop
 8000592:	3720      	adds	r7, #32
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40013000 	.word	0x40013000
 800059c:	40023800 	.word	0x40023800
 80005a0:	40020000 	.word	0x40020000

080005a4 <ChessTimerLEDInit>:

void ChessTimerLEDInit(SPI_HandleTypeDef * hspi){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	enableOutput(hspi);
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f7ff ff8e 	bl	80004ce <enableOutput>
	setScanLimit(hspi, 0x07);
 80005b2:	2107      	movs	r1, #7
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f7ff ff7a 	bl	80004ae <setScanLimit>
	setIntensity(hspi, 0x05);
 80005ba:	2105      	movs	r1, #5
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f7ff ff66 	bl	800048e <setIntensity>
	enableHex(hspi);
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f7ff ff56 	bl	8000474 <enableHex>
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <writeHexVal>:

void writeHexVal(SPI_HandleTypeDef * hspi, uint8_t reg, uint8_t val){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]
 80005dc:	4613      	mov	r3, r2
 80005de:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2120      	movs	r1, #32
 80005e4:	480e      	ldr	r0, [pc, #56]	; (8000620 <writeHexVal+0x50>)
 80005e6:	f001 fb09 	bl	8001bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2120      	movs	r1, #32
 80005ee:	480c      	ldr	r0, [pc, #48]	; (8000620 <writeHexVal+0x50>)
 80005f0:	f001 fb04 	bl	8001bfc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &reg, 1, 100);
 80005f4:	1cf9      	adds	r1, r7, #3
 80005f6:	2364      	movs	r3, #100	; 0x64
 80005f8:	2201      	movs	r2, #1
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f002 f957 	bl	80028ae <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &val, 1, 100);
 8000600:	1cb9      	adds	r1, r7, #2
 8000602:	2364      	movs	r3, #100	; 0x64
 8000604:	2201      	movs	r2, #1
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f002 f951 	bl	80028ae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2120      	movs	r1, #32
 8000610:	4803      	ldr	r0, [pc, #12]	; (8000620 <writeHexVal+0x50>)
 8000612:	f001 faf3 	bl	8001bfc <HAL_GPIO_WritePin>
	//HAL_Delay(100);
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40020000 	.word	0x40020000

08000624 <HAL_DAC_ConvCpltCallbackCh1>:
static int start = 0;
static int startloc = 0;
int fileLength = 0;
uint8_t wavBuffer[1024] = {0};
void handleDACCallback(DAC_HandleTypeDef *hdac, int bufferStart);
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	start = 1;
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <HAL_DAC_ConvCpltCallbackCh1+0x2c>)
 800062e:	2201      	movs	r2, #1
 8000630:	601a      	str	r2, [r3, #0]
	startloc = 512;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <HAL_DAC_ConvCpltCallbackCh1+0x30>)
 8000634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000638:	601a      	str	r2, [r3, #0]
	count++;
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <HAL_DAC_ConvCpltCallbackCh1+0x34>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	3301      	adds	r3, #1
 8000640:	4a05      	ldr	r2, [pc, #20]	; (8000658 <HAL_DAC_ConvCpltCallbackCh1+0x34>)
 8000642:	6013      	str	r3, [r2, #0]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000044 	.word	0x20000044
 8000654:	20000048 	.word	0x20000048
 8000658:	20000040 	.word	0x20000040

0800065c <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	start = 1;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <HAL_DAC_ConvHalfCpltCallbackCh1+0x28>)
 8000666:	2201      	movs	r2, #1
 8000668:	601a      	str	r2, [r3, #0]
	startloc = 0;
 800066a:	4b07      	ldr	r3, [pc, #28]	; (8000688 <HAL_DAC_ConvHalfCpltCallbackCh1+0x2c>)
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
	count++;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_DAC_ConvHalfCpltCallbackCh1+0x30>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3301      	adds	r3, #1
 8000676:	4a05      	ldr	r2, [pc, #20]	; (800068c <HAL_DAC_ConvHalfCpltCallbackCh1+0x30>)
 8000678:	6013      	str	r3, [r2, #0]
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	20000044 	.word	0x20000044
 8000688:	20000048 	.word	0x20000048
 800068c:	20000040 	.word	0x20000040

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000696:	f000 fc50 	bl	8000f3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 f86d 	bl	8000778 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  WaveplayerInit(&hspi2);
 800069e:	482c      	ldr	r0, [pc, #176]	; (8000750 <main+0xc0>)
 80006a0:	f000 fbc6 	bl	8000e30 <WaveplayerInit>

  HAL_Delay(1000); //a short delay is important to let the SD card settle
 80006a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006a8:	f000 fc7c 	bl	8000fa4 <HAL_Delay>


  fileLength = GetFile("test.wav");
 80006ac:	4829      	ldr	r0, [pc, #164]	; (8000754 <main+0xc4>)
 80006ae:	f000 fb67 	bl	8000d80 <GetFile>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a28      	ldr	r2, [pc, #160]	; (8000758 <main+0xc8>)
 80006b6:	6013      	str	r3, [r2, #0]

  readFile(&wavBuffer[0]);
 80006b8:	4828      	ldr	r0, [pc, #160]	; (800075c <main+0xcc>)
 80006ba:	f000 fb95 	bl	8000de8 <readFile>
  readFile(&wavBuffer[512]);
 80006be:	4828      	ldr	r0, [pc, #160]	; (8000760 <main+0xd0>)
 80006c0:	f000 fb92 	bl	8000de8 <readFile>

  LEDSInit(&hspi1);
 80006c4:	4827      	ldr	r0, [pc, #156]	; (8000764 <main+0xd4>)
 80006c6:	f7ff ff0f 	bl	80004e8 <LEDSInit>
  ChessTimerLEDInit(&hspi1);
 80006ca:	4826      	ldr	r0, [pc, #152]	; (8000764 <main+0xd4>)
 80006cc:	f7ff ff6a 	bl	80005a4 <ChessTimerLEDInit>
  writeHexVal(&hspi1, LED_1, 8);
 80006d0:	2208      	movs	r2, #8
 80006d2:	2160      	movs	r1, #96	; 0x60
 80006d4:	4823      	ldr	r0, [pc, #140]	; (8000764 <main+0xd4>)
 80006d6:	f7ff ff7b 	bl	80005d0 <writeHexVal>
  writeHexVal(&hspi1, LED_2, 8);
 80006da:	2208      	movs	r2, #8
 80006dc:	2161      	movs	r1, #97	; 0x61
 80006de:	4821      	ldr	r0, [pc, #132]	; (8000764 <main+0xd4>)
 80006e0:	f7ff ff76 	bl	80005d0 <writeHexVal>
  writeHexVal(&hspi1, LED_3, 8);
 80006e4:	2208      	movs	r2, #8
 80006e6:	2162      	movs	r1, #98	; 0x62
 80006e8:	481e      	ldr	r0, [pc, #120]	; (8000764 <main+0xd4>)
 80006ea:	f7ff ff71 	bl	80005d0 <writeHexVal>

  SpeakerInit(&hdac, &htim2);
 80006ee:	491e      	ldr	r1, [pc, #120]	; (8000768 <main+0xd8>)
 80006f0:	481e      	ldr	r0, [pc, #120]	; (800076c <main+0xdc>)
 80006f2:	f000 f953 	bl	800099c <SpeakerInit>
  HAL_TIM_Base_Start(&htim2);
 80006f6:	481c      	ldr	r0, [pc, #112]	; (8000768 <main+0xd8>)
 80006f8:	f002 fcc2 	bl	8003080 <HAL_TIM_Base_Start>
  //HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t *)Wave_LUT, 128, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t *)wavBuffer, 1024, DAC_ALIGN_8B_R);
 80006fc:	2308      	movs	r3, #8
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000704:	4a15      	ldr	r2, [pc, #84]	; (800075c <main+0xcc>)
 8000706:	2100      	movs	r1, #0
 8000708:	4818      	ldr	r0, [pc, #96]	; (800076c <main+0xdc>)
 800070a:	f000 fd8b 	bl	8001224 <HAL_DAC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (start){
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <main+0xe0>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d00f      	beq.n	8000736 <main+0xa6>
		  readFile(&wavBuffer[startloc]);
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <main+0xe4>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a10      	ldr	r2, [pc, #64]	; (800075c <main+0xcc>)
 800071c:	4413      	add	r3, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fb62 	bl	8000de8 <readFile>
		  fileLength -= 512;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <main+0xc8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800072c:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <main+0xc8>)
 800072e:	6013      	str	r3, [r2, #0]
		  start = 0;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <main+0xe0>)
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
	  }
	  if (fileLength < 512) {
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <main+0xc8>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800073e:	dae6      	bge.n	800070e <main+0x7e>
		  closeFile();
 8000740:	f000 fb66 	bl	8000e10 <closeFile>
		  HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
 8000744:	2100      	movs	r1, #0
 8000746:	4809      	ldr	r0, [pc, #36]	; (800076c <main+0xdc>)
 8000748:	f000 fd4f 	bl	80011ea <HAL_DAC_Stop>
	  if (start){
 800074c:	e7df      	b.n	800070e <main+0x7e>
 800074e:	bf00      	nop
 8000750:	200008f0 	.word	0x200008f0
 8000754:	080065f4 	.word	0x080065f4
 8000758:	2000004c 	.word	0x2000004c
 800075c:	20000050 	.word	0x20000050
 8000760:	20000250 	.word	0x20000250
 8000764:	200009a0 	.word	0x200009a0
 8000768:	200009f8 	.word	0x200009f8
 800076c:	2000098c 	.word	0x2000098c
 8000770:	20000044 	.word	0x20000044
 8000774:	20000048 	.word	0x20000048

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b092      	sub	sp, #72	; 0x48
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2234      	movs	r2, #52	; 0x34
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f005 ff20 	bl	80065cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	463b      	mov	r3, r7
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <SystemClock_Config+0x98>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80007a2:	4a1b      	ldr	r2, [pc, #108]	; (8000810 <SystemClock_Config+0x98>)
 80007a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007a8:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007aa:	2302      	movs	r3, #2
 80007ac:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ae:	2301      	movs	r3, #1
 80007b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b2:	2310      	movs	r3, #16
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b6:	2302      	movs	r3, #2
 80007b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ba:	2300      	movs	r3, #0
 80007bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80007be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80007c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80007c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fa2c 	bl	8001c2c <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007da:	f000 f82d 	bl	8000838 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	230f      	movs	r3, #15
 80007e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e2:	2303      	movs	r3, #3
 80007e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	2101      	movs	r1, #1
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 fd48 	bl	800228c <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000802:	f000 f819 	bl	8000838 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3748      	adds	r7, #72	; 0x48
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40007000 	.word	0x40007000

08000814 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d101      	bne.n	800082a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000826:	f000 fba1 	bl	8000f6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40000400 	.word	0x40000400

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	e7fe      	b.n	8000840 <Error_Handler+0x8>
	...

08000844 <SpeakerGPIOInit>:
#include "speaker.h"

void SpeakerGPIOInit(){
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	// Enable Analog Output
	SPEARER_GPIO_BUS_ENABLE_FUNCTION;
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <SpeakerGPIOInit+0x3c>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <SpeakerGPIOInit+0x3c>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	61d3      	str	r3, [r2, #28]
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <SpeakerGPIOInit+0x3c>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = SPEAKER_GPIO_PIN;
 8000862:	2310      	movs	r3, #16
 8000864:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000866:	2303      	movs	r3, #3
 8000868:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(SPEAKER_GPIO_BUS, &GPIO_InitStruct);
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	4619      	mov	r1, r3
 8000872:	4804      	ldr	r0, [pc, #16]	; (8000884 <SpeakerGPIOInit+0x40>)
 8000874:	f001 f832 	bl	80018dc <HAL_GPIO_Init>
}
 8000878:	bf00      	nop
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40020000 	.word	0x40020000

08000888 <DACInit>:

void DACInit(DAC_HandleTypeDef * hdac){
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	DAC_ChannelConfTypeDef sConfig = {0};
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]

	// Enable DAC clock
	__HAL_RCC_DAC_CLK_ENABLE();
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <DACInit+0x54>)
 800089c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089e:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <DACInit+0x54>)
 80008a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80008a4:	6253      	str	r3, [r2, #36]	; 0x24
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <DACInit+0x54>)
 80008a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
	hdac->Instance = DAC;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <DACInit+0x58>)
 80008b6:	601a      	str	r2, [r3, #0]
	HAL_DAC_Init(hdac);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f000 fc74 	bl	80011a6 <HAL_DAC_Init>

	// DAC Setup Settings of Timer 2 Trigger
	sConfig.DAC_Trigger = DAC_DMA_TRIGGER;
 80008be:	2324      	movs	r3, #36	; 0x24
 80008c0:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
	HAL_DAC_ConfigChannel(hdac, &sConfig, DAC_CHANNEL);
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	2200      	movs	r2, #0
 80008cc:	4619      	mov	r1, r3
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f000 fd7d 	bl	80013ce <HAL_DAC_ConfigChannel>
}
 80008d4:	bf00      	nop
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40007400 	.word	0x40007400

080008e4 <DMAInit>:

void DMAInit(){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
	// DMA controller clock enable
	DMA_CLOCK_ENABLE_FUNCTION;
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <DMAInit+0x38>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	4a0b      	ldr	r2, [pc, #44]	; (800091c <DMAInit+0x38>)
 80008f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008f4:	61d3      	str	r3, [r2, #28]
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <DMAInit+0x38>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

	// DMA interrupt init
	// DMA1_Channel2_IRQn interrupt configuration
	HAL_NVIC_SetPriority(DMA_IRQ, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	200c      	movs	r0, #12
 8000908:	f000 fc23 	bl	8001152 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA_IRQ);
 800090c:	200c      	movs	r0, #12
 800090e:	f000 fc3c 	bl	800118a <HAL_NVIC_EnableIRQ>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <TimerInit>:

void TimerInit(TIM_HandleTypeDef * htim){
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]

	htim->Instance = TIMER_NAME;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000946:	601a      	str	r2, [r3, #0]
	htim->Init.Prescaler = TIMER_PSC;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]
	htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
	htim->Init.Period = TIMER_ARR;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f640 729f 	movw	r2, #3999	; 0xf9f
 800095a:	60da      	str	r2, [r3, #12]
	htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
	htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Init(htim);
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f002 fb49 	bl	8003000 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000972:	613b      	str	r3, [r7, #16]
	HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig);
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	4619      	mov	r1, r3
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f002 fcf8 	bl	8003370 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000980:	2320      	movs	r3, #32
 8000982:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
	HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig);
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	4619      	mov	r1, r3
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f002 fedc 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
}
 8000994:	bf00      	nop
 8000996:	3720      	adds	r7, #32
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <SpeakerInit>:

void SpeakerInit(DAC_HandleTypeDef * hdac, TIM_HandleTypeDef * htim){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
	SpeakerGPIOInit();
 80009a6:	f7ff ff4d 	bl	8000844 <SpeakerGPIOInit>
	DMAInit();
 80009aa:	f7ff ff9b 	bl	80008e4 <DMAInit>
	DACInit(hdac);
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff ff6a 	bl	8000888 <DACInit>
	TimerInit(htim);
 80009b4:	6838      	ldr	r0, [r7, #0]
 80009b6:	f7ff ffb3 	bl	8000920 <TimerInit>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <HAL_MspInit+0x58>)
 80009cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ce:	4a13      	ldr	r2, [pc, #76]	; (8000a1c <HAL_MspInit+0x58>)
 80009d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d4:	6253      	str	r3, [r2, #36]	; 0x24
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_MspInit+0x58>)
 80009d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_MspInit+0x58>)
 80009e4:	6a1b      	ldr	r3, [r3, #32]
 80009e6:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <HAL_MspInit+0x58>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6213      	str	r3, [r2, #32]
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_MspInit+0x58>)
 80009f0:	6a1b      	ldr	r3, [r3, #32]
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_MspInit+0x58>)
 80009fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009fe:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_MspInit+0x58>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	6253      	str	r3, [r2, #36]	; 0x24
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <HAL_MspInit+0x58>)
 8000a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	40023800 	.word	0x40023800

08000a20 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a28      	ldr	r2, [pc, #160]	; (8000ae0 <HAL_DAC_MspInit+0xc0>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d14a      	bne.n	8000ad8 <HAL_DAC_MspInit+0xb8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000a42:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <HAL_DAC_MspInit+0xc4>)
 8000a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a46:	4a27      	ldr	r2, [pc, #156]	; (8000ae4 <HAL_DAC_MspInit+0xc4>)
 8000a48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a4c:	6253      	str	r3, [r2, #36]	; 0x24
 8000a4e:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <HAL_DAC_MspInit+0xc4>)
 8000a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <HAL_DAC_MspInit+0xc4>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	4a21      	ldr	r2, [pc, #132]	; (8000ae4 <HAL_DAC_MspInit+0xc4>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	61d3      	str	r3, [r2, #28]
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <HAL_DAC_MspInit+0xc4>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a72:	2310      	movs	r3, #16
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a76:	2303      	movs	r3, #3
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4818      	ldr	r0, [pc, #96]	; (8000ae8 <HAL_DAC_MspInit+0xc8>)
 8000a86:	f000 ff29 	bl	80018dc <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel2;
 8000a8a:	4b18      	ldr	r3, [pc, #96]	; (8000aec <HAL_DAC_MspInit+0xcc>)
 8000a8c:	4a18      	ldr	r2, [pc, #96]	; (8000af0 <HAL_DAC_MspInit+0xd0>)
 8000a8e:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <HAL_DAC_MspInit+0xcc>)
 8000a92:	2210      	movs	r2, #16
 8000a94:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <HAL_DAC_MspInit+0xcc>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <HAL_DAC_MspInit+0xcc>)
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_DAC_MspInit+0xcc>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <HAL_DAC_MspInit+0xcc>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <HAL_DAC_MspInit+0xcc>)
 8000ab0:	2220      	movs	r2, #32
 8000ab2:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <HAL_DAC_MspInit+0xcc>)
 8000ab6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000aba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000abc:	480b      	ldr	r0, [pc, #44]	; (8000aec <HAL_DAC_MspInit+0xcc>)
 8000abe:	f000 fd5b 	bl	8001578 <HAL_DMA_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_DAC_MspInit+0xac>
    {
      Error_Handler();
 8000ac8:	f7ff feb6 	bl	8000838 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_DAC_MspInit+0xcc>)
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	4a06      	ldr	r2, [pc, #24]	; (8000aec <HAL_DAC_MspInit+0xcc>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40007400 	.word	0x40007400
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	20000948 	.word	0x20000948
 8000af0:	4002601c 	.word	0x4002601c

08000af4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08c      	sub	sp, #48	; 0x30
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a3c      	ldr	r2, [pc, #240]	; (8000c04 <HAL_SPI_MspInit+0x110>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d144      	bne.n	8000ba0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b16:	4b3c      	ldr	r3, [pc, #240]	; (8000c08 <HAL_SPI_MspInit+0x114>)
 8000b18:	6a1b      	ldr	r3, [r3, #32]
 8000b1a:	4a3b      	ldr	r2, [pc, #236]	; (8000c08 <HAL_SPI_MspInit+0x114>)
 8000b1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b20:	6213      	str	r3, [r2, #32]
 8000b22:	4b39      	ldr	r3, [pc, #228]	; (8000c08 <HAL_SPI_MspInit+0x114>)
 8000b24:	6a1b      	ldr	r3, [r3, #32]
 8000b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b36      	ldr	r3, [pc, #216]	; (8000c08 <HAL_SPI_MspInit+0x114>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	4a35      	ldr	r2, [pc, #212]	; (8000c08 <HAL_SPI_MspInit+0x114>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	61d3      	str	r3, [r2, #28]
 8000b3a:	4b33      	ldr	r3, [pc, #204]	; (8000c08 <HAL_SPI_MspInit+0x114>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <HAL_SPI_MspInit+0x114>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	4a2f      	ldr	r2, [pc, #188]	; (8000c08 <HAL_SPI_MspInit+0x114>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	61d3      	str	r3, [r2, #28]
 8000b52:	4b2d      	ldr	r3, [pc, #180]	; (8000c08 <HAL_SPI_MspInit+0x114>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b5e:	23c0      	movs	r3, #192	; 0xc0
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6e:	2305      	movs	r3, #5
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4824      	ldr	r0, [pc, #144]	; (8000c0c <HAL_SPI_MspInit+0x118>)
 8000b7a:	f000 feaf 	bl	80018dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b7e:	2308      	movs	r3, #8
 8000b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b8e:	2305      	movs	r3, #5
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	481d      	ldr	r0, [pc, #116]	; (8000c10 <HAL_SPI_MspInit+0x11c>)
 8000b9a:	f000 fe9f 	bl	80018dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b9e:	e02d      	b.n	8000bfc <HAL_SPI_MspInit+0x108>
  else if(hspi->Instance==SPI2)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <HAL_SPI_MspInit+0x120>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d128      	bne.n	8000bfc <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <HAL_SPI_MspInit+0x114>)
 8000bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bae:	4a16      	ldr	r2, [pc, #88]	; (8000c08 <HAL_SPI_MspInit+0x114>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb4:	6253      	str	r3, [r2, #36]	; 0x24
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_SPI_MspInit+0x114>)
 8000bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_SPI_MspInit+0x114>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <HAL_SPI_MspInit+0x114>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	61d3      	str	r3, [r2, #28]
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_SPI_MspInit+0x114>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000bda:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bec:	2305      	movs	r3, #5
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4806      	ldr	r0, [pc, #24]	; (8000c10 <HAL_SPI_MspInit+0x11c>)
 8000bf8:	f000 fe70 	bl	80018dc <HAL_GPIO_Init>
}
 8000bfc:	bf00      	nop
 8000bfe:	3730      	adds	r7, #48	; 0x30
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40013000 	.word	0x40013000
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	40020400 	.word	0x40020400
 8000c14:	40003800 	.word	0x40003800

08000c18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c28:	d10b      	bne.n	8000c42 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_TIM_Base_MspInit+0x34>)
 8000c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2e:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <HAL_TIM_Base_MspInit+0x34>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6253      	str	r3, [r2, #36]	; 0x24
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <HAL_TIM_Base_MspInit+0x34>)
 8000c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c42:	bf00      	nop
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	40023800 	.word	0x40023800

08000c50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	; 0x30
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	201d      	movs	r0, #29
 8000c66:	f000 fa74 	bl	8001152 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c6a:	201d      	movs	r0, #29
 8000c6c:	f000 fa8d 	bl	800118a <HAL_NVIC_EnableIRQ>

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000c70:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <HAL_InitTick+0x9c>)
 8000c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c74:	4a1d      	ldr	r2, [pc, #116]	; (8000cec <HAL_InitTick+0x9c>)
 8000c76:	f043 0302 	orr.w	r3, r3, #2
 8000c7a:	6253      	str	r3, [r2, #36]	; 0x24
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <HAL_InitTick+0x9c>)
 8000c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c88:	f107 0210 	add.w	r2, r7, #16
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 fcf2 	bl	800267c <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c98:	f001 fcdc 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 8000c9c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca0:	4a13      	ldr	r2, [pc, #76]	; (8000cf0 <HAL_InitTick+0xa0>)
 8000ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca6:	0c9b      	lsrs	r3, r3, #18
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <HAL_InitTick+0xa4>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <HAL_InitTick+0xa8>)
 8000cb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <HAL_InitTick+0xa4>)
 8000cb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb8:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000cba:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <HAL_InitTick+0xa4>)
 8000cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cbe:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <HAL_InitTick+0xa4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <HAL_InitTick+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8000ccc:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <HAL_InitTick+0xa4>)
 8000cce:	f002 f997 	bl	8003000 <HAL_TIM_Base_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d104      	bne.n	8000ce2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8000cd8:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <HAL_InitTick+0xa4>)
 8000cda:	f002 fa1b 	bl	8003114 <HAL_TIM_Base_Start_IT>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	e000      	b.n	8000ce4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3730      	adds	r7, #48	; 0x30
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	431bde83 	.word	0x431bde83
 8000cf4:	20000a38 	.word	0x20000a38
 8000cf8:	40000400 	.word	0x40000400

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <NMI_Handler+0x4>

08000d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <HardFault_Handler+0x4>

08000d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <MemManage_Handler+0x4>

08000d0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr

08000d26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr

08000d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr

08000d3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
	...

08000d4c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <DMA1_Channel2_IRQHandler+0x10>)
 8000d52:	f000 fce5 	bl	8001720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000948 	.word	0x20000948

08000d60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <TIM3_IRQHandler+0x10>)
 8000d66:	f002 fa27 	bl	80031b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000a38 	.word	0x20000a38

08000d74 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <GetFile>:
static __IO uint32_t audioRemainSize = 0;

static uint32_t samplingFreq;

int GetFile(const char* filePath)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  WAV_Header wavHeader;
  UINT readBytes = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]

  f_mount(&FatFs, "", 1);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4911      	ldr	r1, [pc, #68]	; (8000dd4 <GetFile+0x54>)
 8000d90:	4811      	ldr	r0, [pc, #68]	; (8000dd8 <GetFile+0x58>)
 8000d92:	f004 ffb1 	bl	8005cf8 <f_mount>
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8000d96:	2201      	movs	r2, #1
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	4810      	ldr	r0, [pc, #64]	; (8000ddc <GetFile+0x5c>)
 8000d9c:	f004 fff2 	bl	8005d84 <f_open>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <GetFile+0x2a>
  {
    return 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e00f      	b.n	8000dca <GetFile+0x4a>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	f107 010c 	add.w	r1, r7, #12
 8000db2:	222c      	movs	r2, #44	; 0x2c
 8000db4:	4809      	ldr	r0, [pc, #36]	; (8000ddc <GetFile+0x5c>)
 8000db6:	f005 f9a3 	bl	8006100 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <GetFile+0x60>)
 8000dbe:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <GetFile+0x64>)
 8000dc4:	6013      	str	r3, [r2, #0]

  return fileLength;
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <GetFile+0x60>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3738      	adds	r7, #56	; 0x38
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	08006600 	.word	0x08006600
 8000dd8:	20000680 	.word	0x20000680
 8000ddc:	20000450 	.word	0x20000450
 8000de0:	200008b0 	.word	0x200008b0
 8000de4:	200008b4 	.word	0x200008b4

08000de8 <readFile>:

void readFile(uint8_t * buffer){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	UINT readBytes = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]

	f_read(&wavFile, buffer, 512, &readBytes);
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dfc:	6879      	ldr	r1, [r7, #4]
 8000dfe:	4803      	ldr	r0, [pc, #12]	; (8000e0c <readFile+0x24>)
 8000e00:	f005 f97e 	bl	8006100 <f_read>
}
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000450 	.word	0x20000450

08000e10 <closeFile>:

void closeFile(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	f_close(&wavFile);
 8000e14:	4804      	ldr	r0, [pc, #16]	; (8000e28 <closeFile+0x18>)
 8000e16:	f005 fb30 	bl	800647a <f_close>
	f_mount(NULL, "", 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	4903      	ldr	r1, [pc, #12]	; (8000e2c <closeFile+0x1c>)
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f004 ff6a 	bl	8005cf8 <f_mount>
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000450 	.word	0x20000450
 8000e2c:	08006600 	.word	0x08006600

08000e30 <WaveplayerInit>:

void WaveplayerInit(SPI_HandleTypeDef * hspi){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]

	// SPI setup
	hspi->Instance = SPI2;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a26      	ldr	r2, [pc, #152]	; (8000ee4 <WaveplayerInit+0xb4>)
 8000e4c:	601a      	str	r2, [r3, #0]
	hspi->Init.Mode = SPI_MODE_MASTER;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e54:	605a      	str	r2, [r3, #4]
	hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
	hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
	hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
	hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	615a      	str	r2, [r3, #20]
	hspi->Init.NSS = SPI_NSS_SOFT;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e74:	619a      	str	r2, [r3, #24]
	hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2210      	movs	r2, #16
 8000e7a:	61da      	str	r2, [r3, #28]
	hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
	hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi->Init.CRCPolynomial = 10;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	220a      	movs	r2, #10
 8000e92:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_SPI_Init(hspi);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f001 fc81 	bl	800279c <HAL_SPI_Init>

	// Setting up SD_CS
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <WaveplayerInit+0xb8>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <WaveplayerInit+0xb8>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	61d3      	str	r3, [r2, #28]
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <WaveplayerInit+0xb8>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]

	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	480d      	ldr	r0, [pc, #52]	; (8000eec <WaveplayerInit+0xbc>)
 8000eb8:	f000 fea0 	bl	8001bfc <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = SD_CS_Pin;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4806      	ldr	r0, [pc, #24]	; (8000eec <WaveplayerInit+0xbc>)
 8000ed4:	f000 fd02 	bl	80018dc <HAL_GPIO_Init>

	MX_FATFS_Init();
 8000ed8:	f002 fc96 	bl	8003808 <MX_FATFS_Init>

}
 8000edc:	bf00      	nop
 8000ede:	3720      	adds	r7, #32
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40003800 	.word	0x40003800
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020400 	.word	0x40020400

08000ef0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ef2:	490d      	ldr	r1, [pc, #52]	; (8000f28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef8:	e002      	b.n	8000f00 <LoopCopyDataInit>

08000efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efe:	3304      	adds	r3, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f04:	d3f9      	bcc.n	8000efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f08:	4c0a      	ldr	r4, [pc, #40]	; (8000f34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f0c:	e001      	b.n	8000f12 <LoopFillZerobss>

08000f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f10:	3204      	adds	r2, #4

08000f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f14:	d3fb      	bcc.n	8000f0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f16:	f7ff ff2d 	bl	8000d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1a:	f005 fb33 	bl	8006584 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f1e:	f7ff fbb7 	bl	8000690 <main>
  bx lr
 8000f22:	4770      	bx	lr
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000f2c:	080066fc 	.word	0x080066fc
  ldr r2, =_sbss
 8000f30:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000f34:	20000eec 	.word	0x20000eec

08000f38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC1_IRQHandler>

08000f3a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f8f9 	bl	800113c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f4a:	200f      	movs	r0, #15
 8000f4c:	f7ff fe80 	bl	8000c50 <HAL_InitTick>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d002      	beq.n	8000f5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	71fb      	strb	r3, [r7, #7]
 8000f5a:	e001      	b.n	8000f60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f5c:	f7ff fd32 	bl	80009c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f60:	79fb      	ldrb	r3, [r7, #7]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_IncTick+0x1c>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_IncTick+0x20>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a03      	ldr	r2, [pc, #12]	; (8000f88 <HAL_IncTick+0x1c>)
 8000f7c:	6013      	str	r3, [r2, #0]
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000a78 	.word	0x20000a78
 8000f8c:	20000008 	.word	0x20000008

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b02      	ldr	r3, [pc, #8]	; (8000fa0 <HAL_GetTick+0x10>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	20000a78 	.word	0x20000a78

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff fff0 	bl	8000f90 <HAL_GetTick>
 8000fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fbc:	d004      	beq.n	8000fc8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <HAL_Delay+0x40>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fc8:	bf00      	nop
 8000fca:	f7ff ffe1 	bl	8000f90 <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d8f7      	bhi.n	8000fca <HAL_Delay+0x26>
  {
  }
}
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db0b      	blt.n	8001076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f003 021f 	and.w	r2, r3, #31
 8001064:	4906      	ldr	r1, [pc, #24]	; (8001080 <__NVIC_EnableIRQ+0x34>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	e000e100 	.word	0xe000e100

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	; (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	; (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff4f 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001164:	f7ff ff64 	bl	8001030 <__NVIC_GetPriorityGrouping>
 8001168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	f7ff ffb2 	bl	80010d8 <NVIC_EncodePriority>
 8001174:	4602      	mov	r2, r0
 8001176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff81 	bl	8001084 <__NVIC_SetPriority>
}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff57 	bl	800104c <__NVIC_EnableIRQ>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e014      	b.n	80011e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	791b      	ldrb	r3, [r3, #4]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d105      	bne.n	80011ce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff fc29 	bl	8000a20 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2202      	movs	r2, #2
 80011d2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6819      	ldr	r1, [r3, #0]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	f003 0310 	and.w	r3, r3, #16
 8001200:	2201      	movs	r2, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43da      	mvns	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	400a      	ands	r2, r1
 800120e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
	...

08001224 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	795b      	ldrb	r3, [r3, #5]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d101      	bne.n	8001242 <HAL_DAC_Start_DMA+0x1e>
 800123e:	2302      	movs	r3, #2
 8001240:	e0ab      	b.n	800139a <HAL_DAC_Start_DMA+0x176>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2201      	movs	r2, #1
 8001246:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2202      	movs	r2, #2
 800124c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d12f      	bne.n	80012b4 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	4a52      	ldr	r2, [pc, #328]	; (80013a4 <HAL_DAC_Start_DMA+0x180>)
 800125a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4a51      	ldr	r2, [pc, #324]	; (80013a8 <HAL_DAC_Start_DMA+0x184>)
 8001262:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	4a50      	ldr	r2, [pc, #320]	; (80013ac <HAL_DAC_Start_DMA+0x188>)
 800126a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800127a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	2b08      	cmp	r3, #8
 8001280:	d013      	beq.n	80012aa <HAL_DAC_Start_DMA+0x86>
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	2b08      	cmp	r3, #8
 8001286:	d845      	bhi.n	8001314 <HAL_DAC_Start_DMA+0xf0>
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_DAC_Start_DMA+0x72>
 800128e:	6a3b      	ldr	r3, [r7, #32]
 8001290:	2b04      	cmp	r3, #4
 8001292:	d005      	beq.n	80012a0 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001294:	e03e      	b.n	8001314 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3308      	adds	r3, #8
 800129c:	613b      	str	r3, [r7, #16]
        break;
 800129e:	e03c      	b.n	800131a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	330c      	adds	r3, #12
 80012a6:	613b      	str	r3, [r7, #16]
        break;
 80012a8:	e037      	b.n	800131a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3310      	adds	r3, #16
 80012b0:	613b      	str	r3, [r7, #16]
        break;
 80012b2:	e032      	b.n	800131a <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	4a3d      	ldr	r2, [pc, #244]	; (80013b0 <HAL_DAC_Start_DMA+0x18c>)
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	4a3c      	ldr	r2, [pc, #240]	; (80013b4 <HAL_DAC_Start_DMA+0x190>)
 80012c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	4a3b      	ldr	r2, [pc, #236]	; (80013b8 <HAL_DAC_Start_DMA+0x194>)
 80012ca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012da:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d013      	beq.n	800130a <HAL_DAC_Start_DMA+0xe6>
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d817      	bhi.n	8001318 <HAL_DAC_Start_DMA+0xf4>
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_DAC_Start_DMA+0xd2>
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d005      	beq.n	8001300 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80012f4:	e010      	b.n	8001318 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3314      	adds	r3, #20
 80012fc:	613b      	str	r3, [r7, #16]
        break;
 80012fe:	e00c      	b.n	800131a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3318      	adds	r3, #24
 8001306:	613b      	str	r3, [r7, #16]
        break;
 8001308:	e007      	b.n	800131a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	331c      	adds	r3, #28
 8001310:	613b      	str	r3, [r7, #16]
        break;
 8001312:	e002      	b.n	800131a <HAL_DAC_Start_DMA+0xf6>
        break;
 8001314:	bf00      	nop
 8001316:	e000      	b.n	800131a <HAL_DAC_Start_DMA+0xf6>
        break;
 8001318:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d111      	bne.n	8001344 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800132e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6898      	ldr	r0, [r3, #8]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	f000 f991 	bl	8001660 <HAL_DMA_Start_IT>
 800133e:	4603      	mov	r3, r0
 8001340:	75fb      	strb	r3, [r7, #23]
 8001342:	e010      	b.n	8001366 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001352:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	68d8      	ldr	r0, [r3, #12]
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	f000 f97f 	bl	8001660 <HAL_DMA_Start_IT>
 8001362:	4603      	mov	r3, r0
 8001364:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10c      	bne.n	800138c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6819      	ldr	r1, [r3, #0]
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	2201      	movs	r2, #1
 8001380:	409a      	lsls	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	e005      	b.n	8001398 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	f043 0204 	orr.w	r2, r3, #4
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001398:	7dfb      	ldrb	r3, [r7, #23]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	0800146b 	.word	0x0800146b
 80013a8:	0800148d 	.word	0x0800148d
 80013ac:	080014a9 	.word	0x080014a9
 80013b0:	0800150d 	.word	0x0800150d
 80013b4:	0800152f 	.word	0x0800152f
 80013b8:	0800154b 	.word	0x0800154b

080013bc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b087      	sub	sp, #28
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	795b      	ldrb	r3, [r3, #5]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d101      	bne.n	80013e6 <HAL_DAC_ConfigChannel+0x18>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e03c      	b.n	8001460 <HAL_DAC_ConfigChannel+0x92>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2201      	movs	r2, #1
 80013ea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2202      	movs	r2, #2
 80013f0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f003 0310 	and.w	r3, r3, #16
 8001400:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	4013      	ands	r3, r2
 800140e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	4313      	orrs	r3, r2
 800142c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6819      	ldr	r1, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	22c0      	movs	r2, #192	; 0xc0
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43da      	mvns	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	400a      	ands	r2, r1
 8001450:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2201      	movs	r2, #1
 8001456:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2200      	movs	r2, #0
 800145c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	371c      	adds	r7, #28
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr

0800146a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b084      	sub	sp, #16
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f7ff f8d3 	bl	8000624 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2201      	movs	r2, #1
 8001482:	711a      	strb	r2, [r3, #4]
}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f7ff f8de 	bl	800065c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	f043 0204 	orr.w	r2, r3, #4
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f7ff ff7a 	bl	80013bc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2201      	movs	r2, #1
 80014cc:	711a      	strb	r2, [r3, #4]
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr

080014fa <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f7ff ffdb 	bl	80014d6 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2201      	movs	r2, #1
 8001524:	711a      	strb	r2, [r3, #4]
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b084      	sub	sp, #16
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f7ff ffd3 	bl	80014e8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	f043 0204 	orr.w	r2, r3, #4
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f7ff ffc8 	bl	80014fa <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2201      	movs	r2, #1
 800156e:	711a      	strb	r2, [r3, #4]
}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e059      	b.n	800163e <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <HAL_DMA_Init+0xd0>)
 8001592:	429a      	cmp	r2, r3
 8001594:	d80f      	bhi.n	80015b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	4b2b      	ldr	r3, [pc, #172]	; (800164c <HAL_DMA_Init+0xd4>)
 800159e:	4413      	add	r3, r2
 80015a0:	4a2b      	ldr	r2, [pc, #172]	; (8001650 <HAL_DMA_Init+0xd8>)
 80015a2:	fba2 2303 	umull	r2, r3, r2, r3
 80015a6:	091b      	lsrs	r3, r3, #4
 80015a8:	009a      	lsls	r2, r3, #2
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a28      	ldr	r2, [pc, #160]	; (8001654 <HAL_DMA_Init+0xdc>)
 80015b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80015b4:	e00e      	b.n	80015d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b26      	ldr	r3, [pc, #152]	; (8001658 <HAL_DMA_Init+0xe0>)
 80015be:	4413      	add	r3, r2
 80015c0:	4a23      	ldr	r2, [pc, #140]	; (8001650 <HAL_DMA_Init+0xd8>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	091b      	lsrs	r3, r3, #4
 80015c8:	009a      	lsls	r2, r3, #2
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a22      	ldr	r2, [pc, #136]	; (800165c <HAL_DMA_Init+0xe4>)
 80015d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2202      	movs	r2, #2
 80015d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80015ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80015f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001604:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001610:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	4313      	orrs	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	40026407 	.word	0x40026407
 800164c:	bffd9ff8 	.word	0xbffd9ff8
 8001650:	cccccccd 	.word	0xcccccccd
 8001654:	40026000 	.word	0x40026000
 8001658:	bffd9bf8 	.word	0xbffd9bf8
 800165c:	40026400 	.word	0x40026400

08001660 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <HAL_DMA_Start_IT+0x20>
 800167c:	2302      	movs	r3, #2
 800167e:	e04b      	b.n	8001718 <HAL_DMA_Start_IT+0xb8>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b01      	cmp	r3, #1
 8001692:	d13a      	bne.n	800170a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2202      	movs	r2, #2
 8001698:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 0201 	bic.w	r2, r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	68b9      	ldr	r1, [r7, #8]
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f000 f8e0 	bl	800187e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d008      	beq.n	80016d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f042 020e 	orr.w	r2, r2, #14
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	e00f      	b.n	80016f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0204 	bic.w	r2, r2, #4
 80016e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 020a 	orr.w	r2, r2, #10
 80016f6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0201 	orr.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	e005      	b.n	8001716 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001712:	2302      	movs	r3, #2
 8001714:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001716:	7dfb      	ldrb	r3, [r7, #23]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	f003 031c 	and.w	r3, r3, #28
 8001740:	2204      	movs	r2, #4
 8001742:	409a      	lsls	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4013      	ands	r3, r2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d026      	beq.n	800179a <HAL_DMA_IRQHandler+0x7a>
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	2b00      	cmp	r3, #0
 8001754:	d021      	beq.n	800179a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0320 	and.w	r3, r3, #32
 8001760:	2b00      	cmp	r3, #0
 8001762:	d107      	bne.n	8001774 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0204 	bic.w	r2, r2, #4
 8001772:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f003 021c 	and.w	r2, r3, #28
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001780:	2104      	movs	r1, #4
 8001782:	fa01 f202 	lsl.w	r2, r1, r2
 8001786:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	2b00      	cmp	r3, #0
 800178e:	d071      	beq.n	8001874 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001798:	e06c      	b.n	8001874 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 031c 	and.w	r3, r3, #28
 80017a2:	2202      	movs	r2, #2
 80017a4:	409a      	lsls	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d02e      	beq.n	800180c <HAL_DMA_IRQHandler+0xec>
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d029      	beq.n	800180c <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0320 	and.w	r3, r3, #32
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10b      	bne.n	80017de <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 020a 	bic.w	r2, r2, #10
 80017d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 021c 	and.w	r2, r3, #28
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ea:	2102      	movs	r1, #2
 80017ec:	fa01 f202 	lsl.w	r2, r1, r2
 80017f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d038      	beq.n	8001874 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800180a:	e033      	b.n	8001874 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	f003 031c 	and.w	r3, r3, #28
 8001814:	2208      	movs	r2, #8
 8001816:	409a      	lsls	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4013      	ands	r3, r2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d02a      	beq.n	8001876 <HAL_DMA_IRQHandler+0x156>
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d025      	beq.n	8001876 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 020e 	bic.w	r2, r2, #14
 8001838:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f003 021c 	and.w	r2, r3, #28
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001846:	2101      	movs	r1, #1
 8001848:	fa01 f202 	lsl.w	r2, r1, r2
 800184c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	2b00      	cmp	r3, #0
 800186a:	d004      	beq.n	8001876 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001874:	bf00      	nop
 8001876:	bf00      	nop
}
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800187e:	b480      	push	{r7}
 8001880:	b085      	sub	sp, #20
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	f003 021c 	and.w	r2, r3, #28
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001898:	2101      	movs	r1, #1
 800189a:	fa01 f202 	lsl.w	r2, r1, r2
 800189e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b10      	cmp	r3, #16
 80018ae:	d108      	bne.n	80018c2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018c0:	e007      	b.n	80018d2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	60da      	str	r2, [r3, #12]
}
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80018f2:	e160      	b.n	8001bb6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	2101      	movs	r1, #1
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001900:	4013      	ands	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 8152 	beq.w	8001bb0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b01      	cmp	r3, #1
 8001916:	d005      	beq.n	8001924 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001920:	2b02      	cmp	r3, #2
 8001922:	d130      	bne.n	8001986 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800195a:	2201      	movs	r2, #1
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	f003 0201 	and.w	r2, r3, #1
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	2b03      	cmp	r3, #3
 8001990:	d017      	beq.n	80019c2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	2203      	movs	r2, #3
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d123      	bne.n	8001a16 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	08da      	lsrs	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3208      	adds	r2, #8
 80019d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019da:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	220f      	movs	r2, #15
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	691a      	ldr	r2, [r3, #16]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	08da      	lsrs	r2, r3, #3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3208      	adds	r2, #8
 8001a10:	6939      	ldr	r1, [r7, #16]
 8001a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	2203      	movs	r2, #3
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 0203 	and.w	r2, r3, #3
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 80ac 	beq.w	8001bb0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a58:	4b5e      	ldr	r3, [pc, #376]	; (8001bd4 <HAL_GPIO_Init+0x2f8>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	4a5d      	ldr	r2, [pc, #372]	; (8001bd4 <HAL_GPIO_Init+0x2f8>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6213      	str	r3, [r2, #32]
 8001a64:	4b5b      	ldr	r3, [pc, #364]	; (8001bd4 <HAL_GPIO_Init+0x2f8>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a70:	4a59      	ldr	r2, [pc, #356]	; (8001bd8 <HAL_GPIO_Init+0x2fc>)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	3302      	adds	r3, #2
 8001a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	220f      	movs	r2, #15
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a51      	ldr	r2, [pc, #324]	; (8001bdc <HAL_GPIO_Init+0x300>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d025      	beq.n	8001ae8 <HAL_GPIO_Init+0x20c>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a50      	ldr	r2, [pc, #320]	; (8001be0 <HAL_GPIO_Init+0x304>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d01f      	beq.n	8001ae4 <HAL_GPIO_Init+0x208>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a4f      	ldr	r2, [pc, #316]	; (8001be4 <HAL_GPIO_Init+0x308>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d019      	beq.n	8001ae0 <HAL_GPIO_Init+0x204>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a4e      	ldr	r2, [pc, #312]	; (8001be8 <HAL_GPIO_Init+0x30c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d013      	beq.n	8001adc <HAL_GPIO_Init+0x200>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a4d      	ldr	r2, [pc, #308]	; (8001bec <HAL_GPIO_Init+0x310>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d00d      	beq.n	8001ad8 <HAL_GPIO_Init+0x1fc>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a4c      	ldr	r2, [pc, #304]	; (8001bf0 <HAL_GPIO_Init+0x314>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d007      	beq.n	8001ad4 <HAL_GPIO_Init+0x1f8>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a4b      	ldr	r2, [pc, #300]	; (8001bf4 <HAL_GPIO_Init+0x318>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d101      	bne.n	8001ad0 <HAL_GPIO_Init+0x1f4>
 8001acc:	2306      	movs	r3, #6
 8001ace:	e00c      	b.n	8001aea <HAL_GPIO_Init+0x20e>
 8001ad0:	2307      	movs	r3, #7
 8001ad2:	e00a      	b.n	8001aea <HAL_GPIO_Init+0x20e>
 8001ad4:	2305      	movs	r3, #5
 8001ad6:	e008      	b.n	8001aea <HAL_GPIO_Init+0x20e>
 8001ad8:	2304      	movs	r3, #4
 8001ada:	e006      	b.n	8001aea <HAL_GPIO_Init+0x20e>
 8001adc:	2303      	movs	r3, #3
 8001ade:	e004      	b.n	8001aea <HAL_GPIO_Init+0x20e>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e002      	b.n	8001aea <HAL_GPIO_Init+0x20e>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <HAL_GPIO_Init+0x20e>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	f002 0203 	and.w	r2, r2, #3
 8001af0:	0092      	lsls	r2, r2, #2
 8001af2:	4093      	lsls	r3, r2
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001afa:	4937      	ldr	r1, [pc, #220]	; (8001bd8 <HAL_GPIO_Init+0x2fc>)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3302      	adds	r3, #2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b08:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <HAL_GPIO_Init+0x31c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b2c:	4a32      	ldr	r2, [pc, #200]	; (8001bf8 <HAL_GPIO_Init+0x31c>)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b32:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <HAL_GPIO_Init+0x31c>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b56:	4a28      	ldr	r2, [pc, #160]	; (8001bf8 <HAL_GPIO_Init+0x31c>)
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b5c:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <HAL_GPIO_Init+0x31c>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b80:	4a1d      	ldr	r2, [pc, #116]	; (8001bf8 <HAL_GPIO_Init+0x31c>)
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <HAL_GPIO_Init+0x31c>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001baa:	4a13      	ldr	r2, [pc, #76]	; (8001bf8 <HAL_GPIO_Init+0x31c>)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f47f ae97 	bne.w	80018f4 <HAL_GPIO_Init+0x18>
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	bf00      	nop
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40010000 	.word	0x40010000
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40020400 	.word	0x40020400
 8001be4:	40020800 	.word	0x40020800
 8001be8:	40020c00 	.word	0x40020c00
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40021400 	.word	0x40021400
 8001bf4:	40021800 	.word	0x40021800
 8001bf8:	40010400 	.word	0x40010400

08001bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	807b      	strh	r3, [r7, #2]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c0c:	787b      	ldrb	r3, [r7, #1]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c12:	887a      	ldrh	r2, [r7, #2]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001c18:	e003      	b.n	8001c22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001c1a:	887b      	ldrh	r3, [r7, #2]
 8001c1c:	041a      	lsls	r2, r3, #16
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	619a      	str	r2, [r3, #24]
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e31d      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c3e:	4b94      	ldr	r3, [pc, #592]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c48:	4b91      	ldr	r3, [pc, #580]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c50:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d07b      	beq.n	8001d56 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d006      	beq.n	8001c72 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2b0c      	cmp	r3, #12
 8001c68:	d10f      	bne.n	8001c8a <HAL_RCC_OscConfig+0x5e>
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c70:	d10b      	bne.n	8001c8a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c72:	4b87      	ldr	r3, [pc, #540]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d06a      	beq.n	8001d54 <HAL_RCC_OscConfig+0x128>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d166      	bne.n	8001d54 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e2f7      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d106      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x74>
 8001c92:	4b7f      	ldr	r3, [pc, #508]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a7e      	ldr	r2, [pc, #504]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e02d      	b.n	8001cfc <HAL_RCC_OscConfig+0xd0>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10c      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x96>
 8001ca8:	4b79      	ldr	r3, [pc, #484]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a78      	ldr	r2, [pc, #480]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	4b76      	ldr	r3, [pc, #472]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a75      	ldr	r2, [pc, #468]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	e01c      	b.n	8001cfc <HAL_RCC_OscConfig+0xd0>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b05      	cmp	r3, #5
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0xb8>
 8001cca:	4b71      	ldr	r3, [pc, #452]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a70      	ldr	r2, [pc, #448]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	4b6e      	ldr	r3, [pc, #440]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a6d      	ldr	r2, [pc, #436]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e00b      	b.n	8001cfc <HAL_RCC_OscConfig+0xd0>
 8001ce4:	4b6a      	ldr	r3, [pc, #424]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a69      	ldr	r2, [pc, #420]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b67      	ldr	r3, [pc, #412]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a66      	ldr	r2, [pc, #408]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d013      	beq.n	8001d2c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff f944 	bl	8000f90 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7ff f940 	bl	8000f90 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	; 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e2ad      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d1e:	4b5c      	ldr	r3, [pc, #368]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0xe0>
 8001d2a:	e014      	b.n	8001d56 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2c:	f7ff f930 	bl	8000f90 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d34:	f7ff f92c 	bl	8000f90 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e299      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d46:	4b52      	ldr	r3, [pc, #328]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x108>
 8001d52:	e000      	b.n	8001d56 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d05a      	beq.n	8001e18 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2b0c      	cmp	r3, #12
 8001d6c:	d119      	bne.n	8001da2 <HAL_RCC_OscConfig+0x176>
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d116      	bne.n	8001da2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d74:	4b46      	ldr	r3, [pc, #280]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_OscConfig+0x160>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e276      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8c:	4b40      	ldr	r3, [pc, #256]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	493d      	ldr	r1, [pc, #244]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da0:	e03a      	b.n	8001e18 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d020      	beq.n	8001dec <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001daa:	4b3a      	ldr	r3, [pc, #232]	; (8001e94 <HAL_RCC_OscConfig+0x268>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7ff f8ee 	bl	8000f90 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db8:	f7ff f8ea 	bl	8000f90 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e257      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dca:	4b31      	ldr	r3, [pc, #196]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd6:	4b2e      	ldr	r3, [pc, #184]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	492a      	ldr	r1, [pc, #168]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	604b      	str	r3, [r1, #4]
 8001dea:	e015      	b.n	8001e18 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dec:	4b29      	ldr	r3, [pc, #164]	; (8001e94 <HAL_RCC_OscConfig+0x268>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7ff f8cd 	bl	8000f90 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfa:	f7ff f8c9 	bl	8000f90 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e236      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e0c:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f0      	bne.n	8001dfa <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80b8 	beq.w	8001f96 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d170      	bne.n	8001f0e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e2c:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_OscConfig+0x218>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e21a      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1a      	ldr	r2, [r3, #32]
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d921      	bls.n	8001e98 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 fc3f 	bl	80026dc <RCC_SetFlashLatencyFromMSIRange>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e208      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4906      	ldr	r1, [pc, #24]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	061b      	lsls	r3, r3, #24
 8001e88:	4901      	ldr	r1, [pc, #4]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
 8001e8e:	e020      	b.n	8001ed2 <HAL_RCC_OscConfig+0x2a6>
 8001e90:	40023800 	.word	0x40023800
 8001e94:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e98:	4ba4      	ldr	r3, [pc, #656]	; (800212c <HAL_RCC_OscConfig+0x500>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	49a1      	ldr	r1, [pc, #644]	; (800212c <HAL_RCC_OscConfig+0x500>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eaa:	4ba0      	ldr	r3, [pc, #640]	; (800212c <HAL_RCC_OscConfig+0x500>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	061b      	lsls	r3, r3, #24
 8001eb8:	499c      	ldr	r1, [pc, #624]	; (800212c <HAL_RCC_OscConfig+0x500>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 fc0a 	bl	80026dc <RCC_SetFlashLatencyFromMSIRange>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e1d3      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	0b5b      	lsrs	r3, r3, #13
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001ee2:	4a92      	ldr	r2, [pc, #584]	; (800212c <HAL_RCC_OscConfig+0x500>)
 8001ee4:	6892      	ldr	r2, [r2, #8]
 8001ee6:	0912      	lsrs	r2, r2, #4
 8001ee8:	f002 020f 	and.w	r2, r2, #15
 8001eec:	4990      	ldr	r1, [pc, #576]	; (8002130 <HAL_RCC_OscConfig+0x504>)
 8001eee:	5c8a      	ldrb	r2, [r1, r2]
 8001ef0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ef2:	4a90      	ldr	r2, [pc, #576]	; (8002134 <HAL_RCC_OscConfig+0x508>)
 8001ef4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ef6:	4b90      	ldr	r3, [pc, #576]	; (8002138 <HAL_RCC_OscConfig+0x50c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fea8 	bl	8000c50 <HAL_InitTick>
 8001f00:	4603      	mov	r3, r0
 8001f02:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d045      	beq.n	8001f96 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	e1b5      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d029      	beq.n	8001f6a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f16:	4b89      	ldr	r3, [pc, #548]	; (800213c <HAL_RCC_OscConfig+0x510>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff f838 	bl	8000f90 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f24:	f7ff f834 	bl	8000f90 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e1a1      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f36:	4b7d      	ldr	r3, [pc, #500]	; (800212c <HAL_RCC_OscConfig+0x500>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f42:	4b7a      	ldr	r3, [pc, #488]	; (800212c <HAL_RCC_OscConfig+0x500>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4977      	ldr	r1, [pc, #476]	; (800212c <HAL_RCC_OscConfig+0x500>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f54:	4b75      	ldr	r3, [pc, #468]	; (800212c <HAL_RCC_OscConfig+0x500>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	061b      	lsls	r3, r3, #24
 8001f62:	4972      	ldr	r1, [pc, #456]	; (800212c <HAL_RCC_OscConfig+0x500>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
 8001f68:	e015      	b.n	8001f96 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f6a:	4b74      	ldr	r3, [pc, #464]	; (800213c <HAL_RCC_OscConfig+0x510>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff f80e 	bl	8000f90 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f78:	f7ff f80a 	bl	8000f90 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e177      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f8a:	4b68      	ldr	r3, [pc, #416]	; (800212c <HAL_RCC_OscConfig+0x500>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d030      	beq.n	8002004 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d016      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001faa:	4b65      	ldr	r3, [pc, #404]	; (8002140 <HAL_RCC_OscConfig+0x514>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb0:	f7fe ffee 	bl	8000f90 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb8:	f7fe ffea 	bl	8000f90 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e157      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fca:	4b58      	ldr	r3, [pc, #352]	; (800212c <HAL_RCC_OscConfig+0x500>)
 8001fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x38c>
 8001fd6:	e015      	b.n	8002004 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd8:	4b59      	ldr	r3, [pc, #356]	; (8002140 <HAL_RCC_OscConfig+0x514>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fde:	f7fe ffd7 	bl	8000f90 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe6:	f7fe ffd3 	bl	8000f90 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e140      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ff8:	4b4c      	ldr	r3, [pc, #304]	; (800212c <HAL_RCC_OscConfig+0x500>)
 8001ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f0      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 80b5 	beq.w	800217c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002016:	4b45      	ldr	r3, [pc, #276]	; (800212c <HAL_RCC_OscConfig+0x500>)
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10d      	bne.n	800203e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002022:	4b42      	ldr	r3, [pc, #264]	; (800212c <HAL_RCC_OscConfig+0x500>)
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	4a41      	ldr	r2, [pc, #260]	; (800212c <HAL_RCC_OscConfig+0x500>)
 8002028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202c:	6253      	str	r3, [r2, #36]	; 0x24
 800202e:	4b3f      	ldr	r3, [pc, #252]	; (800212c <HAL_RCC_OscConfig+0x500>)
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800203a:	2301      	movs	r3, #1
 800203c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203e:	4b41      	ldr	r3, [pc, #260]	; (8002144 <HAL_RCC_OscConfig+0x518>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002046:	2b00      	cmp	r3, #0
 8002048:	d118      	bne.n	800207c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800204a:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <HAL_RCC_OscConfig+0x518>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a3d      	ldr	r2, [pc, #244]	; (8002144 <HAL_RCC_OscConfig+0x518>)
 8002050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002056:	f7fe ff9b 	bl	8000f90 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205e:	f7fe ff97 	bl	8000f90 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b64      	cmp	r3, #100	; 0x64
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e104      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002070:	4b34      	ldr	r3, [pc, #208]	; (8002144 <HAL_RCC_OscConfig+0x518>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d106      	bne.n	8002092 <HAL_RCC_OscConfig+0x466>
 8002084:	4b29      	ldr	r3, [pc, #164]	; (800212c <HAL_RCC_OscConfig+0x500>)
 8002086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002088:	4a28      	ldr	r2, [pc, #160]	; (800212c <HAL_RCC_OscConfig+0x500>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208e:	6353      	str	r3, [r2, #52]	; 0x34
 8002090:	e02d      	b.n	80020ee <HAL_RCC_OscConfig+0x4c2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10c      	bne.n	80020b4 <HAL_RCC_OscConfig+0x488>
 800209a:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_RCC_OscConfig+0x500>)
 800209c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209e:	4a23      	ldr	r2, [pc, #140]	; (800212c <HAL_RCC_OscConfig+0x500>)
 80020a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020a4:	6353      	str	r3, [r2, #52]	; 0x34
 80020a6:	4b21      	ldr	r3, [pc, #132]	; (800212c <HAL_RCC_OscConfig+0x500>)
 80020a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020aa:	4a20      	ldr	r2, [pc, #128]	; (800212c <HAL_RCC_OscConfig+0x500>)
 80020ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020b0:	6353      	str	r3, [r2, #52]	; 0x34
 80020b2:	e01c      	b.n	80020ee <HAL_RCC_OscConfig+0x4c2>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	d10c      	bne.n	80020d6 <HAL_RCC_OscConfig+0x4aa>
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_RCC_OscConfig+0x500>)
 80020be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c0:	4a1a      	ldr	r2, [pc, #104]	; (800212c <HAL_RCC_OscConfig+0x500>)
 80020c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020c6:	6353      	str	r3, [r2, #52]	; 0x34
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <HAL_RCC_OscConfig+0x500>)
 80020ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020cc:	4a17      	ldr	r2, [pc, #92]	; (800212c <HAL_RCC_OscConfig+0x500>)
 80020ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d2:	6353      	str	r3, [r2, #52]	; 0x34
 80020d4:	e00b      	b.n	80020ee <HAL_RCC_OscConfig+0x4c2>
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <HAL_RCC_OscConfig+0x500>)
 80020d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020da:	4a14      	ldr	r2, [pc, #80]	; (800212c <HAL_RCC_OscConfig+0x500>)
 80020dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020e0:	6353      	str	r3, [r2, #52]	; 0x34
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_RCC_OscConfig+0x500>)
 80020e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e6:	4a11      	ldr	r2, [pc, #68]	; (800212c <HAL_RCC_OscConfig+0x500>)
 80020e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020ec:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d015      	beq.n	8002122 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f6:	f7fe ff4b 	bl	8000f90 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020fc:	e00a      	b.n	8002114 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020fe:	f7fe ff47 	bl	8000f90 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	f241 3288 	movw	r2, #5000	; 0x1388
 800210c:	4293      	cmp	r3, r2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e0b2      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_RCC_OscConfig+0x500>)
 8002116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0ee      	beq.n	80020fe <HAL_RCC_OscConfig+0x4d2>
 8002120:	e023      	b.n	800216a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002122:	f7fe ff35 	bl	8000f90 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002128:	e019      	b.n	800215e <HAL_RCC_OscConfig+0x532>
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800
 8002130:	08006654 	.word	0x08006654
 8002134:	20000000 	.word	0x20000000
 8002138:	20000004 	.word	0x20000004
 800213c:	42470020 	.word	0x42470020
 8002140:	42470680 	.word	0x42470680
 8002144:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002148:	f7fe ff22 	bl	8000f90 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f241 3288 	movw	r2, #5000	; 0x1388
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e08d      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800215e:	4b49      	ldr	r3, [pc, #292]	; (8002284 <HAL_RCC_OscConfig+0x658>)
 8002160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1ee      	bne.n	8002148 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800216a:	7ffb      	ldrb	r3, [r7, #31]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d105      	bne.n	800217c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002170:	4b44      	ldr	r3, [pc, #272]	; (8002284 <HAL_RCC_OscConfig+0x658>)
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	4a43      	ldr	r2, [pc, #268]	; (8002284 <HAL_RCC_OscConfig+0x658>)
 8002176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	2b00      	cmp	r3, #0
 8002182:	d079      	beq.n	8002278 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2b0c      	cmp	r3, #12
 8002188:	d056      	beq.n	8002238 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	2b02      	cmp	r3, #2
 8002190:	d13b      	bne.n	800220a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002192:	4b3d      	ldr	r3, [pc, #244]	; (8002288 <HAL_RCC_OscConfig+0x65c>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7fe fefa 	bl	8000f90 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a0:	f7fe fef6 	bl	8000f90 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e063      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021b2:	4b34      	ldr	r3, [pc, #208]	; (8002284 <HAL_RCC_OscConfig+0x658>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021be:	4b31      	ldr	r3, [pc, #196]	; (8002284 <HAL_RCC_OscConfig+0x658>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	4319      	orrs	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	430b      	orrs	r3, r1
 80021d6:	492b      	ldr	r1, [pc, #172]	; (8002284 <HAL_RCC_OscConfig+0x658>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021dc:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <HAL_RCC_OscConfig+0x65c>)
 80021de:	2201      	movs	r2, #1
 80021e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e2:	f7fe fed5 	bl	8000f90 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ea:	f7fe fed1 	bl	8000f90 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e03e      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021fc:	4b21      	ldr	r3, [pc, #132]	; (8002284 <HAL_RCC_OscConfig+0x658>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f0      	beq.n	80021ea <HAL_RCC_OscConfig+0x5be>
 8002208:	e036      	b.n	8002278 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220a:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <HAL_RCC_OscConfig+0x65c>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe febe 	bl	8000f90 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002218:	f7fe feba 	bl	8000f90 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e027      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800222a:	4b16      	ldr	r3, [pc, #88]	; (8002284 <HAL_RCC_OscConfig+0x658>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x5ec>
 8002236:	e01f      	b.n	8002278 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e01a      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002244:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <HAL_RCC_OscConfig+0x658>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002254:	429a      	cmp	r2, r3
 8002256:	d10d      	bne.n	8002274 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002262:	429a      	cmp	r2, r3
 8002264:	d106      	bne.n	8002274 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3720      	adds	r7, #32
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800
 8002288:	42470060 	.word	0x42470060

0800228c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e11a      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b8f      	ldr	r3, [pc, #572]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d919      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d105      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x34>
 80022b4:	4b8a      	ldr	r3, [pc, #552]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a89      	ldr	r2, [pc, #548]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 80022ba:	f043 0304 	orr.w	r3, r3, #4
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b87      	ldr	r3, [pc, #540]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f023 0201 	bic.w	r2, r3, #1
 80022c8:	4985      	ldr	r1, [pc, #532]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d0:	4b83      	ldr	r3, [pc, #524]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d001      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0f9      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d008      	beq.n	8002300 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ee:	4b7d      	ldr	r3, [pc, #500]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	497a      	ldr	r1, [pc, #488]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 808e 	beq.w	800242a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d107      	bne.n	8002326 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002316:	4b73      	ldr	r3, [pc, #460]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d121      	bne.n	8002366 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e0d7      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800232e:	4b6d      	ldr	r3, [pc, #436]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d115      	bne.n	8002366 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e0cb      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d107      	bne.n	8002356 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002346:	4b67      	ldr	r3, [pc, #412]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0bf      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002356:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e0b7      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002366:	4b5f      	ldr	r3, [pc, #380]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f023 0203 	bic.w	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	495c      	ldr	r1, [pc, #368]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 8002374:	4313      	orrs	r3, r2
 8002376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002378:	f7fe fe0a 	bl	8000f90 <HAL_GetTick>
 800237c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d112      	bne.n	80023ac <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002386:	e00a      	b.n	800239e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002388:	f7fe fe02 	bl	8000f90 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	; 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e09b      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800239e:	4b51      	ldr	r3, [pc, #324]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d1ee      	bne.n	8002388 <HAL_RCC_ClockConfig+0xfc>
 80023aa:	e03e      	b.n	800242a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d112      	bne.n	80023da <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b4:	e00a      	b.n	80023cc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b6:	f7fe fdeb 	bl	8000f90 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e084      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023cc:	4b45      	ldr	r3, [pc, #276]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 030c 	and.w	r3, r3, #12
 80023d4:	2b0c      	cmp	r3, #12
 80023d6:	d1ee      	bne.n	80023b6 <HAL_RCC_ClockConfig+0x12a>
 80023d8:	e027      	b.n	800242a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d11d      	bne.n	800241e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e4:	f7fe fdd4 	bl	8000f90 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e06d      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023fa:	4b3a      	ldr	r3, [pc, #232]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b04      	cmp	r3, #4
 8002404:	d1ee      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x158>
 8002406:	e010      	b.n	800242a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002408:	f7fe fdc2 	bl	8000f90 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	; 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e05b      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800241e:	4b31      	ldr	r3, [pc, #196]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1ee      	bne.n	8002408 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800242a:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d219      	bcs.n	800246c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d105      	bne.n	800244a <HAL_RCC_ClockConfig+0x1be>
 800243e:	4b28      	ldr	r3, [pc, #160]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a27      	ldr	r2, [pc, #156]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 8002444:	f043 0304 	orr.w	r3, r3, #4
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	4b25      	ldr	r3, [pc, #148]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 0201 	bic.w	r2, r3, #1
 8002452:	4923      	ldr	r1, [pc, #140]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800245a:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d001      	beq.n	800246c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e034      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002478:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4917      	ldr	r1, [pc, #92]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002496:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	490f      	ldr	r1, [pc, #60]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024aa:	f000 f823 	bl	80024f4 <HAL_RCC_GetSysClockFreq>
 80024ae:	4602      	mov	r2, r0
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	490b      	ldr	r1, [pc, #44]	; (80024e8 <HAL_RCC_ClockConfig+0x25c>)
 80024bc:	5ccb      	ldrb	r3, [r1, r3]
 80024be:	fa22 f303 	lsr.w	r3, r2, r3
 80024c2:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <HAL_RCC_ClockConfig+0x260>)
 80024c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <HAL_RCC_ClockConfig+0x264>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe fbc0 	bl	8000c50 <HAL_InitTick>
 80024d0:	4603      	mov	r3, r0
 80024d2:	72fb      	strb	r3, [r7, #11]

  return status;
 80024d4:	7afb      	ldrb	r3, [r7, #11]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023c00 	.word	0x40023c00
 80024e4:	40023800 	.word	0x40023800
 80024e8:	08006654 	.word	0x08006654
 80024ec:	20000000 	.word	0x20000000
 80024f0:	20000004 	.word	0x20000004

080024f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f4:	b5b0      	push	{r4, r5, r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80024fa:	4b4d      	ldr	r3, [pc, #308]	; (8002630 <HAL_RCC_GetSysClockFreq+0x13c>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b0c      	cmp	r3, #12
 8002508:	d00c      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x30>
 800250a:	2b0c      	cmp	r3, #12
 800250c:	d87c      	bhi.n	8002608 <HAL_RCC_GetSysClockFreq+0x114>
 800250e:	2b04      	cmp	r3, #4
 8002510:	d002      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x24>
 8002512:	2b08      	cmp	r3, #8
 8002514:	d003      	beq.n	800251e <HAL_RCC_GetSysClockFreq+0x2a>
 8002516:	e077      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002518:	4b46      	ldr	r3, [pc, #280]	; (8002634 <HAL_RCC_GetSysClockFreq+0x140>)
 800251a:	613b      	str	r3, [r7, #16]
      break;
 800251c:	e082      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800251e:	4b46      	ldr	r3, [pc, #280]	; (8002638 <HAL_RCC_GetSysClockFreq+0x144>)
 8002520:	613b      	str	r3, [r7, #16]
      break;
 8002522:	e07f      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	0c9b      	lsrs	r3, r3, #18
 8002528:	f003 030f 	and.w	r3, r3, #15
 800252c:	4a43      	ldr	r2, [pc, #268]	; (800263c <HAL_RCC_GetSysClockFreq+0x148>)
 800252e:	5cd3      	ldrb	r3, [r2, r3]
 8002530:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	0d9b      	lsrs	r3, r3, #22
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	3301      	adds	r3, #1
 800253c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800253e:	4b3c      	ldr	r3, [pc, #240]	; (8002630 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d01a      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	461a      	mov	r2, r3
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	4939      	ldr	r1, [pc, #228]	; (8002638 <HAL_RCC_GetSysClockFreq+0x144>)
 8002554:	fb01 f003 	mul.w	r0, r1, r3
 8002558:	2100      	movs	r1, #0
 800255a:	fb01 f102 	mul.w	r1, r1, r2
 800255e:	1844      	adds	r4, r0, r1
 8002560:	4935      	ldr	r1, [pc, #212]	; (8002638 <HAL_RCC_GetSysClockFreq+0x144>)
 8002562:	fba2 0101 	umull	r0, r1, r2, r1
 8002566:	1863      	adds	r3, r4, r1
 8002568:	4619      	mov	r1, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	461a      	mov	r2, r3
 800256e:	f04f 0300 	mov.w	r3, #0
 8002572:	f7fd fe03 	bl	800017c <__aeabi_uldivmod>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4613      	mov	r3, r2
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	e040      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	461c      	mov	r4, r3
 8002584:	f04f 0500 	mov.w	r5, #0
 8002588:	4620      	mov	r0, r4
 800258a:	4629      	mov	r1, r5
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	014b      	lsls	r3, r1, #5
 8002596:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800259a:	0142      	lsls	r2, r0, #5
 800259c:	4610      	mov	r0, r2
 800259e:	4619      	mov	r1, r3
 80025a0:	1b00      	subs	r0, r0, r4
 80025a2:	eb61 0105 	sbc.w	r1, r1, r5
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	018b      	lsls	r3, r1, #6
 80025b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025b4:	0182      	lsls	r2, r0, #6
 80025b6:	1a12      	subs	r2, r2, r0
 80025b8:	eb63 0301 	sbc.w	r3, r3, r1
 80025bc:	f04f 0000 	mov.w	r0, #0
 80025c0:	f04f 0100 	mov.w	r1, #0
 80025c4:	00d9      	lsls	r1, r3, #3
 80025c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025ca:	00d0      	lsls	r0, r2, #3
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	1912      	adds	r2, r2, r4
 80025d2:	eb45 0303 	adc.w	r3, r5, r3
 80025d6:	f04f 0000 	mov.w	r0, #0
 80025da:	f04f 0100 	mov.w	r1, #0
 80025de:	0299      	lsls	r1, r3, #10
 80025e0:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80025e4:	0290      	lsls	r0, r2, #10
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4610      	mov	r0, r2
 80025ec:	4619      	mov	r1, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	461a      	mov	r2, r3
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	f7fd fdc1 	bl	800017c <__aeabi_uldivmod>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4613      	mov	r3, r2
 8002600:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	613b      	str	r3, [r7, #16]
      break;
 8002606:	e00d      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_RCC_GetSysClockFreq+0x13c>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	0b5b      	lsrs	r3, r3, #13
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	3301      	adds	r3, #1
 8002618:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	613b      	str	r3, [r7, #16]
      break;
 8002622:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002624:	693b      	ldr	r3, [r7, #16]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bdb0      	pop	{r4, r5, r7, pc}
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800
 8002634:	00f42400 	.word	0x00f42400
 8002638:	016e3600 	.word	0x016e3600
 800263c:	08006648 	.word	0x08006648

08002640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002644:	4b02      	ldr	r3, [pc, #8]	; (8002650 <HAL_RCC_GetHCLKFreq+0x10>)
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	20000000 	.word	0x20000000

08002654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002658:	f7ff fff2 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 800265c:	4602      	mov	r2, r0
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	4903      	ldr	r1, [pc, #12]	; (8002678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002670:	4618      	mov	r0, r3
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40023800 	.word	0x40023800
 8002678:	08006664 	.word	0x08006664

0800267c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	220f      	movs	r2, #15
 800268a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <HAL_RCC_GetClockConfig+0x58>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0203 	and.w	r2, r3, #3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002698:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <HAL_RCC_GetClockConfig+0x58>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_GetClockConfig+0x58>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <HAL_RCC_GetClockConfig+0x58>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	08db      	lsrs	r3, r3, #3
 80026b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_RCC_GetClockConfig+0x5c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0201 	and.w	r2, r3, #1
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	601a      	str	r2, [r3, #0]
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40023c00 	.word	0x40023c00

080026dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026e4:	2300      	movs	r3, #0
 80026e6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80026e8:	4b29      	ldr	r3, [pc, #164]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d12c      	bne.n	800274e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026f4:	4b26      	ldr	r3, [pc, #152]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002700:	4b24      	ldr	r3, [pc, #144]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	e016      	b.n	800273a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270c:	4b20      	ldr	r3, [pc, #128]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	4a1f      	ldr	r2, [pc, #124]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002716:	6253      	str	r3, [r2, #36]	; 0x24
 8002718:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002724:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800272c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800272e:	4b18      	ldr	r3, [pc, #96]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	4a17      	ldr	r2, [pc, #92]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002738:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002740:	d105      	bne.n	800274e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002748:	d101      	bne.n	800274e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800274a:	2301      	movs	r3, #1
 800274c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d105      	bne.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0f      	ldr	r2, [pc, #60]	; (8002798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800275a:	f043 0304 	orr.w	r3, r3, #4
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 0201 	bic.w	r2, r3, #1
 8002768:	490b      	ldr	r1, [pc, #44]	; (8002798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	429a      	cmp	r2, r3
 800277c:	d001      	beq.n	8002782 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	371c      	adds	r7, #28
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800
 8002794:	40007000 	.word	0x40007000
 8002798:	40023c00 	.word	0x40023c00

0800279c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e07b      	b.n	80028a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d108      	bne.n	80027c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027be:	d009      	beq.n	80027d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	61da      	str	r2, [r3, #28]
 80027c6:	e005      	b.n	80027d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe f980 	bl	8000af4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800280a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002858:	ea42 0103 	orr.w	r1, r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	0c1b      	lsrs	r3, r3, #16
 8002872:	f003 0104 	and.w	r1, r3, #4
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	f003 0210 	and.w	r2, r3, #16
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69da      	ldr	r2, [r3, #28]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002894:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b088      	sub	sp, #32
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	4613      	mov	r3, r2
 80028bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_SPI_Transmit+0x22>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e126      	b.n	8002b1e <HAL_SPI_Transmit+0x270>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028d8:	f7fe fb5a 	bl	8000f90 <HAL_GetTick>
 80028dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d002      	beq.n	80028f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80028ee:	2302      	movs	r3, #2
 80028f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028f2:	e10b      	b.n	8002b0c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <HAL_SPI_Transmit+0x52>
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002904:	e102      	b.n	8002b0c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2203      	movs	r2, #3
 800290a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	88fa      	ldrh	r2, [r7, #6]
 800291e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	88fa      	ldrh	r2, [r7, #6]
 8002924:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800294c:	d10f      	bne.n	800296e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800295c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800296c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002978:	2b40      	cmp	r3, #64	; 0x40
 800297a:	d007      	beq.n	800298c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800298a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002994:	d14b      	bne.n	8002a2e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <HAL_SPI_Transmit+0xf6>
 800299e:	8afb      	ldrh	r3, [r7, #22]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d13e      	bne.n	8002a22 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	881a      	ldrh	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	1c9a      	adds	r2, r3, #2
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029c8:	e02b      	b.n	8002a22 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d112      	bne.n	80029fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	881a      	ldrh	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	1c9a      	adds	r2, r3, #2
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80029fc:	e011      	b.n	8002a22 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029fe:	f7fe fac7 	bl	8000f90 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d803      	bhi.n	8002a16 <HAL_SPI_Transmit+0x168>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a14:	d102      	bne.n	8002a1c <HAL_SPI_Transmit+0x16e>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d102      	bne.n	8002a22 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a20:	e074      	b.n	8002b0c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ce      	bne.n	80029ca <HAL_SPI_Transmit+0x11c>
 8002a2c:	e04c      	b.n	8002ac8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <HAL_SPI_Transmit+0x18e>
 8002a36:	8afb      	ldrh	r3, [r7, #22]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d140      	bne.n	8002abe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	330c      	adds	r3, #12
 8002a46:	7812      	ldrb	r2, [r2, #0]
 8002a48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a62:	e02c      	b.n	8002abe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d113      	bne.n	8002a9a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	330c      	adds	r3, #12
 8002a7c:	7812      	ldrb	r2, [r2, #0]
 8002a7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a98:	e011      	b.n	8002abe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a9a:	f7fe fa79 	bl	8000f90 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d803      	bhi.n	8002ab2 <HAL_SPI_Transmit+0x204>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab0:	d102      	bne.n	8002ab8 <HAL_SPI_Transmit+0x20a>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d102      	bne.n	8002abe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002abc:	e026      	b.n	8002b0c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1cd      	bne.n	8002a64 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	6839      	ldr	r1, [r7, #0]
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 fa55 	bl	8002f7c <SPI_EndRxTxTransaction>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10a      	bne.n	8002afc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	77fb      	strb	r3, [r7, #31]
 8002b08:	e000      	b.n	8002b0c <HAL_SPI_Transmit+0x25e>
  }

error:
 8002b0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3720      	adds	r7, #32
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b08c      	sub	sp, #48	; 0x30
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b34:	2301      	movs	r3, #1
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_SPI_TransmitReceive+0x26>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e18a      	b.n	8002e62 <HAL_SPI_TransmitReceive+0x33c>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b54:	f7fe fa1c 	bl	8000f90 <HAL_GetTick>
 8002b58:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002b6a:	887b      	ldrh	r3, [r7, #2]
 8002b6c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d00f      	beq.n	8002b96 <HAL_SPI_TransmitReceive+0x70>
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b7c:	d107      	bne.n	8002b8e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d103      	bne.n	8002b8e <HAL_SPI_TransmitReceive+0x68>
 8002b86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d003      	beq.n	8002b96 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b94:	e15b      	b.n	8002e4e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_SPI_TransmitReceive+0x82>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d002      	beq.n	8002ba8 <HAL_SPI_TransmitReceive+0x82>
 8002ba2:	887b      	ldrh	r3, [r7, #2]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d103      	bne.n	8002bb0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002bae:	e14e      	b.n	8002e4e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d003      	beq.n	8002bc4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2205      	movs	r2, #5
 8002bc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	887a      	ldrh	r2, [r7, #2]
 8002bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	887a      	ldrh	r2, [r7, #2]
 8002bda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	887a      	ldrh	r2, [r7, #2]
 8002be6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	887a      	ldrh	r2, [r7, #2]
 8002bec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c04:	2b40      	cmp	r3, #64	; 0x40
 8002c06:	d007      	beq.n	8002c18 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c20:	d178      	bne.n	8002d14 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_SPI_TransmitReceive+0x10a>
 8002c2a:	8b7b      	ldrh	r3, [r7, #26]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d166      	bne.n	8002cfe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	881a      	ldrh	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	1c9a      	adds	r2, r3, #2
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c54:	e053      	b.n	8002cfe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d11b      	bne.n	8002c9c <HAL_SPI_TransmitReceive+0x176>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d016      	beq.n	8002c9c <HAL_SPI_TransmitReceive+0x176>
 8002c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d113      	bne.n	8002c9c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	881a      	ldrh	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	1c9a      	adds	r2, r3, #2
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d119      	bne.n	8002cde <HAL_SPI_TransmitReceive+0x1b8>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d014      	beq.n	8002cde <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	b292      	uxth	r2, r2
 8002cc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	1c9a      	adds	r2, r3, #2
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002cde:	f7fe f957 	bl	8000f90 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d807      	bhi.n	8002cfe <HAL_SPI_TransmitReceive+0x1d8>
 8002cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d003      	beq.n	8002cfe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002cfc:	e0a7      	b.n	8002e4e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1a6      	bne.n	8002c56 <HAL_SPI_TransmitReceive+0x130>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1a1      	bne.n	8002c56 <HAL_SPI_TransmitReceive+0x130>
 8002d12:	e07c      	b.n	8002e0e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <HAL_SPI_TransmitReceive+0x1fc>
 8002d1c:	8b7b      	ldrh	r3, [r7, #26]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d16b      	bne.n	8002dfa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	330c      	adds	r3, #12
 8002d2c:	7812      	ldrb	r2, [r2, #0]
 8002d2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d48:	e057      	b.n	8002dfa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d11c      	bne.n	8002d92 <HAL_SPI_TransmitReceive+0x26c>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d017      	beq.n	8002d92 <HAL_SPI_TransmitReceive+0x26c>
 8002d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d114      	bne.n	8002d92 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	330c      	adds	r3, #12
 8002d72:	7812      	ldrb	r2, [r2, #0]
 8002d74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d119      	bne.n	8002dd4 <HAL_SPI_TransmitReceive+0x2ae>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d014      	beq.n	8002dd4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002dd4:	f7fe f8dc 	bl	8000f90 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d803      	bhi.n	8002dec <HAL_SPI_TransmitReceive+0x2c6>
 8002de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dea:	d102      	bne.n	8002df2 <HAL_SPI_TransmitReceive+0x2cc>
 8002dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002df8:	e029      	b.n	8002e4e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1a2      	bne.n	8002d4a <HAL_SPI_TransmitReceive+0x224>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d19d      	bne.n	8002d4a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f8b2 	bl	8002f7c <SPI_EndRxTxTransaction>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d006      	beq.n	8002e2c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2220      	movs	r2, #32
 8002e28:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002e2a:	e010      	b.n	8002e4e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10b      	bne.n	8002e4c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	e000      	b.n	8002e4e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002e4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3730      	adds	r7, #48	; 0x30
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e7c:	f7fe f888 	bl	8000f90 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	4413      	add	r3, r2
 8002e8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e8c:	f7fe f880 	bl	8000f90 <HAL_GetTick>
 8002e90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e92:	4b39      	ldr	r3, [pc, #228]	; (8002f78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	015b      	lsls	r3, r3, #5
 8002e98:	0d1b      	lsrs	r3, r3, #20
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ea0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ea2:	e054      	b.n	8002f4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eaa:	d050      	beq.n	8002f4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002eac:	f7fe f870 	bl	8000f90 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d902      	bls.n	8002ec2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d13d      	bne.n	8002f3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ed0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eda:	d111      	bne.n	8002f00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee4:	d004      	beq.n	8002ef0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eee:	d107      	bne.n	8002f00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002efe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f08:	d10f      	bne.n	8002f2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e017      	b.n	8002f6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4013      	ands	r3, r2
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	bf0c      	ite	eq
 8002f5e:	2301      	moveq	r3, #1
 8002f60:	2300      	movne	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d19b      	bne.n	8002ea4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3720      	adds	r7, #32
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000000 	.word	0x20000000

08002f7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f88:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <SPI_EndRxTxTransaction+0x7c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1b      	ldr	r2, [pc, #108]	; (8002ffc <SPI_EndRxTxTransaction+0x80>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	0d5b      	lsrs	r3, r3, #21
 8002f94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f98:	fb02 f303 	mul.w	r3, r2, r3
 8002f9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fa6:	d112      	bne.n	8002fce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2180      	movs	r1, #128	; 0x80
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f7ff ff5a 	bl	8002e6c <SPI_WaitFlagStateUntilTimeout>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d016      	beq.n	8002fec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc2:	f043 0220 	orr.w	r2, r3, #32
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e00f      	b.n	8002fee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe4:	2b80      	cmp	r3, #128	; 0x80
 8002fe6:	d0f2      	beq.n	8002fce <SPI_EndRxTxTransaction+0x52>
 8002fe8:	e000      	b.n	8002fec <SPI_EndRxTxTransaction+0x70>
        break;
 8002fea:	bf00      	nop
  }

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000000 	.word	0x20000000
 8002ffc:	165e9f81 	.word	0x165e9f81

08003000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e031      	b.n	8003076 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fd fdf6 	bl	8000c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3304      	adds	r3, #4
 800303c:	4619      	mov	r1, r3
 800303e:	4610      	mov	r0, r2
 8003040:	f000 fa7e 	bl	8003540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b01      	cmp	r3, #1
 8003092:	d001      	beq.n	8003098 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e032      	b.n	80030fe <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a8:	d00e      	beq.n	80030c8 <HAL_TIM_Base_Start+0x48>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a16      	ldr	r2, [pc, #88]	; (8003108 <HAL_TIM_Base_Start+0x88>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d009      	beq.n	80030c8 <HAL_TIM_Base_Start+0x48>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a14      	ldr	r2, [pc, #80]	; (800310c <HAL_TIM_Base_Start+0x8c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d004      	beq.n	80030c8 <HAL_TIM_Base_Start+0x48>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a13      	ldr	r2, [pc, #76]	; (8003110 <HAL_TIM_Base_Start+0x90>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d111      	bne.n	80030ec <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b06      	cmp	r3, #6
 80030d8:	d010      	beq.n	80030fc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0201 	orr.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ea:	e007      	b.n	80030fc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr
 8003108:	40000400 	.word	0x40000400
 800310c:	40000800 	.word	0x40000800
 8003110:	40010800 	.word	0x40010800

08003114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d001      	beq.n	800312c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e03a      	b.n	80031a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314c:	d00e      	beq.n	800316c <HAL_TIM_Base_Start_IT+0x58>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a16      	ldr	r2, [pc, #88]	; (80031ac <HAL_TIM_Base_Start_IT+0x98>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d009      	beq.n	800316c <HAL_TIM_Base_Start_IT+0x58>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a14      	ldr	r2, [pc, #80]	; (80031b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d004      	beq.n	800316c <HAL_TIM_Base_Start_IT+0x58>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a13      	ldr	r2, [pc, #76]	; (80031b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d111      	bne.n	8003190 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b06      	cmp	r3, #6
 800317c:	d010      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0201 	orr.w	r2, r2, #1
 800318c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318e:	e007      	b.n	80031a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr
 80031ac:	40000400 	.word	0x40000400
 80031b0:	40000800 	.word	0x40000800
 80031b4:	40010800 	.word	0x40010800

080031b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d122      	bne.n	8003214 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d11b      	bne.n	8003214 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0202 	mvn.w	r2, #2
 80031e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f985 	bl	800350a <HAL_TIM_IC_CaptureCallback>
 8003200:	e005      	b.n	800320e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f978 	bl	80034f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f987 	bl	800351c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b04      	cmp	r3, #4
 8003220:	d122      	bne.n	8003268 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b04      	cmp	r3, #4
 800322e:	d11b      	bne.n	8003268 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0204 	mvn.w	r2, #4
 8003238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2202      	movs	r2, #2
 800323e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f95b 	bl	800350a <HAL_TIM_IC_CaptureCallback>
 8003254:	e005      	b.n	8003262 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f94e 	bl	80034f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f95d 	bl	800351c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b08      	cmp	r3, #8
 8003274:	d122      	bne.n	80032bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b08      	cmp	r3, #8
 8003282:	d11b      	bne.n	80032bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0208 	mvn.w	r2, #8
 800328c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2204      	movs	r2, #4
 8003292:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f931 	bl	800350a <HAL_TIM_IC_CaptureCallback>
 80032a8:	e005      	b.n	80032b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f924 	bl	80034f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f933 	bl	800351c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b10      	cmp	r3, #16
 80032c8:	d122      	bne.n	8003310 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f003 0310 	and.w	r3, r3, #16
 80032d4:	2b10      	cmp	r3, #16
 80032d6:	d11b      	bne.n	8003310 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f06f 0210 	mvn.w	r2, #16
 80032e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2208      	movs	r2, #8
 80032e6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f907 	bl	800350a <HAL_TIM_IC_CaptureCallback>
 80032fc:	e005      	b.n	800330a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f8fa 	bl	80034f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f909 	bl	800351c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d10e      	bne.n	800333c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d107      	bne.n	800333c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0201 	mvn.w	r2, #1
 8003334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fd fa6c 	bl	8000814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003346:	2b40      	cmp	r3, #64	; 0x40
 8003348:	d10e      	bne.n	8003368 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003354:	2b40      	cmp	r3, #64	; 0x40
 8003356:	d107      	bne.n	8003368 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f8e3 	bl	800352e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_TIM_ConfigClockSource+0x18>
 8003384:	2302      	movs	r3, #2
 8003386:	e0b3      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x180>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c0:	d03e      	beq.n	8003440 <HAL_TIM_ConfigClockSource+0xd0>
 80033c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c6:	f200 8087 	bhi.w	80034d8 <HAL_TIM_ConfigClockSource+0x168>
 80033ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ce:	f000 8085 	beq.w	80034dc <HAL_TIM_ConfigClockSource+0x16c>
 80033d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d6:	d87f      	bhi.n	80034d8 <HAL_TIM_ConfigClockSource+0x168>
 80033d8:	2b70      	cmp	r3, #112	; 0x70
 80033da:	d01a      	beq.n	8003412 <HAL_TIM_ConfigClockSource+0xa2>
 80033dc:	2b70      	cmp	r3, #112	; 0x70
 80033de:	d87b      	bhi.n	80034d8 <HAL_TIM_ConfigClockSource+0x168>
 80033e0:	2b60      	cmp	r3, #96	; 0x60
 80033e2:	d050      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x116>
 80033e4:	2b60      	cmp	r3, #96	; 0x60
 80033e6:	d877      	bhi.n	80034d8 <HAL_TIM_ConfigClockSource+0x168>
 80033e8:	2b50      	cmp	r3, #80	; 0x50
 80033ea:	d03c      	beq.n	8003466 <HAL_TIM_ConfigClockSource+0xf6>
 80033ec:	2b50      	cmp	r3, #80	; 0x50
 80033ee:	d873      	bhi.n	80034d8 <HAL_TIM_ConfigClockSource+0x168>
 80033f0:	2b40      	cmp	r3, #64	; 0x40
 80033f2:	d058      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0x136>
 80033f4:	2b40      	cmp	r3, #64	; 0x40
 80033f6:	d86f      	bhi.n	80034d8 <HAL_TIM_ConfigClockSource+0x168>
 80033f8:	2b30      	cmp	r3, #48	; 0x30
 80033fa:	d064      	beq.n	80034c6 <HAL_TIM_ConfigClockSource+0x156>
 80033fc:	2b30      	cmp	r3, #48	; 0x30
 80033fe:	d86b      	bhi.n	80034d8 <HAL_TIM_ConfigClockSource+0x168>
 8003400:	2b20      	cmp	r3, #32
 8003402:	d060      	beq.n	80034c6 <HAL_TIM_ConfigClockSource+0x156>
 8003404:	2b20      	cmp	r3, #32
 8003406:	d867      	bhi.n	80034d8 <HAL_TIM_ConfigClockSource+0x168>
 8003408:	2b00      	cmp	r3, #0
 800340a:	d05c      	beq.n	80034c6 <HAL_TIM_ConfigClockSource+0x156>
 800340c:	2b10      	cmp	r3, #16
 800340e:	d05a      	beq.n	80034c6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003410:	e062      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	6899      	ldr	r1, [r3, #8]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f000 f974 	bl	800370e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003434:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	609a      	str	r2, [r3, #8]
      break;
 800343e:	e04e      	b.n	80034de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	6899      	ldr	r1, [r3, #8]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f000 f95d 	bl	800370e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003462:	609a      	str	r2, [r3, #8]
      break;
 8003464:	e03b      	b.n	80034de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	6859      	ldr	r1, [r3, #4]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	461a      	mov	r2, r3
 8003474:	f000 f8d4 	bl	8003620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2150      	movs	r1, #80	; 0x50
 800347e:	4618      	mov	r0, r3
 8003480:	f000 f92b 	bl	80036da <TIM_ITRx_SetConfig>
      break;
 8003484:	e02b      	b.n	80034de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	6859      	ldr	r1, [r3, #4]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	461a      	mov	r2, r3
 8003494:	f000 f8f2 	bl	800367c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2160      	movs	r1, #96	; 0x60
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f91b 	bl	80036da <TIM_ITRx_SetConfig>
      break;
 80034a4:	e01b      	b.n	80034de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6859      	ldr	r1, [r3, #4]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	461a      	mov	r2, r3
 80034b4:	f000 f8b4 	bl	8003620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2140      	movs	r1, #64	; 0x40
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f90b 	bl	80036da <TIM_ITRx_SetConfig>
      break;
 80034c4:	e00b      	b.n	80034de <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4619      	mov	r1, r3
 80034d0:	4610      	mov	r0, r2
 80034d2:	f000 f902 	bl	80036da <TIM_ITRx_SetConfig>
        break;
 80034d6:	e002      	b.n	80034de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034d8:	bf00      	nop
 80034da:	e000      	b.n	80034de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr

0800350a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr

0800351c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr

0800352e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003556:	d00f      	beq.n	8003578 <TIM_Base_SetConfig+0x38>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a2b      	ldr	r2, [pc, #172]	; (8003608 <TIM_Base_SetConfig+0xc8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00b      	beq.n	8003578 <TIM_Base_SetConfig+0x38>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a2a      	ldr	r2, [pc, #168]	; (800360c <TIM_Base_SetConfig+0xcc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d007      	beq.n	8003578 <TIM_Base_SetConfig+0x38>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a29      	ldr	r2, [pc, #164]	; (8003610 <TIM_Base_SetConfig+0xd0>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d003      	beq.n	8003578 <TIM_Base_SetConfig+0x38>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a28      	ldr	r2, [pc, #160]	; (8003614 <TIM_Base_SetConfig+0xd4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d108      	bne.n	800358a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003590:	d017      	beq.n	80035c2 <TIM_Base_SetConfig+0x82>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <TIM_Base_SetConfig+0xc8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d013      	beq.n	80035c2 <TIM_Base_SetConfig+0x82>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a1b      	ldr	r2, [pc, #108]	; (800360c <TIM_Base_SetConfig+0xcc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00f      	beq.n	80035c2 <TIM_Base_SetConfig+0x82>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a1a      	ldr	r2, [pc, #104]	; (8003610 <TIM_Base_SetConfig+0xd0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00b      	beq.n	80035c2 <TIM_Base_SetConfig+0x82>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a19      	ldr	r2, [pc, #100]	; (8003614 <TIM_Base_SetConfig+0xd4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d007      	beq.n	80035c2 <TIM_Base_SetConfig+0x82>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a18      	ldr	r2, [pc, #96]	; (8003618 <TIM_Base_SetConfig+0xd8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d003      	beq.n	80035c2 <TIM_Base_SetConfig+0x82>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a17      	ldr	r2, [pc, #92]	; (800361c <TIM_Base_SetConfig+0xdc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d108      	bne.n	80035d4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	615a      	str	r2, [r3, #20]
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr
 8003608:	40000400 	.word	0x40000400
 800360c:	40000800 	.word	0x40000800
 8003610:	40000c00 	.word	0x40000c00
 8003614:	40010800 	.word	0x40010800
 8003618:	40010c00 	.word	0x40010c00
 800361c:	40011000 	.word	0x40011000

08003620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	f023 0201 	bic.w	r2, r3, #1
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800364a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f023 030a 	bic.w	r3, r3, #10
 800365c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	621a      	str	r2, [r3, #32]
}
 8003672:	bf00      	nop
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr

0800367c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f023 0210 	bic.w	r2, r3, #16
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	031b      	lsls	r3, r3, #12
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	621a      	str	r2, [r3, #32]
}
 80036d0:	bf00      	nop
 80036d2:	371c      	adds	r7, #28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr

080036da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036da:	b480      	push	{r7}
 80036dc:	b085      	sub	sp, #20
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f043 0307 	orr.w	r3, r3, #7
 80036fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	609a      	str	r2, [r3, #8]
}
 8003704:	bf00      	nop
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr

0800370e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800370e:	b480      	push	{r7}
 8003710:	b087      	sub	sp, #28
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003728:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	021a      	lsls	r2, r3, #8
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	431a      	orrs	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	4313      	orrs	r3, r2
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	609a      	str	r2, [r3, #8]
}
 8003742:	bf00      	nop
 8003744:	371c      	adds	r7, #28
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr

0800374c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003760:	2302      	movs	r3, #2
 8003762:	e046      	b.n	80037f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a6:	d00e      	beq.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a13      	ldr	r2, [pc, #76]	; (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d009      	beq.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a12      	ldr	r2, [pc, #72]	; (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d004      	beq.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a10      	ldr	r2, [pc, #64]	; (8003804 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d10c      	bne.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	40000400 	.word	0x40000400
 8003800:	40000800 	.word	0x40000800
 8003804:	40010800 	.word	0x40010800

08003808 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800380c:	4904      	ldr	r1, [pc, #16]	; (8003820 <MX_FATFS_Init+0x18>)
 800380e:	4805      	ldr	r0, [pc, #20]	; (8003824 <MX_FATFS_Init+0x1c>)
 8003810:	f002 fea8 	bl	8006564 <FATFS_LinkDriver>
 8003814:	4603      	mov	r3, r0
 8003816:	461a      	mov	r2, r3
 8003818:	4b03      	ldr	r3, [pc, #12]	; (8003828 <MX_FATFS_Init+0x20>)
 800381a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800381c:	bf00      	nop
 800381e:	bd80      	pop	{r7, pc}
 8003820:	20000a7c 	.word	0x20000a7c
 8003824:	2000000c 	.word	0x2000000c
 8003828:	20000a80 	.word	0x20000a80

0800382c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003830:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003832:	4618      	mov	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr

0800383a <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	4603      	mov	r3, r0
 8003842:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f9d8 	bl	8003bfc <USER_SPI_initialize>
 800384c:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	4603      	mov	r3, r0
 800385e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8003860:	79fb      	ldrb	r3, [r7, #7]
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fab6 	bl	8003dd4 <USER_SPI_status>
 8003868:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
 800387e:	4603      	mov	r3, r0
 8003880:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8003882:	7bf8      	ldrb	r0, [r7, #15]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	f000 fab7 	bl	8003dfc <USER_SPI_read>
 800388e:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	4603      	mov	r3, r0
 80038a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 80038a8:	7bf8      	ldrb	r0, [r7, #15]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	68b9      	ldr	r1, [r7, #8]
 80038b0:	f000 fb0a 	bl	8003ec8 <USER_SPI_write>
 80038b4:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	4603      	mov	r3, r0
 80038c6:	603a      	str	r2, [r7, #0]
 80038c8:	71fb      	strb	r3, [r7, #7]
 80038ca:	460b      	mov	r3, r1
 80038cc:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 80038ce:	79b9      	ldrb	r1, [r7, #6]
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fb73 	bl	8003fc0 <USER_SPI_ioctl>
 80038da:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80038ec:	f7fd fb50 	bl	8000f90 <HAL_GetTick>
 80038f0:	4603      	mov	r3, r0
 80038f2:	4a04      	ldr	r2, [pc, #16]	; (8003904 <SPI_Timer_On+0x20>)
 80038f4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80038f6:	4a04      	ldr	r2, [pc, #16]	; (8003908 <SPI_Timer_On+0x24>)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6013      	str	r3, [r2, #0]
}
 80038fc:	bf00      	nop
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000ee4 	.word	0x20000ee4
 8003908:	20000ee8 	.word	0x20000ee8

0800390c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8003910:	f7fd fb3e 	bl	8000f90 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	4b06      	ldr	r3, [pc, #24]	; (8003930 <SPI_Timer_Status+0x24>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	1ad2      	subs	r2, r2, r3
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <SPI_Timer_Status+0x28>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	bf34      	ite	cc
 8003924:	2301      	movcc	r3, #1
 8003926:	2300      	movcs	r3, #0
 8003928:	b2db      	uxtb	r3, r3
}
 800392a:	4618      	mov	r0, r3
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000ee4 	.word	0x20000ee4
 8003934:	20000ee8 	.word	0x20000ee8

08003938 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af02      	add	r7, sp, #8
 800393e:	4603      	mov	r3, r0
 8003940:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8003942:	f107 020f 	add.w	r2, r7, #15
 8003946:	1df9      	adds	r1, r7, #7
 8003948:	2332      	movs	r3, #50	; 0x32
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	2301      	movs	r3, #1
 800394e:	4804      	ldr	r0, [pc, #16]	; (8003960 <xchg_spi+0x28>)
 8003950:	f7ff f8e9 	bl	8002b26 <HAL_SPI_TransmitReceive>
    return rxDat;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	200008f0 	.word	0x200008f0

08003964 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8003964:	b590      	push	{r4, r7, lr}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	e00a      	b.n	800398a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	18d4      	adds	r4, r2, r3
 800397a:	20ff      	movs	r0, #255	; 0xff
 800397c:	f7ff ffdc 	bl	8003938 <xchg_spi>
 8003980:	4603      	mov	r3, r0
 8003982:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3301      	adds	r3, #1
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d3f0      	bcc.n	8003974 <rcvr_spi_multi+0x10>
	}
}
 8003992:	bf00      	nop
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	bd90      	pop	{r4, r7, pc}

0800399c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	e009      	b.n	80039c0 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4413      	add	r3, r2
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff ffbf 	bl	8003938 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3301      	adds	r3, #1
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d3f1      	bcc.n	80039ac <xmit_spi_multi+0x10>
	}
}
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b086      	sub	sp, #24
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80039da:	f7fd fad9 	bl	8000f90 <HAL_GetTick>
 80039de:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80039e4:	20ff      	movs	r0, #255	; 0xff
 80039e6:	f7ff ffa7 	bl	8003938 <xchg_spi>
 80039ea:	4603      	mov	r3, r0
 80039ec:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	2bff      	cmp	r3, #255	; 0xff
 80039f2:	d007      	beq.n	8003a04 <wait_ready+0x32>
 80039f4:	f7fd facc 	bl	8000f90 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d8ef      	bhi.n	80039e4 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2bff      	cmp	r3, #255	; 0xff
 8003a08:	bf0c      	ite	eq
 8003a0a:	2301      	moveq	r3, #1
 8003a0c:	2300      	movne	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	2102      	movs	r1, #2
 8003a20:	4803      	ldr	r0, [pc, #12]	; (8003a30 <despiselect+0x18>)
 8003a22:	f7fe f8eb 	bl	8001bfc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003a26:	20ff      	movs	r0, #255	; 0xff
 8003a28:	f7ff ff86 	bl	8003938 <xchg_spi>

}
 8003a2c:	bf00      	nop
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40020400 	.word	0x40020400

08003a34 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2102      	movs	r1, #2
 8003a3c:	4809      	ldr	r0, [pc, #36]	; (8003a64 <spiselect+0x30>)
 8003a3e:	f7fe f8dd 	bl	8001bfc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8003a42:	20ff      	movs	r0, #255	; 0xff
 8003a44:	f7ff ff78 	bl	8003938 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003a48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a4c:	f7ff ffc1 	bl	80039d2 <wait_ready>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <spiselect+0x26>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e002      	b.n	8003a60 <spiselect+0x2c>

	despiselect();
 8003a5a:	f7ff ffdd 	bl	8003a18 <despiselect>
	return 0;	/* Timeout */
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40020400 	.word	0x40020400

08003a68 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8003a72:	20c8      	movs	r0, #200	; 0xc8
 8003a74:	f7ff ff36 	bl	80038e4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003a78:	20ff      	movs	r0, #255	; 0xff
 8003a7a:	f7ff ff5d 	bl	8003938 <xchg_spi>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
 8003a84:	2bff      	cmp	r3, #255	; 0xff
 8003a86:	d104      	bne.n	8003a92 <rcvr_datablock+0x2a>
 8003a88:	f7ff ff40 	bl	800390c <SPI_Timer_Status>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f2      	bne.n	8003a78 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	2bfe      	cmp	r3, #254	; 0xfe
 8003a96:	d001      	beq.n	8003a9c <rcvr_datablock+0x34>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e00a      	b.n	8003ab2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003a9c:	6839      	ldr	r1, [r7, #0]
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff ff60 	bl	8003964 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003aa4:	20ff      	movs	r0, #255	; 0xff
 8003aa6:	f7ff ff47 	bl	8003938 <xchg_spi>
 8003aaa:	20ff      	movs	r0, #255	; 0xff
 8003aac:	f7ff ff44 	bl	8003938 <xchg_spi>

	return 1;						/* Function succeeded */
 8003ab0:	2301      	movs	r3, #1
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003ac6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003aca:	f7ff ff82 	bl	80039d2 <wait_ready>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <xmit_datablock+0x1e>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	e01e      	b.n	8003b16 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003ad8:	78fb      	ldrb	r3, [r7, #3]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff ff2c 	bl	8003938 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	2bfd      	cmp	r3, #253	; 0xfd
 8003ae4:	d016      	beq.n	8003b14 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003ae6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff ff56 	bl	800399c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003af0:	20ff      	movs	r0, #255	; 0xff
 8003af2:	f7ff ff21 	bl	8003938 <xchg_spi>
 8003af6:	20ff      	movs	r0, #255	; 0xff
 8003af8:	f7ff ff1e 	bl	8003938 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003afc:	20ff      	movs	r0, #255	; 0xff
 8003afe:	f7ff ff1b 	bl	8003938 <xchg_spi>
 8003b02:	4603      	mov	r3, r0
 8003b04:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	2b05      	cmp	r3, #5
 8003b0e:	d001      	beq.n	8003b14 <xmit_datablock+0x5a>
 8003b10:	2300      	movs	r3, #0
 8003b12:	e000      	b.n	8003b16 <xmit_datablock+0x5c>
	}
	return 1;
 8003b14:	2301      	movs	r3, #1
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	4603      	mov	r3, r0
 8003b26:	6039      	str	r1, [r7, #0]
 8003b28:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	da0e      	bge.n	8003b50 <send_cmd+0x32>
		cmd &= 0x7F;
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b38:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	2037      	movs	r0, #55	; 0x37
 8003b3e:	f7ff ffee 	bl	8003b1e <send_cmd>
 8003b42:	4603      	mov	r3, r0
 8003b44:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8003b46:	7bbb      	ldrb	r3, [r7, #14]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d901      	bls.n	8003b50 <send_cmd+0x32>
 8003b4c:	7bbb      	ldrb	r3, [r7, #14]
 8003b4e:	e051      	b.n	8003bf4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d008      	beq.n	8003b68 <send_cmd+0x4a>
		despiselect();
 8003b56:	f7ff ff5f 	bl	8003a18 <despiselect>
		if (!spiselect()) return 0xFF;
 8003b5a:	f7ff ff6b 	bl	8003a34 <spiselect>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <send_cmd+0x4a>
 8003b64:	23ff      	movs	r3, #255	; 0xff
 8003b66:	e045      	b.n	8003bf4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff fee1 	bl	8003938 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	0e1b      	lsrs	r3, r3, #24
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff fedb 	bl	8003938 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	0c1b      	lsrs	r3, r3, #16
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff fed5 	bl	8003938 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	0a1b      	lsrs	r3, r3, #8
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff fecf 	bl	8003938 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff feca 	bl	8003938 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <send_cmd+0x94>
 8003bae:	2395      	movs	r3, #149	; 0x95
 8003bb0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d101      	bne.n	8003bbc <send_cmd+0x9e>
 8003bb8:	2387      	movs	r3, #135	; 0x87
 8003bba:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff feba 	bl	8003938 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	2b0c      	cmp	r3, #12
 8003bc8:	d102      	bne.n	8003bd0 <send_cmd+0xb2>
 8003bca:	20ff      	movs	r0, #255	; 0xff
 8003bcc:	f7ff feb4 	bl	8003938 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003bd0:	230a      	movs	r3, #10
 8003bd2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003bd4:	20ff      	movs	r0, #255	; 0xff
 8003bd6:	f7ff feaf 	bl	8003938 <xchg_spi>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003bde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	da05      	bge.n	8003bf2 <send_cmd+0xd4>
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	73fb      	strb	r3, [r7, #15]
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f0      	bne.n	8003bd4 <send_cmd+0xb6>

	return res;							/* Return received response */
 8003bf2:	7bbb      	ldrb	r3, [r7, #14]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003bfc:	b590      	push	{r4, r7, lr}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <USER_SPI_initialize+0x14>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0d6      	b.n	8003dbe <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003c10:	4b6d      	ldr	r3, [pc, #436]	; (8003dc8 <USER_SPI_initialize+0x1cc>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <USER_SPI_initialize+0x2a>
 8003c1e:	4b6a      	ldr	r3, [pc, #424]	; (8003dc8 <USER_SPI_initialize+0x1cc>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	e0cb      	b.n	8003dbe <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8003c26:	4b69      	ldr	r3, [pc, #420]	; (8003dcc <USER_SPI_initialize+0x1d0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003c30:	4b66      	ldr	r3, [pc, #408]	; (8003dcc <USER_SPI_initialize+0x1d0>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8003c38:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003c3a:	230a      	movs	r3, #10
 8003c3c:	73fb      	strb	r3, [r7, #15]
 8003c3e:	e005      	b.n	8003c4c <USER_SPI_initialize+0x50>
 8003c40:	20ff      	movs	r0, #255	; 0xff
 8003c42:	f7ff fe79 	bl	8003938 <xchg_spi>
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f6      	bne.n	8003c40 <USER_SPI_initialize+0x44>

	ty = 0;
 8003c52:	2300      	movs	r3, #0
 8003c54:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003c56:	2100      	movs	r1, #0
 8003c58:	2000      	movs	r0, #0
 8003c5a:	f7ff ff60 	bl	8003b1e <send_cmd>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	f040 808b 	bne.w	8003d7c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003c66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c6a:	f7ff fe3b 	bl	80038e4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003c6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003c72:	2008      	movs	r0, #8
 8003c74:	f7ff ff53 	bl	8003b1e <send_cmd>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d151      	bne.n	8003d22 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003c7e:	2300      	movs	r3, #0
 8003c80:	73fb      	strb	r3, [r7, #15]
 8003c82:	e00d      	b.n	8003ca0 <USER_SPI_initialize+0xa4>
 8003c84:	7bfc      	ldrb	r4, [r7, #15]
 8003c86:	20ff      	movs	r0, #255	; 0xff
 8003c88:	f7ff fe56 	bl	8003938 <xchg_spi>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f107 0310 	add.w	r3, r7, #16
 8003c94:	4423      	add	r3, r4
 8003c96:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d9ee      	bls.n	8003c84 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003ca6:	7abb      	ldrb	r3, [r7, #10]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d167      	bne.n	8003d7c <USER_SPI_initialize+0x180>
 8003cac:	7afb      	ldrb	r3, [r7, #11]
 8003cae:	2baa      	cmp	r3, #170	; 0xaa
 8003cb0:	d164      	bne.n	8003d7c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003cb2:	bf00      	nop
 8003cb4:	f7ff fe2a 	bl	800390c <SPI_Timer_Status>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <USER_SPI_initialize+0xd2>
 8003cbe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003cc2:	20a9      	movs	r0, #169	; 0xa9
 8003cc4:	f7ff ff2b 	bl	8003b1e <send_cmd>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f2      	bne.n	8003cb4 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003cce:	f7ff fe1d 	bl	800390c <SPI_Timer_Status>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d051      	beq.n	8003d7c <USER_SPI_initialize+0x180>
 8003cd8:	2100      	movs	r1, #0
 8003cda:	203a      	movs	r0, #58	; 0x3a
 8003cdc:	f7ff ff1f 	bl	8003b1e <send_cmd>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d14a      	bne.n	8003d7c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	73fb      	strb	r3, [r7, #15]
 8003cea:	e00d      	b.n	8003d08 <USER_SPI_initialize+0x10c>
 8003cec:	7bfc      	ldrb	r4, [r7, #15]
 8003cee:	20ff      	movs	r0, #255	; 0xff
 8003cf0:	f7ff fe22 	bl	8003938 <xchg_spi>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f107 0310 	add.w	r3, r7, #16
 8003cfc:	4423      	add	r3, r4
 8003cfe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	3301      	adds	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d9ee      	bls.n	8003cec <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003d0e:	7a3b      	ldrb	r3, [r7, #8]
 8003d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <USER_SPI_initialize+0x120>
 8003d18:	230c      	movs	r3, #12
 8003d1a:	e000      	b.n	8003d1e <USER_SPI_initialize+0x122>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	737b      	strb	r3, [r7, #13]
 8003d20:	e02c      	b.n	8003d7c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003d22:	2100      	movs	r1, #0
 8003d24:	20a9      	movs	r0, #169	; 0xa9
 8003d26:	f7ff fefa 	bl	8003b1e <send_cmd>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d804      	bhi.n	8003d3a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003d30:	2302      	movs	r3, #2
 8003d32:	737b      	strb	r3, [r7, #13]
 8003d34:	23a9      	movs	r3, #169	; 0xa9
 8003d36:	73bb      	strb	r3, [r7, #14]
 8003d38:	e003      	b.n	8003d42 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	737b      	strb	r3, [r7, #13]
 8003d3e:	2301      	movs	r3, #1
 8003d40:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003d42:	bf00      	nop
 8003d44:	f7ff fde2 	bl	800390c <SPI_Timer_Status>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d007      	beq.n	8003d5e <USER_SPI_initialize+0x162>
 8003d4e:	7bbb      	ldrb	r3, [r7, #14]
 8003d50:	2100      	movs	r1, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff fee3 	bl	8003b1e <send_cmd>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f2      	bne.n	8003d44 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003d5e:	f7ff fdd5 	bl	800390c <SPI_Timer_Status>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d007      	beq.n	8003d78 <USER_SPI_initialize+0x17c>
 8003d68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d6c:	2010      	movs	r0, #16
 8003d6e:	f7ff fed6 	bl	8003b1e <send_cmd>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <USER_SPI_initialize+0x180>
				ty = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003d7c:	4a14      	ldr	r2, [pc, #80]	; (8003dd0 <USER_SPI_initialize+0x1d4>)
 8003d7e:	7b7b      	ldrb	r3, [r7, #13]
 8003d80:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003d82:	f7ff fe49 	bl	8003a18 <despiselect>

	if (ty) {			/* OK */
 8003d86:	7b7b      	ldrb	r3, [r7, #13]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d012      	beq.n	8003db2 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003d8c:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <USER_SPI_initialize+0x1d0>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d96:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <USER_SPI_initialize+0x1d0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0210 	orr.w	r2, r2, #16
 8003d9e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003da0:	4b09      	ldr	r3, [pc, #36]	; (8003dc8 <USER_SPI_initialize+0x1cc>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <USER_SPI_initialize+0x1cc>)
 8003dae:	701a      	strb	r2, [r3, #0]
 8003db0:	e002      	b.n	8003db8 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003db2:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <USER_SPI_initialize+0x1cc>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003db8:	4b03      	ldr	r3, [pc, #12]	; (8003dc8 <USER_SPI_initialize+0x1cc>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	b2db      	uxtb	r3, r3
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd90      	pop	{r4, r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20000020 	.word	0x20000020
 8003dcc:	200008f0 	.word	0x200008f0
 8003dd0:	200008b8 	.word	0x200008b8

08003dd4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <USER_SPI_status+0x14>
 8003de4:	2301      	movs	r3, #1
 8003de6:	e002      	b.n	8003dee <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003de8:	4b03      	ldr	r3, [pc, #12]	; (8003df8 <USER_SPI_status+0x24>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	b2db      	uxtb	r3, r3
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr
 8003df8:	20000020 	.word	0x20000020

08003dfc <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	607a      	str	r2, [r7, #4]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	4603      	mov	r3, r0
 8003e0a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d102      	bne.n	8003e18 <USER_SPI_read+0x1c>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <USER_SPI_read+0x20>
 8003e18:	2304      	movs	r3, #4
 8003e1a:	e04d      	b.n	8003eb8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003e1c:	4b28      	ldr	r3, [pc, #160]	; (8003ec0 <USER_SPI_read+0xc4>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <USER_SPI_read+0x32>
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e044      	b.n	8003eb8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003e2e:	4b25      	ldr	r3, [pc, #148]	; (8003ec4 <USER_SPI_read+0xc8>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d102      	bne.n	8003e40 <USER_SPI_read+0x44>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	025b      	lsls	r3, r3, #9
 8003e3e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d111      	bne.n	8003e6a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	2011      	movs	r0, #17
 8003e4a:	f7ff fe68 	bl	8003b1e <send_cmd>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d129      	bne.n	8003ea8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003e54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e58:	68b8      	ldr	r0, [r7, #8]
 8003e5a:	f7ff fe05 	bl	8003a68 <rcvr_datablock>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d021      	beq.n	8003ea8 <USER_SPI_read+0xac>
			count = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	e01e      	b.n	8003ea8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	2012      	movs	r0, #18
 8003e6e:	f7ff fe56 	bl	8003b1e <send_cmd>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d117      	bne.n	8003ea8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003e78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e7c:	68b8      	ldr	r0, [r7, #8]
 8003e7e:	f7ff fdf3 	bl	8003a68 <rcvr_datablock>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <USER_SPI_read+0xa2>
				buff += 512;
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003e8e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	603b      	str	r3, [r7, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1ed      	bne.n	8003e78 <USER_SPI_read+0x7c>
 8003e9c:	e000      	b.n	8003ea0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8003e9e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	200c      	movs	r0, #12
 8003ea4:	f7ff fe3b 	bl	8003b1e <send_cmd>
		}
	}
	despiselect();
 8003ea8:	f7ff fdb6 	bl	8003a18 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bf14      	ite	ne
 8003eb2:	2301      	movne	r3, #1
 8003eb4:	2300      	moveq	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20000020 	.word	0x20000020
 8003ec4:	200008b8 	.word	0x200008b8

08003ec8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607a      	str	r2, [r7, #4]
 8003ed2:	603b      	str	r3, [r7, #0]
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d102      	bne.n	8003ee4 <USER_SPI_write+0x1c>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <USER_SPI_write+0x20>
 8003ee4:	2304      	movs	r3, #4
 8003ee6:	e063      	b.n	8003fb0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003ee8:	4b33      	ldr	r3, [pc, #204]	; (8003fb8 <USER_SPI_write+0xf0>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <USER_SPI_write+0x32>
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e05a      	b.n	8003fb0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003efa:	4b2f      	ldr	r3, [pc, #188]	; (8003fb8 <USER_SPI_write+0xf0>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <USER_SPI_write+0x44>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e051      	b.n	8003fb0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003f0c:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <USER_SPI_write+0xf4>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d102      	bne.n	8003f1e <USER_SPI_write+0x56>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	025b      	lsls	r3, r3, #9
 8003f1c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d110      	bne.n	8003f46 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	2018      	movs	r0, #24
 8003f28:	f7ff fdf9 	bl	8003b1e <send_cmd>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d136      	bne.n	8003fa0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8003f32:	21fe      	movs	r1, #254	; 0xfe
 8003f34:	68b8      	ldr	r0, [r7, #8]
 8003f36:	f7ff fdc0 	bl	8003aba <xmit_datablock>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d02f      	beq.n	8003fa0 <USER_SPI_write+0xd8>
			count = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	e02c      	b.n	8003fa0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003f46:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <USER_SPI_write+0xf4>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	f003 0306 	and.w	r3, r3, #6
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <USER_SPI_write+0x92>
 8003f52:	6839      	ldr	r1, [r7, #0]
 8003f54:	2097      	movs	r0, #151	; 0x97
 8003f56:	f7ff fde2 	bl	8003b1e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	2019      	movs	r0, #25
 8003f5e:	f7ff fdde 	bl	8003b1e <send_cmd>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d11b      	bne.n	8003fa0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003f68:	21fc      	movs	r1, #252	; 0xfc
 8003f6a:	68b8      	ldr	r0, [r7, #8]
 8003f6c:	f7ff fda5 	bl	8003aba <xmit_datablock>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <USER_SPI_write+0xc4>
				buff += 512;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003f7c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1ee      	bne.n	8003f68 <USER_SPI_write+0xa0>
 8003f8a:	e000      	b.n	8003f8e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003f8c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003f8e:	21fd      	movs	r1, #253	; 0xfd
 8003f90:	2000      	movs	r0, #0
 8003f92:	f7ff fd92 	bl	8003aba <xmit_datablock>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <USER_SPI_write+0xd8>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003fa0:	f7ff fd3a 	bl	8003a18 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	bf14      	ite	ne
 8003faa:	2301      	movne	r3, #1
 8003fac:	2300      	moveq	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	20000020 	.word	0x20000020
 8003fbc:	200008b8 	.word	0x200008b8

08003fc0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08c      	sub	sp, #48	; 0x30
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	603a      	str	r2, [r7, #0]
 8003fca:	71fb      	strb	r3, [r7, #7]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <USER_SPI_ioctl+0x1a>
 8003fd6:	2304      	movs	r3, #4
 8003fd8:	e15a      	b.n	8004290 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003fda:	4baf      	ldr	r3, [pc, #700]	; (8004298 <USER_SPI_ioctl+0x2d8>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <USER_SPI_ioctl+0x2c>
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e151      	b.n	8004290 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8003ff2:	79bb      	ldrb	r3, [r7, #6]
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	f200 8136 	bhi.w	8004266 <USER_SPI_ioctl+0x2a6>
 8003ffa:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <USER_SPI_ioctl+0x40>)
 8003ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004000:	08004015 	.word	0x08004015
 8004004:	08004029 	.word	0x08004029
 8004008:	08004267 	.word	0x08004267
 800400c:	080040d5 	.word	0x080040d5
 8004010:	080041cb 	.word	0x080041cb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004014:	f7ff fd0e 	bl	8003a34 <spiselect>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 8127 	beq.w	800426e <USER_SPI_ioctl+0x2ae>
 8004020:	2300      	movs	r3, #0
 8004022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004026:	e122      	b.n	800426e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004028:	2100      	movs	r1, #0
 800402a:	2009      	movs	r0, #9
 800402c:	f7ff fd77 	bl	8003b1e <send_cmd>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	f040 811d 	bne.w	8004272 <USER_SPI_ioctl+0x2b2>
 8004038:	f107 030c 	add.w	r3, r7, #12
 800403c:	2110      	movs	r1, #16
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff fd12 	bl	8003a68 <rcvr_datablock>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 8113 	beq.w	8004272 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800404c:	7b3b      	ldrb	r3, [r7, #12]
 800404e:	099b      	lsrs	r3, r3, #6
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b01      	cmp	r3, #1
 8004054:	d111      	bne.n	800407a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004056:	7d7b      	ldrb	r3, [r7, #21]
 8004058:	461a      	mov	r2, r3
 800405a:	7d3b      	ldrb	r3, [r7, #20]
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	4413      	add	r3, r2
 8004060:	461a      	mov	r2, r3
 8004062:	7cfb      	ldrb	r3, [r7, #19]
 8004064:	041b      	lsls	r3, r3, #16
 8004066:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800406a:	4413      	add	r3, r2
 800406c:	3301      	adds	r3, #1
 800406e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	029a      	lsls	r2, r3, #10
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	e028      	b.n	80040cc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800407a:	7c7b      	ldrb	r3, [r7, #17]
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	b2da      	uxtb	r2, r3
 8004082:	7dbb      	ldrb	r3, [r7, #22]
 8004084:	09db      	lsrs	r3, r3, #7
 8004086:	b2db      	uxtb	r3, r3
 8004088:	4413      	add	r3, r2
 800408a:	b2da      	uxtb	r2, r3
 800408c:	7d7b      	ldrb	r3, [r7, #21]
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	b2db      	uxtb	r3, r3
 8004092:	f003 0306 	and.w	r3, r3, #6
 8004096:	b2db      	uxtb	r3, r3
 8004098:	4413      	add	r3, r2
 800409a:	b2db      	uxtb	r3, r3
 800409c:	3302      	adds	r3, #2
 800409e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80040a2:	7d3b      	ldrb	r3, [r7, #20]
 80040a4:	099b      	lsrs	r3, r3, #6
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	461a      	mov	r2, r3
 80040aa:	7cfb      	ldrb	r3, [r7, #19]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	441a      	add	r2, r3
 80040b0:	7cbb      	ldrb	r3, [r7, #18]
 80040b2:	029b      	lsls	r3, r3, #10
 80040b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040b8:	4413      	add	r3, r2
 80040ba:	3301      	adds	r3, #1
 80040bc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80040be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80040c2:	3b09      	subs	r3, #9
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	409a      	lsls	r2, r3
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80040d2:	e0ce      	b.n	8004272 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80040d4:	4b71      	ldr	r3, [pc, #452]	; (800429c <USER_SPI_ioctl+0x2dc>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d031      	beq.n	8004144 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80040e0:	2100      	movs	r1, #0
 80040e2:	208d      	movs	r0, #141	; 0x8d
 80040e4:	f7ff fd1b 	bl	8003b1e <send_cmd>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f040 80c3 	bne.w	8004276 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80040f0:	20ff      	movs	r0, #255	; 0xff
 80040f2:	f7ff fc21 	bl	8003938 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80040f6:	f107 030c 	add.w	r3, r7, #12
 80040fa:	2110      	movs	r1, #16
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff fcb3 	bl	8003a68 <rcvr_datablock>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 80b6 	beq.w	8004276 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800410a:	2330      	movs	r3, #48	; 0x30
 800410c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004110:	e007      	b.n	8004122 <USER_SPI_ioctl+0x162>
 8004112:	20ff      	movs	r0, #255	; 0xff
 8004114:	f7ff fc10 	bl	8003938 <xchg_spi>
 8004118:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800411c:	3b01      	subs	r3, #1
 800411e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004122:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f3      	bne.n	8004112 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800412a:	7dbb      	ldrb	r3, [r7, #22]
 800412c:	091b      	lsrs	r3, r3, #4
 800412e:	b2db      	uxtb	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	2310      	movs	r3, #16
 8004134:	fa03 f202 	lsl.w	r2, r3, r2
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004142:	e098      	b.n	8004276 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004144:	2100      	movs	r1, #0
 8004146:	2009      	movs	r0, #9
 8004148:	f7ff fce9 	bl	8003b1e <send_cmd>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	f040 8091 	bne.w	8004276 <USER_SPI_ioctl+0x2b6>
 8004154:	f107 030c 	add.w	r3, r7, #12
 8004158:	2110      	movs	r1, #16
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff fc84 	bl	8003a68 <rcvr_datablock>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 8087 	beq.w	8004276 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004168:	4b4c      	ldr	r3, [pc, #304]	; (800429c <USER_SPI_ioctl+0x2dc>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d012      	beq.n	800419a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004174:	7dbb      	ldrb	r3, [r7, #22]
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800417c:	7dfa      	ldrb	r2, [r7, #23]
 800417e:	09d2      	lsrs	r2, r2, #7
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	4413      	add	r3, r2
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	7e7b      	ldrb	r3, [r7, #25]
 8004188:	099b      	lsrs	r3, r3, #6
 800418a:	b2db      	uxtb	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	461a      	mov	r2, r3
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	e013      	b.n	80041c2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800419a:	7dbb      	ldrb	r3, [r7, #22]
 800419c:	109b      	asrs	r3, r3, #2
 800419e:	b29b      	uxth	r3, r3
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	3301      	adds	r3, #1
 80041a6:	7dfa      	ldrb	r2, [r7, #23]
 80041a8:	00d2      	lsls	r2, r2, #3
 80041aa:	f002 0218 	and.w	r2, r2, #24
 80041ae:	7df9      	ldrb	r1, [r7, #23]
 80041b0:	0949      	lsrs	r1, r1, #5
 80041b2:	b2c9      	uxtb	r1, r1
 80041b4:	440a      	add	r2, r1
 80041b6:	3201      	adds	r2, #1
 80041b8:	fb02 f303 	mul.w	r3, r2, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80041c8:	e055      	b.n	8004276 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80041ca:	4b34      	ldr	r3, [pc, #208]	; (800429c <USER_SPI_ioctl+0x2dc>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	f003 0306 	and.w	r3, r3, #6
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d051      	beq.n	800427a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80041d6:	f107 020c 	add.w	r2, r7, #12
 80041da:	79fb      	ldrb	r3, [r7, #7]
 80041dc:	210b      	movs	r1, #11
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff feee 	bl	8003fc0 <USER_SPI_ioctl>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d149      	bne.n	800427e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80041ea:	7b3b      	ldrb	r3, [r7, #12]
 80041ec:	099b      	lsrs	r3, r3, #6
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d104      	bne.n	80041fe <USER_SPI_ioctl+0x23e>
 80041f4:	7dbb      	ldrb	r3, [r7, #22]
 80041f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d041      	beq.n	8004282 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	623b      	str	r3, [r7, #32]
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	62bb      	str	r3, [r7, #40]	; 0x28
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800420e:	4b23      	ldr	r3, [pc, #140]	; (800429c <USER_SPI_ioctl+0x2dc>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d105      	bne.n	8004226 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	025b      	lsls	r3, r3, #9
 800421e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	025b      	lsls	r3, r3, #9
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004226:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004228:	2020      	movs	r0, #32
 800422a:	f7ff fc78 	bl	8003b1e <send_cmd>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d128      	bne.n	8004286 <USER_SPI_ioctl+0x2c6>
 8004234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004236:	2021      	movs	r0, #33	; 0x21
 8004238:	f7ff fc71 	bl	8003b1e <send_cmd>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d121      	bne.n	8004286 <USER_SPI_ioctl+0x2c6>
 8004242:	2100      	movs	r1, #0
 8004244:	2026      	movs	r0, #38	; 0x26
 8004246:	f7ff fc6a 	bl	8003b1e <send_cmd>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d11a      	bne.n	8004286 <USER_SPI_ioctl+0x2c6>
 8004250:	f247 5030 	movw	r0, #30000	; 0x7530
 8004254:	f7ff fbbd 	bl	80039d2 <wait_ready>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d013      	beq.n	8004286 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800425e:	2300      	movs	r3, #0
 8004260:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004264:	e00f      	b.n	8004286 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8004266:	2304      	movs	r3, #4
 8004268:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800426c:	e00c      	b.n	8004288 <USER_SPI_ioctl+0x2c8>
		break;
 800426e:	bf00      	nop
 8004270:	e00a      	b.n	8004288 <USER_SPI_ioctl+0x2c8>
		break;
 8004272:	bf00      	nop
 8004274:	e008      	b.n	8004288 <USER_SPI_ioctl+0x2c8>
		break;
 8004276:	bf00      	nop
 8004278:	e006      	b.n	8004288 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800427a:	bf00      	nop
 800427c:	e004      	b.n	8004288 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800427e:	bf00      	nop
 8004280:	e002      	b.n	8004288 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004282:	bf00      	nop
 8004284:	e000      	b.n	8004288 <USER_SPI_ioctl+0x2c8>
		break;
 8004286:	bf00      	nop
	}

	despiselect();
 8004288:	f7ff fbc6 	bl	8003a18 <despiselect>

	return res;
 800428c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004290:	4618      	mov	r0, r3
 8004292:	3730      	adds	r7, #48	; 0x30
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20000020 	.word	0x20000020
 800429c:	200008b8 	.word	0x200008b8

080042a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	4a08      	ldr	r2, [pc, #32]	; (80042d0 <disk_status+0x30>)
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	79fa      	ldrb	r2, [r7, #7]
 80042b8:	4905      	ldr	r1, [pc, #20]	; (80042d0 <disk_status+0x30>)
 80042ba:	440a      	add	r2, r1
 80042bc:	7a12      	ldrb	r2, [r2, #8]
 80042be:	4610      	mov	r0, r2
 80042c0:	4798      	blx	r3
 80042c2:	4603      	mov	r3, r0
 80042c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	200008e4 	.word	0x200008e4

080042d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	4a0d      	ldr	r2, [pc, #52]	; (800431c <disk_initialize+0x48>)
 80042e6:	5cd3      	ldrb	r3, [r2, r3]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d111      	bne.n	8004310 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	4a0b      	ldr	r2, [pc, #44]	; (800431c <disk_initialize+0x48>)
 80042f0:	2101      	movs	r1, #1
 80042f2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	4a09      	ldr	r2, [pc, #36]	; (800431c <disk_initialize+0x48>)
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	79fa      	ldrb	r2, [r7, #7]
 8004302:	4906      	ldr	r1, [pc, #24]	; (800431c <disk_initialize+0x48>)
 8004304:	440a      	add	r2, r1
 8004306:	7a12      	ldrb	r2, [r2, #8]
 8004308:	4610      	mov	r0, r2
 800430a:	4798      	blx	r3
 800430c:	4603      	mov	r3, r0
 800430e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004310:	7bfb      	ldrb	r3, [r7, #15]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	200008e4 	.word	0x200008e4

08004320 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607a      	str	r2, [r7, #4]
 800432a:	603b      	str	r3, [r7, #0]
 800432c:	4603      	mov	r3, r0
 800432e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	4a0a      	ldr	r2, [pc, #40]	; (800435c <disk_read+0x3c>)
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	689c      	ldr	r4, [r3, #8]
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	4a07      	ldr	r2, [pc, #28]	; (800435c <disk_read+0x3c>)
 8004340:	4413      	add	r3, r2
 8004342:	7a18      	ldrb	r0, [r3, #8]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	68b9      	ldr	r1, [r7, #8]
 800434a:	47a0      	blx	r4
 800434c:	4603      	mov	r3, r0
 800434e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004350:	7dfb      	ldrb	r3, [r7, #23]
}
 8004352:	4618      	mov	r0, r3
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	bd90      	pop	{r4, r7, pc}
 800435a:	bf00      	nop
 800435c:	200008e4 	.word	0x200008e4

08004360 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004360:	b590      	push	{r4, r7, lr}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	607a      	str	r2, [r7, #4]
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	4603      	mov	r3, r0
 800436e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	4a0a      	ldr	r2, [pc, #40]	; (800439c <disk_write+0x3c>)
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	68dc      	ldr	r4, [r3, #12]
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	4a07      	ldr	r2, [pc, #28]	; (800439c <disk_write+0x3c>)
 8004380:	4413      	add	r3, r2
 8004382:	7a18      	ldrb	r0, [r3, #8]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	47a0      	blx	r4
 800438c:	4603      	mov	r3, r0
 800438e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004390:	7dfb      	ldrb	r3, [r7, #23]
}
 8004392:	4618      	mov	r0, r3
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	bd90      	pop	{r4, r7, pc}
 800439a:	bf00      	nop
 800439c:	200008e4 	.word	0x200008e4

080043a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	603a      	str	r2, [r7, #0]
 80043aa:	71fb      	strb	r3, [r7, #7]
 80043ac:	460b      	mov	r3, r1
 80043ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	4a09      	ldr	r2, [pc, #36]	; (80043d8 <disk_ioctl+0x38>)
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	79fa      	ldrb	r2, [r7, #7]
 80043be:	4906      	ldr	r1, [pc, #24]	; (80043d8 <disk_ioctl+0x38>)
 80043c0:	440a      	add	r2, r1
 80043c2:	7a10      	ldrb	r0, [r2, #8]
 80043c4:	79b9      	ldrb	r1, [r7, #6]
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	4798      	blx	r3
 80043ca:	4603      	mov	r3, r0
 80043cc:	73fb      	strb	r3, [r7, #15]
  return res;
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	200008e4 	.word	0x200008e4

080043dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3301      	adds	r3, #1
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80043ec:	89fb      	ldrh	r3, [r7, #14]
 80043ee:	021b      	lsls	r3, r3, #8
 80043f0:	b21a      	sxth	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	b21b      	sxth	r3, r3
 80043f8:	4313      	orrs	r3, r2
 80043fa:	b21b      	sxth	r3, r3
 80043fc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80043fe:	89fb      	ldrh	r3, [r7, #14]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr

0800440a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3303      	adds	r3, #3
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	021b      	lsls	r3, r3, #8
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	3202      	adds	r2, #2
 8004422:	7812      	ldrb	r2, [r2, #0]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	3201      	adds	r2, #1
 8004430:	7812      	ldrb	r2, [r2, #0]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	7812      	ldrb	r2, [r2, #0]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]
	return rv;
 8004442:	68fb      	ldr	r3, [r7, #12]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr

0800444e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	460b      	mov	r3, r1
 8004458:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	887a      	ldrh	r2, [r7, #2]
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]
 8004466:	887b      	ldrh	r3, [r7, #2]
 8004468:	0a1b      	lsrs	r3, r3, #8
 800446a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	887a      	ldrh	r2, [r7, #2]
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	701a      	strb	r2, [r3, #0]
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr

08004482 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	701a      	strb	r2, [r3, #0]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	0a1b      	lsrs	r3, r3, #8
 800449c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	0a1b      	lsrs	r3, r3, #8
 80044ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	607a      	str	r2, [r7, #4]
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	701a      	strb	r2, [r3, #0]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	0a1b      	lsrs	r3, r3, #8
 80044c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	701a      	strb	r2, [r3, #0]
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00d      	beq.n	800450e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	1c53      	adds	r3, r2, #1
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	1c59      	adds	r1, r3, #1
 80044fc:	6179      	str	r1, [r7, #20]
 80044fe:	7812      	ldrb	r2, [r2, #0]
 8004500:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3b01      	subs	r3, #1
 8004506:	607b      	str	r3, [r7, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f1      	bne.n	80044f2 <mem_cpy+0x1a>
	}
}
 800450e:	bf00      	nop
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	617a      	str	r2, [r7, #20]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3b01      	subs	r3, #1
 8004538:	607b      	str	r3, [r7, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1f3      	bne.n	8004528 <mem_set+0x10>
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr

0800454c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800454c:	b480      	push	{r7}
 800454e:	b089      	sub	sp, #36	; 0x24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	61fb      	str	r3, [r7, #28]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	61fa      	str	r2, [r7, #28]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	4619      	mov	r1, r3
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	61ba      	str	r2, [r7, #24]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	1acb      	subs	r3, r1, r3
 8004578:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3b01      	subs	r3, #1
 800457e:	607b      	str	r3, [r7, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <mem_cmp+0x40>
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0eb      	beq.n	8004564 <mem_cmp+0x18>

	return r;
 800458c:	697b      	ldr	r3, [r7, #20]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3724      	adds	r7, #36	; 0x24
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr

08004598 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80045a2:	e002      	b.n	80045aa <chk_chr+0x12>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3301      	adds	r3, #1
 80045a8:	607b      	str	r3, [r7, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <chk_chr+0x26>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d1f2      	bne.n	80045a4 <chk_chr+0xc>
	return *str;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	781b      	ldrb	r3, [r3, #0]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr

080045cc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	e029      	b.n	8004634 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80045e0:	4a26      	ldr	r2, [pc, #152]	; (800467c <chk_lock+0xb0>)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	4413      	add	r3, r2
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d01d      	beq.n	800462a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80045ee:	4a23      	ldr	r2, [pc, #140]	; (800467c <chk_lock+0xb0>)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	4413      	add	r3, r2
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d116      	bne.n	800462e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004600:	4a1e      	ldr	r2, [pc, #120]	; (800467c <chk_lock+0xb0>)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	4413      	add	r3, r2
 8004608:	3304      	adds	r3, #4
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004610:	429a      	cmp	r2, r3
 8004612:	d10c      	bne.n	800462e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004614:	4a19      	ldr	r2, [pc, #100]	; (800467c <chk_lock+0xb0>)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	4413      	add	r3, r2
 800461c:	3308      	adds	r3, #8
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004624:	429a      	cmp	r2, r3
 8004626:	d102      	bne.n	800462e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004628:	e007      	b.n	800463a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800462a:	2301      	movs	r3, #1
 800462c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3301      	adds	r3, #1
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d9d2      	bls.n	80045e0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d109      	bne.n	8004654 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d102      	bne.n	800464c <chk_lock+0x80>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b02      	cmp	r3, #2
 800464a:	d101      	bne.n	8004650 <chk_lock+0x84>
 800464c:	2300      	movs	r3, #0
 800464e:	e010      	b.n	8004672 <chk_lock+0xa6>
 8004650:	2312      	movs	r3, #18
 8004652:	e00e      	b.n	8004672 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d108      	bne.n	800466c <chk_lock+0xa0>
 800465a:	4a08      	ldr	r2, [pc, #32]	; (800467c <chk_lock+0xb0>)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	4413      	add	r3, r2
 8004662:	330c      	adds	r3, #12
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800466a:	d101      	bne.n	8004670 <chk_lock+0xa4>
 800466c:	2310      	movs	r3, #16
 800466e:	e000      	b.n	8004672 <chk_lock+0xa6>
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr
 800467c:	200008c4 	.word	0x200008c4

08004680 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004686:	2300      	movs	r3, #0
 8004688:	607b      	str	r3, [r7, #4]
 800468a:	e002      	b.n	8004692 <enq_lock+0x12>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3301      	adds	r3, #1
 8004690:	607b      	str	r3, [r7, #4]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d806      	bhi.n	80046a6 <enq_lock+0x26>
 8004698:	4a08      	ldr	r2, [pc, #32]	; (80046bc <enq_lock+0x3c>)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	4413      	add	r3, r2
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f2      	bne.n	800468c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	bf14      	ite	ne
 80046ac:	2301      	movne	r3, #1
 80046ae:	2300      	moveq	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr
 80046bc:	200008c4 	.word	0x200008c4

080046c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	e01f      	b.n	8004710 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80046d0:	4a41      	ldr	r2, [pc, #260]	; (80047d8 <inc_lock+0x118>)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	4413      	add	r3, r2
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d113      	bne.n	800470a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80046e2:	4a3d      	ldr	r2, [pc, #244]	; (80047d8 <inc_lock+0x118>)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	4413      	add	r3, r2
 80046ea:	3304      	adds	r3, #4
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d109      	bne.n	800470a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80046f6:	4a38      	ldr	r2, [pc, #224]	; (80047d8 <inc_lock+0x118>)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	4413      	add	r3, r2
 80046fe:	3308      	adds	r3, #8
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004706:	429a      	cmp	r2, r3
 8004708:	d006      	beq.n	8004718 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3301      	adds	r3, #1
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d9dc      	bls.n	80046d0 <inc_lock+0x10>
 8004716:	e000      	b.n	800471a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004718:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d132      	bne.n	8004786 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	e002      	b.n	800472c <inc_lock+0x6c>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	3301      	adds	r3, #1
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d806      	bhi.n	8004740 <inc_lock+0x80>
 8004732:	4a29      	ldr	r2, [pc, #164]	; (80047d8 <inc_lock+0x118>)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	4413      	add	r3, r2
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f2      	bne.n	8004726 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d101      	bne.n	800474a <inc_lock+0x8a>
 8004746:	2300      	movs	r3, #0
 8004748:	e040      	b.n	80047cc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	4922      	ldr	r1, [pc, #136]	; (80047d8 <inc_lock+0x118>)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	440b      	add	r3, r1
 8004756:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	491e      	ldr	r1, [pc, #120]	; (80047d8 <inc_lock+0x118>)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	440b      	add	r3, r1
 8004764:	3304      	adds	r3, #4
 8004766:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	491a      	ldr	r1, [pc, #104]	; (80047d8 <inc_lock+0x118>)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	440b      	add	r3, r1
 8004774:	3308      	adds	r3, #8
 8004776:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004778:	4a17      	ldr	r2, [pc, #92]	; (80047d8 <inc_lock+0x118>)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	4413      	add	r3, r2
 8004780:	330c      	adds	r3, #12
 8004782:	2200      	movs	r2, #0
 8004784:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d009      	beq.n	80047a0 <inc_lock+0xe0>
 800478c:	4a12      	ldr	r2, [pc, #72]	; (80047d8 <inc_lock+0x118>)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	4413      	add	r3, r2
 8004794:	330c      	adds	r3, #12
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <inc_lock+0xe0>
 800479c:	2300      	movs	r3, #0
 800479e:	e015      	b.n	80047cc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d108      	bne.n	80047b8 <inc_lock+0xf8>
 80047a6:	4a0c      	ldr	r2, [pc, #48]	; (80047d8 <inc_lock+0x118>)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	4413      	add	r3, r2
 80047ae:	330c      	adds	r3, #12
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	3301      	adds	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	e001      	b.n	80047bc <inc_lock+0xfc>
 80047b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047bc:	4906      	ldr	r1, [pc, #24]	; (80047d8 <inc_lock+0x118>)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	440b      	add	r3, r1
 80047c4:	330c      	adds	r3, #12
 80047c6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	3301      	adds	r3, #1
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc80      	pop	{r7}
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	200008c4 	.word	0x200008c4

080047dc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	607b      	str	r3, [r7, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d825      	bhi.n	800483c <dec_lock+0x60>
		n = Files[i].ctr;
 80047f0:	4a16      	ldr	r2, [pc, #88]	; (800484c <dec_lock+0x70>)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	4413      	add	r3, r2
 80047f8:	330c      	adds	r3, #12
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80047fe:	89fb      	ldrh	r3, [r7, #14]
 8004800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004804:	d101      	bne.n	800480a <dec_lock+0x2e>
 8004806:	2300      	movs	r3, #0
 8004808:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800480a:	89fb      	ldrh	r3, [r7, #14]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <dec_lock+0x3a>
 8004810:	89fb      	ldrh	r3, [r7, #14]
 8004812:	3b01      	subs	r3, #1
 8004814:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004816:	4a0d      	ldr	r2, [pc, #52]	; (800484c <dec_lock+0x70>)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	4413      	add	r3, r2
 800481e:	330c      	adds	r3, #12
 8004820:	89fa      	ldrh	r2, [r7, #14]
 8004822:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004824:	89fb      	ldrh	r3, [r7, #14]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d105      	bne.n	8004836 <dec_lock+0x5a>
 800482a:	4a08      	ldr	r2, [pc, #32]	; (800484c <dec_lock+0x70>)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	4413      	add	r3, r2
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	737b      	strb	r3, [r7, #13]
 800483a:	e001      	b.n	8004840 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800483c:	2302      	movs	r3, #2
 800483e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004840:	7b7b      	ldrb	r3, [r7, #13]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr
 800484c:	200008c4 	.word	0x200008c4

08004850 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	e010      	b.n	8004880 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800485e:	4a0d      	ldr	r2, [pc, #52]	; (8004894 <clear_lock+0x44>)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	4413      	add	r3, r2
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	429a      	cmp	r2, r3
 800486c:	d105      	bne.n	800487a <clear_lock+0x2a>
 800486e:	4a09      	ldr	r2, [pc, #36]	; (8004894 <clear_lock+0x44>)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	4413      	add	r3, r2
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3301      	adds	r3, #1
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d9eb      	bls.n	800485e <clear_lock+0xe>
	}
}
 8004886:	bf00      	nop
 8004888:	bf00      	nop
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	bc80      	pop	{r7}
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	200008c4 	.word	0x200008c4

08004898 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	78db      	ldrb	r3, [r3, #3]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d034      	beq.n	8004916 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	7858      	ldrb	r0, [r3, #1]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80048bc:	2301      	movs	r3, #1
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	f7ff fd4e 	bl	8004360 <disk_write>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	73fb      	strb	r3, [r7, #15]
 80048ce:	e022      	b.n	8004916 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	1ad2      	subs	r2, r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d217      	bcs.n	8004916 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	789b      	ldrb	r3, [r3, #2]
 80048ea:	613b      	str	r3, [r7, #16]
 80048ec:	e010      	b.n	8004910 <sync_window+0x78>
					wsect += fs->fsize;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4413      	add	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	7858      	ldrb	r0, [r3, #1]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004902:	2301      	movs	r3, #1
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	f7ff fd2b 	bl	8004360 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	3b01      	subs	r3, #1
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d8eb      	bhi.n	80048ee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004916:	7bfb      	ldrb	r3, [r7, #15]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d01b      	beq.n	8004970 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff ffad 	bl	8004898 <sync_window>
 800493e:	4603      	mov	r3, r0
 8004940:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004942:	7bfb      	ldrb	r3, [r7, #15]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d113      	bne.n	8004970 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	7858      	ldrb	r0, [r3, #1]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004952:	2301      	movs	r3, #1
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	f7ff fce3 	bl	8004320 <disk_read>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d004      	beq.n	800496a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004960:	f04f 33ff 	mov.w	r3, #4294967295
 8004964:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004966:	2301      	movs	r3, #1
 8004968:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004970:	7bfb      	ldrb	r3, [r7, #15]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff ff87 	bl	8004898 <sync_window>
 800498a:	4603      	mov	r3, r0
 800498c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d158      	bne.n	8004a46 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b03      	cmp	r3, #3
 800499a:	d148      	bne.n	8004a2e <sync_fs+0xb2>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	791b      	ldrb	r3, [r3, #4]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d144      	bne.n	8004a2e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3330      	adds	r3, #48	; 0x30
 80049a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049ac:	2100      	movs	r1, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7ff fdb2 	bl	8004518 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3330      	adds	r3, #48	; 0x30
 80049b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80049bc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff fd44 	bl	800444e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	3330      	adds	r3, #48	; 0x30
 80049ca:	4921      	ldr	r1, [pc, #132]	; (8004a50 <sync_fs+0xd4>)
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff fd58 	bl	8004482 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3330      	adds	r3, #48	; 0x30
 80049d6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80049da:	491e      	ldr	r1, [pc, #120]	; (8004a54 <sync_fs+0xd8>)
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff fd50 	bl	8004482 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3330      	adds	r3, #48	; 0x30
 80049e6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f7ff fd46 	bl	8004482 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3330      	adds	r3, #48	; 0x30
 80049fa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	4619      	mov	r1, r3
 8004a04:	4610      	mov	r0, r2
 8004a06:	f7ff fd3c 	bl	8004482 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	7858      	ldrb	r0, [r3, #1]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a22:	2301      	movs	r3, #1
 8004a24:	f7ff fc9c 	bl	8004360 <disk_write>
			fs->fsi_flag = 0;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	785b      	ldrb	r3, [r3, #1]
 8004a32:	2200      	movs	r2, #0
 8004a34:	2100      	movs	r1, #0
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff fcb2 	bl	80043a0 <disk_ioctl>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <sync_fs+0xca>
 8004a42:	2301      	movs	r3, #1
 8004a44:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	41615252 	.word	0x41615252
 8004a54:	61417272 	.word	0x61417272

08004a58 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	3b02      	subs	r3, #2
 8004a66:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	3b02      	subs	r3, #2
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d301      	bcc.n	8004a78 <clust2sect+0x20>
 8004a74:	2300      	movs	r3, #0
 8004a76:	e008      	b.n	8004a8a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	895b      	ldrh	r3, [r3, #10]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	fb03 f202 	mul.w	r2, r3, r2
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	4413      	add	r3, r2
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr

08004a94 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d904      	bls.n	8004ab4 <get_fat+0x20>
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d302      	bcc.n	8004aba <get_fat+0x26>
		val = 1;	/* Internal error */
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	e08f      	b.n	8004bda <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004aba:	f04f 33ff 	mov.w	r3, #4294967295
 8004abe:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d062      	beq.n	8004b8e <get_fat+0xfa>
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	dc7c      	bgt.n	8004bc6 <get_fat+0x132>
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d002      	beq.n	8004ad6 <get_fat+0x42>
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d042      	beq.n	8004b5a <get_fat+0xc6>
 8004ad4:	e077      	b.n	8004bc6 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	085b      	lsrs	r3, r3, #1
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	6a1a      	ldr	r2, [r3, #32]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	0a5b      	lsrs	r3, r3, #9
 8004aec:	4413      	add	r3, r2
 8004aee:	4619      	mov	r1, r3
 8004af0:	6938      	ldr	r0, [r7, #16]
 8004af2:	f7ff ff15 	bl	8004920 <move_window>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d167      	bne.n	8004bcc <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	60fa      	str	r2, [r7, #12]
 8004b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b0e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	6a1a      	ldr	r2, [r3, #32]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	0a5b      	lsrs	r3, r3, #9
 8004b18:	4413      	add	r3, r2
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6938      	ldr	r0, [r7, #16]
 8004b1e:	f7ff feff 	bl	8004920 <move_window>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d153      	bne.n	8004bd0 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4413      	add	r3, r2
 8004b32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	461a      	mov	r2, r3
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <get_fat+0xbc>
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	091b      	lsrs	r3, r3, #4
 8004b4e:	e002      	b.n	8004b56 <get_fat+0xc2>
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b56:	617b      	str	r3, [r7, #20]
			break;
 8004b58:	e03f      	b.n	8004bda <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	6a1a      	ldr	r2, [r3, #32]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	0a1b      	lsrs	r3, r3, #8
 8004b62:	4413      	add	r3, r2
 8004b64:	4619      	mov	r1, r3
 8004b66:	6938      	ldr	r0, [r7, #16]
 8004b68:	f7ff feda 	bl	8004920 <move_window>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d130      	bne.n	8004bd4 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004b80:	4413      	add	r3, r2
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff fc2a 	bl	80043dc <ld_word>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	617b      	str	r3, [r7, #20]
			break;
 8004b8c:	e025      	b.n	8004bda <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	6a1a      	ldr	r2, [r3, #32]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	09db      	lsrs	r3, r3, #7
 8004b96:	4413      	add	r3, r2
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6938      	ldr	r0, [r7, #16]
 8004b9c:	f7ff fec0 	bl	8004920 <move_window>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d118      	bne.n	8004bd8 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004bb4:	4413      	add	r3, r2
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff fc27 	bl	800440a <ld_dword>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004bc2:	617b      	str	r3, [r7, #20]
			break;
 8004bc4:	e009      	b.n	8004bda <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	617b      	str	r3, [r7, #20]
 8004bca:	e006      	b.n	8004bda <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004bcc:	bf00      	nop
 8004bce:	e004      	b.n	8004bda <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004bd0:	bf00      	nop
 8004bd2:	e002      	b.n	8004bda <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004bd4:	bf00      	nop
 8004bd6:	e000      	b.n	8004bda <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004bd8:	bf00      	nop
		}
	}

	return val;
 8004bda:	697b      	ldr	r3, [r7, #20]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004be4:	b590      	push	{r4, r7, lr}
 8004be6:	b089      	sub	sp, #36	; 0x24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	f240 80d2 	bls.w	8004da0 <put_fat+0x1bc>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	f080 80cc 	bcs.w	8004da0 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	f000 8096 	beq.w	8004d3e <put_fat+0x15a>
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	f300 80cd 	bgt.w	8004db2 <put_fat+0x1ce>
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d002      	beq.n	8004c22 <put_fat+0x3e>
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d06e      	beq.n	8004cfe <put_fat+0x11a>
 8004c20:	e0c7      	b.n	8004db2 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	61bb      	str	r3, [r7, #24]
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	085b      	lsrs	r3, r3, #1
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a1a      	ldr	r2, [r3, #32]
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	0a5b      	lsrs	r3, r3, #9
 8004c38:	4413      	add	r3, r2
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f7ff fe6f 	bl	8004920 <move_window>
 8004c42:	4603      	mov	r3, r0
 8004c44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c46:	7ffb      	ldrb	r3, [r7, #31]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f040 80ab 	bne.w	8004da4 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	1c59      	adds	r1, r3, #1
 8004c58:	61b9      	str	r1, [r7, #24]
 8004c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5e:	4413      	add	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00d      	beq.n	8004c88 <put_fat+0xa4>
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	b25b      	sxtb	r3, r3
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	b25a      	sxtb	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	b25b      	sxtb	r3, r3
 8004c80:	4313      	orrs	r3, r2
 8004c82:	b25b      	sxtb	r3, r3
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	e001      	b.n	8004c8c <put_fat+0xa8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2201      	movs	r2, #1
 8004c94:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a1a      	ldr	r2, [r3, #32]
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	0a5b      	lsrs	r3, r3, #9
 8004c9e:	4413      	add	r3, r2
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f7ff fe3c 	bl	8004920 <move_window>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004cac:	7ffb      	ldrb	r3, [r7, #31]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d17a      	bne.n	8004da8 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cbe:	4413      	add	r3, r2
 8004cc0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <put_fat+0xf0>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	091b      	lsrs	r3, r3, #4
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	e00e      	b.n	8004cf2 <put_fat+0x10e>
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	b25b      	sxtb	r3, r3
 8004cda:	f023 030f 	bic.w	r3, r3, #15
 8004cde:	b25a      	sxtb	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	0a1b      	lsrs	r3, r3, #8
 8004ce4:	b25b      	sxtb	r3, r3
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	b25b      	sxtb	r3, r3
 8004cec:	4313      	orrs	r3, r2
 8004cee:	b25b      	sxtb	r3, r3
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	70da      	strb	r2, [r3, #3]
			break;
 8004cfc:	e059      	b.n	8004db2 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a1a      	ldr	r2, [r3, #32]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	0a1b      	lsrs	r3, r3, #8
 8004d06:	4413      	add	r3, r2
 8004d08:	4619      	mov	r1, r3
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f7ff fe08 	bl	8004920 <move_window>
 8004d10:	4603      	mov	r3, r0
 8004d12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d14:	7ffb      	ldrb	r3, [r7, #31]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d148      	bne.n	8004dac <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004d28:	4413      	add	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	b292      	uxth	r2, r2
 8004d2e:	4611      	mov	r1, r2
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff fb8c 	bl	800444e <st_word>
			fs->wflag = 1;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	70da      	strb	r2, [r3, #3]
			break;
 8004d3c:	e039      	b.n	8004db2 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a1a      	ldr	r2, [r3, #32]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	09db      	lsrs	r3, r3, #7
 8004d46:	4413      	add	r3, r2
 8004d48:	4619      	mov	r1, r3
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f7ff fde8 	bl	8004920 <move_window>
 8004d50:	4603      	mov	r3, r0
 8004d52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d54:	7ffb      	ldrb	r3, [r7, #31]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d12a      	bne.n	8004db0 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004d6e:	4413      	add	r3, r2
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff fb4a 	bl	800440a <ld_dword>
 8004d76:	4603      	mov	r3, r0
 8004d78:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004d7c:	4323      	orrs	r3, r4
 8004d7e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004d8e:	4413      	add	r3, r2
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff fb75 	bl	8004482 <st_dword>
			fs->wflag = 1;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	70da      	strb	r2, [r3, #3]
			break;
 8004d9e:	e008      	b.n	8004db2 <put_fat+0x1ce>
		}
	}
 8004da0:	bf00      	nop
 8004da2:	e006      	b.n	8004db2 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004da4:	bf00      	nop
 8004da6:	e004      	b.n	8004db2 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004da8:	bf00      	nop
 8004daa:	e002      	b.n	8004db2 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004dac:	bf00      	nop
 8004dae:	e000      	b.n	8004db2 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004db0:	bf00      	nop
	return res;
 8004db2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3724      	adds	r7, #36	; 0x24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd90      	pop	{r4, r7, pc}

08004dbc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d904      	bls.n	8004de2 <remove_chain+0x26>
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d301      	bcc.n	8004de6 <remove_chain+0x2a>
 8004de2:	2302      	movs	r3, #2
 8004de4:	e04b      	b.n	8004e7e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00c      	beq.n	8004e06 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004dec:	f04f 32ff 	mov.w	r2, #4294967295
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	69b8      	ldr	r0, [r7, #24]
 8004df4:	f7ff fef6 	bl	8004be4 <put_fat>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004dfc:	7ffb      	ldrb	r3, [r7, #31]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <remove_chain+0x4a>
 8004e02:	7ffb      	ldrb	r3, [r7, #31]
 8004e04:	e03b      	b.n	8004e7e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f7ff fe43 	bl	8004a94 <get_fat>
 8004e0e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d031      	beq.n	8004e7a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <remove_chain+0x64>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e02e      	b.n	8004e7e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e26:	d101      	bne.n	8004e2c <remove_chain+0x70>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e028      	b.n	8004e7e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	68b9      	ldr	r1, [r7, #8]
 8004e30:	69b8      	ldr	r0, [r7, #24]
 8004e32:	f7ff fed7 	bl	8004be4 <put_fat>
 8004e36:	4603      	mov	r3, r0
 8004e38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004e3a:	7ffb      	ldrb	r3, [r7, #31]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <remove_chain+0x88>
 8004e40:	7ffb      	ldrb	r3, [r7, #31]
 8004e42:	e01c      	b.n	8004e7e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	691a      	ldr	r2, [r3, #16]
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	3b02      	subs	r3, #2
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d20b      	bcs.n	8004e6a <remove_chain+0xae>
			fs->free_clst++;
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	791b      	ldrb	r3, [r3, #4]
 8004e60:	f043 0301 	orr.w	r3, r3, #1
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d3c6      	bcc.n	8004e06 <remove_chain+0x4a>
 8004e78:	e000      	b.n	8004e7c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004e7a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3720      	adds	r7, #32
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b088      	sub	sp, #32
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10d      	bne.n	8004eb8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d004      	beq.n	8004eb2 <create_chain+0x2c>
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d31b      	bcc.n	8004eea <create_chain+0x64>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	e018      	b.n	8004eea <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004eb8:	6839      	ldr	r1, [r7, #0]
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff fdea 	bl	8004a94 <get_fat>
 8004ec0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d801      	bhi.n	8004ecc <create_chain+0x46>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e070      	b.n	8004fae <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed2:	d101      	bne.n	8004ed8 <create_chain+0x52>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	e06a      	b.n	8004fae <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d201      	bcs.n	8004ee6 <create_chain+0x60>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	e063      	b.n	8004fae <create_chain+0x128>
		scl = clst;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d307      	bcc.n	8004f0e <create_chain+0x88>
				ncl = 2;
 8004efe:	2302      	movs	r3, #2
 8004f00:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d901      	bls.n	8004f0e <create_chain+0x88>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e04f      	b.n	8004fae <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004f0e:	69f9      	ldr	r1, [r7, #28]
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7ff fdbf 	bl	8004a94 <get_fat>
 8004f16:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00e      	beq.n	8004f3c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d003      	beq.n	8004f2c <create_chain+0xa6>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2a:	d101      	bne.n	8004f30 <create_chain+0xaa>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	e03e      	b.n	8004fae <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004f30:	69fa      	ldr	r2, [r7, #28]
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d1da      	bne.n	8004eee <create_chain+0x68>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e038      	b.n	8004fae <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004f3c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f42:	69f9      	ldr	r1, [r7, #28]
 8004f44:	6938      	ldr	r0, [r7, #16]
 8004f46:	f7ff fe4d 	bl	8004be4 <put_fat>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004f4e:	7dfb      	ldrb	r3, [r7, #23]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d109      	bne.n	8004f68 <create_chain+0xe2>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d006      	beq.n	8004f68 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004f5a:	69fa      	ldr	r2, [r7, #28]
 8004f5c:	6839      	ldr	r1, [r7, #0]
 8004f5e:	6938      	ldr	r0, [r7, #16]
 8004f60:	f7ff fe40 	bl	8004be4 <put_fat>
 8004f64:	4603      	mov	r3, r0
 8004f66:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d116      	bne.n	8004f9c <create_chain+0x116>
		fs->last_clst = ncl;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	691a      	ldr	r2, [r3, #16]
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	3b02      	subs	r3, #2
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d804      	bhi.n	8004f8c <create_chain+0x106>
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	1e5a      	subs	r2, r3, #1
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	791b      	ldrb	r3, [r3, #4]
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	711a      	strb	r2, [r3, #4]
 8004f9a:	e007      	b.n	8004fac <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d102      	bne.n	8004fa8 <create_chain+0x122>
 8004fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa6:	e000      	b.n	8004faa <create_chain+0x124>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004fac:	69fb      	ldr	r3, [r7, #28]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3720      	adds	r7, #32
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b087      	sub	sp, #28
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fca:	3304      	adds	r3, #4
 8004fcc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	0a5b      	lsrs	r3, r3, #9
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	8952      	ldrh	r2, [r2, #10]
 8004fd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fda:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1d1a      	adds	r2, r3, #4
 8004fe0:	613a      	str	r2, [r7, #16]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <clmt_clust+0x3a>
 8004fec:	2300      	movs	r3, #0
 8004fee:	e010      	b.n	8005012 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d307      	bcc.n	8005008 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	3304      	adds	r3, #4
 8005004:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005006:	e7e9      	b.n	8004fdc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005008:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	4413      	add	r3, r2
}
 8005012:	4618      	mov	r0, r3
 8005014:	371c      	adds	r7, #28
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr

0800501c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005032:	d204      	bcs.n	800503e <dir_sdi+0x22>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	f003 031f 	and.w	r3, r3, #31
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <dir_sdi+0x26>
		return FR_INT_ERR;
 800503e:	2302      	movs	r3, #2
 8005040:	e063      	b.n	800510a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d106      	bne.n	8005062 <dir_sdi+0x46>
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b02      	cmp	r3, #2
 800505a:	d902      	bls.n	8005062 <dir_sdi+0x46>
		clst = fs->dirbase;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10c      	bne.n	8005082 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	095b      	lsrs	r3, r3, #5
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	8912      	ldrh	r2, [r2, #8]
 8005070:	4293      	cmp	r3, r2
 8005072:	d301      	bcc.n	8005078 <dir_sdi+0x5c>
 8005074:	2302      	movs	r3, #2
 8005076:	e048      	b.n	800510a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	61da      	str	r2, [r3, #28]
 8005080:	e029      	b.n	80050d6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	895b      	ldrh	r3, [r3, #10]
 8005086:	025b      	lsls	r3, r3, #9
 8005088:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800508a:	e019      	b.n	80050c0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6979      	ldr	r1, [r7, #20]
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff fcff 	bl	8004a94 <get_fat>
 8005096:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509e:	d101      	bne.n	80050a4 <dir_sdi+0x88>
 80050a0:	2301      	movs	r3, #1
 80050a2:	e032      	b.n	800510a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d904      	bls.n	80050b4 <dir_sdi+0x98>
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d301      	bcc.n	80050b8 <dir_sdi+0x9c>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e028      	b.n	800510a <dir_sdi+0xee>
			ofs -= csz;
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d2e1      	bcs.n	800508c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80050c8:	6979      	ldr	r1, [r7, #20]
 80050ca:	6938      	ldr	r0, [r7, #16]
 80050cc:	f7ff fcc4 	bl	8004a58 <clust2sect>
 80050d0:	4602      	mov	r2, r0
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <dir_sdi+0xcc>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e010      	b.n	800510a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	69da      	ldr	r2, [r3, #28]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	0a5b      	lsrs	r3, r3, #9
 80050f0:	441a      	add	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005102:	441a      	add	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b086      	sub	sp, #24
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	3320      	adds	r3, #32
 8005128:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <dir_next+0x28>
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005138:	d301      	bcc.n	800513e <dir_next+0x2c>
 800513a:	2304      	movs	r3, #4
 800513c:	e0aa      	b.n	8005294 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005144:	2b00      	cmp	r3, #0
 8005146:	f040 8098 	bne.w	800527a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10b      	bne.n	8005174 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	8912      	ldrh	r2, [r2, #8]
 8005164:	4293      	cmp	r3, r2
 8005166:	f0c0 8088 	bcc.w	800527a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	61da      	str	r2, [r3, #28]
 8005170:	2304      	movs	r3, #4
 8005172:	e08f      	b.n	8005294 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	0a5b      	lsrs	r3, r3, #9
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	8952      	ldrh	r2, [r2, #10]
 800517c:	3a01      	subs	r2, #1
 800517e:	4013      	ands	r3, r2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d17a      	bne.n	800527a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	4619      	mov	r1, r3
 800518c:	4610      	mov	r0, r2
 800518e:	f7ff fc81 	bl	8004a94 <get_fat>
 8005192:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d801      	bhi.n	800519e <dir_next+0x8c>
 800519a:	2302      	movs	r3, #2
 800519c:	e07a      	b.n	8005294 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a4:	d101      	bne.n	80051aa <dir_next+0x98>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e074      	b.n	8005294 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d358      	bcc.n	8005266 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d104      	bne.n	80051c4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	61da      	str	r2, [r3, #28]
 80051c0:	2304      	movs	r3, #4
 80051c2:	e067      	b.n	8005294 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	4619      	mov	r1, r3
 80051cc:	4610      	mov	r0, r2
 80051ce:	f7ff fe5a 	bl	8004e86 <create_chain>
 80051d2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <dir_next+0xcc>
 80051da:	2307      	movs	r3, #7
 80051dc:	e05a      	b.n	8005294 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <dir_next+0xd6>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e055      	b.n	8005294 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ee:	d101      	bne.n	80051f4 <dir_next+0xe2>
 80051f0:	2301      	movs	r3, #1
 80051f2:	e04f      	b.n	8005294 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f7ff fb4f 	bl	8004898 <sync_window>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <dir_next+0xf2>
 8005200:	2301      	movs	r3, #1
 8005202:	e047      	b.n	8005294 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	3330      	adds	r3, #48	; 0x30
 8005208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800520c:	2100      	movs	r1, #0
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff f982 	bl	8004518 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005214:	2300      	movs	r3, #0
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	6979      	ldr	r1, [r7, #20]
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f7ff fc1c 	bl	8004a58 <clust2sect>
 8005220:	4602      	mov	r2, r0
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	62da      	str	r2, [r3, #44]	; 0x2c
 8005226:	e012      	b.n	800524e <dir_next+0x13c>
						fs->wflag = 1;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2201      	movs	r2, #1
 800522c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f7ff fb32 	bl	8004898 <sync_window>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <dir_next+0x12c>
 800523a:	2301      	movs	r3, #1
 800523c:	e02a      	b.n	8005294 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	3301      	adds	r3, #1
 8005242:	613b      	str	r3, [r7, #16]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	62da      	str	r2, [r3, #44]	; 0x2c
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	895b      	ldrh	r3, [r3, #10]
 8005252:	461a      	mov	r2, r3
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	4293      	cmp	r3, r2
 8005258:	d3e6      	bcc.n	8005228 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad2      	subs	r2, r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800526c:	6979      	ldr	r1, [r7, #20]
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f7ff fbf2 	bl	8004a58 <clust2sect>
 8005274:	4602      	mov	r2, r0
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800528c:	441a      	add	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80052ac:	2100      	movs	r1, #0
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff feb4 	bl	800501c <dir_sdi>
 80052b4:	4603      	mov	r3, r0
 80052b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d12b      	bne.n	8005316 <dir_alloc+0x7a>
		n = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	4619      	mov	r1, r3
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f7ff fb29 	bl	8004920 <move_window>
 80052ce:	4603      	mov	r3, r0
 80052d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80052d2:	7dfb      	ldrb	r3, [r7, #23]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d11d      	bne.n	8005314 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	2be5      	cmp	r3, #229	; 0xe5
 80052e0:	d004      	beq.n	80052ec <dir_alloc+0x50>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d107      	bne.n	80052fc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	3301      	adds	r3, #1
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d102      	bne.n	8005300 <dir_alloc+0x64>
 80052fa:	e00c      	b.n	8005316 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80052fc:	2300      	movs	r3, #0
 80052fe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005300:	2101      	movs	r1, #1
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7ff ff05 	bl	8005112 <dir_next>
 8005308:	4603      	mov	r3, r0
 800530a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800530c:	7dfb      	ldrb	r3, [r7, #23]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0d7      	beq.n	80052c2 <dir_alloc+0x26>
 8005312:	e000      	b.n	8005316 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005314:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005316:	7dfb      	ldrb	r3, [r7, #23]
 8005318:	2b04      	cmp	r3, #4
 800531a:	d101      	bne.n	8005320 <dir_alloc+0x84>
 800531c:	2307      	movs	r3, #7
 800531e:	75fb      	strb	r3, [r7, #23]
	return res;
 8005320:	7dfb      	ldrb	r3, [r7, #23]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b084      	sub	sp, #16
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	331a      	adds	r3, #26
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff f84f 	bl	80043dc <ld_word>
 800533e:	4603      	mov	r3, r0
 8005340:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b03      	cmp	r3, #3
 8005348:	d109      	bne.n	800535e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	3314      	adds	r3, #20
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff f844 	bl	80043dc <ld_word>
 8005354:	4603      	mov	r3, r0
 8005356:	041b      	lsls	r3, r3, #16
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800535e:	68fb      	ldr	r3, [r7, #12]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	331a      	adds	r3, #26
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	b292      	uxth	r2, r2
 800537c:	4611      	mov	r1, r2
 800537e:	4618      	mov	r0, r3
 8005380:	f7ff f865 	bl	800444e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b03      	cmp	r3, #3
 800538a:	d109      	bne.n	80053a0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f103 0214 	add.w	r2, r3, #20
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	0c1b      	lsrs	r3, r3, #16
 8005396:	b29b      	uxth	r3, r3
 8005398:	4619      	mov	r1, r3
 800539a:	4610      	mov	r0, r2
 800539c:	f7ff f857 	bl	800444e <st_word>
	}
}
 80053a0:	bf00      	nop
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80053b6:	2100      	movs	r1, #0
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff fe2f 	bl	800501c <dir_sdi>
 80053be:	4603      	mov	r3, r0
 80053c0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80053c2:	7dfb      	ldrb	r3, [r7, #23]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <dir_find+0x24>
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
 80053ca:	e03e      	b.n	800544a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	4619      	mov	r1, r3
 80053d2:	6938      	ldr	r0, [r7, #16]
 80053d4:	f7ff faa4 	bl	8004920 <move_window>
 80053d8:	4603      	mov	r3, r0
 80053da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80053dc:	7dfb      	ldrb	r3, [r7, #23]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d12f      	bne.n	8005442 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d102      	bne.n	80053f6 <dir_find+0x4e>
 80053f0:	2304      	movs	r3, #4
 80053f2:	75fb      	strb	r3, [r7, #23]
 80053f4:	e028      	b.n	8005448 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	330b      	adds	r3, #11
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005402:	b2da      	uxtb	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	330b      	adds	r3, #11
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10a      	bne.n	800542e <dir_find+0x86>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a18      	ldr	r0, [r3, #32]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3324      	adds	r3, #36	; 0x24
 8005420:	220b      	movs	r2, #11
 8005422:	4619      	mov	r1, r3
 8005424:	f7ff f892 	bl	800454c <mem_cmp>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00b      	beq.n	8005446 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800542e:	2100      	movs	r1, #0
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff fe6e 	bl	8005112 <dir_next>
 8005436:	4603      	mov	r3, r0
 8005438:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800543a:	7dfb      	ldrb	r3, [r7, #23]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0c5      	beq.n	80053cc <dir_find+0x24>
 8005440:	e002      	b.n	8005448 <dir_find+0xa0>
		if (res != FR_OK) break;
 8005442:	bf00      	nop
 8005444:	e000      	b.n	8005448 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005446:	bf00      	nop

	return res;
 8005448:	7dfb      	ldrb	r3, [r7, #23]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005460:	2101      	movs	r1, #1
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7ff ff1a 	bl	800529c <dir_alloc>
 8005468:	4603      	mov	r3, r0
 800546a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800546c:	7bfb      	ldrb	r3, [r7, #15]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d11c      	bne.n	80054ac <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	4619      	mov	r1, r3
 8005478:	68b8      	ldr	r0, [r7, #8]
 800547a:	f7ff fa51 	bl	8004920 <move_window>
 800547e:	4603      	mov	r3, r0
 8005480:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d111      	bne.n	80054ac <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	2220      	movs	r2, #32
 800548e:	2100      	movs	r1, #0
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff f841 	bl	8004518 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a18      	ldr	r0, [r3, #32]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	3324      	adds	r3, #36	; 0x24
 800549e:	220b      	movs	r2, #11
 80054a0:	4619      	mov	r1, r3
 80054a2:	f7ff f819 	bl	80044d8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2201      	movs	r2, #1
 80054aa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3324      	adds	r3, #36	; 0x24
 80054cc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80054ce:	220b      	movs	r2, #11
 80054d0:	2120      	movs	r1, #32
 80054d2:	68b8      	ldr	r0, [r7, #8]
 80054d4:	f7ff f820 	bl	8004518 <mem_set>
	si = i = 0; ni = 8;
 80054d8:	2300      	movs	r3, #0
 80054da:	613b      	str	r3, [r7, #16]
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	61fb      	str	r3, [r7, #28]
 80054e0:	2308      	movs	r3, #8
 80054e2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	61fa      	str	r2, [r7, #28]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4413      	add	r3, r2
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80054f2:	7efb      	ldrb	r3, [r7, #27]
 80054f4:	2b20      	cmp	r3, #32
 80054f6:	d94e      	bls.n	8005596 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80054f8:	7efb      	ldrb	r3, [r7, #27]
 80054fa:	2b2f      	cmp	r3, #47	; 0x2f
 80054fc:	d006      	beq.n	800550c <create_name+0x54>
 80054fe:	7efb      	ldrb	r3, [r7, #27]
 8005500:	2b5c      	cmp	r3, #92	; 0x5c
 8005502:	d110      	bne.n	8005526 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005504:	e002      	b.n	800550c <create_name+0x54>
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	3301      	adds	r3, #1
 800550a:	61fb      	str	r3, [r7, #28]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	4413      	add	r3, r2
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b2f      	cmp	r3, #47	; 0x2f
 8005516:	d0f6      	beq.n	8005506 <create_name+0x4e>
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	4413      	add	r3, r2
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b5c      	cmp	r3, #92	; 0x5c
 8005522:	d0f0      	beq.n	8005506 <create_name+0x4e>
			break;
 8005524:	e038      	b.n	8005598 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005526:	7efb      	ldrb	r3, [r7, #27]
 8005528:	2b2e      	cmp	r3, #46	; 0x2e
 800552a:	d003      	beq.n	8005534 <create_name+0x7c>
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	429a      	cmp	r2, r3
 8005532:	d30c      	bcc.n	800554e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	2b0b      	cmp	r3, #11
 8005538:	d002      	beq.n	8005540 <create_name+0x88>
 800553a:	7efb      	ldrb	r3, [r7, #27]
 800553c:	2b2e      	cmp	r3, #46	; 0x2e
 800553e:	d001      	beq.n	8005544 <create_name+0x8c>
 8005540:	2306      	movs	r3, #6
 8005542:	e044      	b.n	80055ce <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005544:	2308      	movs	r3, #8
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	230b      	movs	r3, #11
 800554a:	617b      	str	r3, [r7, #20]
			continue;
 800554c:	e022      	b.n	8005594 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800554e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005552:	2b00      	cmp	r3, #0
 8005554:	da04      	bge.n	8005560 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005556:	7efb      	ldrb	r3, [r7, #27]
 8005558:	3b80      	subs	r3, #128	; 0x80
 800555a:	4a1f      	ldr	r2, [pc, #124]	; (80055d8 <create_name+0x120>)
 800555c:	5cd3      	ldrb	r3, [r2, r3]
 800555e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005560:	7efb      	ldrb	r3, [r7, #27]
 8005562:	4619      	mov	r1, r3
 8005564:	481d      	ldr	r0, [pc, #116]	; (80055dc <create_name+0x124>)
 8005566:	f7ff f817 	bl	8004598 <chk_chr>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <create_name+0xbc>
 8005570:	2306      	movs	r3, #6
 8005572:	e02c      	b.n	80055ce <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005574:	7efb      	ldrb	r3, [r7, #27]
 8005576:	2b60      	cmp	r3, #96	; 0x60
 8005578:	d905      	bls.n	8005586 <create_name+0xce>
 800557a:	7efb      	ldrb	r3, [r7, #27]
 800557c:	2b7a      	cmp	r3, #122	; 0x7a
 800557e:	d802      	bhi.n	8005586 <create_name+0xce>
 8005580:	7efb      	ldrb	r3, [r7, #27]
 8005582:	3b20      	subs	r3, #32
 8005584:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	613a      	str	r2, [r7, #16]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	4413      	add	r3, r2
 8005590:	7efa      	ldrb	r2, [r7, #27]
 8005592:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005594:	e7a6      	b.n	80054e4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005596:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	441a      	add	r2, r3
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <create_name+0xf4>
 80055a8:	2306      	movs	r3, #6
 80055aa:	e010      	b.n	80055ce <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2be5      	cmp	r3, #229	; 0xe5
 80055b2:	d102      	bne.n	80055ba <create_name+0x102>
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2205      	movs	r2, #5
 80055b8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80055ba:	7efb      	ldrb	r3, [r7, #27]
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d801      	bhi.n	80055c4 <create_name+0x10c>
 80055c0:	2204      	movs	r2, #4
 80055c2:	e000      	b.n	80055c6 <create_name+0x10e>
 80055c4:	2200      	movs	r2, #0
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	330b      	adds	r3, #11
 80055ca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80055cc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3720      	adds	r7, #32
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	0800666c 	.word	0x0800666c
 80055dc:	08006604 	.word	0x08006604

080055e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80055f4:	e002      	b.n	80055fc <follow_path+0x1c>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	3301      	adds	r3, #1
 80055fa:	603b      	str	r3, [r7, #0]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b2f      	cmp	r3, #47	; 0x2f
 8005602:	d0f8      	beq.n	80055f6 <follow_path+0x16>
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b5c      	cmp	r3, #92	; 0x5c
 800560a:	d0f4      	beq.n	80055f6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	2200      	movs	r2, #0
 8005610:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b1f      	cmp	r3, #31
 8005618:	d80a      	bhi.n	8005630 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2280      	movs	r2, #128	; 0x80
 800561e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005622:	2100      	movs	r1, #0
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff fcf9 	bl	800501c <dir_sdi>
 800562a:	4603      	mov	r3, r0
 800562c:	75fb      	strb	r3, [r7, #23]
 800562e:	e043      	b.n	80056b8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005630:	463b      	mov	r3, r7
 8005632:	4619      	mov	r1, r3
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff ff3f 	bl	80054b8 <create_name>
 800563a:	4603      	mov	r3, r0
 800563c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800563e:	7dfb      	ldrb	r3, [r7, #23]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d134      	bne.n	80056ae <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff feaf 	bl	80053a8 <dir_find>
 800564a:	4603      	mov	r3, r0
 800564c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005654:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005656:	7dfb      	ldrb	r3, [r7, #23]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00a      	beq.n	8005672 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800565c:	7dfb      	ldrb	r3, [r7, #23]
 800565e:	2b04      	cmp	r3, #4
 8005660:	d127      	bne.n	80056b2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005662:	7afb      	ldrb	r3, [r7, #11]
 8005664:	f003 0304 	and.w	r3, r3, #4
 8005668:	2b00      	cmp	r3, #0
 800566a:	d122      	bne.n	80056b2 <follow_path+0xd2>
 800566c:	2305      	movs	r3, #5
 800566e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005670:	e01f      	b.n	80056b2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005672:	7afb      	ldrb	r3, [r7, #11]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b00      	cmp	r3, #0
 800567a:	d11c      	bne.n	80056b6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	799b      	ldrb	r3, [r3, #6]
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b00      	cmp	r3, #0
 8005686:	d102      	bne.n	800568e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005688:	2305      	movs	r3, #5
 800568a:	75fb      	strb	r3, [r7, #23]
 800568c:	e014      	b.n	80056b8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800569c:	4413      	add	r3, r2
 800569e:	4619      	mov	r1, r3
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f7ff fe42 	bl	800532a <ld_clust>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80056ac:	e7c0      	b.n	8005630 <follow_path+0x50>
			if (res != FR_OK) break;
 80056ae:	bf00      	nop
 80056b0:	e002      	b.n	80056b8 <follow_path+0xd8>
				break;
 80056b2:	bf00      	nop
 80056b4:	e000      	b.n	80056b8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80056b6:	bf00      	nop
			}
		}
	}

	return res;
 80056b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b087      	sub	sp, #28
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80056ca:	f04f 33ff 	mov.w	r3, #4294967295
 80056ce:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d031      	beq.n	800573c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	e002      	b.n	80056e6 <get_ldnumber+0x24>
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	3301      	adds	r3, #1
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	d903      	bls.n	80056f6 <get_ldnumber+0x34>
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b3a      	cmp	r3, #58	; 0x3a
 80056f4:	d1f4      	bne.n	80056e0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b3a      	cmp	r3, #58	; 0x3a
 80056fc:	d11c      	bne.n	8005738 <get_ldnumber+0x76>
			tp = *path;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	60fa      	str	r2, [r7, #12]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	3b30      	subs	r3, #48	; 0x30
 800570e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b09      	cmp	r3, #9
 8005714:	d80e      	bhi.n	8005734 <get_ldnumber+0x72>
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	429a      	cmp	r2, r3
 800571c:	d10a      	bne.n	8005734 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d107      	bne.n	8005734 <get_ldnumber+0x72>
					vol = (int)i;
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	3301      	adds	r3, #1
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	e002      	b.n	800573e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005738:	2300      	movs	r3, #0
 800573a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800573c:	693b      	ldr	r3, [r7, #16]
}
 800573e:	4618      	mov	r0, r3
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	bc80      	pop	{r7}
 8005746:	4770      	bx	lr

08005748 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	70da      	strb	r2, [r3, #3]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f04f 32ff 	mov.w	r2, #4294967295
 800575e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005760:	6839      	ldr	r1, [r7, #0]
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7ff f8dc 	bl	8004920 <move_window>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <check_fs+0x2a>
 800576e:	2304      	movs	r3, #4
 8005770:	e038      	b.n	80057e4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	3330      	adds	r3, #48	; 0x30
 8005776:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800577a:	4618      	mov	r0, r3
 800577c:	f7fe fe2e 	bl	80043dc <ld_word>
 8005780:	4603      	mov	r3, r0
 8005782:	461a      	mov	r2, r3
 8005784:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005788:	429a      	cmp	r2, r3
 800578a:	d001      	beq.n	8005790 <check_fs+0x48>
 800578c:	2303      	movs	r3, #3
 800578e:	e029      	b.n	80057e4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005796:	2be9      	cmp	r3, #233	; 0xe9
 8005798:	d009      	beq.n	80057ae <check_fs+0x66>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057a0:	2beb      	cmp	r3, #235	; 0xeb
 80057a2:	d11e      	bne.n	80057e2 <check_fs+0x9a>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80057aa:	2b90      	cmp	r3, #144	; 0x90
 80057ac:	d119      	bne.n	80057e2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	3330      	adds	r3, #48	; 0x30
 80057b2:	3336      	adds	r3, #54	; 0x36
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fe fe28 	bl	800440a <ld_dword>
 80057ba:	4603      	mov	r3, r0
 80057bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80057c0:	4a0a      	ldr	r2, [pc, #40]	; (80057ec <check_fs+0xa4>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d101      	bne.n	80057ca <check_fs+0x82>
 80057c6:	2300      	movs	r3, #0
 80057c8:	e00c      	b.n	80057e4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3330      	adds	r3, #48	; 0x30
 80057ce:	3352      	adds	r3, #82	; 0x52
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7fe fe1a 	bl	800440a <ld_dword>
 80057d6:	4603      	mov	r3, r0
 80057d8:	4a05      	ldr	r2, [pc, #20]	; (80057f0 <check_fs+0xa8>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d101      	bne.n	80057e2 <check_fs+0x9a>
 80057de:	2300      	movs	r3, #0
 80057e0:	e000      	b.n	80057e4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80057e2:	2302      	movs	r3, #2
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	00544146 	.word	0x00544146
 80057f0:	33544146 	.word	0x33544146

080057f4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b096      	sub	sp, #88	; 0x58
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	4613      	mov	r3, r2
 8005800:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f7ff ff5a 	bl	80056c2 <get_ldnumber>
 800580e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005812:	2b00      	cmp	r3, #0
 8005814:	da01      	bge.n	800581a <find_volume+0x26>
 8005816:	230b      	movs	r3, #11
 8005818:	e22e      	b.n	8005c78 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800581a:	4aa8      	ldr	r2, [pc, #672]	; (8005abc <find_volume+0x2c8>)
 800581c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005822:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <find_volume+0x3a>
 800582a:	230c      	movs	r3, #12
 800582c:	e224      	b.n	8005c78 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005832:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	f023 0301 	bic.w	r3, r3, #1
 800583a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800583c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01a      	beq.n	800587a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005846:	785b      	ldrb	r3, [r3, #1]
 8005848:	4618      	mov	r0, r3
 800584a:	f7fe fd29 	bl	80042a0 <disk_status>
 800584e:	4603      	mov	r3, r0
 8005850:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005854:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10c      	bne.n	800587a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005860:	79fb      	ldrb	r3, [r7, #7]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d007      	beq.n	8005876 <find_volume+0x82>
 8005866:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800586a:	f003 0304 	and.w	r3, r3, #4
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005872:	230a      	movs	r3, #10
 8005874:	e200      	b.n	8005c78 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8005876:	2300      	movs	r3, #0
 8005878:	e1fe      	b.n	8005c78 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800587a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587c:	2200      	movs	r2, #0
 800587e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005882:	b2da      	uxtb	r2, r3
 8005884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005886:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588a:	785b      	ldrb	r3, [r3, #1]
 800588c:	4618      	mov	r0, r3
 800588e:	f7fe fd21 	bl	80042d4 <disk_initialize>
 8005892:	4603      	mov	r3, r0
 8005894:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005898:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80058a4:	2303      	movs	r3, #3
 80058a6:	e1e7      	b.n	8005c78 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80058a8:	79fb      	ldrb	r3, [r7, #7]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d007      	beq.n	80058be <find_volume+0xca>
 80058ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80058ba:	230a      	movs	r3, #10
 80058bc:	e1dc      	b.n	8005c78 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80058be:	2300      	movs	r3, #0
 80058c0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80058c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80058c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058c6:	f7ff ff3f 	bl	8005748 <check_fs>
 80058ca:	4603      	mov	r3, r0
 80058cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80058d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d14b      	bne.n	8005970 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80058d8:	2300      	movs	r3, #0
 80058da:	643b      	str	r3, [r7, #64]	; 0x40
 80058dc:	e01f      	b.n	800591e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80058de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80058e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80058ec:	4413      	add	r3, r2
 80058ee:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	3304      	adds	r3, #4
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d006      	beq.n	8005908 <find_volume+0x114>
 80058fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fc:	3308      	adds	r3, #8
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fe fd83 	bl	800440a <ld_dword>
 8005904:	4602      	mov	r2, r0
 8005906:	e000      	b.n	800590a <find_volume+0x116>
 8005908:	2200      	movs	r2, #0
 800590a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005912:	440b      	add	r3, r1
 8005914:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800591a:	3301      	adds	r3, #1
 800591c:	643b      	str	r3, [r7, #64]	; 0x40
 800591e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005920:	2b03      	cmp	r3, #3
 8005922:	d9dc      	bls.n	80058de <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005924:	2300      	movs	r3, #0
 8005926:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <find_volume+0x140>
 800592e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005930:	3b01      	subs	r3, #1
 8005932:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800593c:	4413      	add	r3, r2
 800593e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005942:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005946:	2b00      	cmp	r3, #0
 8005948:	d005      	beq.n	8005956 <find_volume+0x162>
 800594a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800594c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800594e:	f7ff fefb 	bl	8005748 <check_fs>
 8005952:	4603      	mov	r3, r0
 8005954:	e000      	b.n	8005958 <find_volume+0x164>
 8005956:	2303      	movs	r3, #3
 8005958:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800595c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005960:	2b01      	cmp	r3, #1
 8005962:	d905      	bls.n	8005970 <find_volume+0x17c>
 8005964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005966:	3301      	adds	r3, #1
 8005968:	643b      	str	r3, [r7, #64]	; 0x40
 800596a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800596c:	2b03      	cmp	r3, #3
 800596e:	d9e1      	bls.n	8005934 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005970:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005974:	2b04      	cmp	r3, #4
 8005976:	d101      	bne.n	800597c <find_volume+0x188>
 8005978:	2301      	movs	r3, #1
 800597a:	e17d      	b.n	8005c78 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800597c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005980:	2b01      	cmp	r3, #1
 8005982:	d901      	bls.n	8005988 <find_volume+0x194>
 8005984:	230d      	movs	r3, #13
 8005986:	e177      	b.n	8005c78 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598a:	3330      	adds	r3, #48	; 0x30
 800598c:	330b      	adds	r3, #11
 800598e:	4618      	mov	r0, r3
 8005990:	f7fe fd24 	bl	80043dc <ld_word>
 8005994:	4603      	mov	r3, r0
 8005996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800599a:	d001      	beq.n	80059a0 <find_volume+0x1ac>
 800599c:	230d      	movs	r3, #13
 800599e:	e16b      	b.n	8005c78 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80059a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a2:	3330      	adds	r3, #48	; 0x30
 80059a4:	3316      	adds	r3, #22
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fe fd18 	bl	80043dc <ld_word>
 80059ac:	4603      	mov	r3, r0
 80059ae:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80059b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <find_volume+0x1d0>
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	3330      	adds	r3, #48	; 0x30
 80059ba:	3324      	adds	r3, #36	; 0x24
 80059bc:	4618      	mov	r0, r3
 80059be:	f7fe fd24 	bl	800440a <ld_dword>
 80059c2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80059c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059c8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80059ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059cc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80059d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80059d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d6:	789b      	ldrb	r3, [r3, #2]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d005      	beq.n	80059e8 <find_volume+0x1f4>
 80059dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059de:	789b      	ldrb	r3, [r3, #2]
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d001      	beq.n	80059e8 <find_volume+0x1f4>
 80059e4:	230d      	movs	r3, #13
 80059e6:	e147      	b.n	8005c78 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80059e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ea:	789b      	ldrb	r3, [r3, #2]
 80059ec:	461a      	mov	r2, r3
 80059ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059f0:	fb02 f303 	mul.w	r3, r2, r3
 80059f4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80059f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a00:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a04:	895b      	ldrh	r3, [r3, #10]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d008      	beq.n	8005a1c <find_volume+0x228>
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0c:	895b      	ldrh	r3, [r3, #10]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a12:	895b      	ldrh	r3, [r3, #10]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	4013      	ands	r3, r2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <find_volume+0x22c>
 8005a1c:	230d      	movs	r3, #13
 8005a1e:	e12b      	b.n	8005c78 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a22:	3330      	adds	r3, #48	; 0x30
 8005a24:	3311      	adds	r3, #17
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fe fcd8 	bl	80043dc <ld_word>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	461a      	mov	r2, r3
 8005a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a32:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a36:	891b      	ldrh	r3, [r3, #8]
 8005a38:	f003 030f 	and.w	r3, r3, #15
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <find_volume+0x252>
 8005a42:	230d      	movs	r3, #13
 8005a44:	e118      	b.n	8005c78 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a48:	3330      	adds	r3, #48	; 0x30
 8005a4a:	3313      	adds	r3, #19
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fe fcc5 	bl	80043dc <ld_word>
 8005a52:	4603      	mov	r3, r0
 8005a54:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d106      	bne.n	8005a6a <find_volume+0x276>
 8005a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5e:	3330      	adds	r3, #48	; 0x30
 8005a60:	3320      	adds	r3, #32
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fe fcd1 	bl	800440a <ld_dword>
 8005a68:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6c:	3330      	adds	r3, #48	; 0x30
 8005a6e:	330e      	adds	r3, #14
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7fe fcb3 	bl	80043dc <ld_word>
 8005a76:	4603      	mov	r3, r0
 8005a78:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005a7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <find_volume+0x290>
 8005a80:	230d      	movs	r3, #13
 8005a82:	e0f9      	b.n	8005c78 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005a84:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a88:	4413      	add	r3, r2
 8005a8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a8c:	8912      	ldrh	r2, [r2, #8]
 8005a8e:	0912      	lsrs	r2, r2, #4
 8005a90:	b292      	uxth	r2, r2
 8005a92:	4413      	add	r3, r2
 8005a94:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d201      	bcs.n	8005aa2 <find_volume+0x2ae>
 8005a9e:	230d      	movs	r3, #13
 8005aa0:	e0ea      	b.n	8005c78 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005aa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aaa:	8952      	ldrh	r2, [r2, #10]
 8005aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d103      	bne.n	8005ac0 <find_volume+0x2cc>
 8005ab8:	230d      	movs	r3, #13
 8005aba:	e0dd      	b.n	8005c78 <find_volume+0x484>
 8005abc:	200008bc 	.word	0x200008bc
		fmt = FS_FAT32;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d802      	bhi.n	8005ad6 <find_volume+0x2e2>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d802      	bhi.n	8005ae6 <find_volume+0x2f2>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	1c9a      	adds	r2, r3, #2
 8005aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aec:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005af2:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005af4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005af8:	441a      	add	r2, r3
 8005afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afc:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005afe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b02:	441a      	add	r2, r3
 8005b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b06:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005b08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b0c:	2b03      	cmp	r3, #3
 8005b0e:	d11e      	bne.n	8005b4e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b12:	3330      	adds	r3, #48	; 0x30
 8005b14:	332a      	adds	r3, #42	; 0x2a
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fe fc60 	bl	80043dc <ld_word>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <find_volume+0x332>
 8005b22:	230d      	movs	r3, #13
 8005b24:	e0a8      	b.n	8005c78 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b28:	891b      	ldrh	r3, [r3, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <find_volume+0x33e>
 8005b2e:	230d      	movs	r3, #13
 8005b30:	e0a2      	b.n	8005c78 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b34:	3330      	adds	r3, #48	; 0x30
 8005b36:	332c      	adds	r3, #44	; 0x2c
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fe fc66 	bl	800440a <ld_dword>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b42:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b4c:	e01f      	b.n	8005b8e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b50:	891b      	ldrh	r3, [r3, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <find_volume+0x366>
 8005b56:	230d      	movs	r3, #13
 8005b58:	e08e      	b.n	8005c78 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5c:	6a1a      	ldr	r2, [r3, #32]
 8005b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b60:	441a      	add	r2, r3
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005b66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d103      	bne.n	8005b76 <find_volume+0x382>
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	e00a      	b.n	8005b8c <find_volume+0x398>
 8005b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b78:	695a      	ldr	r2, [r3, #20]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	4413      	add	r3, r2
 8005b80:	085a      	lsrs	r2, r3, #1
 8005b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005b8c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b90:	699a      	ldr	r2, [r3, #24]
 8005b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b94:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005b98:	0a5b      	lsrs	r3, r3, #9
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d201      	bcs.n	8005ba2 <find_volume+0x3ae>
 8005b9e:	230d      	movs	r3, #13
 8005ba0:	e06a      	b.n	8005c78 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba8:	611a      	str	r2, [r3, #16]
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	691a      	ldr	r2, [r3, #16]
 8005bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb0:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	2280      	movs	r2, #128	; 0x80
 8005bb6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005bb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d149      	bne.n	8005c54 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc2:	3330      	adds	r3, #48	; 0x30
 8005bc4:	3330      	adds	r3, #48	; 0x30
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fe fc08 	bl	80043dc <ld_word>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d140      	bne.n	8005c54 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005bda:	f7fe fea1 	bl	8004920 <move_window>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d137      	bne.n	8005c54 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8005be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be6:	2200      	movs	r2, #0
 8005be8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bec:	3330      	adds	r3, #48	; 0x30
 8005bee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fbf2 	bl	80043dc <ld_word>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d127      	bne.n	8005c54 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c06:	3330      	adds	r3, #48	; 0x30
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fe fbfe 	bl	800440a <ld_dword>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	4a1b      	ldr	r2, [pc, #108]	; (8005c80 <find_volume+0x48c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d11e      	bne.n	8005c54 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c18:	3330      	adds	r3, #48	; 0x30
 8005c1a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe fbf3 	bl	800440a <ld_dword>
 8005c24:	4603      	mov	r3, r0
 8005c26:	4a17      	ldr	r2, [pc, #92]	; (8005c84 <find_volume+0x490>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d113      	bne.n	8005c54 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2e:	3330      	adds	r3, #48	; 0x30
 8005c30:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fe fbe8 	bl	800440a <ld_dword>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c42:	3330      	adds	r3, #48	; 0x30
 8005c44:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fe fbde 	bl	800440a <ld_dword>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c56:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005c5a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	; (8005c88 <find_volume+0x494>)
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	3301      	adds	r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	4b08      	ldr	r3, [pc, #32]	; (8005c88 <find_volume+0x494>)
 8005c66:	801a      	strh	r2, [r3, #0]
 8005c68:	4b07      	ldr	r3, [pc, #28]	; (8005c88 <find_volume+0x494>)
 8005c6a:	881a      	ldrh	r2, [r3, #0]
 8005c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005c70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c72:	f7fe fded 	bl	8004850 <clear_lock>
#endif
	return FR_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3758      	adds	r7, #88	; 0x58
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	41615252 	.word	0x41615252
 8005c84:	61417272 	.word	0x61417272
 8005c88:	200008c0 	.word	0x200008c0

08005c8c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005c96:	2309      	movs	r3, #9
 8005c98:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d01c      	beq.n	8005cda <validate+0x4e>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d018      	beq.n	8005cda <validate+0x4e>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d013      	beq.n	8005cda <validate+0x4e>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	889a      	ldrh	r2, [r3, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	88db      	ldrh	r3, [r3, #6]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d10c      	bne.n	8005cda <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	785b      	ldrb	r3, [r3, #1]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fe faea 	bl	80042a0 <disk_status>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <validate+0x4e>
			res = FR_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005cda:	7bfb      	ldrb	r3, [r7, #15]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d102      	bne.n	8005ce6 <validate+0x5a>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	e000      	b.n	8005ce8 <validate+0x5c>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	6013      	str	r3, [r2, #0]
	return res;
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
	...

08005cf8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	4613      	mov	r3, r2
 8005d04:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005d0a:	f107 0310 	add.w	r3, r7, #16
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7ff fcd7 	bl	80056c2 <get_ldnumber>
 8005d14:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	da01      	bge.n	8005d20 <f_mount+0x28>
 8005d1c:	230b      	movs	r3, #11
 8005d1e:	e02b      	b.n	8005d78 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005d20:	4a17      	ldr	r2, [pc, #92]	; (8005d80 <f_mount+0x88>)
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d28:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d005      	beq.n	8005d3c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005d30:	69b8      	ldr	r0, [r7, #24]
 8005d32:	f7fe fd8d 	bl	8004850 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	490d      	ldr	r1, [pc, #52]	; (8005d80 <f_mount+0x88>)
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <f_mount+0x66>
 8005d58:	79fb      	ldrb	r3, [r7, #7]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d001      	beq.n	8005d62 <f_mount+0x6a>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	e00a      	b.n	8005d78 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005d62:	f107 010c 	add.w	r1, r7, #12
 8005d66:	f107 0308 	add.w	r3, r7, #8
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7ff fd41 	bl	80057f4 <find_volume>
 8005d72:	4603      	mov	r3, r0
 8005d74:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3720      	adds	r7, #32
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	200008bc 	.word	0x200008bc

08005d84 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b098      	sub	sp, #96	; 0x60
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <f_open+0x18>
 8005d98:	2309      	movs	r3, #9
 8005d9a:	e1ad      	b.n	80060f8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005d9c:	79fb      	ldrb	r3, [r7, #7]
 8005d9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005da2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005da4:	79fa      	ldrb	r2, [r7, #7]
 8005da6:	f107 0110 	add.w	r1, r7, #16
 8005daa:	f107 0308 	add.w	r3, r7, #8
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff fd20 	bl	80057f4 <find_volume>
 8005db4:	4603      	mov	r3, r0
 8005db6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005dba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f040 8191 	bne.w	80060e6 <f_open+0x362>
		dj.obj.fs = fs;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	f107 0314 	add.w	r3, r7, #20
 8005dce:	4611      	mov	r1, r2
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7ff fc05 	bl	80055e0 <follow_path>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005ddc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d11a      	bne.n	8005e1a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005de4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005de8:	b25b      	sxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	da03      	bge.n	8005df6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8005dee:	2306      	movs	r3, #6
 8005df0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005df4:	e011      	b.n	8005e1a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005df6:	79fb      	ldrb	r3, [r7, #7]
 8005df8:	f023 0301 	bic.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	bf14      	ite	ne
 8005e00:	2301      	movne	r3, #1
 8005e02:	2300      	moveq	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	461a      	mov	r2, r3
 8005e08:	f107 0314 	add.w	r3, r7, #20
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fe fbdc 	bl	80045cc <chk_lock>
 8005e14:	4603      	mov	r3, r0
 8005e16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005e1a:	79fb      	ldrb	r3, [r7, #7]
 8005e1c:	f003 031c 	and.w	r3, r3, #28
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d07f      	beq.n	8005f24 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005e24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d017      	beq.n	8005e5c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005e2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e30:	2b04      	cmp	r3, #4
 8005e32:	d10e      	bne.n	8005e52 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005e34:	f7fe fc24 	bl	8004680 <enq_lock>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d006      	beq.n	8005e4c <f_open+0xc8>
 8005e3e:	f107 0314 	add.w	r3, r7, #20
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff fb05 	bl	8005452 <dir_register>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	e000      	b.n	8005e4e <f_open+0xca>
 8005e4c:	2312      	movs	r3, #18
 8005e4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005e52:	79fb      	ldrb	r3, [r7, #7]
 8005e54:	f043 0308 	orr.w	r3, r3, #8
 8005e58:	71fb      	strb	r3, [r7, #7]
 8005e5a:	e010      	b.n	8005e7e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005e5c:	7ebb      	ldrb	r3, [r7, #26]
 8005e5e:	f003 0311 	and.w	r3, r3, #17
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <f_open+0xea>
					res = FR_DENIED;
 8005e66:	2307      	movs	r3, #7
 8005e68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005e6c:	e007      	b.n	8005e7e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005e6e:	79fb      	ldrb	r3, [r7, #7]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <f_open+0xfa>
 8005e78:	2308      	movs	r3, #8
 8005e7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005e7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d168      	bne.n	8005f58 <f_open+0x1d4>
 8005e86:	79fb      	ldrb	r3, [r7, #7]
 8005e88:	f003 0308 	and.w	r3, r3, #8
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d063      	beq.n	8005f58 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005e90:	f7fd fccc 	bl	800382c <get_fattime>
 8005e94:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e98:	330e      	adds	r3, #14
 8005e9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fe faf0 	bl	8004482 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea4:	3316      	adds	r3, #22
 8005ea6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fe faea 	bl	8004482 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb0:	330b      	adds	r3, #11
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eba:	4611      	mov	r1, r2
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7ff fa34 	bl	800532a <ld_clust>
 8005ec2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005ec8:	2200      	movs	r2, #0
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff fa4c 	bl	8005368 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed2:	331c      	adds	r3, #28
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fe fad3 	bl	8004482 <st_dword>
					fs->wflag = 1;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d037      	beq.n	8005f58 <f_open+0x1d4>
						dw = fs->winsect;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005eee:	f107 0314 	add.w	r3, r7, #20
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fe ff60 	bl	8004dbc <remove_chain>
 8005efc:	4603      	mov	r3, r0
 8005efe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005f02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d126      	bne.n	8005f58 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fe fd06 	bl	8004920 <move_window>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f1e:	3a01      	subs	r2, #1
 8005f20:	60da      	str	r2, [r3, #12]
 8005f22:	e019      	b.n	8005f58 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005f24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d115      	bne.n	8005f58 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005f2c:	7ebb      	ldrb	r3, [r7, #26]
 8005f2e:	f003 0310 	and.w	r3, r3, #16
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <f_open+0x1ba>
					res = FR_NO_FILE;
 8005f36:	2304      	movs	r3, #4
 8005f38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005f3c:	e00c      	b.n	8005f58 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005f3e:	79fb      	ldrb	r3, [r7, #7]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d007      	beq.n	8005f58 <f_open+0x1d4>
 8005f48:	7ebb      	ldrb	r3, [r7, #26]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <f_open+0x1d4>
						res = FR_DENIED;
 8005f52:	2307      	movs	r3, #7
 8005f54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005f58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d128      	bne.n	8005fb2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005f60:	79fb      	ldrb	r3, [r7, #7]
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005f6a:	79fb      	ldrb	r3, [r7, #7]
 8005f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f70:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005f80:	79fb      	ldrb	r3, [r7, #7]
 8005f82:	f023 0301 	bic.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	bf14      	ite	ne
 8005f8a:	2301      	movne	r3, #1
 8005f8c:	2300      	moveq	r3, #0
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	461a      	mov	r2, r3
 8005f92:	f107 0314 	add.w	r3, r7, #20
 8005f96:	4611      	mov	r1, r2
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fe fb91 	bl	80046c0 <inc_lock>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d102      	bne.n	8005fb2 <f_open+0x22e>
 8005fac:	2302      	movs	r3, #2
 8005fae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005fb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f040 8095 	bne.w	80060e6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fc0:	4611      	mov	r1, r2
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7ff f9b1 	bl	800532a <ld_clust>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd0:	331c      	adds	r3, #28
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fe fa19 	bl	800440a <ld_dword>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	88da      	ldrh	r2, [r3, #6]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	79fa      	ldrb	r2, [r7, #7]
 8005ff6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3330      	adds	r3, #48	; 0x30
 800600e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006012:	2100      	movs	r1, #0
 8006014:	4618      	mov	r0, r3
 8006016:	f7fe fa7f 	bl	8004518 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800601a:	79fb      	ldrb	r3, [r7, #7]
 800601c:	f003 0320 	and.w	r3, r3, #32
 8006020:	2b00      	cmp	r3, #0
 8006022:	d060      	beq.n	80060e6 <f_open+0x362>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d05c      	beq.n	80060e6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	68da      	ldr	r2, [r3, #12]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	895b      	ldrh	r3, [r3, #10]
 8006038:	025b      	lsls	r3, r3, #9
 800603a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	657b      	str	r3, [r7, #84]	; 0x54
 8006048:	e016      	b.n	8006078 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800604e:	4618      	mov	r0, r3
 8006050:	f7fe fd20 	bl	8004a94 <get_fat>
 8006054:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006058:	2b01      	cmp	r3, #1
 800605a:	d802      	bhi.n	8006062 <f_open+0x2de>
 800605c:	2302      	movs	r3, #2
 800605e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006068:	d102      	bne.n	8006070 <f_open+0x2ec>
 800606a:	2301      	movs	r3, #1
 800606c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006070:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	657b      	str	r3, [r7, #84]	; 0x54
 8006078:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800607c:	2b00      	cmp	r3, #0
 800607e:	d103      	bne.n	8006088 <f_open+0x304>
 8006080:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006084:	429a      	cmp	r2, r3
 8006086:	d8e0      	bhi.n	800604a <f_open+0x2c6>
				}
				fp->clust = clst;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800608c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800608e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006092:	2b00      	cmp	r3, #0
 8006094:	d127      	bne.n	80060e6 <f_open+0x362>
 8006096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609c:	2b00      	cmp	r3, #0
 800609e:	d022      	beq.n	80060e6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fe fcd7 	bl	8004a58 <clust2sect>
 80060aa:	6478      	str	r0, [r7, #68]	; 0x44
 80060ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d103      	bne.n	80060ba <f_open+0x336>
						res = FR_INT_ERR;
 80060b2:	2302      	movs	r3, #2
 80060b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80060b8:	e015      	b.n	80060e6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80060ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060bc:	0a5a      	lsrs	r2, r3, #9
 80060be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060c0:	441a      	add	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	7858      	ldrb	r0, [r3, #1]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a1a      	ldr	r2, [r3, #32]
 80060d4:	2301      	movs	r3, #1
 80060d6:	f7fe f923 	bl	8004320 <disk_read>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <f_open+0x362>
 80060e0:	2301      	movs	r3, #1
 80060e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80060e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d002      	beq.n	80060f4 <f_open+0x370>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80060f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3760      	adds	r7, #96	; 0x60
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08e      	sub	sp, #56	; 0x38
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
 800610c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2200      	movs	r2, #0
 8006116:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f107 0214 	add.w	r2, r7, #20
 800611e:	4611      	mov	r1, r2
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff fdb3 	bl	8005c8c <validate>
 8006126:	4603      	mov	r3, r0
 8006128:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800612c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006130:	2b00      	cmp	r3, #0
 8006132:	d107      	bne.n	8006144 <f_read+0x44>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	7d5b      	ldrb	r3, [r3, #21]
 8006138:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800613c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <f_read+0x4a>
 8006144:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006148:	e115      	b.n	8006376 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	7d1b      	ldrb	r3, [r3, #20]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <f_read+0x5a>
 8006156:	2307      	movs	r3, #7
 8006158:	e10d      	b.n	8006376 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	429a      	cmp	r2, r3
 800616c:	f240 80fe 	bls.w	800636c <f_read+0x26c>
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006174:	e0fa      	b.n	800636c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800617e:	2b00      	cmp	r3, #0
 8006180:	f040 80c6 	bne.w	8006310 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	0a5b      	lsrs	r3, r3, #9
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	8952      	ldrh	r2, [r2, #10]
 800618e:	3a01      	subs	r2, #1
 8006190:	4013      	ands	r3, r2
 8006192:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d12f      	bne.n	80061fa <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d103      	bne.n	80061aa <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	633b      	str	r3, [r7, #48]	; 0x30
 80061a8:	e013      	b.n	80061d2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d007      	beq.n	80061c2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	4619      	mov	r1, r3
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f7fe fefc 	bl	8004fb6 <clmt_clust>
 80061be:	6338      	str	r0, [r7, #48]	; 0x30
 80061c0:	e007      	b.n	80061d2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	4619      	mov	r1, r3
 80061ca:	4610      	mov	r0, r2
 80061cc:	f7fe fc62 	bl	8004a94 <get_fat>
 80061d0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d804      	bhi.n	80061e2 <f_read+0xe2>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2202      	movs	r2, #2
 80061dc:	755a      	strb	r2, [r3, #21]
 80061de:	2302      	movs	r3, #2
 80061e0:	e0c9      	b.n	8006376 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e8:	d104      	bne.n	80061f4 <f_read+0xf4>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	755a      	strb	r2, [r3, #21]
 80061f0:	2301      	movs	r3, #1
 80061f2:	e0c0      	b.n	8006376 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061f8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	69db      	ldr	r3, [r3, #28]
 8006200:	4619      	mov	r1, r3
 8006202:	4610      	mov	r0, r2
 8006204:	f7fe fc28 	bl	8004a58 <clust2sect>
 8006208:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d104      	bne.n	800621a <f_read+0x11a>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2202      	movs	r2, #2
 8006214:	755a      	strb	r2, [r3, #21]
 8006216:	2302      	movs	r3, #2
 8006218:	e0ad      	b.n	8006376 <f_read+0x276>
			sect += csect;
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	4413      	add	r3, r2
 8006220:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	0a5b      	lsrs	r3, r3, #9
 8006226:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622a:	2b00      	cmp	r3, #0
 800622c:	d039      	beq.n	80062a2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006232:	4413      	add	r3, r2
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	8952      	ldrh	r2, [r2, #10]
 8006238:	4293      	cmp	r3, r2
 800623a:	d905      	bls.n	8006248 <f_read+0x148>
					cc = fs->csize - csect;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	895b      	ldrh	r3, [r3, #10]
 8006240:	461a      	mov	r2, r3
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	7858      	ldrb	r0, [r3, #1]
 800624c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006252:	f7fe f865 	bl	8004320 <disk_read>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d004      	beq.n	8006266 <f_read+0x166>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2201      	movs	r2, #1
 8006260:	755a      	strb	r2, [r3, #21]
 8006262:	2301      	movs	r3, #1
 8006264:	e087      	b.n	8006376 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	7d1b      	ldrb	r3, [r3, #20]
 800626a:	b25b      	sxtb	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	da14      	bge.n	800629a <f_read+0x19a>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6a1a      	ldr	r2, [r3, #32]
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800627a:	429a      	cmp	r2, r3
 800627c:	d90d      	bls.n	800629a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a1a      	ldr	r2, [r3, #32]
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	025b      	lsls	r3, r3, #9
 8006288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800628a:	18d0      	adds	r0, r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	3330      	adds	r3, #48	; 0x30
 8006290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006294:	4619      	mov	r1, r3
 8006296:	f7fe f91f 	bl	80044d8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	025b      	lsls	r3, r3, #9
 800629e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80062a0:	e050      	b.n	8006344 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d02e      	beq.n	800630a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	7d1b      	ldrb	r3, [r3, #20]
 80062b0:	b25b      	sxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	da18      	bge.n	80062e8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	7858      	ldrb	r0, [r3, #1]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a1a      	ldr	r2, [r3, #32]
 80062c4:	2301      	movs	r3, #1
 80062c6:	f7fe f84b 	bl	8004360 <disk_write>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <f_read+0x1da>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2201      	movs	r2, #1
 80062d4:	755a      	strb	r2, [r3, #21]
 80062d6:	2301      	movs	r3, #1
 80062d8:	e04d      	b.n	8006376 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	7d1b      	ldrb	r3, [r3, #20]
 80062de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	7858      	ldrb	r0, [r3, #1]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80062f2:	2301      	movs	r3, #1
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	f7fe f813 	bl	8004320 <disk_read>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d004      	beq.n	800630a <f_read+0x20a>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2201      	movs	r2, #1
 8006304:	755a      	strb	r2, [r3, #21]
 8006306:	2301      	movs	r3, #1
 8006308:	e035      	b.n	8006376 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006318:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800631c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800631e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	429a      	cmp	r2, r3
 8006324:	d901      	bls.n	800632a <f_read+0x22a>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006338:	4413      	add	r3, r2
 800633a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800633c:	4619      	mov	r1, r3
 800633e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006340:	f7fe f8ca 	bl	80044d8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006348:	4413      	add	r3, r2
 800634a:	627b      	str	r3, [r7, #36]	; 0x24
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	699a      	ldr	r2, [r3, #24]
 8006350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006352:	441a      	add	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	619a      	str	r2, [r3, #24]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635e:	441a      	add	r2, r3
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	f47f af01 	bne.w	8006176 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3738      	adds	r7, #56	; 0x38
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b086      	sub	sp, #24
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f107 0208 	add.w	r2, r7, #8
 800638c:	4611      	mov	r1, r2
 800638e:	4618      	mov	r0, r3
 8006390:	f7ff fc7c 	bl	8005c8c <validate>
 8006394:	4603      	mov	r3, r0
 8006396:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d168      	bne.n	8006470 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	7d1b      	ldrb	r3, [r3, #20]
 80063a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d062      	beq.n	8006470 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	7d1b      	ldrb	r3, [r3, #20]
 80063ae:	b25b      	sxtb	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	da15      	bge.n	80063e0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	7858      	ldrb	r0, [r3, #1]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1a      	ldr	r2, [r3, #32]
 80063c2:	2301      	movs	r3, #1
 80063c4:	f7fd ffcc 	bl	8004360 <disk_write>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <f_sync+0x54>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e04f      	b.n	8006472 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	7d1b      	ldrb	r3, [r3, #20]
 80063d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80063e0:	f7fd fa24 	bl	800382c <get_fattime>
 80063e4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	4619      	mov	r1, r3
 80063ee:	4610      	mov	r0, r2
 80063f0:	f7fe fa96 	bl	8004920 <move_window>
 80063f4:	4603      	mov	r3, r0
 80063f6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80063f8:	7dfb      	ldrb	r3, [r7, #23]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d138      	bne.n	8006470 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006402:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	330b      	adds	r3, #11
 8006408:	781a      	ldrb	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	330b      	adds	r3, #11
 800640e:	f042 0220 	orr.w	r2, r2, #32
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6818      	ldr	r0, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	461a      	mov	r2, r3
 8006420:	68f9      	ldr	r1, [r7, #12]
 8006422:	f7fe ffa1 	bl	8005368 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f103 021c 	add.w	r2, r3, #28
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	4619      	mov	r1, r3
 8006432:	4610      	mov	r0, r2
 8006434:	f7fe f825 	bl	8004482 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3316      	adds	r3, #22
 800643c:	6939      	ldr	r1, [r7, #16]
 800643e:	4618      	mov	r0, r3
 8006440:	f7fe f81f 	bl	8004482 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3312      	adds	r3, #18
 8006448:	2100      	movs	r1, #0
 800644a:	4618      	mov	r0, r3
 800644c:	f7fd ffff 	bl	800444e <st_word>
					fs->wflag = 1;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2201      	movs	r2, #1
 8006454:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	4618      	mov	r0, r3
 800645a:	f7fe fa8f 	bl	800497c <sync_fs>
 800645e:	4603      	mov	r3, r0
 8006460:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	7d1b      	ldrb	r3, [r3, #20]
 8006466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800646a:	b2da      	uxtb	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006470:	7dfb      	ldrb	r3, [r7, #23]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b084      	sub	sp, #16
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7ff ff7b 	bl	800637e <f_sync>
 8006488:	4603      	mov	r3, r0
 800648a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d118      	bne.n	80064c4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f107 0208 	add.w	r2, r7, #8
 8006498:	4611      	mov	r1, r2
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff fbf6 	bl	8005c8c <validate>
 80064a0:	4603      	mov	r3, r0
 80064a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10c      	bne.n	80064c4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fe f994 	bl	80047dc <dec_lock>
 80064b4:	4603      	mov	r3, r0
 80064b6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d102      	bne.n	80064c4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	4613      	mov	r3, r2
 80064dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80064de:	2301      	movs	r3, #1
 80064e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80064e2:	2300      	movs	r3, #0
 80064e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80064e6:	4b1e      	ldr	r3, [pc, #120]	; (8006560 <FATFS_LinkDriverEx+0x90>)
 80064e8:	7a5b      	ldrb	r3, [r3, #9]
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d131      	bne.n	8006554 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80064f0:	4b1b      	ldr	r3, [pc, #108]	; (8006560 <FATFS_LinkDriverEx+0x90>)
 80064f2:	7a5b      	ldrb	r3, [r3, #9]
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	461a      	mov	r2, r3
 80064f8:	4b19      	ldr	r3, [pc, #100]	; (8006560 <FATFS_LinkDriverEx+0x90>)
 80064fa:	2100      	movs	r1, #0
 80064fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80064fe:	4b18      	ldr	r3, [pc, #96]	; (8006560 <FATFS_LinkDriverEx+0x90>)
 8006500:	7a5b      	ldrb	r3, [r3, #9]
 8006502:	b2db      	uxtb	r3, r3
 8006504:	4a16      	ldr	r2, [pc, #88]	; (8006560 <FATFS_LinkDriverEx+0x90>)
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800650e:	4b14      	ldr	r3, [pc, #80]	; (8006560 <FATFS_LinkDriverEx+0x90>)
 8006510:	7a5b      	ldrb	r3, [r3, #9]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	461a      	mov	r2, r3
 8006516:	4b12      	ldr	r3, [pc, #72]	; (8006560 <FATFS_LinkDriverEx+0x90>)
 8006518:	4413      	add	r3, r2
 800651a:	79fa      	ldrb	r2, [r7, #7]
 800651c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800651e:	4b10      	ldr	r3, [pc, #64]	; (8006560 <FATFS_LinkDriverEx+0x90>)
 8006520:	7a5b      	ldrb	r3, [r3, #9]
 8006522:	b2db      	uxtb	r3, r3
 8006524:	1c5a      	adds	r2, r3, #1
 8006526:	b2d1      	uxtb	r1, r2
 8006528:	4a0d      	ldr	r2, [pc, #52]	; (8006560 <FATFS_LinkDriverEx+0x90>)
 800652a:	7251      	strb	r1, [r2, #9]
 800652c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800652e:	7dbb      	ldrb	r3, [r7, #22]
 8006530:	3330      	adds	r3, #48	; 0x30
 8006532:	b2da      	uxtb	r2, r3
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	3301      	adds	r3, #1
 800653c:	223a      	movs	r2, #58	; 0x3a
 800653e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	3302      	adds	r3, #2
 8006544:	222f      	movs	r2, #47	; 0x2f
 8006546:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	3303      	adds	r3, #3
 800654c:	2200      	movs	r2, #0
 800654e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006550:	2300      	movs	r3, #0
 8006552:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006554:	7dfb      	ldrb	r3, [r7, #23]
}
 8006556:	4618      	mov	r0, r3
 8006558:	371c      	adds	r7, #28
 800655a:	46bd      	mov	sp, r7
 800655c:	bc80      	pop	{r7}
 800655e:	4770      	bx	lr
 8006560:	200008e4 	.word	0x200008e4

08006564 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800656e:	2200      	movs	r2, #0
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7ff ffac 	bl	80064d0 <FATFS_LinkDriverEx>
 8006578:	4603      	mov	r3, r0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <__libc_init_array>:
 8006584:	b570      	push	{r4, r5, r6, lr}
 8006586:	2600      	movs	r6, #0
 8006588:	4d0c      	ldr	r5, [pc, #48]	; (80065bc <__libc_init_array+0x38>)
 800658a:	4c0d      	ldr	r4, [pc, #52]	; (80065c0 <__libc_init_array+0x3c>)
 800658c:	1b64      	subs	r4, r4, r5
 800658e:	10a4      	asrs	r4, r4, #2
 8006590:	42a6      	cmp	r6, r4
 8006592:	d109      	bne.n	80065a8 <__libc_init_array+0x24>
 8006594:	f000 f822 	bl	80065dc <_init>
 8006598:	2600      	movs	r6, #0
 800659a:	4d0a      	ldr	r5, [pc, #40]	; (80065c4 <__libc_init_array+0x40>)
 800659c:	4c0a      	ldr	r4, [pc, #40]	; (80065c8 <__libc_init_array+0x44>)
 800659e:	1b64      	subs	r4, r4, r5
 80065a0:	10a4      	asrs	r4, r4, #2
 80065a2:	42a6      	cmp	r6, r4
 80065a4:	d105      	bne.n	80065b2 <__libc_init_array+0x2e>
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
 80065a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ac:	4798      	blx	r3
 80065ae:	3601      	adds	r6, #1
 80065b0:	e7ee      	b.n	8006590 <__libc_init_array+0xc>
 80065b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b6:	4798      	blx	r3
 80065b8:	3601      	adds	r6, #1
 80065ba:	e7f2      	b.n	80065a2 <__libc_init_array+0x1e>
 80065bc:	080066f4 	.word	0x080066f4
 80065c0:	080066f4 	.word	0x080066f4
 80065c4:	080066f4 	.word	0x080066f4
 80065c8:	080066f8 	.word	0x080066f8

080065cc <memset>:
 80065cc:	4603      	mov	r3, r0
 80065ce:	4402      	add	r2, r0
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d100      	bne.n	80065d6 <memset+0xa>
 80065d4:	4770      	bx	lr
 80065d6:	f803 1b01 	strb.w	r1, [r3], #1
 80065da:	e7f9      	b.n	80065d0 <memset+0x4>

080065dc <_init>:
 80065dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065de:	bf00      	nop
 80065e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e2:	bc08      	pop	{r3}
 80065e4:	469e      	mov	lr, r3
 80065e6:	4770      	bx	lr

080065e8 <_fini>:
 80065e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ea:	bf00      	nop
 80065ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ee:	bc08      	pop	{r3}
 80065f0:	469e      	mov	lr, r3
 80065f2:	4770      	bx	lr
