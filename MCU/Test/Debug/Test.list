
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e38  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08006f74  08006f74  00016f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007088  08007088  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007088  08007088  00017088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007090  08007090  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007090  08007090  00017090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007094  08007094  00017094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b2c  20000088  08007120  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bb4  08007120  00021bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000181e9  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000376c  00000000  00000000  0003829a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  0003ba08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  0003cb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a20  00000000  00000000  0003dad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158b0  00000000  00000000  000564f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e52c  00000000  00000000  0006bda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa2cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045f8  00000000  00000000  000fa320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000088 	.word	0x20000088
 8000158:	00000000 	.word	0x00000000
 800015c:	08006f5c 	.word	0x08006f5c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000008c 	.word	0x2000008c
 8000178:	08006f5c 	.word	0x08006f5c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <enableHex>:
#include "leds.h"

void enableHex(SPI_HandleTypeDef * hspi){
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	writeHexVal(hspi, LED_DECODE_MODE, 0xFF);
 800047c:	22ff      	movs	r2, #255	; 0xff
 800047e:	2101      	movs	r1, #1
 8000480:	6878      	ldr	r0, [r7, #4]
 8000482:	f000 f959 	bl	8000738 <writeHexVal>
}
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <setIntensity>:

void setIntensity(SPI_HandleTypeDef * hspi, uint8_t val){
 800048e:	b580      	push	{r7, lr}
 8000490:	b082      	sub	sp, #8
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
 8000496:	460b      	mov	r3, r1
 8000498:	70fb      	strb	r3, [r7, #3]
	writeHexVal(hspi, LED_INTENSITY, val);
 800049a:	78fb      	ldrb	r3, [r7, #3]
 800049c:	461a      	mov	r2, r3
 800049e:	2102      	movs	r1, #2
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	f000 f949 	bl	8000738 <writeHexVal>
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <setScanLimit>:

void setScanLimit(SPI_HandleTypeDef * hspi, uint8_t val){
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b082      	sub	sp, #8
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
 80004b6:	460b      	mov	r3, r1
 80004b8:	70fb      	strb	r3, [r7, #3]
	writeHexVal(hspi, LED_SCAN_LIMIT, val);
 80004ba:	78fb      	ldrb	r3, [r7, #3]
 80004bc:	461a      	mov	r2, r3
 80004be:	2103      	movs	r1, #3
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f000 f939 	bl	8000738 <writeHexVal>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <enableOutput>:

void enableOutput(SPI_HandleTypeDef * hspi){
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
	writeHexVal(hspi, LED_CONFIGURATION, 0x01);
 80004d6:	2201      	movs	r2, #1
 80004d8:	2104      	movs	r1, #4
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f000 f92c 	bl	8000738 <writeHexVal>
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <disableOutput>:

void disableOutput(SPI_HandleTypeDef * hspi){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	writeHexVal(hspi, LED_CONFIGURATION, 0x00);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2104      	movs	r1, #4
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f000 f91f 	bl	8000738 <writeHexVal>
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <writeTime>:

void writeTime(SPI_HandleTypeDef * hspi, int time, int player){
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
	int sec = time % 60;
 8000510:	68ba      	ldr	r2, [r7, #8]
 8000512:	4b4d      	ldr	r3, [pc, #308]	; (8000648 <writeTime+0x144>)
 8000514:	fb83 1302 	smull	r1, r3, r3, r2
 8000518:	4413      	add	r3, r2
 800051a:	1159      	asrs	r1, r3, #5
 800051c:	17d3      	asrs	r3, r2, #31
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	460b      	mov	r3, r1
 8000522:	011b      	lsls	r3, r3, #4
 8000524:	1a5b      	subs	r3, r3, r1
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	617b      	str	r3, [r7, #20]
	int min = time / 60;
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	4a46      	ldr	r2, [pc, #280]	; (8000648 <writeTime+0x144>)
 8000530:	fb82 1203 	smull	r1, r2, r2, r3
 8000534:	441a      	add	r2, r3
 8000536:	1152      	asrs	r2, r2, #5
 8000538:	17db      	asrs	r3, r3, #31
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	613b      	str	r3, [r7, #16]
	if (!player){
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d13e      	bne.n	80005c2 <writeTime+0xbe>
		writeHexVal(hspi, LED_1, sec % 10);
 8000544:	697a      	ldr	r2, [r7, #20]
 8000546:	4b41      	ldr	r3, [pc, #260]	; (800064c <writeTime+0x148>)
 8000548:	fb83 1302 	smull	r1, r3, r3, r2
 800054c:	1099      	asrs	r1, r3, #2
 800054e:	17d3      	asrs	r3, r2, #31
 8000550:	1ac9      	subs	r1, r1, r3
 8000552:	460b      	mov	r3, r1
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	440b      	add	r3, r1
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	1ad1      	subs	r1, r2, r3
 800055c:	b2cb      	uxtb	r3, r1
 800055e:	461a      	mov	r2, r3
 8000560:	2160      	movs	r1, #96	; 0x60
 8000562:	68f8      	ldr	r0, [r7, #12]
 8000564:	f000 f8e8 	bl	8000738 <writeHexVal>
		writeHexVal(hspi, LED_2, sec / 10);
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	4a38      	ldr	r2, [pc, #224]	; (800064c <writeTime+0x148>)
 800056c:	fb82 1203 	smull	r1, r2, r2, r3
 8000570:	1092      	asrs	r2, r2, #2
 8000572:	17db      	asrs	r3, r3, #31
 8000574:	1ad3      	subs	r3, r2, r3
 8000576:	b2db      	uxtb	r3, r3
 8000578:	461a      	mov	r2, r3
 800057a:	2161      	movs	r1, #97	; 0x61
 800057c:	68f8      	ldr	r0, [r7, #12]
 800057e:	f000 f8db 	bl	8000738 <writeHexVal>
		writeHexVal(hspi, LED_3, min % 10);
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	4b31      	ldr	r3, [pc, #196]	; (800064c <writeTime+0x148>)
 8000586:	fb83 1302 	smull	r1, r3, r3, r2
 800058a:	1099      	asrs	r1, r3, #2
 800058c:	17d3      	asrs	r3, r2, #31
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	460b      	mov	r3, r1
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	440b      	add	r3, r1
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	1ad1      	subs	r1, r2, r3
 800059a:	b2cb      	uxtb	r3, r1
 800059c:	461a      	mov	r2, r3
 800059e:	2162      	movs	r1, #98	; 0x62
 80005a0:	68f8      	ldr	r0, [r7, #12]
 80005a2:	f000 f8c9 	bl	8000738 <writeHexVal>
		writeHexVal(hspi, LED_4, min / 10);
 80005a6:	693b      	ldr	r3, [r7, #16]
 80005a8:	4a28      	ldr	r2, [pc, #160]	; (800064c <writeTime+0x148>)
 80005aa:	fb82 1203 	smull	r1, r2, r2, r3
 80005ae:	1092      	asrs	r2, r2, #2
 80005b0:	17db      	asrs	r3, r3, #31
 80005b2:	1ad3      	subs	r3, r2, r3
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	461a      	mov	r2, r3
 80005b8:	2163      	movs	r1, #99	; 0x63
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	f000 f8bc 	bl	8000738 <writeHexVal>
		writeHexVal(hspi, LED_5, sec % 10);
		writeHexVal(hspi, LED_6, sec / 10);
		writeHexVal(hspi, LED_7, min % 10);
		writeHexVal(hspi, LED_8, min / 10);
	}
}
 80005c0:	e03d      	b.n	800063e <writeTime+0x13a>
		writeHexVal(hspi, LED_5, sec % 10);
 80005c2:	697a      	ldr	r2, [r7, #20]
 80005c4:	4b21      	ldr	r3, [pc, #132]	; (800064c <writeTime+0x148>)
 80005c6:	fb83 1302 	smull	r1, r3, r3, r2
 80005ca:	1099      	asrs	r1, r3, #2
 80005cc:	17d3      	asrs	r3, r2, #31
 80005ce:	1ac9      	subs	r1, r1, r3
 80005d0:	460b      	mov	r3, r1
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	440b      	add	r3, r1
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	1ad1      	subs	r1, r2, r3
 80005da:	b2cb      	uxtb	r3, r1
 80005dc:	461a      	mov	r2, r3
 80005de:	2164      	movs	r1, #100	; 0x64
 80005e0:	68f8      	ldr	r0, [r7, #12]
 80005e2:	f000 f8a9 	bl	8000738 <writeHexVal>
		writeHexVal(hspi, LED_6, sec / 10);
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	4a18      	ldr	r2, [pc, #96]	; (800064c <writeTime+0x148>)
 80005ea:	fb82 1203 	smull	r1, r2, r2, r3
 80005ee:	1092      	asrs	r2, r2, #2
 80005f0:	17db      	asrs	r3, r3, #31
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	461a      	mov	r2, r3
 80005f8:	2165      	movs	r1, #101	; 0x65
 80005fa:	68f8      	ldr	r0, [r7, #12]
 80005fc:	f000 f89c 	bl	8000738 <writeHexVal>
		writeHexVal(hspi, LED_7, min % 10);
 8000600:	693a      	ldr	r2, [r7, #16]
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <writeTime+0x148>)
 8000604:	fb83 1302 	smull	r1, r3, r3, r2
 8000608:	1099      	asrs	r1, r3, #2
 800060a:	17d3      	asrs	r3, r2, #31
 800060c:	1ac9      	subs	r1, r1, r3
 800060e:	460b      	mov	r3, r1
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	440b      	add	r3, r1
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	1ad1      	subs	r1, r2, r3
 8000618:	b2cb      	uxtb	r3, r1
 800061a:	461a      	mov	r2, r3
 800061c:	2166      	movs	r1, #102	; 0x66
 800061e:	68f8      	ldr	r0, [r7, #12]
 8000620:	f000 f88a 	bl	8000738 <writeHexVal>
		writeHexVal(hspi, LED_8, min / 10);
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	4a09      	ldr	r2, [pc, #36]	; (800064c <writeTime+0x148>)
 8000628:	fb82 1203 	smull	r1, r2, r2, r3
 800062c:	1092      	asrs	r2, r2, #2
 800062e:	17db      	asrs	r3, r3, #31
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	b2db      	uxtb	r3, r3
 8000634:	461a      	mov	r2, r3
 8000636:	2167      	movs	r1, #103	; 0x67
 8000638:	68f8      	ldr	r0, [r7, #12]
 800063a:	f000 f87d 	bl	8000738 <writeHexVal>
}
 800063e:	bf00      	nop
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	88888889 	.word	0x88888889
 800064c:	66666667 	.word	0x66666667

08000650 <LEDSInit>:

void LEDSInit(SPI_HandleTypeDef * hspi){
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

	// SPI setup
	hspi->Instance = SPI1;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a25      	ldr	r2, [pc, #148]	; (8000700 <LEDSInit+0xb0>)
 800066c:	601a      	str	r2, [r3, #0]
	hspi->Init.Mode = SPI_MODE_MASTER;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000674:	605a      	str	r2, [r3, #4]
	hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
	hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
	hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
	hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
	hspi->Init.NSS = SPI_NSS_SOFT;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000694:	619a      	str	r2, [r3, #24]
	hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2228      	movs	r2, #40	; 0x28
 800069a:	61da      	str	r2, [r3, #28]
	hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
	hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2200      	movs	r2, #0
 80006a6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2200      	movs	r2, #0
 80006ac:	629a      	str	r2, [r3, #40]	; 0x28
	hspi->Init.CRCPolynomial = 10;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	220a      	movs	r2, #10
 80006b2:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_SPI_Init(hspi);
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f002 fd31 	bl	800311c <HAL_SPI_Init>

	// Setting up PB6 for CS
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	4b12      	ldr	r3, [pc, #72]	; (8000704 <LEDSInit+0xb4>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	4a11      	ldr	r2, [pc, #68]	; (8000704 <LEDSInit+0xb4>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	61d3      	str	r3, [r2, #28]
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <LEDSInit+0xb4>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2140      	movs	r1, #64	; 0x40
 80006d6:	480c      	ldr	r0, [pc, #48]	; (8000708 <LEDSInit+0xb8>)
 80006d8:	f001 ff4f 	bl	800257a <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006dc:	2340      	movs	r3, #64	; 0x40
 80006de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	4619      	mov	r1, r3
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <LEDSInit+0xb8>)
 80006f4:	f001 fd9a 	bl	800222c <HAL_GPIO_Init>

}
 80006f8:	bf00      	nop
 80006fa:	3720      	adds	r7, #32
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40013000 	.word	0x40013000
 8000704:	40023800 	.word	0x40023800
 8000708:	40020400 	.word	0x40020400

0800070c <ChessTimerLEDInit>:

void ChessTimerLEDInit(SPI_HandleTypeDef * hspi){
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	enableOutput(hspi);
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff feda 	bl	80004ce <enableOutput>
	setScanLimit(hspi, 0x07);
 800071a:	2107      	movs	r1, #7
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff fec6 	bl	80004ae <setScanLimit>
	setIntensity(hspi, 0x05);
 8000722:	2105      	movs	r1, #5
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff feb2 	bl	800048e <setIntensity>
	enableHex(hspi);
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f7ff fea2 	bl	8000474 <enableHex>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <writeHexVal>:

void writeHexVal(SPI_HandleTypeDef * hspi, uint8_t reg, uint8_t val){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	460b      	mov	r3, r1
 8000742:	70fb      	strb	r3, [r7, #3]
 8000744:	4613      	mov	r3, r2
 8000746:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2140      	movs	r1, #64	; 0x40
 800074c:	480e      	ldr	r0, [pc, #56]	; (8000788 <writeHexVal+0x50>)
 800074e:	f001 ff14 	bl	800257a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2140      	movs	r1, #64	; 0x40
 8000756:	480c      	ldr	r0, [pc, #48]	; (8000788 <writeHexVal+0x50>)
 8000758:	f001 ff0f 	bl	800257a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &reg, 1, 100);
 800075c:	1cf9      	adds	r1, r7, #3
 800075e:	2364      	movs	r3, #100	; 0x64
 8000760:	2201      	movs	r2, #1
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f002 fd63 	bl	800322e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &val, 1, 100);
 8000768:	1cb9      	adds	r1, r7, #2
 800076a:	2364      	movs	r3, #100	; 0x64
 800076c:	2201      	movs	r2, #1
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f002 fd5d 	bl	800322e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2140      	movs	r1, #64	; 0x40
 8000778:	4803      	ldr	r0, [pc, #12]	; (8000788 <writeHexVal+0x50>)
 800077a:	f001 fefe 	bl	800257a <HAL_GPIO_WritePin>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40020400 	.word	0x40020400

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000792:	f001 f896 	bl	80018c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000796:	f000 f83d 	bl	8000814 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM4_Init();
 800079a:	f000 f889 	bl	80008b0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  char * audio[] = {"max.wav", "tom.wav", "jazz.wav"};
 800079e:	4a16      	ldr	r2, [pc, #88]	; (80007f8 <main+0x6c>)
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80007a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  SpeakerInit(&hdac, &htim2);
 80007a8:	4914      	ldr	r1, [pc, #80]	; (80007fc <main+0x70>)
 80007aa:	4815      	ldr	r0, [pc, #84]	; (8000800 <main+0x74>)
 80007ac:	f000 f9aa 	bl	8000b04 <SpeakerInit>
  WaveplayerInit(&hspi2, &hdac);
 80007b0:	4913      	ldr	r1, [pc, #76]	; (8000800 <main+0x74>)
 80007b2:	4814      	ldr	r0, [pc, #80]	; (8000804 <main+0x78>)
 80007b4:	f000 ffee 	bl	8001794 <WaveplayerInit>

  LEDSInit(&hspi1);
 80007b8:	4813      	ldr	r0, [pc, #76]	; (8000808 <main+0x7c>)
 80007ba:	f7ff ff49 	bl	8000650 <LEDSInit>
  ChessTimerLEDInit(&hspi1);
 80007be:	4812      	ldr	r0, [pc, #72]	; (8000808 <main+0x7c>)
 80007c0:	f7ff ffa4 	bl	800070c <ChessTimerLEDInit>
  writeTime(&hspi1, timer_p1, 0);
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <main+0x80>)
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	2200      	movs	r2, #0
 80007ca:	4619      	mov	r1, r3
 80007cc:	480e      	ldr	r0, [pc, #56]	; (8000808 <main+0x7c>)
 80007ce:	f7ff fe99 	bl	8000504 <writeTime>

  HAL_TIM_Base_Start_IT(&htim4);
 80007d2:	480f      	ldr	r0, [pc, #60]	; (8000810 <main+0x84>)
 80007d4:	f003 f95e 	bl	8003a94 <HAL_TIM_Base_Start_IT>

  InitTracker();
 80007d8:	f000 fc06 	bl	8000fe8 <InitTracker>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  disableOutput(&hspi1);
 80007dc:	480a      	ldr	r0, [pc, #40]	; (8000808 <main+0x7c>)
 80007de:	f7ff fe83 	bl	80004e8 <disableOutput>
  PlayAudio(audio[1]);
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 ff03 	bl	80015f0 <PlayAudio>
  enableOutput(&hspi1);
 80007ea:	4807      	ldr	r0, [pc, #28]	; (8000808 <main+0x7c>)
 80007ec:	f7ff fe6f 	bl	80004ce <enableOutput>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Track();
 80007f0:	f000 fd78 	bl	80012e4 <Track>
 80007f4:	e7fc      	b.n	80007f0 <main+0x64>
 80007f6:	bf00      	nop
 80007f8:	08006f90 	.word	0x08006f90
 80007fc:	200016c0 	.word	0x200016c0
 8000800:	20001654 	.word	0x20001654
 8000804:	20001578 	.word	0x20001578
 8000808:	20001668 	.word	0x20001668
 800080c:	20000000 	.word	0x20000000
 8000810:	200015d0 	.word	0x200015d0

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b092      	sub	sp, #72	; 0x48
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2234      	movs	r2, #52	; 0x34
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f006 fb92 	bl	8006f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	463b      	mov	r3, r7
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000836:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <SystemClock_Config+0x98>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800083e:	4a1b      	ldr	r2, [pc, #108]	; (80008ac <SystemClock_Config+0x98>)
 8000840:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000844:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000846:	2302      	movs	r3, #2
 8000848:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084a:	2301      	movs	r3, #1
 800084c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084e:	2310      	movs	r3, #16
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000852:	2302      	movs	r3, #2
 8000854:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000856:	2300      	movs	r3, #0
 8000858:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800085a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800085e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000860:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000864:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fe9e 	bl	80025ac <HAL_RCC_OscConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000876:	f000 f893 	bl	80009a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087a:	230f      	movs	r3, #15
 800087c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087e:	2303      	movs	r3, #3
 8000880:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800088e:	463b      	mov	r3, r7
 8000890:	2101      	movs	r1, #1
 8000892:	4618      	mov	r0, r3
 8000894:	f002 f9ba 	bl	8002c0c <HAL_RCC_ClockConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800089e:	f000 f87f 	bl	80009a0 <Error_Handler>
  }
}
 80008a2:	bf00      	nop
 80008a4:	3748      	adds	r7, #72	; 0x48
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40007000 	.word	0x40007000

080008b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c4:	463b      	mov	r3, r7
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008cc:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_TIM4_Init+0x94>)
 80008ce:	4a1e      	ldr	r2, [pc, #120]	; (8000948 <MX_TIM4_Init+0x98>)
 80008d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <MX_TIM4_Init+0x94>)
 80008d4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80008d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_TIM4_Init+0x94>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_TIM4_Init+0x94>)
 80008e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_TIM4_Init+0x94>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_TIM4_Init+0x94>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008f4:	4813      	ldr	r0, [pc, #76]	; (8000944 <MX_TIM4_Init+0x94>)
 80008f6:	f003 f843 	bl	8003980 <HAL_TIM_Base_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000900:	f000 f84e 	bl	80009a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000908:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	4619      	mov	r1, r3
 8000910:	480c      	ldr	r0, [pc, #48]	; (8000944 <MX_TIM4_Init+0x94>)
 8000912:	f003 f9ed 	bl	8003cf0 <HAL_TIM_ConfigClockSource>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800091c:	f000 f840 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000928:	463b      	mov	r3, r7
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_TIM4_Init+0x94>)
 800092e:	f003 fbcd 	bl	80040cc <HAL_TIMEx_MasterConfigSynchronization>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000938:	f000 f832 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200015d0 	.word	0x200015d0
 8000948:	40000800 	.word	0x40000800

0800094c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d101      	bne.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095e:	f000 ffc9 	bl	80018f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
if (htim->Instance == TIM4){
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d10c      	bne.n	8000986 <HAL_TIM_PeriodElapsedCallback+0x3a>
	timer_p1--;
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	3b01      	subs	r3, #1
 8000972:	b29a      	uxth	r2, r3
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000976:	801a      	strh	r2, [r3, #0]
	writeTime(&hspi1, timer_p1, 0);
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	2200      	movs	r2, #0
 800097e:	4619      	mov	r1, r3
 8000980:	4806      	ldr	r0, [pc, #24]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000982:	f7ff fdbf 	bl	8000504 <writeTime>
}
  /* USER CODE END Callback 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40000400 	.word	0x40000400
 8000994:	40000800 	.word	0x40000800
 8000998:	20000000 	.word	0x20000000
 800099c:	20001668 	.word	0x20001668

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <SpeakerGPIOInit>:
#include "speaker.h"

void SpeakerGPIOInit(){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	// Enable Analog Output
	SPEARER_GPIO_BUS_ENABLE_FUNCTION;
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <SpeakerGPIOInit+0x3c>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <SpeakerGPIOInit+0x3c>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	61d3      	str	r3, [r2, #28]
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <SpeakerGPIOInit+0x3c>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = SPEAKER_GPIO_PIN;
 80009ca:	2310      	movs	r3, #16
 80009cc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ce:	2303      	movs	r3, #3
 80009d0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(SPEAKER_GPIO_BUS, &GPIO_InitStruct);
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	4619      	mov	r1, r3
 80009da:	4804      	ldr	r0, [pc, #16]	; (80009ec <SpeakerGPIOInit+0x40>)
 80009dc:	f001 fc26 	bl	800222c <HAL_GPIO_Init>
}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020000 	.word	0x40020000

080009f0 <DACInit>:

void DACInit(DAC_HandleTypeDef * hdac){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	DAC_ChannelConfTypeDef sConfig = {0};
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]

	// Enable DAC clock
	__HAL_RCC_DAC_CLK_ENABLE();
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <DACInit+0x54>)
 8000a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a06:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <DACInit+0x54>)
 8000a08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a0c:	6253      	str	r3, [r2, #36]	; 0x24
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <DACInit+0x54>)
 8000a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
	hdac->Instance = DAC;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <DACInit+0x58>)
 8000a1e:	601a      	str	r2, [r3, #0]
	HAL_DAC_Init(hdac);
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f001 f884 	bl	8001b2e <HAL_DAC_Init>

	// DAC Setup Settings of Timer 2 Trigger
	sConfig.DAC_Trigger = DAC_DMA_TRIGGER;
 8000a26:	2324      	movs	r3, #36	; 0x24
 8000a28:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
	HAL_DAC_ConfigChannel(hdac, &sConfig, DAC_CHANNEL);
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	2200      	movs	r2, #0
 8000a34:	4619      	mov	r1, r3
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f001 f971 	bl	8001d1e <HAL_DAC_ConfigChannel>
}
 8000a3c:	bf00      	nop
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40007400 	.word	0x40007400

08000a4c <DMAInit>:

void DMAInit(){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
	// DMA controller clock enable
	DMA_CLOCK_ENABLE_FUNCTION;
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <DMAInit+0x38>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <DMAInit+0x38>)
 8000a58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a5c:	61d3      	str	r3, [r2, #28]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <DMAInit+0x38>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

	// DMA interrupt init
	// DMA1_Channel2_IRQn interrupt configuration
	HAL_NVIC_SetPriority(DMA_IRQ, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	200c      	movs	r0, #12
 8000a70:	f001 f833 	bl	8001ada <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA_IRQ);
 8000a74:	200c      	movs	r0, #12
 8000a76:	f001 f84c 	bl	8001b12 <HAL_NVIC_EnableIRQ>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800

08000a88 <TimerInit>:

void TimerInit(TIM_HandleTypeDef * htim){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9e:	f107 0308 	add.w	r3, r7, #8
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]

	htim->Instance = TIMER_NAME;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aae:	601a      	str	r2, [r3, #0]
	htim->Init.Prescaler = TIMER_PSC;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	605a      	str	r2, [r3, #4]
	htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
	htim->Init.Period = TIMER_ARR;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f240 22d5 	movw	r2, #725	; 0x2d5
 8000ac2:	60da      	str	r2, [r3, #12]
	htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
	htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Init(htim);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f002 ff55 	bl	8003980 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ada:	613b      	str	r3, [r7, #16]
	HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig);
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f003 f904 	bl	8003cf0 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ae8:	2320      	movs	r3, #32
 8000aea:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
	HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig);
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	4619      	mov	r1, r3
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f003 fae8 	bl	80040cc <HAL_TIMEx_MasterConfigSynchronization>
}
 8000afc:	bf00      	nop
 8000afe:	3720      	adds	r7, #32
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <SpeakerInit>:

void SpeakerInit(DAC_HandleTypeDef * hdac, TIM_HandleTypeDef * htim){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
	SpeakerGPIOInit();
 8000b0e:	f7ff ff4d 	bl	80009ac <SpeakerGPIOInit>
	DMAInit();
 8000b12:	f7ff ff9b 	bl	8000a4c <DMAInit>
	DACInit(hdac);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ff6a 	bl	80009f0 <DACInit>
	TimerInit(htim);
 8000b1c:	6838      	ldr	r0, [r7, #0]
 8000b1e:	f7ff ffb3 	bl	8000a88 <TimerInit>
	HAL_TIM_Base_Start(htim);
 8000b22:	6838      	ldr	r0, [r7, #0]
 8000b24:	f002 ff6c 	bl	8003a00 <HAL_TIM_Base_Start>
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <HAL_MspInit+0x58>)
 8000b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3a:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <HAL_MspInit+0x58>)
 8000b3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b40:	6253      	str	r3, [r2, #36]	; 0x24
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_MspInit+0x58>)
 8000b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_MspInit+0x58>)
 8000b50:	6a1b      	ldr	r3, [r3, #32]
 8000b52:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <HAL_MspInit+0x58>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6213      	str	r3, [r2, #32]
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_MspInit+0x58>)
 8000b5c:	6a1b      	ldr	r3, [r3, #32]
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_MspInit+0x58>)
 8000b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6a:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_MspInit+0x58>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6253      	str	r3, [r2, #36]	; 0x24
 8000b72:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_MspInit+0x58>)
 8000b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	40023800 	.word	0x40023800

08000b8c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a28      	ldr	r2, [pc, #160]	; (8000c4c <HAL_DAC_MspInit+0xc0>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d14a      	bne.n	8000c44 <HAL_DAC_MspInit+0xb8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000bae:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <HAL_DAC_MspInit+0xc4>)
 8000bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb2:	4a27      	ldr	r2, [pc, #156]	; (8000c50 <HAL_DAC_MspInit+0xc4>)
 8000bb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000bb8:	6253      	str	r3, [r2, #36]	; 0x24
 8000bba:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <HAL_DAC_MspInit+0xc4>)
 8000bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <HAL_DAC_MspInit+0xc4>)
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	4a21      	ldr	r2, [pc, #132]	; (8000c50 <HAL_DAC_MspInit+0xc4>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	61d3      	str	r3, [r2, #28]
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <HAL_DAC_MspInit+0xc4>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bde:	2310      	movs	r3, #16
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be2:	2303      	movs	r3, #3
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4818      	ldr	r0, [pc, #96]	; (8000c54 <HAL_DAC_MspInit+0xc8>)
 8000bf2:	f001 fb1b 	bl	800222c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel2;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_DAC_MspInit+0xcc>)
 8000bf8:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <HAL_DAC_MspInit+0xd0>)
 8000bfa:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <HAL_DAC_MspInit+0xcc>)
 8000bfe:	2210      	movs	r2, #16
 8000c00:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_DAC_MspInit+0xcc>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <HAL_DAC_MspInit+0xcc>)
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_DAC_MspInit+0xcc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <HAL_DAC_MspInit+0xcc>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <HAL_DAC_MspInit+0xcc>)
 8000c1c:	2220      	movs	r2, #32
 8000c1e:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <HAL_DAC_MspInit+0xcc>)
 8000c22:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000c26:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000c28:	480b      	ldr	r0, [pc, #44]	; (8000c58 <HAL_DAC_MspInit+0xcc>)
 8000c2a:	f001 f94d 	bl	8001ec8 <HAL_DMA_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_DAC_MspInit+0xac>
    {
      Error_Handler();
 8000c34:	f7ff feb4 	bl	80009a0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <HAL_DAC_MspInit+0xcc>)
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <HAL_DAC_MspInit+0xcc>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000c44:	bf00      	nop
 8000c46:	3728      	adds	r7, #40	; 0x28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40007400 	.word	0x40007400
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020000 	.word	0x40020000
 8000c58:	20001610 	.word	0x20001610
 8000c5c:	4002601c 	.word	0x4002601c

08000c60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08c      	sub	sp, #48	; 0x30
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a2e      	ldr	r2, [pc, #184]	; (8000d38 <HAL_SPI_MspInit+0xd8>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d128      	bne.n	8000cd4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c82:	4b2e      	ldr	r3, [pc, #184]	; (8000d3c <HAL_SPI_MspInit+0xdc>)
 8000c84:	6a1b      	ldr	r3, [r3, #32]
 8000c86:	4a2d      	ldr	r2, [pc, #180]	; (8000d3c <HAL_SPI_MspInit+0xdc>)
 8000c88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c8c:	6213      	str	r3, [r2, #32]
 8000c8e:	4b2b      	ldr	r3, [pc, #172]	; (8000d3c <HAL_SPI_MspInit+0xdc>)
 8000c90:	6a1b      	ldr	r3, [r3, #32]
 8000c92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c96:	61bb      	str	r3, [r7, #24]
 8000c98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b28      	ldr	r3, [pc, #160]	; (8000d3c <HAL_SPI_MspInit+0xdc>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	4a27      	ldr	r2, [pc, #156]	; (8000d3c <HAL_SPI_MspInit+0xdc>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	61d3      	str	r3, [r2, #28]
 8000ca6:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <HAL_SPI_MspInit+0xdc>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cb2:	23e0      	movs	r3, #224	; 0xe0
 8000cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	481c      	ldr	r0, [pc, #112]	; (8000d40 <HAL_SPI_MspInit+0xe0>)
 8000cce:	f001 faad 	bl	800222c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000cd2:	e02d      	b.n	8000d30 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI2)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a1a      	ldr	r2, [pc, #104]	; (8000d44 <HAL_SPI_MspInit+0xe4>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d128      	bne.n	8000d30 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <HAL_SPI_MspInit+0xdc>)
 8000ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce2:	4a16      	ldr	r2, [pc, #88]	; (8000d3c <HAL_SPI_MspInit+0xdc>)
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce8:	6253      	str	r3, [r2, #36]	; 0x24
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <HAL_SPI_MspInit+0xdc>)
 8000cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_SPI_MspInit+0xdc>)
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <HAL_SPI_MspInit+0xdc>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	61d3      	str	r3, [r2, #28]
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_SPI_MspInit+0xdc>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d0e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d20:	2305      	movs	r3, #5
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4807      	ldr	r0, [pc, #28]	; (8000d48 <HAL_SPI_MspInit+0xe8>)
 8000d2c:	f001 fa7e 	bl	800222c <HAL_GPIO_Init>
}
 8000d30:	bf00      	nop
 8000d32:	3730      	adds	r7, #48	; 0x30
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40013000 	.word	0x40013000
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000
 8000d44:	40003800 	.word	0x40003800
 8000d48:	40020400 	.word	0x40020400

08000d4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d5c:	d10c      	bne.n	8000d78 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_TIM_Base_MspInit+0x68>)
 8000d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d62:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <HAL_TIM_Base_MspInit+0x68>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6253      	str	r3, [r2, #36]	; 0x24
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_TIM_Base_MspInit+0x68>)
 8000d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d76:	e018      	b.n	8000daa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <HAL_TIM_Base_MspInit+0x6c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d113      	bne.n	8000daa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <HAL_TIM_Base_MspInit+0x68>)
 8000d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <HAL_TIM_Base_MspInit+0x68>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6253      	str	r3, [r2, #36]	; 0x24
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_TIM_Base_MspInit+0x68>)
 8000d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	201e      	movs	r0, #30
 8000da0:	f000 fe9b 	bl	8001ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000da4:	201e      	movs	r0, #30
 8000da6:	f000 feb4 	bl	8001b12 <HAL_NVIC_EnableIRQ>
}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40000800 	.word	0x40000800

08000dbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08c      	sub	sp, #48	; 0x30
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	201d      	movs	r0, #29
 8000dd2:	f000 fe82 	bl	8001ada <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000dd6:	201d      	movs	r0, #29
 8000dd8:	f000 fe9b 	bl	8001b12 <HAL_NVIC_EnableIRQ>

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <HAL_InitTick+0x9c>)
 8000dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de0:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <HAL_InitTick+0x9c>)
 8000de2:	f043 0302 	orr.w	r3, r3, #2
 8000de6:	6253      	str	r3, [r2, #36]	; 0x24
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_InitTick+0x9c>)
 8000dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000df4:	f107 0210 	add.w	r2, r7, #16
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f002 f8fc 	bl	8002ffc <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e04:	f002 f8e6 	bl	8002fd4 <HAL_RCC_GetPCLK1Freq>
 8000e08:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e0c:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <HAL_InitTick+0xa0>)
 8000e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e12:	0c9b      	lsrs	r3, r3, #18
 8000e14:	3b01      	subs	r3, #1
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <HAL_InitTick+0xa4>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <HAL_InitTick+0xa8>)
 8000e1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <HAL_InitTick+0xa4>)
 8000e20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e24:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <HAL_InitTick+0xa4>)
 8000e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e2a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_InitTick+0xa4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <HAL_InitTick+0xa4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8000e38:	4809      	ldr	r0, [pc, #36]	; (8000e60 <HAL_InitTick+0xa4>)
 8000e3a:	f002 fda1 	bl	8003980 <HAL_TIM_Base_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d104      	bne.n	8000e4e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8000e44:	4806      	ldr	r0, [pc, #24]	; (8000e60 <HAL_InitTick+0xa4>)
 8000e46:	f002 fe25 	bl	8003a94 <HAL_TIM_Base_Start_IT>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	e000      	b.n	8000e50 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3730      	adds	r7, #48	; 0x30
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	431bde83 	.word	0x431bde83
 8000e60:	20001700 	.word	0x20001700
 8000e64:	40000400 	.word	0x40000400

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <NMI_Handler+0x4>

08000e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <HardFault_Handler+0x4>

08000e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <MemManage_Handler+0x4>

08000e7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <BusFault_Handler+0x4>

08000e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <UsageFault_Handler+0x4>

08000e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr

08000e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
	...

08000eb8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <DMA1_Channel2_IRQHandler+0x10>)
 8000ebe:	f001 f8d7 	bl	8002070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20001610 	.word	0x20001610

08000ecc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <TIM3_IRQHandler+0x10>)
 8000ed2:	f002 fe31 	bl	8003b38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20001700 	.word	0x20001700

08000ee0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <TIM4_IRQHandler+0x10>)
 8000ee6:	f002 fe27 	bl	8003b38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200015d0 	.word	0x200015d0

08000ef4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <InitGPIO_Pin>:
volatile static struct PieceCoordinate LastPickedUpPiece;
static struct PieceCoordinate ExpectedKingCastleCoordinate;
static struct PieceCoordinate ExpectedRookCastleCoordinate;

static void InitGPIO_Pin(struct GPIO_Pin pin, uint32_t mode, uint32_t pull)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b08f      	sub	sp, #60	; 0x3c
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	f107 0408 	add.w	r4, r7, #8
 8000f0a:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	603b      	str	r3, [r7, #0]
	// Enable GPIO Bus
	if(pin.bus == GPIOA)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4a30      	ldr	r2, [pc, #192]	; (8000fd8 <InitGPIO_Pin+0xd8>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d10c      	bne.n	8000f34 <InitGPIO_Pin+0x34>
	{
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <InitGPIO_Pin+0xdc>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	4a2f      	ldr	r2, [pc, #188]	; (8000fdc <InitGPIO_Pin+0xdc>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	61d3      	str	r3, [r2, #28]
 8000f26:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <InitGPIO_Pin+0xdc>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	623b      	str	r3, [r7, #32]
 8000f30:	6a3b      	ldr	r3, [r7, #32]
 8000f32:	e02d      	b.n	8000f90 <InitGPIO_Pin+0x90>
	}
	else if(pin.bus == GPIOB)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4a2a      	ldr	r2, [pc, #168]	; (8000fe0 <InitGPIO_Pin+0xe0>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d10c      	bne.n	8000f56 <InitGPIO_Pin+0x56>
	{
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3c:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <InitGPIO_Pin+0xdc>)
 8000f3e:	69db      	ldr	r3, [r3, #28]
 8000f40:	4a26      	ldr	r2, [pc, #152]	; (8000fdc <InitGPIO_Pin+0xdc>)
 8000f42:	f043 0302 	orr.w	r3, r3, #2
 8000f46:	61d3      	str	r3, [r2, #28]
 8000f48:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <InitGPIO_Pin+0xdc>)
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	e01c      	b.n	8000f90 <InitGPIO_Pin+0x90>
	}
	else if(pin.bus == GPIOC)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4a22      	ldr	r2, [pc, #136]	; (8000fe4 <InitGPIO_Pin+0xe4>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d10c      	bne.n	8000f78 <InitGPIO_Pin+0x78>
	{
	    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <InitGPIO_Pin+0xdc>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	4a1e      	ldr	r2, [pc, #120]	; (8000fdc <InitGPIO_Pin+0xdc>)
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	61d3      	str	r3, [r2, #28]
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <InitGPIO_Pin+0xdc>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	61bb      	str	r3, [r7, #24]
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	e00b      	b.n	8000f90 <InitGPIO_Pin+0x90>
	}
	else
	{
	    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f78:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <InitGPIO_Pin+0xdc>)
 8000f7a:	69db      	ldr	r3, [r3, #28]
 8000f7c:	4a17      	ldr	r2, [pc, #92]	; (8000fdc <InitGPIO_Pin+0xdc>)
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	61d3      	str	r3, [r2, #28]
 8000f84:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <InitGPIO_Pin+0xdc>)
 8000f86:	69db      	ldr	r3, [r3, #28]
 8000f88:	f003 0308 	and.w	r3, r3, #8
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	697b      	ldr	r3, [r7, #20]
	}

    if(mode == GPIO_MODE_OUTPUT_PP)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d105      	bne.n	8000fa2 <InitGPIO_Pin+0xa2>
    {
        HAL_GPIO_WritePin(pin.bus, pin.pin, GPIO_PIN_RESET);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	8939      	ldrh	r1, [r7, #8]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f001 faec 	bl	800257a <HAL_GPIO_WritePin>
    }

    // Configure GPIO
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = pin.pin;
 8000fb2:	893b      	ldrh	r3, [r7, #8]
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = mode;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = pull;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(pin.bus, &GPIO_InitStruct);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 f92e 	bl	800222c <HAL_GPIO_Init>
}
 8000fd0:	bf00      	nop
 8000fd2:	373c      	adds	r7, #60	; 0x3c
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd90      	pop	{r4, r7, pc}
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40020800 	.word	0x40020800

08000fe8 <InitTracker>:

void InitTracker()
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
	// Initialize globals
	LastPickedUpPiece = EMPTY_PIECE_COORDINATE;
 8000fee:	4a2d      	ldr	r2, [pc, #180]	; (80010a4 <InitTracker+0xbc>)
 8000ff0:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <InitTracker+0xc0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6013      	str	r3, [r2, #0]
	ExpectedKingCastleCoordinate = EMPTY_PIECE_COORDINATE;
 8000ff6:	4a2d      	ldr	r2, [pc, #180]	; (80010ac <InitTracker+0xc4>)
 8000ff8:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <InitTracker+0xc0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6013      	str	r3, [r2, #0]
	ExpectedRookCastleCoordinate = EMPTY_PIECE_COORDINATE;
 8000ffe:	4a2c      	ldr	r2, [pc, #176]	; (80010b0 <InitTracker+0xc8>)
 8001000:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <InitTracker+0xc0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6013      	str	r3, [r2, #0]
	LastTransitionType = PLACE;
 8001006:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <InitTracker+0xcc>)
 8001008:	2201      	movs	r2, #1
 800100a:	701a      	strb	r2, [r3, #0]
	CurrentTurn = WHITE;
 800100c:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <InitTracker+0xd0>)
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]

	// Initialize output column bits IO and the chessboard data structure
	for(uint8_t columnBit = 0; columnBit < NUM_COL_BITS; columnBit++)
 8001012:	2300      	movs	r3, #0
 8001014:	71fb      	strb	r3, [r7, #7]
 8001016:	e00b      	b.n	8001030 <InitTracker+0x48>
	{
		InitGPIO_Pin(COLUMN_BIT_TO_PIN_TABLE[columnBit], GPIO_MODE_OUTPUT_PP, GPIO_NOPULL);
 8001018:	79f9      	ldrb	r1, [r7, #7]
 800101a:	4828      	ldr	r0, [pc, #160]	; (80010bc <InitTracker+0xd4>)
 800101c:	2300      	movs	r3, #0
 800101e:	2201      	movs	r2, #1
 8001020:	00c9      	lsls	r1, r1, #3
 8001022:	4401      	add	r1, r0
 8001024:	c903      	ldmia	r1, {r0, r1}
 8001026:	f7ff ff6b 	bl	8000f00 <InitGPIO_Pin>
	for(uint8_t columnBit = 0; columnBit < NUM_COL_BITS; columnBit++)
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	3301      	adds	r3, #1
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d9f0      	bls.n	8001018 <InitTracker+0x30>
	}

	// Initialize input rows
	for(uint8_t row = 0; row < NUM_ROWS; row++)
 8001036:	2300      	movs	r3, #0
 8001038:	71bb      	strb	r3, [r7, #6]
 800103a:	e00b      	b.n	8001054 <InitTracker+0x6c>
	{
		InitGPIO_Pin(ROW_NUMBER_TO_PIN_TABLE[row], GPIO_MODE_INPUT, GPIO_NOPULL);
 800103c:	79b9      	ldrb	r1, [r7, #6]
 800103e:	4820      	ldr	r0, [pc, #128]	; (80010c0 <InitTracker+0xd8>)
 8001040:	2300      	movs	r3, #0
 8001042:	2200      	movs	r2, #0
 8001044:	00c9      	lsls	r1, r1, #3
 8001046:	4401      	add	r1, r0
 8001048:	c903      	ldmia	r1, {r0, r1}
 800104a:	f7ff ff59 	bl	8000f00 <InitGPIO_Pin>
	for(uint8_t row = 0; row < NUM_ROWS; row++)
 800104e:	79bb      	ldrb	r3, [r7, #6]
 8001050:	3301      	adds	r3, #1
 8001052:	71bb      	strb	r3, [r7, #6]
 8001054:	79bb      	ldrb	r3, [r7, #6]
 8001056:	2b03      	cmp	r3, #3
 8001058:	d9f0      	bls.n	800103c <InitTracker+0x54>
	}

	// Initialize the board data structure to the initial chessboard
	for(uint8_t column = 0; column < NUM_COLS; column++)
 800105a:	2300      	movs	r3, #0
 800105c:	717b      	strb	r3, [r7, #5]
 800105e:	e019      	b.n	8001094 <InitTracker+0xac>
	{
		for(uint8_t row = 0; row < NUM_ROWS; row++)
 8001060:	2300      	movs	r3, #0
 8001062:	713b      	strb	r3, [r7, #4]
 8001064:	e010      	b.n	8001088 <InitTracker+0xa0>
		{
			Chessboard[row][column] = INITIAL_CHESSBOARD[row][column];
 8001066:	7939      	ldrb	r1, [r7, #4]
 8001068:	797a      	ldrb	r2, [r7, #5]
 800106a:	7938      	ldrb	r0, [r7, #4]
 800106c:	797b      	ldrb	r3, [r7, #5]
 800106e:	4c15      	ldr	r4, [pc, #84]	; (80010c4 <InitTracker+0xdc>)
 8001070:	0080      	lsls	r0, r0, #2
 8001072:	4403      	add	r3, r0
 8001074:	4814      	ldr	r0, [pc, #80]	; (80010c8 <InitTracker+0xe0>)
 8001076:	0089      	lsls	r1, r1, #2
 8001078:	440a      	add	r2, r1
 800107a:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 800107e:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
		for(uint8_t row = 0; row < NUM_ROWS; row++)
 8001082:	793b      	ldrb	r3, [r7, #4]
 8001084:	3301      	adds	r3, #1
 8001086:	713b      	strb	r3, [r7, #4]
 8001088:	793b      	ldrb	r3, [r7, #4]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d9eb      	bls.n	8001066 <InitTracker+0x7e>
	for(uint8_t column = 0; column < NUM_COLS; column++)
 800108e:	797b      	ldrb	r3, [r7, #5]
 8001090:	3301      	adds	r3, #1
 8001092:	717b      	strb	r3, [r7, #5]
 8001094:	797b      	ldrb	r3, [r7, #5]
 8001096:	2b03      	cmp	r3, #3
 8001098:	d9e2      	bls.n	8001060 <InitTracker+0x78>
		}
	}
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd90      	pop	{r4, r7, pc}
 80010a4:	200000c8 	.word	0x200000c8
 80010a8:	20000064 	.word	0x20000064
 80010ac:	200000cc 	.word	0x200000cc
 80010b0:	200000d0 	.word	0x200000d0
 80010b4:	200000c5 	.word	0x200000c5
 80010b8:	200000c4 	.word	0x200000c4
 80010bc:	20000028 	.word	0x20000028
 80010c0:	20000008 	.word	0x20000008
 80010c4:	200000a4 	.word	0x200000a4
 80010c8:	20000040 	.word	0x20000040

080010cc <WriteColumn>:

static void WriteColumn(uint8_t column)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
	uint8_t columnBit0 = (column & 1) >> 0;
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
	uint8_t columnBit1 = (column & 2) >> 1;
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	105b      	asrs	r3, r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	73bb      	strb	r3, [r7, #14]
	uint8_t columnBit2 = (column & 4) >> 2;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	109b      	asrs	r3, r3, #2
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(COLUMN_BIT_TO_PIN_TABLE[0].bus, COLUMN_BIT_TO_PIN_TABLE[0].pin, columnBit0);
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <WriteColumn+0x68>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <WriteColumn+0x68>)
 80010fc:	8812      	ldrh	r2, [r2, #0]
 80010fe:	b291      	uxth	r1, r2
 8001100:	7bfa      	ldrb	r2, [r7, #15]
 8001102:	4618      	mov	r0, r3
 8001104:	f001 fa39 	bl	800257a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COLUMN_BIT_TO_PIN_TABLE[1].bus, COLUMN_BIT_TO_PIN_TABLE[1].pin, columnBit1);
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <WriteColumn+0x68>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	4a09      	ldr	r2, [pc, #36]	; (8001134 <WriteColumn+0x68>)
 800110e:	8912      	ldrh	r2, [r2, #8]
 8001110:	b291      	uxth	r1, r2
 8001112:	7bba      	ldrb	r2, [r7, #14]
 8001114:	4618      	mov	r0, r3
 8001116:	f001 fa30 	bl	800257a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COLUMN_BIT_TO_PIN_TABLE[2].bus, COLUMN_BIT_TO_PIN_TABLE[2].pin, columnBit2);
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <WriteColumn+0x68>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	4a05      	ldr	r2, [pc, #20]	; (8001134 <WriteColumn+0x68>)
 8001120:	8a12      	ldrh	r2, [r2, #16]
 8001122:	b291      	uxth	r1, r2
 8001124:	7b7a      	ldrb	r2, [r7, #13]
 8001126:	4618      	mov	r0, r3
 8001128:	f001 fa27 	bl	800257a <HAL_GPIO_WritePin>
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000028 	.word	0x20000028

08001138 <ReadRow>:

static GPIO_PinState ReadRow(uint8_t rowNumber)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
	struct GPIO_Pin rowPin = ROW_NUMBER_TO_PIN_TABLE[rowNumber];
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	490a      	ldr	r1, [pc, #40]	; (8001170 <ReadRow+0x38>)
 8001146:	f107 020c 	add.w	r2, r7, #12
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	440b      	add	r3, r1
 800114e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001152:	e882 0003 	stmia.w	r2, {r0, r1}
	GPIO_PinState value = HAL_GPIO_ReadPin(rowPin.bus, rowPin.pin);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	89ba      	ldrh	r2, [r7, #12]
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f001 f9f5 	bl	800254c <HAL_GPIO_ReadPin>
 8001162:	4603      	mov	r3, r0
 8001164:	75fb      	strb	r3, [r7, #23]

	return value;
 8001166:	7dfb      	ldrb	r3, [r7, #23]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000008 	.word	0x20000008

08001174 <HandleLowToHigh>:

void HandleLowToHigh(struct PieceCoordinate pieceCoordinate)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	// Don't do anything except update board if piece did not move
	if(IsPieceCoordinateSamePosition(pieceCoordinate, LastPickedUpPiece))
 800117c:	4b2f      	ldr	r3, [pc, #188]	; (800123c <HandleLowToHigh+0xc8>)
 800117e:	6819      	ldr	r1, [r3, #0]
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f9e1 	bl	8001548 <IsPieceCoordinateSamePosition>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00a      	beq.n	80011a2 <HandleLowToHigh+0x2e>
	{
		SetPiece(pieceCoordinate.row, pieceCoordinate.column, LastPickedUpPiece.piece);
 800118c:	79bb      	ldrb	r3, [r7, #6]
 800118e:	79f9      	ldrb	r1, [r7, #7]
 8001190:	4a2a      	ldr	r2, [pc, #168]	; (800123c <HandleLowToHigh+0xc8>)
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f000 f937 	bl	8001408 <SetPiece>
		LastTransitionType = PLACE;
 800119a:	4b29      	ldr	r3, [pc, #164]	; (8001240 <HandleLowToHigh+0xcc>)
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
		return;
 80011a0:	e049      	b.n	8001236 <HandleLowToHigh+0xc2>
	}

	// If player filled the expected position of the KING during castle
	if(IsPieceCoordinateSamePosition(ExpectedKingCastleCoordinate, pieceCoordinate))
 80011a2:	4b28      	ldr	r3, [pc, #160]	; (8001244 <HandleLowToHigh+0xd0>)
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	f000 f9ce 	bl	8001548 <IsPieceCoordinateSamePosition>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d016      	beq.n	80011e0 <HandleLowToHigh+0x6c>
	{
		SetPiece(pieceCoordinate.row, pieceCoordinate.column, ExpectedKingCastleCoordinate.piece);
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	79f9      	ldrb	r1, [r7, #7]
 80011b6:	4a23      	ldr	r2, [pc, #140]	; (8001244 <HandleLowToHigh+0xd0>)
 80011b8:	6812      	ldr	r2, [r2, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f924 	bl	8001408 <SetPiece>
		ExpectedKingCastleCoordinate = EMPTY_PIECE_COORDINATE;
 80011c0:	4a20      	ldr	r2, [pc, #128]	; (8001244 <HandleLowToHigh+0xd0>)
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <HandleLowToHigh+0xd4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6013      	str	r3, [r2, #0]

		// If ROOK finished castle as well, switch turns
		if(IsPieceCoordinateEqual(ExpectedRookCastleCoordinate, EMPTY_PIECE_COORDINATE))
 80011c8:	4a1f      	ldr	r2, [pc, #124]	; (8001248 <HandleLowToHigh+0xd4>)
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <HandleLowToHigh+0xd8>)
 80011cc:	6811      	ldr	r1, [r2, #0]
 80011ce:	6818      	ldr	r0, [r3, #0]
 80011d0:	f000 f99e 	bl	8001510 <IsPieceCoordinateEqual>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d02a      	beq.n	8001230 <HandleLowToHigh+0xbc>
		{
			SwitchTeam();
 80011da:	f000 f8c6 	bl	800136a <SwitchTeam>
 80011de:	e027      	b.n	8001230 <HandleLowToHigh+0xbc>
		}
	}
	// If player filled the expected position of the ROOK during castle
	else if(IsPieceCoordinateSamePosition(ExpectedRookCastleCoordinate, pieceCoordinate))
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <HandleLowToHigh+0xd8>)
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	f000 f9af 	bl	8001548 <IsPieceCoordinateSamePosition>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d016      	beq.n	800121e <HandleLowToHigh+0xaa>
	{
		SetPiece(pieceCoordinate.row, pieceCoordinate.column, ExpectedRookCastleCoordinate.piece);
 80011f0:	79bb      	ldrb	r3, [r7, #6]
 80011f2:	79f9      	ldrb	r1, [r7, #7]
 80011f4:	4a15      	ldr	r2, [pc, #84]	; (800124c <HandleLowToHigh+0xd8>)
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 f905 	bl	8001408 <SetPiece>
		ExpectedRookCastleCoordinate = EMPTY_PIECE_COORDINATE;
 80011fe:	4a13      	ldr	r2, [pc, #76]	; (800124c <HandleLowToHigh+0xd8>)
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <HandleLowToHigh+0xd4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6013      	str	r3, [r2, #0]

		// If KING finished castle as well, switch turns
		if(IsPieceCoordinateEqual(ExpectedKingCastleCoordinate, EMPTY_PIECE_COORDINATE))
 8001206:	4a10      	ldr	r2, [pc, #64]	; (8001248 <HandleLowToHigh+0xd4>)
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HandleLowToHigh+0xd0>)
 800120a:	6811      	ldr	r1, [r2, #0]
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	f000 f97f 	bl	8001510 <IsPieceCoordinateEqual>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00b      	beq.n	8001230 <HandleLowToHigh+0xbc>
		{
			SwitchTeam();
 8001218:	f000 f8a7 	bl	800136a <SwitchTeam>
 800121c:	e008      	b.n	8001230 <HandleLowToHigh+0xbc>
		}
	}
	// Any other move, the last picked up piece is set to this position
	else
	{
		SetPiece(pieceCoordinate.row, pieceCoordinate.column, LastPickedUpPiece.piece);
 800121e:	79bb      	ldrb	r3, [r7, #6]
 8001220:	79f9      	ldrb	r1, [r7, #7]
 8001222:	4a06      	ldr	r2, [pc, #24]	; (800123c <HandleLowToHigh+0xc8>)
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f8ee 	bl	8001408 <SetPiece>
		SwitchTeam();
 800122c:	f000 f89d 	bl	800136a <SwitchTeam>
	}

	// Calculate/Handle Checkmate //
	/// @todo

	LastTransitionType = PLACE;
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <HandleLowToHigh+0xcc>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
}
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200000c8 	.word	0x200000c8
 8001240:	200000c5 	.word	0x200000c5
 8001244:	200000cc 	.word	0x200000cc
 8001248:	20000064 	.word	0x20000064
 800124c:	200000d0 	.word	0x200000d0

08001250 <HandleHighToLow>:

void HandleHighToLow(struct PieceCoordinate pieceCoordinate)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	SetPiece(pieceCoordinate.row, pieceCoordinate.column, EMPTY_PIECE);
 8001258:	79bb      	ldrb	r3, [r7, #6]
 800125a:	79f9      	ldrb	r1, [r7, #7]
 800125c:	4a1c      	ldr	r2, [pc, #112]	; (80012d0 <HandleHighToLow+0x80>)
 800125e:	6812      	ldr	r2, [r2, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f000 f8d1 	bl	8001408 <SetPiece>

	// Handle Killing //

	// Other team picked up piece right before picking up this team's piece - either killing this piece or illegal
	if(DidOtherTeamPickupLast(pieceCoordinate.piece))
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 f904 	bl	8001474 <DidOtherTeamPickupLast>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HandleHighToLow+0x2a>
	{
		KillPiece(pieceCoordinate.piece);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 f8be 	bl	80013f4 <KillPiece>

		/// @todo Expect LastPickedUpPiece to be placed in pieceCoordinate's place
		return;
 8001278:	e027      	b.n	80012ca <HandleHighToLow+0x7a>


	// Handle Castling //

	// Same team picked up piece twice in a row - either castling or illegal
	if(DidSameTeamPickupLast(pieceCoordinate.piece))
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f916 	bl	80014ac <DidSameTeamPickupLast>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d01b      	beq.n	80012be <HandleHighToLow+0x6e>
	{
		// If current piece picked up is ROOK and last piece was KING or vice versa, castling is occurring
		if(pieceCoordinate.piece.type == ROOK && LastPickedUpPiece.piece.type == KING)
 8001286:	793b      	ldrb	r3, [r7, #4]
 8001288:	2b04      	cmp	r3, #4
 800128a:	d10a      	bne.n	80012a2 <HandleHighToLow+0x52>
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HandleHighToLow+0x84>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b06      	cmp	r3, #6
 8001294:	d105      	bne.n	80012a2 <HandleHighToLow+0x52>
		{
			CalculateCastlingPositions(pieceCoordinate, &ExpectedKingCastleCoordinate, &ExpectedRookCastleCoordinate);
 8001296:	4a10      	ldr	r2, [pc, #64]	; (80012d8 <HandleHighToLow+0x88>)
 8001298:	4910      	ldr	r1, [pc, #64]	; (80012dc <HandleHighToLow+0x8c>)
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 f86b 	bl	8001376 <CalculateCastlingPositions>
 80012a0:	e00d      	b.n	80012be <HandleHighToLow+0x6e>
		}
		else if(pieceCoordinate.piece.type == KING && LastPickedUpPiece.piece.type == ROOK)
 80012a2:	793b      	ldrb	r3, [r7, #4]
 80012a4:	2b06      	cmp	r3, #6
 80012a6:	d10a      	bne.n	80012be <HandleHighToLow+0x6e>
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HandleHighToLow+0x84>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d105      	bne.n	80012be <HandleHighToLow+0x6e>
		{
			CalculateCastlingPositions(LastPickedUpPiece, &ExpectedKingCastleCoordinate, &ExpectedRookCastleCoordinate);
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HandleHighToLow+0x84>)
 80012b4:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <HandleHighToLow+0x88>)
 80012b6:	4909      	ldr	r1, [pc, #36]	; (80012dc <HandleHighToLow+0x8c>)
 80012b8:	6818      	ldr	r0, [r3, #0]
 80012ba:	f000 f85c 	bl	8001376 <CalculateCastlingPositions>
	// Handle Promotion //
	/// @todo



	LastPickedUpPiece = pieceCoordinate;
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <HandleHighToLow+0x84>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6013      	str	r3, [r2, #0]
	LastTransitionType = PICKUP;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HandleHighToLow+0x90>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
}
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000060 	.word	0x20000060
 80012d4:	200000c8 	.word	0x200000c8
 80012d8:	200000d0 	.word	0x200000d0
 80012dc:	200000cc 	.word	0x200000cc
 80012e0:	200000c5 	.word	0x200000c5

080012e4 <Track>:

void Track()
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
	for(uint8_t column = 0; column < NUM_COLS; column++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	71fb      	strb	r3, [r7, #7]
 80012ee:	e034      	b.n	800135a <Track+0x76>
	{
		WriteColumn(column);
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff feea 	bl	80010cc <WriteColumn>

		for(uint8_t row = 0; row < NUM_ROWS; row++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	71bb      	strb	r3, [r7, #6]
 80012fc:	e027      	b.n	800134e <Track+0x6a>
		{
			GPIO_PinState cellValue = ReadRow(row);
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff19 	bl	8001138 <ReadRow>
 8001306:	4603      	mov	r3, r0
 8001308:	717b      	strb	r3, [r7, #5]

			struct PieceCoordinate currentPieceCoordinate = {
				.piece = GetPiece(row, column),
 800130a:	79fa      	ldrb	r2, [r7, #7]
 800130c:	79bb      	ldrb	r3, [r7, #6]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f000 f891 	bl	8001438 <GetPiece>
 8001316:	4603      	mov	r3, r0
 8001318:	803b      	strh	r3, [r7, #0]
			struct PieceCoordinate currentPieceCoordinate = {
 800131a:	79bb      	ldrb	r3, [r7, #6]
 800131c:	70bb      	strb	r3, [r7, #2]
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	70fb      	strb	r3, [r7, #3]
				.row = row,
				.column = column
			};

			// If there was no piece here but the IO is HIGH, a previously picked-up piece was placed
			if((currentPieceCoordinate.piece.type == NONE) && (cellValue == GPIO_PIN_SET))
 8001322:	783b      	ldrb	r3, [r7, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d106      	bne.n	8001336 <Track+0x52>
 8001328:	797b      	ldrb	r3, [r7, #5]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d103      	bne.n	8001336 <Track+0x52>
			{
				HandleLowToHigh(currentPieceCoordinate);
 800132e:	6838      	ldr	r0, [r7, #0]
 8001330:	f7ff ff20 	bl	8001174 <HandleLowToHigh>
 8001334:	e008      	b.n	8001348 <Track+0x64>
			}

			// If there was a piece here but the IO is LOW, a piece has been picked up
			else if ((currentPieceCoordinate.piece.type != NONE) && (cellValue == GPIO_PIN_RESET))
 8001336:	783b      	ldrb	r3, [r7, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <Track+0x64>
 800133c:	797b      	ldrb	r3, [r7, #5]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d102      	bne.n	8001348 <Track+0x64>
			{
				HandleHighToLow(currentPieceCoordinate);
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	f7ff ff84 	bl	8001250 <HandleHighToLow>
		for(uint8_t row = 0; row < NUM_ROWS; row++)
 8001348:	79bb      	ldrb	r3, [r7, #6]
 800134a:	3301      	adds	r3, #1
 800134c:	71bb      	strb	r3, [r7, #6]
 800134e:	79bb      	ldrb	r3, [r7, #6]
 8001350:	2b03      	cmp	r3, #3
 8001352:	d9d4      	bls.n	80012fe <Track+0x1a>
	for(uint8_t column = 0; column < NUM_COLS; column++)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	3301      	adds	r3, #1
 8001358:	71fb      	strb	r3, [r7, #7]
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	2b03      	cmp	r3, #3
 800135e:	d9c7      	bls.n	80012f0 <Track+0xc>
			}
		}
	}
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <SwitchTeam>:

	return 1;
}

void SwitchTeam()
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
	/// @todo Invoke necessary peripherals to switch teams
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <CalculateCastlingPositions>:

void CalculateCastlingPositions(
		struct PieceCoordinate rookPieceCoordinate,
		struct PieceCoordinate* expectedKingPieceCoordinate, struct PieceCoordinate* expectedRookPieceCoordinate)
{
 8001376:	b480      	push	{r7}
 8001378:	b085      	sub	sp, #20
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
	// Fill in the piece attributes
	expectedKingPieceCoordinate->piece.owner = rookPieceCoordinate.piece.owner;
 8001382:	7b7a      	ldrb	r2, [r7, #13]
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	705a      	strb	r2, [r3, #1]
	expectedRookPieceCoordinate->piece.owner = rookPieceCoordinate.piece.owner;
 8001388:	7b7a      	ldrb	r2, [r7, #13]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	705a      	strb	r2, [r3, #1]
	expectedKingPieceCoordinate->piece.type = KING;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	2206      	movs	r2, #6
 8001392:	701a      	strb	r2, [r3, #0]
	expectedRookPieceCoordinate->piece.type = ROOK;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2204      	movs	r2, #4
 8001398:	701a      	strb	r2, [r3, #0]

	// Calculate expected ROOK and KING columns
	if(rookPieceCoordinate.column == 0)
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d106      	bne.n	80013ae <CalculateCastlingPositions+0x38>
	{
		expectedKingPieceCoordinate->column = 2;
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2202      	movs	r2, #2
 80013a4:	70da      	strb	r2, [r3, #3]
		expectedRookPieceCoordinate->column = 3;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2203      	movs	r2, #3
 80013aa:	70da      	strb	r2, [r3, #3]
 80013ac:	e008      	b.n	80013c0 <CalculateCastlingPositions+0x4a>
	}
	else if(rookPieceCoordinate.column == 7)
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	2b07      	cmp	r3, #7
 80013b2:	d105      	bne.n	80013c0 <CalculateCastlingPositions+0x4a>
	{
		expectedKingPieceCoordinate->column = 6;
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	2206      	movs	r2, #6
 80013b8:	70da      	strb	r2, [r3, #3]
		expectedRookPieceCoordinate->column = 5;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2205      	movs	r2, #5
 80013be:	70da      	strb	r2, [r3, #3]
	}

	// Calculate expected ROOK and KING rows
	if(rookPieceCoordinate.piece.owner == WHITE)
 80013c0:	7b7b      	ldrb	r3, [r7, #13]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d107      	bne.n	80013d6 <CalculateCastlingPositions+0x60>
	{
		expectedKingPieceCoordinate->row = expectedRookPieceCoordinate->row = 0;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	709a      	strb	r2, [r3, #2]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	789a      	ldrb	r2, [r3, #2]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	709a      	strb	r2, [r3, #2]
	}
	else if(rookPieceCoordinate.piece.owner == BLACK)
	{
		expectedKingPieceCoordinate->row = expectedRookPieceCoordinate->row = 7;
	}
}
 80013d4:	e009      	b.n	80013ea <CalculateCastlingPositions+0x74>
	else if(rookPieceCoordinate.piece.owner == BLACK)
 80013d6:	7b7b      	ldrb	r3, [r7, #13]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d106      	bne.n	80013ea <CalculateCastlingPositions+0x74>
		expectedKingPieceCoordinate->row = expectedRookPieceCoordinate->row = 7;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2207      	movs	r2, #7
 80013e0:	709a      	strb	r2, [r3, #2]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	789a      	ldrb	r2, [r3, #2]
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	709a      	strb	r2, [r3, #2]
}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <KillPiece>:

	return 0;
}

void KillPiece(struct Piece piece)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	80b8      	strh	r0, [r7, #4]
	/// @todo handle killing a piece - maybe nothing needs to be done here...
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
	...

08001408 <SetPiece>:

inline void SetPiece(uint8_t row, uint8_t column, struct Piece piece)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	803a      	strh	r2, [r7, #0]
 8001412:	71fb      	strb	r3, [r7, #7]
 8001414:	460b      	mov	r3, r1
 8001416:	71bb      	strb	r3, [r7, #6]
	Chessboard[row][column] = piece;
 8001418:	79fa      	ldrb	r2, [r7, #7]
 800141a:	79bb      	ldrb	r3, [r7, #6]
 800141c:	4905      	ldr	r1, [pc, #20]	; (8001434 <SetPiece+0x2c>)
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	4413      	add	r3, r2
 8001422:	883a      	ldrh	r2, [r7, #0]
 8001424:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	200000a4 	.word	0x200000a4

08001438 <GetPiece>:

inline struct Piece GetPiece(uint8_t row, uint8_t column)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	460a      	mov	r2, r1
 8001442:	71fb      	strb	r3, [r7, #7]
 8001444:	4613      	mov	r3, r2
 8001446:	71bb      	strb	r3, [r7, #6]
	return Chessboard[row][column];
 8001448:	79fa      	ldrb	r2, [r7, #7]
 800144a:	79bb      	ldrb	r3, [r7, #6]
 800144c:	4908      	ldr	r1, [pc, #32]	; (8001470 <GetPiece+0x38>)
 800144e:	0092      	lsls	r2, r2, #2
 8001450:	4413      	add	r3, r2
 8001452:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001456:	81bb      	strh	r3, [r7, #12]
 8001458:	2300      	movs	r3, #0
 800145a:	7b3a      	ldrb	r2, [r7, #12]
 800145c:	f362 0307 	bfi	r3, r2, #0, #8
 8001460:	7b7a      	ldrb	r2, [r7, #13]
 8001462:	f362 230f 	bfi	r3, r2, #8, #8
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	200000a4 	.word	0x200000a4

08001474 <DidOtherTeamPickupLast>:

inline uint8_t DidOtherTeamPickupLast(struct Piece piece)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	80b8      	strh	r0, [r7, #4]
	return LastTransitionType == PICKUP && LastPickedUpPiece.piece.owner != piece.owner;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <DidOtherTeamPickupLast+0x30>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d107      	bne.n	8001496 <DidOtherTeamPickupLast+0x22>
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <DidOtherTeamPickupLast+0x34>)
 8001488:	785b      	ldrb	r3, [r3, #1]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	797b      	ldrb	r3, [r7, #5]
 800148e:	429a      	cmp	r2, r3
 8001490:	d001      	beq.n	8001496 <DidOtherTeamPickupLast+0x22>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <DidOtherTeamPickupLast+0x24>
 8001496:	2300      	movs	r3, #0
 8001498:	b2db      	uxtb	r3, r3
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	200000c5 	.word	0x200000c5
 80014a8:	200000c8 	.word	0x200000c8

080014ac <DidSameTeamPickupLast>:

inline uint8_t DidSameTeamPickupLast(struct Piece piece)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	80b8      	strh	r0, [r7, #4]
	return LastTransitionType == PICKUP && LastPickedUpPiece.piece.owner == piece.owner;
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <DidSameTeamPickupLast+0x30>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d107      	bne.n	80014ce <DidSameTeamPickupLast+0x22>
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <DidSameTeamPickupLast+0x34>)
 80014c0:	785b      	ldrb	r3, [r3, #1]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	797b      	ldrb	r3, [r7, #5]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d101      	bne.n	80014ce <DidSameTeamPickupLast+0x22>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <DidSameTeamPickupLast+0x24>
 80014ce:	2300      	movs	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	200000c5 	.word	0x200000c5
 80014e0:	200000c8 	.word	0x200000c8

080014e4 <IsPieceEqual>:

inline uint8_t IsPieceEqual(struct Piece piece1, struct Piece piece2)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	80b8      	strh	r0, [r7, #4]
 80014ec:	8039      	strh	r1, [r7, #0]
	return piece1.owner == piece2.owner
 80014ee:	797a      	ldrb	r2, [r7, #5]
 80014f0:	787b      	ldrb	r3, [r7, #1]
			&& piece1.type == piece2.type;
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d105      	bne.n	8001502 <IsPieceEqual+0x1e>
 80014f6:	793a      	ldrb	r2, [r7, #4]
 80014f8:	783b      	ldrb	r3, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d101      	bne.n	8001502 <IsPieceEqual+0x1e>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <IsPieceEqual+0x20>
 8001502:	2300      	movs	r3, #0
 8001504:	b2db      	uxtb	r3, r3
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <IsPieceCoordinateEqual>:

inline uint8_t IsPieceCoordinateEqual(struct PieceCoordinate pieceCoordinate1, struct PieceCoordinate pieceCoordinate2)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
	return IsPieceEqual(pieceCoordinate1.piece, pieceCoordinate2.piece)
 800151a:	6839      	ldr	r1, [r7, #0]
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ffe1 	bl	80014e4 <IsPieceEqual>
 8001522:	4603      	mov	r3, r0
			&& pieceCoordinate1.row == pieceCoordinate2.row
			&& pieceCoordinate1.column == pieceCoordinate2.column;
 8001524:	2b00      	cmp	r3, #0
 8001526:	d009      	beq.n	800153c <IsPieceCoordinateEqual+0x2c>
			&& pieceCoordinate1.row == pieceCoordinate2.row
 8001528:	79ba      	ldrb	r2, [r7, #6]
 800152a:	78bb      	ldrb	r3, [r7, #2]
 800152c:	429a      	cmp	r2, r3
 800152e:	d105      	bne.n	800153c <IsPieceCoordinateEqual+0x2c>
			&& pieceCoordinate1.column == pieceCoordinate2.column;
 8001530:	79fa      	ldrb	r2, [r7, #7]
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	429a      	cmp	r2, r3
 8001536:	d101      	bne.n	800153c <IsPieceCoordinateEqual+0x2c>
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <IsPieceCoordinateEqual+0x2e>
 800153c:	2300      	movs	r3, #0
 800153e:	b2db      	uxtb	r3, r3
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <IsPieceCoordinateSamePosition>:

inline uint8_t IsPieceCoordinateSamePosition(struct PieceCoordinate pieceCoordinate1, struct PieceCoordinate pieceCoordinate2)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
	return pieceCoordinate1.row == pieceCoordinate2.row && pieceCoordinate1.column == pieceCoordinate2.column;
 8001552:	79ba      	ldrb	r2, [r7, #6]
 8001554:	78bb      	ldrb	r3, [r7, #2]
 8001556:	429a      	cmp	r2, r3
 8001558:	d105      	bne.n	8001566 <IsPieceCoordinateSamePosition+0x1e>
 800155a:	79fa      	ldrb	r2, [r7, #7]
 800155c:	78fb      	ldrb	r3, [r7, #3]
 800155e:	429a      	cmp	r2, r3
 8001560:	d101      	bne.n	8001566 <IsPieceCoordinateSamePosition+0x1e>
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <IsPieceCoordinateSamePosition+0x20>
 8001566:	2300      	movs	r3, #0
 8001568:	b2db      	uxtb	r3, r3
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <ResetAudio>:
static UINT playerReadBytes = 0;
static uint8_t isFinished = 0;

static volatile WAVEPLAYER_E waveplayerStatus = WAVEPLAYER_IDLE;

static void ResetAudio(){
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	audioRemainSize = 0;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <ResetAudio+0x20>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
	playerReadBytes = 0;
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <ResetAudio+0x24>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
	memset(audioBuffer, 128, AUDIO_BUFFER_SIZE * sizeof(audioBuffer[0]));
 8001584:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001588:	2180      	movs	r1, #128	; 0x80
 800158a:	4804      	ldr	r0, [pc, #16]	; (800159c <ResetAudio+0x28>)
 800158c:	f005 fcde 	bl	8006f4c <memset>
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000538 	.word	0x20000538
 8001598:	2000153c 	.word	0x2000153c
 800159c:	2000053c 	.word	0x2000053c

080015a0 <GetFile>:

void GetFile(const char* filePath){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08e      	sub	sp, #56	; 0x38
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  WAV_Header wavHeader;
  UINT readBytes = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]

  f_mount(&FatFs, "", 1);
 80015ac:	2201      	movs	r2, #1
 80015ae:	490c      	ldr	r1, [pc, #48]	; (80015e0 <GetFile+0x40>)
 80015b0:	480c      	ldr	r0, [pc, #48]	; (80015e4 <GetFile+0x44>)
 80015b2:	f005 f861 	bl	8006678 <f_mount>
  f_open(&wavFile, filePath, FA_READ);
 80015b6:	2201      	movs	r2, #1
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	480b      	ldr	r0, [pc, #44]	; (80015e8 <GetFile+0x48>)
 80015bc:	f005 f8a2 	bl	8006704 <f_open>

  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	f107 010c 	add.w	r1, r7, #12
 80015c8:	222c      	movs	r2, #44	; 0x2c
 80015ca:	4807      	ldr	r0, [pc, #28]	; (80015e8 <GetFile+0x48>)
 80015cc:	f005 fa58 	bl	8006a80 <f_read>

  fileLength = wavHeader.FileSize;
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4a06      	ldr	r2, [pc, #24]	; (80015ec <GetFile+0x4c>)
 80015d4:	6013      	str	r3, [r2, #0]

}
 80015d6:	bf00      	nop
 80015d8:	3738      	adds	r7, #56	; 0x38
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	08006f9c 	.word	0x08006f9c
 80015e4:	20000304 	.word	0x20000304
 80015e8:	200000d4 	.word	0x200000d4
 80015ec:	20000534 	.word	0x20000534

080015f0 <PlayAudio>:

void PlayAudio(const char* filePath){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	GetFile(filePath);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ffd1 	bl	80015a0 <GetFile>
	isFinished = 0;
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <PlayAudio+0x50>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]

	f_read(&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <PlayAudio+0x54>)
 8001606:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800160a:	490f      	ldr	r1, [pc, #60]	; (8001648 <PlayAudio+0x58>)
 800160c:	480f      	ldr	r0, [pc, #60]	; (800164c <PlayAudio+0x5c>)
 800160e:	f005 fa37 	bl	8006a80 <f_read>
	audioRemainSize = fileLength - playerReadBytes - sizeof(WAV_Header);
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <PlayAudio+0x60>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <PlayAudio+0x54>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	3b2c      	subs	r3, #44	; 0x2c
 800161e:	4a0d      	ldr	r2, [pc, #52]	; (8001654 <PlayAudio+0x64>)
 8001620:	6013      	str	r3, [r2, #0]

	while(!GetAudioStatus()){
 8001622:	e001      	b.n	8001628 <PlayAudio+0x38>
		ProcessAudio();
 8001624:	f000 f818 	bl	8001658 <ProcessAudio>
	while(!GetAudioStatus()){
 8001628:	f000 f88e 	bl	8001748 <GetAudioStatus>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f8      	beq.n	8001624 <PlayAudio+0x34>
	}
	HAL_Delay(200);
 8001632:	20c8      	movs	r0, #200	; 0xc8
 8001634:	f000 f97a 	bl	800192c <HAL_Delay>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20001540 	.word	0x20001540
 8001644:	2000153c 	.word	0x2000153c
 8001648:	2000053c 	.word	0x2000053c
 800164c:	200000d4 	.word	0x200000d4
 8001650:	20000534 	.word	0x20000534
 8001654:	20000538 	.word	0x20000538

08001658 <ProcessAudio>:

void ProcessAudio(){
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	switch(waveplayerStatus) {
 800165c:	4b32      	ldr	r3, [pc, #200]	; (8001728 <ProcessAudio+0xd0>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b03      	cmp	r3, #3
 8001664:	d85e      	bhi.n	8001724 <ProcessAudio+0xcc>
 8001666:	a201      	add	r2, pc, #4	; (adr r2, 800166c <ProcessAudio+0x14>)
 8001668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166c:	08001723 	.word	0x08001723
 8001670:	0800167d 	.word	0x0800167d
 8001674:	080016bf 	.word	0x080016bf
 8001678:	08001701 	.word	0x08001701
		case WAVEPLAYER_IDLE:
			break;

		case WAVEPLAYER_HALFBUFFER:
			playerReadBytes = 0;
 800167c:	4b2b      	ldr	r3, [pc, #172]	; (800172c <ProcessAudio+0xd4>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
			waveplayerStatus = WAVEPLAYER_IDLE;
 8001682:	4b29      	ldr	r3, [pc, #164]	; (8001728 <ProcessAudio+0xd0>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
			f_read(&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE / 2, &playerReadBytes);
 8001688:	4b28      	ldr	r3, [pc, #160]	; (800172c <ProcessAudio+0xd4>)
 800168a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800168e:	4928      	ldr	r1, [pc, #160]	; (8001730 <ProcessAudio+0xd8>)
 8001690:	4828      	ldr	r0, [pc, #160]	; (8001734 <ProcessAudio+0xdc>)
 8001692:	f005 f9f5 	bl	8006a80 <f_read>
			if (audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8001696:	4b28      	ldr	r3, [pc, #160]	; (8001738 <ProcessAudio+0xe0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800169e:	d907      	bls.n	80016b0 <ProcessAudio+0x58>
				audioRemainSize -= playerReadBytes;
 80016a0:	4b25      	ldr	r3, [pc, #148]	; (8001738 <ProcessAudio+0xe0>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b21      	ldr	r3, [pc, #132]	; (800172c <ProcessAudio+0xd4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	4a23      	ldr	r2, [pc, #140]	; (8001738 <ProcessAudio+0xe0>)
 80016ac:	6013      	str	r3, [r2, #0]
			else {
				audioRemainSize = 0;
				waveplayerStatus = WAVEPLAYER_EOF;
			}
			break;
 80016ae:	e039      	b.n	8001724 <ProcessAudio+0xcc>
				audioRemainSize = 0;
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <ProcessAudio+0xe0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
				waveplayerStatus = WAVEPLAYER_EOF;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <ProcessAudio+0xd0>)
 80016b8:	2203      	movs	r2, #3
 80016ba:	701a      	strb	r2, [r3, #0]
			break;
 80016bc:	e032      	b.n	8001724 <ProcessAudio+0xcc>

		case WAVEPLAYER_FULLBUFFER:
			playerReadBytes = 0;
 80016be:	4b1b      	ldr	r3, [pc, #108]	; (800172c <ProcessAudio+0xd4>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
			waveplayerStatus = WAVEPLAYER_IDLE;
 80016c4:	4b18      	ldr	r3, [pc, #96]	; (8001728 <ProcessAudio+0xd0>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
			f_read(&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 2, &playerReadBytes);
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <ProcessAudio+0xd4>)
 80016cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016d0:	491a      	ldr	r1, [pc, #104]	; (800173c <ProcessAudio+0xe4>)
 80016d2:	4818      	ldr	r0, [pc, #96]	; (8001734 <ProcessAudio+0xdc>)
 80016d4:	f005 f9d4 	bl	8006a80 <f_read>
			if (audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <ProcessAudio+0xe0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016e0:	d907      	bls.n	80016f2 <ProcessAudio+0x9a>
				audioRemainSize -= playerReadBytes;
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <ProcessAudio+0xe0>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <ProcessAudio+0xd4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	4a12      	ldr	r2, [pc, #72]	; (8001738 <ProcessAudio+0xe0>)
 80016ee:	6013      	str	r3, [r2, #0]
			else {
				audioRemainSize = 0;
				waveplayerStatus = WAVEPLAYER_EOF;
			}
			break;
 80016f0:	e018      	b.n	8001724 <ProcessAudio+0xcc>
				audioRemainSize = 0;
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <ProcessAudio+0xe0>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
				waveplayerStatus = WAVEPLAYER_EOF;
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <ProcessAudio+0xd0>)
 80016fa:	2203      	movs	r2, #3
 80016fc:	701a      	strb	r2, [r3, #0]
			break;
 80016fe:	e011      	b.n	8001724 <ProcessAudio+0xcc>

		case WAVEPLAYER_EOF:
			f_close(&wavFile);
 8001700:	480c      	ldr	r0, [pc, #48]	; (8001734 <ProcessAudio+0xdc>)
 8001702:	f005 fb7a 	bl	8006dfa <f_close>
			f_mount(NULL, "", 0);
 8001706:	2200      	movs	r2, #0
 8001708:	490d      	ldr	r1, [pc, #52]	; (8001740 <ProcessAudio+0xe8>)
 800170a:	2000      	movs	r0, #0
 800170c:	f004 ffb4 	bl	8006678 <f_mount>
			ResetAudio();
 8001710:	f7ff ff30 	bl	8001574 <ResetAudio>
			isFinished = 1;
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <ProcessAudio+0xec>)
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
			waveplayerStatus = WAVEPLAYER_IDLE;
 800171a:	4b03      	ldr	r3, [pc, #12]	; (8001728 <ProcessAudio+0xd0>)
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
	}
}
 8001720:	e000      	b.n	8001724 <ProcessAudio+0xcc>
			break;
 8001722:	bf00      	nop
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20001541 	.word	0x20001541
 800172c:	2000153c 	.word	0x2000153c
 8001730:	2000053c 	.word	0x2000053c
 8001734:	200000d4 	.word	0x200000d4
 8001738:	20000538 	.word	0x20000538
 800173c:	20000d3c 	.word	0x20000d3c
 8001740:	08006f9c 	.word	0x08006f9c
 8001744:	20001540 	.word	0x20001540

08001748 <GetAudioStatus>:

int GetAudioStatus(){
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return isFinished;
 800174c:	4b02      	ldr	r3, [pc, #8]	; (8001758 <GetAudioStatus+0x10>)
 800174e:	781b      	ldrb	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	20001540 	.word	0x20001540

0800175c <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	waveplayerStatus = WAVEPLAYER_FULLBUFFER;
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 8001766:	2202      	movs	r2, #2
 8001768:	701a      	strb	r2, [r3, #0]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	20001541 	.word	0x20001541

08001778 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	waveplayerStatus = WAVEPLAYER_HALFBUFFER;
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	20001541 	.word	0x20001541

08001794 <WaveplayerInit>:

void WaveplayerInit(SPI_HandleTypeDef * hspi, DAC_HandleTypeDef *hdac){
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af02      	add	r7, sp, #8
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]

	// SPI setup
	hspi->Instance = SPI2;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a2d      	ldr	r2, [pc, #180]	; (8001868 <WaveplayerInit+0xd4>)
 80017b2:	601a      	str	r2, [r3, #0]
	hspi->Init.Mode = SPI_MODE_MASTER;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017ba:	605a      	str	r2, [r3, #4]
	hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
	hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
	hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
	hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	615a      	str	r2, [r3, #20]
	hspi->Init.NSS = SPI_NSS_SOFT;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017da:	619a      	str	r2, [r3, #24]
	hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2210      	movs	r2, #16
 80017e0:	61da      	str	r2, [r3, #28]
	hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]
	hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi->Init.CRCPolynomial = 10;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	220a      	movs	r2, #10
 80017f8:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_SPI_Init(hspi);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f001 fc8e 	bl	800311c <HAL_SPI_Init>

	// Setting up SD_CS
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <WaveplayerInit+0xd8>)
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	4a19      	ldr	r2, [pc, #100]	; (800186c <WaveplayerInit+0xd8>)
 8001806:	f043 0302 	orr.w	r3, r3, #2
 800180a:	61d3      	str	r3, [r2, #28]
 800180c:	4b17      	ldr	r3, [pc, #92]	; (800186c <WaveplayerInit+0xd8>)
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]

	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	2102      	movs	r1, #2
 800181c:	4814      	ldr	r0, [pc, #80]	; (8001870 <WaveplayerInit+0xdc>)
 800181e:	f000 feac 	bl	800257a <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = SD_CS_Pin;
 8001822:	2302      	movs	r3, #2
 8001824:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001832:	f107 030c 	add.w	r3, r7, #12
 8001836:	4619      	mov	r1, r3
 8001838:	480d      	ldr	r0, [pc, #52]	; (8001870 <WaveplayerInit+0xdc>)
 800183a:	f000 fcf7 	bl	800222c <HAL_GPIO_Init>

	MX_FATFS_Init();
 800183e:	f002 fca3 	bl	8004188 <MX_FATFS_Init>

	memset(audioBuffer, 128, AUDIO_BUFFER_SIZE * sizeof(audioBuffer[0]));
 8001842:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001846:	2180      	movs	r1, #128	; 0x80
 8001848:	480a      	ldr	r0, [pc, #40]	; (8001874 <WaveplayerInit+0xe0>)
 800184a:	f005 fb7f 	bl	8006f4c <memset>
	HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t *) audioBuffer, AUDIO_BUFFER_SIZE, DAC_ALIGN_8B_R);
 800184e:	2308      	movs	r3, #8
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001856:	4a07      	ldr	r2, [pc, #28]	; (8001874 <WaveplayerInit+0xe0>)
 8001858:	2100      	movs	r1, #0
 800185a:	6838      	ldr	r0, [r7, #0]
 800185c:	f000 f98a 	bl	8001b74 <HAL_DAC_Start_DMA>
}
 8001860:	bf00      	nop
 8001862:	3720      	adds	r7, #32
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40003800 	.word	0x40003800
 800186c:	40023800 	.word	0x40023800
 8001870:	40020400 	.word	0x40020400
 8001874:	2000053c 	.word	0x2000053c

08001878 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001878:	480c      	ldr	r0, [pc, #48]	; (80018ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800187a:	490d      	ldr	r1, [pc, #52]	; (80018b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800187c:	4a0d      	ldr	r2, [pc, #52]	; (80018b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001880:	e002      	b.n	8001888 <LoopCopyDataInit>

08001882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001886:	3304      	adds	r3, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800188c:	d3f9      	bcc.n	8001882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001890:	4c0a      	ldr	r4, [pc, #40]	; (80018bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001894:	e001      	b.n	800189a <LoopFillZerobss>

08001896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001898:	3204      	adds	r2, #4

0800189a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800189c:	d3fb      	bcc.n	8001896 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800189e:	f7ff fb29 	bl	8000ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018a2:	f005 fb2f 	bl	8006f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018a6:	f7fe ff71 	bl	800078c <main>
  bx lr
 80018aa:	4770      	bx	lr
  ldr r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80018b4:	08007098 	.word	0x08007098
  ldr r2, =_sbss
 80018b8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80018bc:	20001bb4 	.word	0x20001bb4

080018c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <ADC1_IRQHandler>

080018c2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f000 f8f9 	bl	8001ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018d2:	200f      	movs	r0, #15
 80018d4:	f7ff fa72 	bl	8000dbc <HAL_InitTick>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d002      	beq.n	80018e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	71fb      	strb	r3, [r7, #7]
 80018e2:	e001      	b.n	80018e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018e4:	f7ff f924 	bl	8000b30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018e8:	79fb      	ldrb	r3, [r7, #7]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <HAL_IncTick+0x1c>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_IncTick+0x20>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4413      	add	r3, r2
 8001902:	4a03      	ldr	r2, [pc, #12]	; (8001910 <HAL_IncTick+0x1c>)
 8001904:	6013      	str	r3, [r2, #0]
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20001740 	.word	0x20001740
 8001914:	2000006c 	.word	0x2000006c

08001918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b02      	ldr	r3, [pc, #8]	; (8001928 <HAL_GetTick+0x10>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	20001740 	.word	0x20001740

0800192c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001934:	f7ff fff0 	bl	8001918 <HAL_GetTick>
 8001938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001944:	d004      	beq.n	8001950 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_Delay+0x40>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	4413      	add	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001950:	bf00      	nop
 8001952:	f7ff ffe1 	bl	8001918 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	429a      	cmp	r2, r3
 8001960:	d8f7      	bhi.n	8001952 <HAL_Delay+0x26>
  {
  }
}
 8001962:	bf00      	nop
 8001964:	bf00      	nop
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	2000006c 	.word	0x2000006c

08001970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800198c:	4013      	ands	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800199c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a2:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	60d3      	str	r3, [r2, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <__NVIC_GetPriorityGrouping+0x18>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	f003 0307 	and.w	r3, r3, #7
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	db0b      	blt.n	80019fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	f003 021f 	and.w	r2, r3, #31
 80019ec:	4906      	ldr	r1, [pc, #24]	; (8001a08 <__NVIC_EnableIRQ+0x34>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	2001      	movs	r0, #1
 80019f6:	fa00 f202 	lsl.w	r2, r0, r2
 80019fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	e000e100 	.word	0xe000e100

08001a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	6039      	str	r1, [r7, #0]
 8001a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	db0a      	blt.n	8001a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	490c      	ldr	r1, [pc, #48]	; (8001a58 <__NVIC_SetPriority+0x4c>)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	0112      	lsls	r2, r2, #4
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	440b      	add	r3, r1
 8001a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a34:	e00a      	b.n	8001a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4908      	ldr	r1, [pc, #32]	; (8001a5c <__NVIC_SetPriority+0x50>)
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	3b04      	subs	r3, #4
 8001a44:	0112      	lsls	r2, r2, #4
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	440b      	add	r3, r1
 8001a4a:	761a      	strb	r2, [r3, #24]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000e100 	.word	0xe000e100
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	; 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f1c3 0307 	rsb	r3, r3, #7
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	bf28      	it	cs
 8001a7e:	2304      	movcs	r3, #4
 8001a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3304      	adds	r3, #4
 8001a86:	2b06      	cmp	r3, #6
 8001a88:	d902      	bls.n	8001a90 <NVIC_EncodePriority+0x30>
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3b03      	subs	r3, #3
 8001a8e:	e000      	b.n	8001a92 <NVIC_EncodePriority+0x32>
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	f04f 32ff 	mov.w	r2, #4294967295
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	43d9      	mvns	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	4313      	orrs	r3, r2
         );
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3724      	adds	r7, #36	; 0x24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ff4f 	bl	8001970 <__NVIC_SetPriorityGrouping>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aec:	f7ff ff64 	bl	80019b8 <__NVIC_GetPriorityGrouping>
 8001af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	6978      	ldr	r0, [r7, #20]
 8001af8:	f7ff ffb2 	bl	8001a60 <NVIC_EncodePriority>
 8001afc:	4602      	mov	r2, r0
 8001afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff81 	bl	8001a0c <__NVIC_SetPriority>
}
 8001b0a:	bf00      	nop
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff57 	bl	80019d4 <__NVIC_EnableIRQ>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e014      	b.n	8001b6a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	791b      	ldrb	r3, [r3, #4]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d105      	bne.n	8001b56 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff f81b 	bl	8000b8c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	795b      	ldrb	r3, [r3, #5]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_DAC_Start_DMA+0x1e>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e0ab      	b.n	8001cea <HAL_DAC_Start_DMA+0x176>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2201      	movs	r2, #1
 8001b96:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d12f      	bne.n	8001c04 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	4a52      	ldr	r2, [pc, #328]	; (8001cf4 <HAL_DAC_Start_DMA+0x180>)
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	4a51      	ldr	r2, [pc, #324]	; (8001cf8 <HAL_DAC_Start_DMA+0x184>)
 8001bb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4a50      	ldr	r2, [pc, #320]	; (8001cfc <HAL_DAC_Start_DMA+0x188>)
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001bca:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d013      	beq.n	8001bfa <HAL_DAC_Start_DMA+0x86>
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d845      	bhi.n	8001c64 <HAL_DAC_Start_DMA+0xf0>
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_DAC_Start_DMA+0x72>
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d005      	beq.n	8001bf0 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001be4:	e03e      	b.n	8001c64 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	3308      	adds	r3, #8
 8001bec:	613b      	str	r3, [r7, #16]
        break;
 8001bee:	e03c      	b.n	8001c6a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	330c      	adds	r3, #12
 8001bf6:	613b      	str	r3, [r7, #16]
        break;
 8001bf8:	e037      	b.n	8001c6a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	3310      	adds	r3, #16
 8001c00:	613b      	str	r3, [r7, #16]
        break;
 8001c02:	e032      	b.n	8001c6a <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	4a3d      	ldr	r2, [pc, #244]	; (8001d00 <HAL_DAC_Start_DMA+0x18c>)
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	4a3c      	ldr	r2, [pc, #240]	; (8001d04 <HAL_DAC_Start_DMA+0x190>)
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4a3b      	ldr	r2, [pc, #236]	; (8001d08 <HAL_DAC_Start_DMA+0x194>)
 8001c1a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c2a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d013      	beq.n	8001c5a <HAL_DAC_Start_DMA+0xe6>
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d817      	bhi.n	8001c68 <HAL_DAC_Start_DMA+0xf4>
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_DAC_Start_DMA+0xd2>
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d005      	beq.n	8001c50 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001c44:	e010      	b.n	8001c68 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	3314      	adds	r3, #20
 8001c4c:	613b      	str	r3, [r7, #16]
        break;
 8001c4e:	e00c      	b.n	8001c6a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	3318      	adds	r3, #24
 8001c56:	613b      	str	r3, [r7, #16]
        break;
 8001c58:	e007      	b.n	8001c6a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	331c      	adds	r3, #28
 8001c60:	613b      	str	r3, [r7, #16]
        break;
 8001c62:	e002      	b.n	8001c6a <HAL_DAC_Start_DMA+0xf6>
        break;
 8001c64:	bf00      	nop
 8001c66:	e000      	b.n	8001c6a <HAL_DAC_Start_DMA+0xf6>
        break;
 8001c68:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d111      	bne.n	8001c94 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c7e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6898      	ldr	r0, [r3, #8]
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	f000 f991 	bl	8001fb0 <HAL_DMA_Start_IT>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	75fb      	strb	r3, [r7, #23]
 8001c92:	e010      	b.n	8001cb6 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001ca2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	68d8      	ldr	r0, [r3, #12]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	f000 f97f 	bl	8001fb0 <HAL_DMA_Start_IT>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001cbc:	7dfb      	ldrb	r3, [r7, #23]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10c      	bne.n	8001cdc <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6819      	ldr	r1, [r3, #0]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	2201      	movs	r2, #1
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	e005      	b.n	8001ce8 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	f043 0204 	orr.w	r2, r3, #4
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	08001dbb 	.word	0x08001dbb
 8001cf8:	08001ddd 	.word	0x08001ddd
 8001cfc:	08001df9 	.word	0x08001df9
 8001d00:	08001e5d 	.word	0x08001e5d
 8001d04:	08001e7f 	.word	0x08001e7f
 8001d08:	08001e9b 	.word	0x08001e9b

08001d0c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b087      	sub	sp, #28
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	795b      	ldrb	r3, [r3, #5]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_DAC_ConfigChannel+0x18>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e03c      	b.n	8001db0 <HAL_DAC_ConfigChannel+0x92>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6819      	ldr	r1, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	22c0      	movs	r2, #192	; 0xc0
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43da      	mvns	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	400a      	ands	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2201      	movs	r2, #1
 8001da6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	371c      	adds	r7, #28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f7ff fcc7 	bl	800175c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	711a      	strb	r2, [r3, #4]
}
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f7ff fcc4 	bl	8001778 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001df0:	bf00      	nop
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f043 0204 	orr.w	r2, r3, #4
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f7ff ff7a 	bl	8001d0c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	711a      	strb	r2, [r3, #4]
}
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr

08001e4a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7ff ffdb 	bl	8001e26 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2201      	movs	r2, #1
 8001e74:	711a      	strb	r2, [r3, #4]
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f7ff ffd3 	bl	8001e38 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	f043 0204 	orr.w	r2, r3, #4
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f7ff ffc8 	bl	8001e4a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	711a      	strb	r2, [r3, #4]
}
 8001ec0:	bf00      	nop
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e059      	b.n	8001f8e <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <HAL_DMA_Init+0xd0>)
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d80f      	bhi.n	8001f06 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	4b2b      	ldr	r3, [pc, #172]	; (8001f9c <HAL_DMA_Init+0xd4>)
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a2b      	ldr	r2, [pc, #172]	; (8001fa0 <HAL_DMA_Init+0xd8>)
 8001ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef6:	091b      	lsrs	r3, r3, #4
 8001ef8:	009a      	lsls	r2, r3, #2
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a28      	ldr	r2, [pc, #160]	; (8001fa4 <HAL_DMA_Init+0xdc>)
 8001f02:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f04:	e00e      	b.n	8001f24 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <HAL_DMA_Init+0xe0>)
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a23      	ldr	r2, [pc, #140]	; (8001fa0 <HAL_DMA_Init+0xd8>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	009a      	lsls	r2, r3, #2
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a22      	ldr	r2, [pc, #136]	; (8001fac <HAL_DMA_Init+0xe4>)
 8001f22:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr
 8001f98:	40026407 	.word	0x40026407
 8001f9c:	bffd9ff8 	.word	0xbffd9ff8
 8001fa0:	cccccccd 	.word	0xcccccccd
 8001fa4:	40026000 	.word	0x40026000
 8001fa8:	bffd9bf8 	.word	0xbffd9bf8
 8001fac:	40026400 	.word	0x40026400

08001fb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_DMA_Start_IT+0x20>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e04b      	b.n	8002068 <HAL_DMA_Start_IT+0xb8>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d13a      	bne.n	800205a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0201 	bic.w	r2, r2, #1
 8002000:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	68b9      	ldr	r1, [r7, #8]
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 f8e0 	bl	80021ce <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	2b00      	cmp	r3, #0
 8002014:	d008      	beq.n	8002028 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 020e 	orr.w	r2, r2, #14
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	e00f      	b.n	8002048 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0204 	bic.w	r2, r2, #4
 8002036:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 020a 	orr.w	r2, r2, #10
 8002046:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e005      	b.n	8002066 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002062:	2302      	movs	r3, #2
 8002064:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002066:	7dfb      	ldrb	r3, [r7, #23]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	f003 031c 	and.w	r3, r3, #28
 8002090:	2204      	movs	r2, #4
 8002092:	409a      	lsls	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d026      	beq.n	80020ea <HAL_DMA_IRQHandler+0x7a>
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d021      	beq.n	80020ea <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d107      	bne.n	80020c4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0204 	bic.w	r2, r2, #4
 80020c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	f003 021c 	and.w	r2, r3, #28
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d0:	2104      	movs	r1, #4
 80020d2:	fa01 f202 	lsl.w	r2, r1, r2
 80020d6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d071      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80020e8:	e06c      	b.n	80021c4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 031c 	and.w	r3, r3, #28
 80020f2:	2202      	movs	r2, #2
 80020f4:	409a      	lsls	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d02e      	beq.n	800215c <HAL_DMA_IRQHandler+0xec>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d029      	beq.n	800215c <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10b      	bne.n	800212e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 020a 	bic.w	r2, r2, #10
 8002124:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 021c 	and.w	r2, r3, #28
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213a:	2102      	movs	r1, #2
 800213c:	fa01 f202 	lsl.w	r2, r1, r2
 8002140:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214e:	2b00      	cmp	r3, #0
 8002150:	d038      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800215a:	e033      	b.n	80021c4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f003 031c 	and.w	r3, r3, #28
 8002164:	2208      	movs	r2, #8
 8002166:	409a      	lsls	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d02a      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x156>
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d025      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 020e 	bic.w	r2, r2, #14
 8002188:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 021c 	and.w	r2, r3, #28
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f202 	lsl.w	r2, r1, r2
 800219c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d004      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
}
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f003 021c 	and.w	r2, r3, #28
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e8:	2101      	movs	r1, #1
 80021ea:	fa01 f202 	lsl.w	r2, r1, r2
 80021ee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b10      	cmp	r3, #16
 80021fe:	d108      	bne.n	8002212 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002210:	e007      	b.n	8002222 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	60da      	str	r2, [r3, #12]
}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002242:	e160      	b.n	8002506 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2101      	movs	r1, #1
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	fa01 f303 	lsl.w	r3, r1, r3
 8002250:	4013      	ands	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 8152 	beq.w	8002500 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b01      	cmp	r3, #1
 8002266:	d005      	beq.n	8002274 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002270:	2b02      	cmp	r3, #2
 8002272:	d130      	bne.n	80022d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80022aa:	2201      	movs	r2, #1
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4013      	ands	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	091b      	lsrs	r3, r3, #4
 80022c0:	f003 0201 	and.w	r2, r3, #1
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d017      	beq.n	8002312 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	2203      	movs	r2, #3
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d123      	bne.n	8002366 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	08da      	lsrs	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3208      	adds	r2, #8
 8002326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	220f      	movs	r2, #15
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	691a      	ldr	r2, [r3, #16]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	08da      	lsrs	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3208      	adds	r2, #8
 8002360:	6939      	ldr	r1, [r7, #16]
 8002362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	2203      	movs	r2, #3
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4013      	ands	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0203 	and.w	r2, r3, #3
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 80ac 	beq.w	8002500 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a8:	4b5e      	ldr	r3, [pc, #376]	; (8002524 <HAL_GPIO_Init+0x2f8>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	4a5d      	ldr	r2, [pc, #372]	; (8002524 <HAL_GPIO_Init+0x2f8>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6213      	str	r3, [r2, #32]
 80023b4:	4b5b      	ldr	r3, [pc, #364]	; (8002524 <HAL_GPIO_Init+0x2f8>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80023c0:	4a59      	ldr	r2, [pc, #356]	; (8002528 <HAL_GPIO_Init+0x2fc>)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	3302      	adds	r3, #2
 80023c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	220f      	movs	r2, #15
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4013      	ands	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a51      	ldr	r2, [pc, #324]	; (800252c <HAL_GPIO_Init+0x300>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d025      	beq.n	8002438 <HAL_GPIO_Init+0x20c>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a50      	ldr	r2, [pc, #320]	; (8002530 <HAL_GPIO_Init+0x304>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d01f      	beq.n	8002434 <HAL_GPIO_Init+0x208>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a4f      	ldr	r2, [pc, #316]	; (8002534 <HAL_GPIO_Init+0x308>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d019      	beq.n	8002430 <HAL_GPIO_Init+0x204>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a4e      	ldr	r2, [pc, #312]	; (8002538 <HAL_GPIO_Init+0x30c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d013      	beq.n	800242c <HAL_GPIO_Init+0x200>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a4d      	ldr	r2, [pc, #308]	; (800253c <HAL_GPIO_Init+0x310>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d00d      	beq.n	8002428 <HAL_GPIO_Init+0x1fc>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a4c      	ldr	r2, [pc, #304]	; (8002540 <HAL_GPIO_Init+0x314>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d007      	beq.n	8002424 <HAL_GPIO_Init+0x1f8>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a4b      	ldr	r2, [pc, #300]	; (8002544 <HAL_GPIO_Init+0x318>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d101      	bne.n	8002420 <HAL_GPIO_Init+0x1f4>
 800241c:	2306      	movs	r3, #6
 800241e:	e00c      	b.n	800243a <HAL_GPIO_Init+0x20e>
 8002420:	2307      	movs	r3, #7
 8002422:	e00a      	b.n	800243a <HAL_GPIO_Init+0x20e>
 8002424:	2305      	movs	r3, #5
 8002426:	e008      	b.n	800243a <HAL_GPIO_Init+0x20e>
 8002428:	2304      	movs	r3, #4
 800242a:	e006      	b.n	800243a <HAL_GPIO_Init+0x20e>
 800242c:	2303      	movs	r3, #3
 800242e:	e004      	b.n	800243a <HAL_GPIO_Init+0x20e>
 8002430:	2302      	movs	r3, #2
 8002432:	e002      	b.n	800243a <HAL_GPIO_Init+0x20e>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_GPIO_Init+0x20e>
 8002438:	2300      	movs	r3, #0
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	f002 0203 	and.w	r2, r2, #3
 8002440:	0092      	lsls	r2, r2, #2
 8002442:	4093      	lsls	r3, r2
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800244a:	4937      	ldr	r1, [pc, #220]	; (8002528 <HAL_GPIO_Init+0x2fc>)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	089b      	lsrs	r3, r3, #2
 8002450:	3302      	adds	r3, #2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002458:	4b3b      	ldr	r3, [pc, #236]	; (8002548 <HAL_GPIO_Init+0x31c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800247c:	4a32      	ldr	r2, [pc, #200]	; (8002548 <HAL_GPIO_Init+0x31c>)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002482:	4b31      	ldr	r3, [pc, #196]	; (8002548 <HAL_GPIO_Init+0x31c>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	43db      	mvns	r3, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024a6:	4a28      	ldr	r2, [pc, #160]	; (8002548 <HAL_GPIO_Init+0x31c>)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ac:	4b26      	ldr	r3, [pc, #152]	; (8002548 <HAL_GPIO_Init+0x31c>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024d0:	4a1d      	ldr	r2, [pc, #116]	; (8002548 <HAL_GPIO_Init+0x31c>)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024d6:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <HAL_GPIO_Init+0x31c>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	43db      	mvns	r3, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024fa:	4a13      	ldr	r2, [pc, #76]	; (8002548 <HAL_GPIO_Init+0x31c>)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	3301      	adds	r3, #1
 8002504:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	f47f ae97 	bne.w	8002244 <HAL_GPIO_Init+0x18>
  }
}
 8002516:	bf00      	nop
 8002518:	bf00      	nop
 800251a:	371c      	adds	r7, #28
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800
 8002528:	40010000 	.word	0x40010000
 800252c:	40020000 	.word	0x40020000
 8002530:	40020400 	.word	0x40020400
 8002534:	40020800 	.word	0x40020800
 8002538:	40020c00 	.word	0x40020c00
 800253c:	40021000 	.word	0x40021000
 8002540:	40021400 	.word	0x40021400
 8002544:	40021800 	.word	0x40021800
 8002548:	40010400 	.word	0x40010400

0800254c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	887b      	ldrh	r3, [r7, #2]
 800255e:	4013      	ands	r3, r2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
 8002568:	e001      	b.n	800256e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800256e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr

0800257a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	460b      	mov	r3, r1
 8002584:	807b      	strh	r3, [r7, #2]
 8002586:	4613      	mov	r3, r2
 8002588:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800258a:	787b      	ldrb	r3, [r7, #1]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002590:	887a      	ldrh	r2, [r7, #2]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002596:	e003      	b.n	80025a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002598:	887b      	ldrh	r3, [r7, #2]
 800259a:	041a      	lsls	r2, r3, #16
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	619a      	str	r2, [r3, #24]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr
	...

080025ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e31d      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025be:	4b94      	ldr	r3, [pc, #592]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025c8:	4b91      	ldr	r3, [pc, #580]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d07b      	beq.n	80026d6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d006      	beq.n	80025f2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2b0c      	cmp	r3, #12
 80025e8:	d10f      	bne.n	800260a <HAL_RCC_OscConfig+0x5e>
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f0:	d10b      	bne.n	800260a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f2:	4b87      	ldr	r3, [pc, #540]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d06a      	beq.n	80026d4 <HAL_RCC_OscConfig+0x128>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d166      	bne.n	80026d4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e2f7      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d106      	bne.n	8002620 <HAL_RCC_OscConfig+0x74>
 8002612:	4b7f      	ldr	r3, [pc, #508]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a7e      	ldr	r2, [pc, #504]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 8002618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e02d      	b.n	800267c <HAL_RCC_OscConfig+0xd0>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10c      	bne.n	8002642 <HAL_RCC_OscConfig+0x96>
 8002628:	4b79      	ldr	r3, [pc, #484]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a78      	ldr	r2, [pc, #480]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 800262e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b76      	ldr	r3, [pc, #472]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a75      	ldr	r2, [pc, #468]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 800263a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	e01c      	b.n	800267c <HAL_RCC_OscConfig+0xd0>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b05      	cmp	r3, #5
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0xb8>
 800264a:	4b71      	ldr	r3, [pc, #452]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a70      	ldr	r2, [pc, #448]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 8002650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b6e      	ldr	r3, [pc, #440]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a6d      	ldr	r2, [pc, #436]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0xd0>
 8002664:	4b6a      	ldr	r3, [pc, #424]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a69      	ldr	r2, [pc, #420]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 800266a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b67      	ldr	r3, [pc, #412]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a66      	ldr	r2, [pc, #408]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 8002676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7ff f948 	bl	8001918 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800268c:	f7ff f944 	bl	8001918 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e2ad      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800269e:	4b5c      	ldr	r3, [pc, #368]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0xe0>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7ff f934 	bl	8001918 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b4:	f7ff f930 	bl	8001918 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e299      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026c6:	4b52      	ldr	r3, [pc, #328]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x108>
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d05a      	beq.n	8002798 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b0c      	cmp	r3, #12
 80026ec:	d119      	bne.n	8002722 <HAL_RCC_OscConfig+0x176>
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d116      	bne.n	8002722 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f4:	4b46      	ldr	r3, [pc, #280]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_OscConfig+0x160>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d001      	beq.n	800270c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e276      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270c:	4b40      	ldr	r3, [pc, #256]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	493d      	ldr	r1, [pc, #244]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002720:	e03a      	b.n	8002798 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d020      	beq.n	800276c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800272a:	4b3a      	ldr	r3, [pc, #232]	; (8002814 <HAL_RCC_OscConfig+0x268>)
 800272c:	2201      	movs	r2, #1
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7ff f8f2 	bl	8001918 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002738:	f7ff f8ee 	bl	8001918 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e257      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800274a:	4b31      	ldr	r3, [pc, #196]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002756:	4b2e      	ldr	r3, [pc, #184]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	021b      	lsls	r3, r3, #8
 8002764:	492a      	ldr	r1, [pc, #168]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 8002766:	4313      	orrs	r3, r2
 8002768:	604b      	str	r3, [r1, #4]
 800276a:	e015      	b.n	8002798 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800276c:	4b29      	ldr	r3, [pc, #164]	; (8002814 <HAL_RCC_OscConfig+0x268>)
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7ff f8d1 	bl	8001918 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800277a:	f7ff f8cd 	bl	8001918 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e236      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800278c:	4b20      	ldr	r3, [pc, #128]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1f0      	bne.n	800277a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 80b8 	beq.w	8002916 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d170      	bne.n	800288e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027ac:	4b18      	ldr	r3, [pc, #96]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_OscConfig+0x218>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e21a      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1a      	ldr	r2, [r3, #32]
 80027c8:	4b11      	ldr	r3, [pc, #68]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d921      	bls.n	8002818 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 fc3f 	bl	800305c <RCC_SetFlashLatencyFromMSIRange>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e208      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027e8:	4b09      	ldr	r3, [pc, #36]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	4906      	ldr	r1, [pc, #24]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027fa:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	061b      	lsls	r3, r3, #24
 8002808:	4901      	ldr	r1, [pc, #4]	; (8002810 <HAL_RCC_OscConfig+0x264>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
 800280e:	e020      	b.n	8002852 <HAL_RCC_OscConfig+0x2a6>
 8002810:	40023800 	.word	0x40023800
 8002814:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002818:	4ba4      	ldr	r3, [pc, #656]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	49a1      	ldr	r1, [pc, #644]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800282a:	4ba0      	ldr	r3, [pc, #640]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	061b      	lsls	r3, r3, #24
 8002838:	499c      	ldr	r1, [pc, #624]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fc0a 	bl	800305c <RCC_SetFlashLatencyFromMSIRange>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e1d3      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	0b5b      	lsrs	r3, r3, #13
 8002858:	3301      	adds	r3, #1
 800285a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002862:	4a92      	ldr	r2, [pc, #584]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 8002864:	6892      	ldr	r2, [r2, #8]
 8002866:	0912      	lsrs	r2, r2, #4
 8002868:	f002 020f 	and.w	r2, r2, #15
 800286c:	4990      	ldr	r1, [pc, #576]	; (8002ab0 <HAL_RCC_OscConfig+0x504>)
 800286e:	5c8a      	ldrb	r2, [r1, r2]
 8002870:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002872:	4a90      	ldr	r2, [pc, #576]	; (8002ab4 <HAL_RCC_OscConfig+0x508>)
 8002874:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002876:	4b90      	ldr	r3, [pc, #576]	; (8002ab8 <HAL_RCC_OscConfig+0x50c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe fa9e 	bl	8000dbc <HAL_InitTick>
 8002880:	4603      	mov	r3, r0
 8002882:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d045      	beq.n	8002916 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	e1b5      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d029      	beq.n	80028ea <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002896:	4b89      	ldr	r3, [pc, #548]	; (8002abc <HAL_RCC_OscConfig+0x510>)
 8002898:	2201      	movs	r2, #1
 800289a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7ff f83c 	bl	8001918 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028a4:	f7ff f838 	bl	8001918 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e1a1      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028b6:	4b7d      	ldr	r3, [pc, #500]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028c2:	4b7a      	ldr	r3, [pc, #488]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	4977      	ldr	r1, [pc, #476]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028d4:	4b75      	ldr	r3, [pc, #468]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	061b      	lsls	r3, r3, #24
 80028e2:	4972      	ldr	r1, [pc, #456]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
 80028e8:	e015      	b.n	8002916 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028ea:	4b74      	ldr	r3, [pc, #464]	; (8002abc <HAL_RCC_OscConfig+0x510>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7ff f812 	bl	8001918 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028f8:	f7ff f80e 	bl	8001918 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e177      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800290a:	4b68      	ldr	r3, [pc, #416]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	d030      	beq.n	8002984 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d016      	beq.n	8002958 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800292a:	4b65      	ldr	r3, [pc, #404]	; (8002ac0 <HAL_RCC_OscConfig+0x514>)
 800292c:	2201      	movs	r2, #1
 800292e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002930:	f7fe fff2 	bl	8001918 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002938:	f7fe ffee 	bl	8001918 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e157      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800294a:	4b58      	ldr	r3, [pc, #352]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 800294c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0x38c>
 8002956:	e015      	b.n	8002984 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002958:	4b59      	ldr	r3, [pc, #356]	; (8002ac0 <HAL_RCC_OscConfig+0x514>)
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295e:	f7fe ffdb 	bl	8001918 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002966:	f7fe ffd7 	bl	8001918 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e140      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002978:	4b4c      	ldr	r3, [pc, #304]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 800297a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f0      	bne.n	8002966 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 80b5 	beq.w	8002afc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002992:	2300      	movs	r3, #0
 8002994:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002996:	4b45      	ldr	r3, [pc, #276]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10d      	bne.n	80029be <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a2:	4b42      	ldr	r3, [pc, #264]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	4a41      	ldr	r2, [pc, #260]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 80029a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ac:	6253      	str	r3, [r2, #36]	; 0x24
 80029ae:	4b3f      	ldr	r3, [pc, #252]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ba:	2301      	movs	r3, #1
 80029bc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029be:	4b41      	ldr	r3, [pc, #260]	; (8002ac4 <HAL_RCC_OscConfig+0x518>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d118      	bne.n	80029fc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ca:	4b3e      	ldr	r3, [pc, #248]	; (8002ac4 <HAL_RCC_OscConfig+0x518>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a3d      	ldr	r2, [pc, #244]	; (8002ac4 <HAL_RCC_OscConfig+0x518>)
 80029d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d6:	f7fe ff9f 	bl	8001918 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029de:	f7fe ff9b 	bl	8001918 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b64      	cmp	r3, #100	; 0x64
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e104      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f0:	4b34      	ldr	r3, [pc, #208]	; (8002ac4 <HAL_RCC_OscConfig+0x518>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d106      	bne.n	8002a12 <HAL_RCC_OscConfig+0x466>
 8002a04:	4b29      	ldr	r3, [pc, #164]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 8002a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a08:	4a28      	ldr	r2, [pc, #160]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 8002a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0e:	6353      	str	r3, [r2, #52]	; 0x34
 8002a10:	e02d      	b.n	8002a6e <HAL_RCC_OscConfig+0x4c2>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10c      	bne.n	8002a34 <HAL_RCC_OscConfig+0x488>
 8002a1a:	4b24      	ldr	r3, [pc, #144]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 8002a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a1e:	4a23      	ldr	r2, [pc, #140]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 8002a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a24:	6353      	str	r3, [r2, #52]	; 0x34
 8002a26:	4b21      	ldr	r3, [pc, #132]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 8002a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2a:	4a20      	ldr	r2, [pc, #128]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 8002a2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a30:	6353      	str	r3, [r2, #52]	; 0x34
 8002a32:	e01c      	b.n	8002a6e <HAL_RCC_OscConfig+0x4c2>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b05      	cmp	r3, #5
 8002a3a:	d10c      	bne.n	8002a56 <HAL_RCC_OscConfig+0x4aa>
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 8002a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a40:	4a1a      	ldr	r2, [pc, #104]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 8002a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a46:	6353      	str	r3, [r2, #52]	; 0x34
 8002a48:	4b18      	ldr	r3, [pc, #96]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 8002a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4c:	4a17      	ldr	r2, [pc, #92]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 8002a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a52:	6353      	str	r3, [r2, #52]	; 0x34
 8002a54:	e00b      	b.n	8002a6e <HAL_RCC_OscConfig+0x4c2>
 8002a56:	4b15      	ldr	r3, [pc, #84]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 8002a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5a:	4a14      	ldr	r2, [pc, #80]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 8002a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a60:	6353      	str	r3, [r2, #52]	; 0x34
 8002a62:	4b12      	ldr	r3, [pc, #72]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 8002a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a66:	4a11      	ldr	r2, [pc, #68]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 8002a68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a6c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d015      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a76:	f7fe ff4f 	bl	8001918 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a7c:	e00a      	b.n	8002a94 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a7e:	f7fe ff4b 	bl	8001918 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e0b2      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <HAL_RCC_OscConfig+0x500>)
 8002a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ee      	beq.n	8002a7e <HAL_RCC_OscConfig+0x4d2>
 8002aa0:	e023      	b.n	8002aea <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa2:	f7fe ff39 	bl	8001918 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002aa8:	e019      	b.n	8002ade <HAL_RCC_OscConfig+0x532>
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	08006ff0 	.word	0x08006ff0
 8002ab4:	20000004 	.word	0x20000004
 8002ab8:	20000068 	.word	0x20000068
 8002abc:	42470020 	.word	0x42470020
 8002ac0:	42470680 	.word	0x42470680
 8002ac4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac8:	f7fe ff26 	bl	8001918 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e08d      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ade:	4b49      	ldr	r3, [pc, #292]	; (8002c04 <HAL_RCC_OscConfig+0x658>)
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1ee      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002aea:	7ffb      	ldrb	r3, [r7, #31]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d105      	bne.n	8002afc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af0:	4b44      	ldr	r3, [pc, #272]	; (8002c04 <HAL_RCC_OscConfig+0x658>)
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	4a43      	ldr	r2, [pc, #268]	; (8002c04 <HAL_RCC_OscConfig+0x658>)
 8002af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002afa:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d079      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2b0c      	cmp	r3, #12
 8002b08:	d056      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d13b      	bne.n	8002b8a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b12:	4b3d      	ldr	r3, [pc, #244]	; (8002c08 <HAL_RCC_OscConfig+0x65c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fe fefe 	bl	8001918 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe fefa 	bl	8001918 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e063      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b32:	4b34      	ldr	r3, [pc, #208]	; (8002c04 <HAL_RCC_OscConfig+0x658>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b3e:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <HAL_RCC_OscConfig+0x658>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4e:	4319      	orrs	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	430b      	orrs	r3, r1
 8002b56:	492b      	ldr	r1, [pc, #172]	; (8002c04 <HAL_RCC_OscConfig+0x658>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b5c:	4b2a      	ldr	r3, [pc, #168]	; (8002c08 <HAL_RCC_OscConfig+0x65c>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b62:	f7fe fed9 	bl	8001918 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fe fed5 	bl	8001918 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e03e      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b7c:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <HAL_RCC_OscConfig+0x658>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0f0      	beq.n	8002b6a <HAL_RCC_OscConfig+0x5be>
 8002b88:	e036      	b.n	8002bf8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8a:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <HAL_RCC_OscConfig+0x65c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fe fec2 	bl	8001918 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b98:	f7fe febe 	bl	8001918 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e027      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002baa:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <HAL_RCC_OscConfig+0x658>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x5ec>
 8002bb6:	e01f      	b.n	8002bf8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e01a      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <HAL_RCC_OscConfig+0x658>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d10d      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d106      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3720      	adds	r7, #32
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800
 8002c08:	42470060 	.word	0x42470060

08002c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e11a      	b.n	8002e56 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c20:	4b8f      	ldr	r3, [pc, #572]	; (8002e60 <HAL_RCC_ClockConfig+0x254>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d919      	bls.n	8002c62 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d105      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x34>
 8002c34:	4b8a      	ldr	r3, [pc, #552]	; (8002e60 <HAL_RCC_ClockConfig+0x254>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a89      	ldr	r2, [pc, #548]	; (8002e60 <HAL_RCC_ClockConfig+0x254>)
 8002c3a:	f043 0304 	orr.w	r3, r3, #4
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4b87      	ldr	r3, [pc, #540]	; (8002e60 <HAL_RCC_ClockConfig+0x254>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f023 0201 	bic.w	r2, r3, #1
 8002c48:	4985      	ldr	r1, [pc, #532]	; (8002e60 <HAL_RCC_ClockConfig+0x254>)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c50:	4b83      	ldr	r3, [pc, #524]	; (8002e60 <HAL_RCC_ClockConfig+0x254>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d001      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e0f9      	b.n	8002e56 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d008      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c6e:	4b7d      	ldr	r3, [pc, #500]	; (8002e64 <HAL_RCC_ClockConfig+0x258>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	497a      	ldr	r1, [pc, #488]	; (8002e64 <HAL_RCC_ClockConfig+0x258>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 808e 	beq.w	8002daa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d107      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c96:	4b73      	ldr	r3, [pc, #460]	; (8002e64 <HAL_RCC_ClockConfig+0x258>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d121      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e0d7      	b.n	8002e56 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d107      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cae:	4b6d      	ldr	r3, [pc, #436]	; (8002e64 <HAL_RCC_ClockConfig+0x258>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d115      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e0cb      	b.n	8002e56 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d107      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cc6:	4b67      	ldr	r3, [pc, #412]	; (8002e64 <HAL_RCC_ClockConfig+0x258>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e0bf      	b.n	8002e56 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002cd6:	4b63      	ldr	r3, [pc, #396]	; (8002e64 <HAL_RCC_ClockConfig+0x258>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e0b7      	b.n	8002e56 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ce6:	4b5f      	ldr	r3, [pc, #380]	; (8002e64 <HAL_RCC_ClockConfig+0x258>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f023 0203 	bic.w	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	495c      	ldr	r1, [pc, #368]	; (8002e64 <HAL_RCC_ClockConfig+0x258>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf8:	f7fe fe0e 	bl	8001918 <HAL_GetTick>
 8002cfc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d112      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d08:	f7fe fe06 	bl	8001918 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e09b      	b.n	8002e56 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d1e:	4b51      	ldr	r3, [pc, #324]	; (8002e64 <HAL_RCC_ClockConfig+0x258>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d1ee      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xfc>
 8002d2a:	e03e      	b.n	8002daa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d112      	bne.n	8002d5a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d34:	e00a      	b.n	8002d4c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d36:	f7fe fdef 	bl	8001918 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e084      	b.n	8002e56 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d4c:	4b45      	ldr	r3, [pc, #276]	; (8002e64 <HAL_RCC_ClockConfig+0x258>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b0c      	cmp	r3, #12
 8002d56:	d1ee      	bne.n	8002d36 <HAL_RCC_ClockConfig+0x12a>
 8002d58:	e027      	b.n	8002daa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d11d      	bne.n	8002d9e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d64:	f7fe fdd8 	bl	8001918 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e06d      	b.n	8002e56 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d7a:	4b3a      	ldr	r3, [pc, #232]	; (8002e64 <HAL_RCC_ClockConfig+0x258>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d1ee      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x158>
 8002d86:	e010      	b.n	8002daa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d88:	f7fe fdc6 	bl	8001918 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e05b      	b.n	8002e56 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d9e:	4b31      	ldr	r3, [pc, #196]	; (8002e64 <HAL_RCC_ClockConfig+0x258>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1ee      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002daa:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <HAL_RCC_ClockConfig+0x254>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d219      	bcs.n	8002dec <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d105      	bne.n	8002dca <HAL_RCC_ClockConfig+0x1be>
 8002dbe:	4b28      	ldr	r3, [pc, #160]	; (8002e60 <HAL_RCC_ClockConfig+0x254>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a27      	ldr	r2, [pc, #156]	; (8002e60 <HAL_RCC_ClockConfig+0x254>)
 8002dc4:	f043 0304 	orr.w	r3, r3, #4
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	4b25      	ldr	r3, [pc, #148]	; (8002e60 <HAL_RCC_ClockConfig+0x254>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 0201 	bic.w	r2, r3, #1
 8002dd2:	4923      	ldr	r1, [pc, #140]	; (8002e60 <HAL_RCC_ClockConfig+0x254>)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	4b21      	ldr	r3, [pc, #132]	; (8002e60 <HAL_RCC_ClockConfig+0x254>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e034      	b.n	8002e56 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df8:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <HAL_RCC_ClockConfig+0x258>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	4917      	ldr	r1, [pc, #92]	; (8002e64 <HAL_RCC_ClockConfig+0x258>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d009      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e16:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <HAL_RCC_ClockConfig+0x258>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	490f      	ldr	r1, [pc, #60]	; (8002e64 <HAL_RCC_ClockConfig+0x258>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e2a:	f000 f823 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <HAL_RCC_ClockConfig+0x258>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	490b      	ldr	r1, [pc, #44]	; (8002e68 <HAL_RCC_ClockConfig+0x25c>)
 8002e3c:	5ccb      	ldrb	r3, [r1, r3]
 8002e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e42:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e46:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd ffb6 	bl	8000dbc <HAL_InitTick>
 8002e50:	4603      	mov	r3, r0
 8002e52:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e54:	7afb      	ldrb	r3, [r7, #11]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023c00 	.word	0x40023c00
 8002e64:	40023800 	.word	0x40023800
 8002e68:	08006ff0 	.word	0x08006ff0
 8002e6c:	20000004 	.word	0x20000004
 8002e70:	20000068 	.word	0x20000068

08002e74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e74:	b5b0      	push	{r4, r5, r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002e7a:	4b4d      	ldr	r3, [pc, #308]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b0c      	cmp	r3, #12
 8002e88:	d00c      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x30>
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d87c      	bhi.n	8002f88 <HAL_RCC_GetSysClockFreq+0x114>
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d002      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x24>
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d003      	beq.n	8002e9e <HAL_RCC_GetSysClockFreq+0x2a>
 8002e96:	e077      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e98:	4b46      	ldr	r3, [pc, #280]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x140>)
 8002e9a:	613b      	str	r3, [r7, #16]
      break;
 8002e9c:	e082      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e9e:	4b46      	ldr	r3, [pc, #280]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x144>)
 8002ea0:	613b      	str	r3, [r7, #16]
      break;
 8002ea2:	e07f      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	0c9b      	lsrs	r3, r3, #18
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	4a43      	ldr	r2, [pc, #268]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x148>)
 8002eae:	5cd3      	ldrb	r3, [r2, r3]
 8002eb0:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	0d9b      	lsrs	r3, r3, #22
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	3301      	adds	r3, #1
 8002ebc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ebe:	4b3c      	ldr	r3, [pc, #240]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d01a      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	4939      	ldr	r1, [pc, #228]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x144>)
 8002ed4:	fb01 f003 	mul.w	r0, r1, r3
 8002ed8:	2100      	movs	r1, #0
 8002eda:	fb01 f102 	mul.w	r1, r1, r2
 8002ede:	1844      	adds	r4, r0, r1
 8002ee0:	4935      	ldr	r1, [pc, #212]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x144>)
 8002ee2:	fba2 0101 	umull	r0, r1, r2, r1
 8002ee6:	1863      	adds	r3, r4, r1
 8002ee8:	4619      	mov	r1, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	461a      	mov	r2, r3
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	f7fd f943 	bl	800017c <__aeabi_uldivmod>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4613      	mov	r3, r2
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	e040      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	461c      	mov	r4, r3
 8002f04:	f04f 0500 	mov.w	r5, #0
 8002f08:	4620      	mov	r0, r4
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	014b      	lsls	r3, r1, #5
 8002f16:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f1a:	0142      	lsls	r2, r0, #5
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4619      	mov	r1, r3
 8002f20:	1b00      	subs	r0, r0, r4
 8002f22:	eb61 0105 	sbc.w	r1, r1, r5
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	018b      	lsls	r3, r1, #6
 8002f30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f34:	0182      	lsls	r2, r0, #6
 8002f36:	1a12      	subs	r2, r2, r0
 8002f38:	eb63 0301 	sbc.w	r3, r3, r1
 8002f3c:	f04f 0000 	mov.w	r0, #0
 8002f40:	f04f 0100 	mov.w	r1, #0
 8002f44:	00d9      	lsls	r1, r3, #3
 8002f46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f4a:	00d0      	lsls	r0, r2, #3
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	1912      	adds	r2, r2, r4
 8002f52:	eb45 0303 	adc.w	r3, r5, r3
 8002f56:	f04f 0000 	mov.w	r0, #0
 8002f5a:	f04f 0100 	mov.w	r1, #0
 8002f5e:	0299      	lsls	r1, r3, #10
 8002f60:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f64:	0290      	lsls	r0, r2, #10
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	461a      	mov	r2, r3
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	f7fd f901 	bl	800017c <__aeabi_uldivmod>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4613      	mov	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	613b      	str	r3, [r7, #16]
      break;
 8002f86:	e00d      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002f88:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	0b5b      	lsrs	r3, r3, #13
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	3301      	adds	r3, #1
 8002f98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	613b      	str	r3, [r7, #16]
      break;
 8002fa2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fa4:	693b      	ldr	r3, [r7, #16]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bdb0      	pop	{r4, r5, r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	00f42400 	.word	0x00f42400
 8002fb8:	016e3600 	.word	0x016e3600
 8002fbc:	08006fe4 	.word	0x08006fe4

08002fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc4:	4b02      	ldr	r3, [pc, #8]	; (8002fd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	20000004 	.word	0x20000004

08002fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fd8:	f7ff fff2 	bl	8002fc0 <HAL_RCC_GetHCLKFreq>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	0a1b      	lsrs	r3, r3, #8
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	4903      	ldr	r1, [pc, #12]	; (8002ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fea:	5ccb      	ldrb	r3, [r1, r3]
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	08007000 	.word	0x08007000

08002ffc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	220f      	movs	r2, #15
 800300a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800300c:	4b11      	ldr	r3, [pc, #68]	; (8003054 <HAL_RCC_GetClockConfig+0x58>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 0203 	and.w	r2, r3, #3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003018:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <HAL_RCC_GetClockConfig+0x58>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_RCC_GetClockConfig+0x58>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003030:	4b08      	ldr	r3, [pc, #32]	; (8003054 <HAL_RCC_GetClockConfig+0x58>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	08db      	lsrs	r3, r3, #3
 8003036:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_RCC_GetClockConfig+0x5c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0201 	and.w	r2, r3, #1
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	601a      	str	r2, [r3, #0]
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr
 8003054:	40023800 	.word	0x40023800
 8003058:	40023c00 	.word	0x40023c00

0800305c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003064:	2300      	movs	r3, #0
 8003066:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003068:	4b29      	ldr	r3, [pc, #164]	; (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d12c      	bne.n	80030ce <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003074:	4b26      	ldr	r3, [pc, #152]	; (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003080:	4b24      	ldr	r3, [pc, #144]	; (8003114 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	e016      	b.n	80030ba <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308c:	4b20      	ldr	r3, [pc, #128]	; (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	4a1f      	ldr	r2, [pc, #124]	; (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003096:	6253      	str	r3, [r2, #36]	; 0x24
 8003098:	4b1d      	ldr	r3, [pc, #116]	; (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80030a4:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80030ac:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ae:	4b18      	ldr	r3, [pc, #96]	; (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	4a17      	ldr	r2, [pc, #92]	; (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80030c0:	d105      	bne.n	80030ce <RCC_SetFlashLatencyFromMSIRange+0x72>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80030c8:	d101      	bne.n	80030ce <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80030ca:	2301      	movs	r3, #1
 80030cc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d105      	bne.n	80030e0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80030d4:	4b10      	ldr	r3, [pc, #64]	; (8003118 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a0f      	ldr	r2, [pc, #60]	; (8003118 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030da:	f043 0304 	orr.w	r3, r3, #4
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f023 0201 	bic.w	r2, r3, #1
 80030e8:	490b      	ldr	r1, [pc, #44]	; (8003118 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030f0:	4b09      	ldr	r3, [pc, #36]	; (8003118 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d001      	beq.n	8003102 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	371c      	adds	r7, #28
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800
 8003114:	40007000 	.word	0x40007000
 8003118:	40023c00 	.word	0x40023c00

0800311c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e07b      	b.n	8003226 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	2b00      	cmp	r3, #0
 8003134:	d108      	bne.n	8003148 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800313e:	d009      	beq.n	8003154 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	61da      	str	r2, [r3, #28]
 8003146:	e005      	b.n	8003154 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fd fd76 	bl	8000c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800318a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d8:	ea42 0103 	orr.w	r1, r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	0c1b      	lsrs	r3, r3, #16
 80031f2:	f003 0104 	and.w	r1, r3, #4
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	f003 0210 	and.w	r2, r3, #16
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69da      	ldr	r2, [r3, #28]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003214:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b088      	sub	sp, #32
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	4613      	mov	r3, r2
 800323c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_SPI_Transmit+0x22>
 800324c:	2302      	movs	r3, #2
 800324e:	e126      	b.n	800349e <HAL_SPI_Transmit+0x270>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003258:	f7fe fb5e 	bl	8001918 <HAL_GetTick>
 800325c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b01      	cmp	r3, #1
 800326c:	d002      	beq.n	8003274 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800326e:	2302      	movs	r3, #2
 8003270:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003272:	e10b      	b.n	800348c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <HAL_SPI_Transmit+0x52>
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d102      	bne.n	8003286 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003284:	e102      	b.n	800348c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2203      	movs	r2, #3
 800328a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	88fa      	ldrh	r2, [r7, #6]
 800329e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	88fa      	ldrh	r2, [r7, #6]
 80032a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032cc:	d10f      	bne.n	80032ee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f8:	2b40      	cmp	r3, #64	; 0x40
 80032fa:	d007      	beq.n	800330c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800330a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003314:	d14b      	bne.n	80033ae <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <HAL_SPI_Transmit+0xf6>
 800331e:	8afb      	ldrh	r3, [r7, #22]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d13e      	bne.n	80033a2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	881a      	ldrh	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	1c9a      	adds	r2, r3, #2
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800333e:	b29b      	uxth	r3, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003348:	e02b      	b.n	80033a2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b02      	cmp	r3, #2
 8003356:	d112      	bne.n	800337e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	881a      	ldrh	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	1c9a      	adds	r2, r3, #2
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003372:	b29b      	uxth	r3, r3
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	86da      	strh	r2, [r3, #54]	; 0x36
 800337c:	e011      	b.n	80033a2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800337e:	f7fe facb 	bl	8001918 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d803      	bhi.n	8003396 <HAL_SPI_Transmit+0x168>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d102      	bne.n	800339c <HAL_SPI_Transmit+0x16e>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d102      	bne.n	80033a2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033a0:	e074      	b.n	800348c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1ce      	bne.n	800334a <HAL_SPI_Transmit+0x11c>
 80033ac:	e04c      	b.n	8003448 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <HAL_SPI_Transmit+0x18e>
 80033b6:	8afb      	ldrh	r3, [r7, #22]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d140      	bne.n	800343e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	330c      	adds	r3, #12
 80033c6:	7812      	ldrb	r2, [r2, #0]
 80033c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033e2:	e02c      	b.n	800343e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d113      	bne.n	800341a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	330c      	adds	r3, #12
 80033fc:	7812      	ldrb	r2, [r2, #0]
 80033fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	86da      	strh	r2, [r3, #54]	; 0x36
 8003418:	e011      	b.n	800343e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800341a:	f7fe fa7d 	bl	8001918 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d803      	bhi.n	8003432 <HAL_SPI_Transmit+0x204>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d102      	bne.n	8003438 <HAL_SPI_Transmit+0x20a>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d102      	bne.n	800343e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800343c:	e026      	b.n	800348c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1cd      	bne.n	80033e4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	6839      	ldr	r1, [r7, #0]
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 fa55 	bl	80038fc <SPI_EndRxTxTransaction>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10a      	bne.n	800347c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003466:	2300      	movs	r3, #0
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	77fb      	strb	r3, [r7, #31]
 8003488:	e000      	b.n	800348c <HAL_SPI_Transmit+0x25e>
  }

error:
 800348a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800349c:	7ffb      	ldrb	r3, [r7, #31]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b08c      	sub	sp, #48	; 0x30
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034b4:	2301      	movs	r3, #1
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_SPI_TransmitReceive+0x26>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e18a      	b.n	80037e2 <HAL_SPI_TransmitReceive+0x33c>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034d4:	f7fe fa20 	bl	8001918 <HAL_GetTick>
 80034d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80034ea:	887b      	ldrh	r3, [r7, #2]
 80034ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d00f      	beq.n	8003516 <HAL_SPI_TransmitReceive+0x70>
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034fc:	d107      	bne.n	800350e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d103      	bne.n	800350e <HAL_SPI_TransmitReceive+0x68>
 8003506:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800350a:	2b04      	cmp	r3, #4
 800350c:	d003      	beq.n	8003516 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800350e:	2302      	movs	r3, #2
 8003510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003514:	e15b      	b.n	80037ce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_SPI_TransmitReceive+0x82>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_SPI_TransmitReceive+0x82>
 8003522:	887b      	ldrh	r3, [r7, #2]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d103      	bne.n	8003530 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800352e:	e14e      	b.n	80037ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b04      	cmp	r3, #4
 800353a:	d003      	beq.n	8003544 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2205      	movs	r2, #5
 8003540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	887a      	ldrh	r2, [r7, #2]
 8003554:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	887a      	ldrh	r2, [r7, #2]
 800355a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	887a      	ldrh	r2, [r7, #2]
 8003566:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	887a      	ldrh	r2, [r7, #2]
 800356c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003584:	2b40      	cmp	r3, #64	; 0x40
 8003586:	d007      	beq.n	8003598 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003596:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035a0:	d178      	bne.n	8003694 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <HAL_SPI_TransmitReceive+0x10a>
 80035aa:	8b7b      	ldrh	r3, [r7, #26]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d166      	bne.n	800367e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	881a      	ldrh	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	1c9a      	adds	r2, r3, #2
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035d4:	e053      	b.n	800367e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d11b      	bne.n	800361c <HAL_SPI_TransmitReceive+0x176>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d016      	beq.n	800361c <HAL_SPI_TransmitReceive+0x176>
 80035ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d113      	bne.n	800361c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	881a      	ldrh	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	1c9a      	adds	r2, r3, #2
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b01      	cmp	r3, #1
 8003628:	d119      	bne.n	800365e <HAL_SPI_TransmitReceive+0x1b8>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d014      	beq.n	800365e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	b292      	uxth	r2, r2
 8003640:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	1c9a      	adds	r2, r3, #2
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800365a:	2301      	movs	r3, #1
 800365c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800365e:	f7fe f95b 	bl	8001918 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800366a:	429a      	cmp	r2, r3
 800366c:	d807      	bhi.n	800367e <HAL_SPI_TransmitReceive+0x1d8>
 800366e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003674:	d003      	beq.n	800367e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800367c:	e0a7      	b.n	80037ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1a6      	bne.n	80035d6 <HAL_SPI_TransmitReceive+0x130>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1a1      	bne.n	80035d6 <HAL_SPI_TransmitReceive+0x130>
 8003692:	e07c      	b.n	800378e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <HAL_SPI_TransmitReceive+0x1fc>
 800369c:	8b7b      	ldrh	r3, [r7, #26]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d16b      	bne.n	800377a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	330c      	adds	r3, #12
 80036ac:	7812      	ldrb	r2, [r2, #0]
 80036ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036c8:	e057      	b.n	800377a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d11c      	bne.n	8003712 <HAL_SPI_TransmitReceive+0x26c>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d017      	beq.n	8003712 <HAL_SPI_TransmitReceive+0x26c>
 80036e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d114      	bne.n	8003712 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	330c      	adds	r3, #12
 80036f2:	7812      	ldrb	r2, [r2, #0]
 80036f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003704:	b29b      	uxth	r3, r3
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b01      	cmp	r3, #1
 800371e:	d119      	bne.n	8003754 <HAL_SPI_TransmitReceive+0x2ae>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d014      	beq.n	8003754 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003750:	2301      	movs	r3, #1
 8003752:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003754:	f7fe f8e0 	bl	8001918 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003760:	429a      	cmp	r2, r3
 8003762:	d803      	bhi.n	800376c <HAL_SPI_TransmitReceive+0x2c6>
 8003764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376a:	d102      	bne.n	8003772 <HAL_SPI_TransmitReceive+0x2cc>
 800376c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376e:	2b00      	cmp	r3, #0
 8003770:	d103      	bne.n	800377a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003778:	e029      	b.n	80037ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377e:	b29b      	uxth	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1a2      	bne.n	80036ca <HAL_SPI_TransmitReceive+0x224>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003788:	b29b      	uxth	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d19d      	bne.n	80036ca <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800378e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003790:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f8b2 	bl	80038fc <SPI_EndRxTxTransaction>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d006      	beq.n	80037ac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80037aa:	e010      	b.n	80037ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10b      	bne.n	80037cc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	e000      	b.n	80037ce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80037cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3730      	adds	r7, #48	; 0x30
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037fc:	f7fe f88c 	bl	8001918 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	4413      	add	r3, r2
 800380a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800380c:	f7fe f884 	bl	8001918 <HAL_GetTick>
 8003810:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003812:	4b39      	ldr	r3, [pc, #228]	; (80038f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	015b      	lsls	r3, r3, #5
 8003818:	0d1b      	lsrs	r3, r3, #20
 800381a:	69fa      	ldr	r2, [r7, #28]
 800381c:	fb02 f303 	mul.w	r3, r2, r3
 8003820:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003822:	e054      	b.n	80038ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382a:	d050      	beq.n	80038ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800382c:	f7fe f874 	bl	8001918 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	429a      	cmp	r2, r3
 800383a:	d902      	bls.n	8003842 <SPI_WaitFlagStateUntilTimeout+0x56>
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d13d      	bne.n	80038be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003850:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800385a:	d111      	bne.n	8003880 <SPI_WaitFlagStateUntilTimeout+0x94>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003864:	d004      	beq.n	8003870 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386e:	d107      	bne.n	8003880 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800387e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003888:	d10f      	bne.n	80038aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e017      	b.n	80038ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4013      	ands	r3, r2
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	429a      	cmp	r2, r3
 80038dc:	bf0c      	ite	eq
 80038de:	2301      	moveq	r3, #1
 80038e0:	2300      	movne	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d19b      	bne.n	8003824 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3720      	adds	r7, #32
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000004 	.word	0x20000004

080038fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003908:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <SPI_EndRxTxTransaction+0x7c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a1b      	ldr	r2, [pc, #108]	; (800397c <SPI_EndRxTxTransaction+0x80>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	0d5b      	lsrs	r3, r3, #21
 8003914:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003918:	fb02 f303 	mul.w	r3, r2, r3
 800391c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003926:	d112      	bne.n	800394e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2200      	movs	r2, #0
 8003930:	2180      	movs	r1, #128	; 0x80
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f7ff ff5a 	bl	80037ec <SPI_WaitFlagStateUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d016      	beq.n	800396c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003942:	f043 0220 	orr.w	r2, r3, #32
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e00f      	b.n	800396e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	3b01      	subs	r3, #1
 8003958:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003964:	2b80      	cmp	r3, #128	; 0x80
 8003966:	d0f2      	beq.n	800394e <SPI_EndRxTxTransaction+0x52>
 8003968:	e000      	b.n	800396c <SPI_EndRxTxTransaction+0x70>
        break;
 800396a:	bf00      	nop
  }

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	20000004 	.word	0x20000004
 800397c:	165e9f81 	.word	0x165e9f81

08003980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e031      	b.n	80039f6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fd f9d0 	bl	8000d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3304      	adds	r3, #4
 80039bc:	4619      	mov	r1, r3
 80039be:	4610      	mov	r0, r2
 80039c0:	f000 fa7e 	bl	8003ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d001      	beq.n	8003a18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e032      	b.n	8003a7e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a28:	d00e      	beq.n	8003a48 <HAL_TIM_Base_Start+0x48>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a16      	ldr	r2, [pc, #88]	; (8003a88 <HAL_TIM_Base_Start+0x88>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d009      	beq.n	8003a48 <HAL_TIM_Base_Start+0x48>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a14      	ldr	r2, [pc, #80]	; (8003a8c <HAL_TIM_Base_Start+0x8c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d004      	beq.n	8003a48 <HAL_TIM_Base_Start+0x48>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a13      	ldr	r2, [pc, #76]	; (8003a90 <HAL_TIM_Base_Start+0x90>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d111      	bne.n	8003a6c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b06      	cmp	r3, #6
 8003a58:	d010      	beq.n	8003a7c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 0201 	orr.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6a:	e007      	b.n	8003a7c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	40000400 	.word	0x40000400
 8003a8c:	40000800 	.word	0x40000800
 8003a90:	40010800 	.word	0x40010800

08003a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d001      	beq.n	8003aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e03a      	b.n	8003b22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003acc:	d00e      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0x58>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a16      	ldr	r2, [pc, #88]	; (8003b2c <HAL_TIM_Base_Start_IT+0x98>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d009      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0x58>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a14      	ldr	r2, [pc, #80]	; (8003b30 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d004      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0x58>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a13      	ldr	r2, [pc, #76]	; (8003b34 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d111      	bne.n	8003b10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b06      	cmp	r3, #6
 8003afc:	d010      	beq.n	8003b20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0201 	orr.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0e:	e007      	b.n	8003b20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	40000400 	.word	0x40000400
 8003b30:	40000800 	.word	0x40000800
 8003b34:	40010800 	.word	0x40010800

08003b38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d122      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d11b      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f06f 0202 	mvn.w	r2, #2
 8003b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f985 	bl	8003e8a <HAL_TIM_IC_CaptureCallback>
 8003b80:	e005      	b.n	8003b8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f978 	bl	8003e78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f987 	bl	8003e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d122      	bne.n	8003be8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d11b      	bne.n	8003be8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f06f 0204 	mvn.w	r2, #4
 8003bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f95b 	bl	8003e8a <HAL_TIM_IC_CaptureCallback>
 8003bd4:	e005      	b.n	8003be2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f94e 	bl	8003e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f95d 	bl	8003e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d122      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d11b      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f06f 0208 	mvn.w	r2, #8
 8003c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2204      	movs	r2, #4
 8003c12:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f931 	bl	8003e8a <HAL_TIM_IC_CaptureCallback>
 8003c28:	e005      	b.n	8003c36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f924 	bl	8003e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f933 	bl	8003e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0310 	and.w	r3, r3, #16
 8003c46:	2b10      	cmp	r3, #16
 8003c48:	d122      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	2b10      	cmp	r3, #16
 8003c56:	d11b      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0210 	mvn.w	r2, #16
 8003c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2208      	movs	r2, #8
 8003c66:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f907 	bl	8003e8a <HAL_TIM_IC_CaptureCallback>
 8003c7c:	e005      	b.n	8003c8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f8fa 	bl	8003e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f909 	bl	8003e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d10e      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d107      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f06f 0201 	mvn.w	r2, #1
 8003cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7fc fe48 	bl	800094c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc6:	2b40      	cmp	r3, #64	; 0x40
 8003cc8:	d10e      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd4:	2b40      	cmp	r3, #64	; 0x40
 8003cd6:	d107      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f8e3 	bl	8003eae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_TIM_ConfigClockSource+0x18>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e0b3      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x180>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d40:	d03e      	beq.n	8003dc0 <HAL_TIM_ConfigClockSource+0xd0>
 8003d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d46:	f200 8087 	bhi.w	8003e58 <HAL_TIM_ConfigClockSource+0x168>
 8003d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4e:	f000 8085 	beq.w	8003e5c <HAL_TIM_ConfigClockSource+0x16c>
 8003d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d56:	d87f      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x168>
 8003d58:	2b70      	cmp	r3, #112	; 0x70
 8003d5a:	d01a      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0xa2>
 8003d5c:	2b70      	cmp	r3, #112	; 0x70
 8003d5e:	d87b      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x168>
 8003d60:	2b60      	cmp	r3, #96	; 0x60
 8003d62:	d050      	beq.n	8003e06 <HAL_TIM_ConfigClockSource+0x116>
 8003d64:	2b60      	cmp	r3, #96	; 0x60
 8003d66:	d877      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x168>
 8003d68:	2b50      	cmp	r3, #80	; 0x50
 8003d6a:	d03c      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0xf6>
 8003d6c:	2b50      	cmp	r3, #80	; 0x50
 8003d6e:	d873      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x168>
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d058      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x136>
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	d86f      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x168>
 8003d78:	2b30      	cmp	r3, #48	; 0x30
 8003d7a:	d064      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x156>
 8003d7c:	2b30      	cmp	r3, #48	; 0x30
 8003d7e:	d86b      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x168>
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d060      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x156>
 8003d84:	2b20      	cmp	r3, #32
 8003d86:	d867      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x168>
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d05c      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x156>
 8003d8c:	2b10      	cmp	r3, #16
 8003d8e:	d05a      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d90:	e062      	b.n	8003e58 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	6899      	ldr	r1, [r3, #8]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f000 f974 	bl	800408e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003db4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	609a      	str	r2, [r3, #8]
      break;
 8003dbe:	e04e      	b.n	8003e5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6818      	ldr	r0, [r3, #0]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	6899      	ldr	r1, [r3, #8]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f000 f95d 	bl	800408e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003de2:	609a      	str	r2, [r3, #8]
      break;
 8003de4:	e03b      	b.n	8003e5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6859      	ldr	r1, [r3, #4]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	461a      	mov	r2, r3
 8003df4:	f000 f8d4 	bl	8003fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2150      	movs	r1, #80	; 0x50
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 f92b 	bl	800405a <TIM_ITRx_SetConfig>
      break;
 8003e04:	e02b      	b.n	8003e5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	6859      	ldr	r1, [r3, #4]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	461a      	mov	r2, r3
 8003e14:	f000 f8f2 	bl	8003ffc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2160      	movs	r1, #96	; 0x60
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f91b 	bl	800405a <TIM_ITRx_SetConfig>
      break;
 8003e24:	e01b      	b.n	8003e5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	6859      	ldr	r1, [r3, #4]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f000 f8b4 	bl	8003fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2140      	movs	r1, #64	; 0x40
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 f90b 	bl	800405a <TIM_ITRx_SetConfig>
      break;
 8003e44:	e00b      	b.n	8003e5e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4610      	mov	r0, r2
 8003e52:	f000 f902 	bl	800405a <TIM_ITRx_SetConfig>
        break;
 8003e56:	e002      	b.n	8003e5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e58:	bf00      	nop
 8003e5a:	e000      	b.n	8003e5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc80      	pop	{r7}
 8003e88:	4770      	bx	lr

08003e8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr

08003e9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr

08003eae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr

08003ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed6:	d00f      	beq.n	8003ef8 <TIM_Base_SetConfig+0x38>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a2b      	ldr	r2, [pc, #172]	; (8003f88 <TIM_Base_SetConfig+0xc8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00b      	beq.n	8003ef8 <TIM_Base_SetConfig+0x38>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a2a      	ldr	r2, [pc, #168]	; (8003f8c <TIM_Base_SetConfig+0xcc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d007      	beq.n	8003ef8 <TIM_Base_SetConfig+0x38>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a29      	ldr	r2, [pc, #164]	; (8003f90 <TIM_Base_SetConfig+0xd0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d003      	beq.n	8003ef8 <TIM_Base_SetConfig+0x38>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a28      	ldr	r2, [pc, #160]	; (8003f94 <TIM_Base_SetConfig+0xd4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d108      	bne.n	8003f0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f10:	d017      	beq.n	8003f42 <TIM_Base_SetConfig+0x82>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a1c      	ldr	r2, [pc, #112]	; (8003f88 <TIM_Base_SetConfig+0xc8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <TIM_Base_SetConfig+0x82>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a1b      	ldr	r2, [pc, #108]	; (8003f8c <TIM_Base_SetConfig+0xcc>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00f      	beq.n	8003f42 <TIM_Base_SetConfig+0x82>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a1a      	ldr	r2, [pc, #104]	; (8003f90 <TIM_Base_SetConfig+0xd0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00b      	beq.n	8003f42 <TIM_Base_SetConfig+0x82>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a19      	ldr	r2, [pc, #100]	; (8003f94 <TIM_Base_SetConfig+0xd4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d007      	beq.n	8003f42 <TIM_Base_SetConfig+0x82>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a18      	ldr	r2, [pc, #96]	; (8003f98 <TIM_Base_SetConfig+0xd8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <TIM_Base_SetConfig+0x82>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a17      	ldr	r2, [pc, #92]	; (8003f9c <TIM_Base_SetConfig+0xdc>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d108      	bne.n	8003f54 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	615a      	str	r2, [r3, #20]
}
 8003f7e:	bf00      	nop
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40000800 	.word	0x40000800
 8003f90:	40000c00 	.word	0x40000c00
 8003f94:	40010800 	.word	0x40010800
 8003f98:	40010c00 	.word	0x40010c00
 8003f9c:	40011000 	.word	0x40011000

08003fa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	f023 0201 	bic.w	r2, r3, #1
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f023 030a 	bic.w	r3, r3, #10
 8003fdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	621a      	str	r2, [r3, #32]
}
 8003ff2:	bf00      	nop
 8003ff4:	371c      	adds	r7, #28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr

08003ffc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	f023 0210 	bic.w	r2, r3, #16
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004026:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	031b      	lsls	r3, r3, #12
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004038:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	621a      	str	r2, [r3, #32]
}
 8004050:	bf00      	nop
 8004052:	371c      	adds	r7, #28
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr

0800405a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800405a:	b480      	push	{r7}
 800405c:	b085      	sub	sp, #20
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004070:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	f043 0307 	orr.w	r3, r3, #7
 800407c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	609a      	str	r2, [r3, #8]
}
 8004084:	bf00      	nop
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr

0800408e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800408e:	b480      	push	{r7}
 8004090:	b087      	sub	sp, #28
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
 800409a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	021a      	lsls	r2, r3, #8
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	431a      	orrs	r2, r3
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	609a      	str	r2, [r3, #8]
}
 80040c2:	bf00      	nop
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr

080040cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040e0:	2302      	movs	r3, #2
 80040e2:	e046      	b.n	8004172 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004126:	d00e      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a13      	ldr	r2, [pc, #76]	; (800417c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d009      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a12      	ldr	r2, [pc, #72]	; (8004180 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d004      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a10      	ldr	r2, [pc, #64]	; (8004184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d10c      	bne.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800414c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	4313      	orrs	r3, r2
 8004156:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr
 800417c:	40000400 	.word	0x40000400
 8004180:	40000800 	.word	0x40000800
 8004184:	40010800 	.word	0x40010800

08004188 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800418c:	4904      	ldr	r1, [pc, #16]	; (80041a0 <MX_FATFS_Init+0x18>)
 800418e:	4805      	ldr	r0, [pc, #20]	; (80041a4 <MX_FATFS_Init+0x1c>)
 8004190:	f002 fea8 	bl	8006ee4 <FATFS_LinkDriver>
 8004194:	4603      	mov	r3, r0
 8004196:	461a      	mov	r2, r3
 8004198:	4b03      	ldr	r3, [pc, #12]	; (80041a8 <MX_FATFS_Init+0x20>)
 800419a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800419c:	bf00      	nop
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20001744 	.word	0x20001744
 80041a4:	20000070 	.word	0x20000070
 80041a8:	20001748 	.word	0x20001748

080041ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80041b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr

080041ba <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	4603      	mov	r3, r0
 80041c2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 f9d8 	bl	800457c <USER_SPI_initialize>
 80041cc:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	4603      	mov	r3, r0
 80041de:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fab6 	bl	8004754 <USER_SPI_status>
 80041e8:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	4603      	mov	r3, r0
 8004200:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8004202:	7bf8      	ldrb	r0, [r7, #15]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	68b9      	ldr	r1, [r7, #8]
 800420a:	f000 fab7 	bl	800477c <USER_SPI_read>
 800420e:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	607a      	str	r2, [r7, #4]
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	4603      	mov	r3, r0
 8004226:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8004228:	7bf8      	ldrb	r0, [r7, #15]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	68b9      	ldr	r1, [r7, #8]
 8004230:	f000 fb0a 	bl	8004848 <USER_SPI_write>
 8004234:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b082      	sub	sp, #8
 8004242:	af00      	add	r7, sp, #0
 8004244:	4603      	mov	r3, r0
 8004246:	603a      	str	r2, [r7, #0]
 8004248:	71fb      	strb	r3, [r7, #7]
 800424a:	460b      	mov	r3, r1
 800424c:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800424e:	79b9      	ldrb	r1, [r7, #6]
 8004250:	79fb      	ldrb	r3, [r7, #7]
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fb73 	bl	8004940 <USER_SPI_ioctl>
 800425a:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800426c:	f7fd fb54 	bl	8001918 <HAL_GetTick>
 8004270:	4603      	mov	r3, r0
 8004272:	4a04      	ldr	r2, [pc, #16]	; (8004284 <SPI_Timer_On+0x20>)
 8004274:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8004276:	4a04      	ldr	r2, [pc, #16]	; (8004288 <SPI_Timer_On+0x24>)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6013      	str	r3, [r2, #0]
}
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20001bac 	.word	0x20001bac
 8004288:	20001bb0 	.word	0x20001bb0

0800428c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004290:	f7fd fb42 	bl	8001918 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <SPI_Timer_Status+0x24>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	1ad2      	subs	r2, r2, r3
 800429c:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <SPI_Timer_Status+0x28>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	bf34      	ite	cc
 80042a4:	2301      	movcc	r3, #1
 80042a6:	2300      	movcs	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20001bac 	.word	0x20001bac
 80042b4:	20001bb0 	.word	0x20001bb0

080042b8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af02      	add	r7, sp, #8
 80042be:	4603      	mov	r3, r0
 80042c0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80042c2:	f107 020f 	add.w	r2, r7, #15
 80042c6:	1df9      	adds	r1, r7, #7
 80042c8:	2332      	movs	r3, #50	; 0x32
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	2301      	movs	r3, #1
 80042ce:	4804      	ldr	r0, [pc, #16]	; (80042e0 <xchg_spi+0x28>)
 80042d0:	f7ff f8e9 	bl	80034a6 <HAL_SPI_TransmitReceive>
    return rxDat;
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20001578 	.word	0x20001578

080042e4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80042e4:	b590      	push	{r4, r7, lr}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	e00a      	b.n	800430a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	18d4      	adds	r4, r2, r3
 80042fa:	20ff      	movs	r0, #255	; 0xff
 80042fc:	f7ff ffdc 	bl	80042b8 <xchg_spi>
 8004300:	4603      	mov	r3, r0
 8004302:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3301      	adds	r3, #1
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d3f0      	bcc.n	80042f4 <rcvr_spi_multi+0x10>
	}
}
 8004312:	bf00      	nop
 8004314:	bf00      	nop
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	bd90      	pop	{r4, r7, pc}

0800431c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	e009      	b.n	8004340 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4413      	add	r3, r2
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff ffbf 	bl	80042b8 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3301      	adds	r3, #1
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d3f1      	bcc.n	800432c <xmit_spi_multi+0x10>
	}
}
 8004348:	bf00      	nop
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b086      	sub	sp, #24
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800435a:	f7fd fadd 	bl	8001918 <HAL_GetTick>
 800435e:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004364:	20ff      	movs	r0, #255	; 0xff
 8004366:	f7ff ffa7 	bl	80042b8 <xchg_spi>
 800436a:	4603      	mov	r3, r0
 800436c:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	2bff      	cmp	r3, #255	; 0xff
 8004372:	d007      	beq.n	8004384 <wait_ready+0x32>
 8004374:	f7fd fad0 	bl	8001918 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	429a      	cmp	r2, r3
 8004382:	d8ef      	bhi.n	8004364 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	2bff      	cmp	r3, #255	; 0xff
 8004388:	bf0c      	ite	eq
 800438a:	2301      	moveq	r3, #1
 800438c:	2300      	movne	r3, #0
 800438e:	b2db      	uxtb	r3, r3
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800439c:	2201      	movs	r2, #1
 800439e:	2102      	movs	r1, #2
 80043a0:	4803      	ldr	r0, [pc, #12]	; (80043b0 <despiselect+0x18>)
 80043a2:	f7fe f8ea 	bl	800257a <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80043a6:	20ff      	movs	r0, #255	; 0xff
 80043a8:	f7ff ff86 	bl	80042b8 <xchg_spi>

}
 80043ac:	bf00      	nop
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40020400 	.word	0x40020400

080043b4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80043b8:	2200      	movs	r2, #0
 80043ba:	2102      	movs	r1, #2
 80043bc:	4809      	ldr	r0, [pc, #36]	; (80043e4 <spiselect+0x30>)
 80043be:	f7fe f8dc 	bl	800257a <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80043c2:	20ff      	movs	r0, #255	; 0xff
 80043c4:	f7ff ff78 	bl	80042b8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80043c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043cc:	f7ff ffc1 	bl	8004352 <wait_ready>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <spiselect+0x26>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e002      	b.n	80043e0 <spiselect+0x2c>

	despiselect();
 80043da:	f7ff ffdd 	bl	8004398 <despiselect>
	return 0;	/* Timeout */
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40020400 	.word	0x40020400

080043e8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80043f2:	20c8      	movs	r0, #200	; 0xc8
 80043f4:	f7ff ff36 	bl	8004264 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80043f8:	20ff      	movs	r0, #255	; 0xff
 80043fa:	f7ff ff5d 	bl	80042b8 <xchg_spi>
 80043fe:	4603      	mov	r3, r0
 8004400:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	2bff      	cmp	r3, #255	; 0xff
 8004406:	d104      	bne.n	8004412 <rcvr_datablock+0x2a>
 8004408:	f7ff ff40 	bl	800428c <SPI_Timer_Status>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f2      	bne.n	80043f8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	2bfe      	cmp	r3, #254	; 0xfe
 8004416:	d001      	beq.n	800441c <rcvr_datablock+0x34>
 8004418:	2300      	movs	r3, #0
 800441a:	e00a      	b.n	8004432 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800441c:	6839      	ldr	r1, [r7, #0]
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff ff60 	bl	80042e4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004424:	20ff      	movs	r0, #255	; 0xff
 8004426:	f7ff ff47 	bl	80042b8 <xchg_spi>
 800442a:	20ff      	movs	r0, #255	; 0xff
 800442c:	f7ff ff44 	bl	80042b8 <xchg_spi>

	return 1;						/* Function succeeded */
 8004430:	2301      	movs	r3, #1
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b084      	sub	sp, #16
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	460b      	mov	r3, r1
 8004444:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004446:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800444a:	f7ff ff82 	bl	8004352 <wait_ready>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <xmit_datablock+0x1e>
 8004454:	2300      	movs	r3, #0
 8004456:	e01e      	b.n	8004496 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff ff2c 	bl	80042b8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004460:	78fb      	ldrb	r3, [r7, #3]
 8004462:	2bfd      	cmp	r3, #253	; 0xfd
 8004464:	d016      	beq.n	8004494 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004466:	f44f 7100 	mov.w	r1, #512	; 0x200
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff ff56 	bl	800431c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004470:	20ff      	movs	r0, #255	; 0xff
 8004472:	f7ff ff21 	bl	80042b8 <xchg_spi>
 8004476:	20ff      	movs	r0, #255	; 0xff
 8004478:	f7ff ff1e 	bl	80042b8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800447c:	20ff      	movs	r0, #255	; 0xff
 800447e:	f7ff ff1b 	bl	80042b8 <xchg_spi>
 8004482:	4603      	mov	r3, r0
 8004484:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004486:	7bfb      	ldrb	r3, [r7, #15]
 8004488:	f003 031f 	and.w	r3, r3, #31
 800448c:	2b05      	cmp	r3, #5
 800448e:	d001      	beq.n	8004494 <xmit_datablock+0x5a>
 8004490:	2300      	movs	r3, #0
 8004492:	e000      	b.n	8004496 <xmit_datablock+0x5c>
	}
	return 1;
 8004494:	2301      	movs	r3, #1
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	4603      	mov	r3, r0
 80044a6:	6039      	str	r1, [r7, #0]
 80044a8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80044aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	da0e      	bge.n	80044d0 <send_cmd+0x32>
		cmd &= 0x7F;
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044b8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80044ba:	2100      	movs	r1, #0
 80044bc:	2037      	movs	r0, #55	; 0x37
 80044be:	f7ff ffee 	bl	800449e <send_cmd>
 80044c2:	4603      	mov	r3, r0
 80044c4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80044c6:	7bbb      	ldrb	r3, [r7, #14]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d901      	bls.n	80044d0 <send_cmd+0x32>
 80044cc:	7bbb      	ldrb	r3, [r7, #14]
 80044ce:	e051      	b.n	8004574 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	2b0c      	cmp	r3, #12
 80044d4:	d008      	beq.n	80044e8 <send_cmd+0x4a>
		despiselect();
 80044d6:	f7ff ff5f 	bl	8004398 <despiselect>
		if (!spiselect()) return 0xFF;
 80044da:	f7ff ff6b 	bl	80043b4 <spiselect>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <send_cmd+0x4a>
 80044e4:	23ff      	movs	r3, #255	; 0xff
 80044e6:	e045      	b.n	8004574 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fee1 	bl	80042b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	0e1b      	lsrs	r3, r3, #24
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff fedb 	bl	80042b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	0c1b      	lsrs	r3, r3, #16
 8004506:	b2db      	uxtb	r3, r3
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff fed5 	bl	80042b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	0a1b      	lsrs	r3, r3, #8
 8004512:	b2db      	uxtb	r3, r3
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff fecf 	bl	80042b8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff feca 	bl	80042b8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <send_cmd+0x94>
 800452e:	2395      	movs	r3, #149	; 0x95
 8004530:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	2b08      	cmp	r3, #8
 8004536:	d101      	bne.n	800453c <send_cmd+0x9e>
 8004538:	2387      	movs	r3, #135	; 0x87
 800453a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff feba 	bl	80042b8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	2b0c      	cmp	r3, #12
 8004548:	d102      	bne.n	8004550 <send_cmd+0xb2>
 800454a:	20ff      	movs	r0, #255	; 0xff
 800454c:	f7ff feb4 	bl	80042b8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004550:	230a      	movs	r3, #10
 8004552:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004554:	20ff      	movs	r0, #255	; 0xff
 8004556:	f7ff feaf 	bl	80042b8 <xchg_spi>
 800455a:	4603      	mov	r3, r0
 800455c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800455e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004562:	2b00      	cmp	r3, #0
 8004564:	da05      	bge.n	8004572 <send_cmd+0xd4>
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	3b01      	subs	r3, #1
 800456a:	73fb      	strb	r3, [r7, #15]
 800456c:	7bfb      	ldrb	r3, [r7, #15]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <send_cmd+0xb6>

	return res;							/* Return received response */
 8004572:	7bbb      	ldrb	r3, [r7, #14]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	4603      	mov	r3, r0
 8004584:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <USER_SPI_initialize+0x14>
 800458c:	2301      	movs	r3, #1
 800458e:	e0d6      	b.n	800473e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004590:	4b6d      	ldr	r3, [pc, #436]	; (8004748 <USER_SPI_initialize+0x1cc>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <USER_SPI_initialize+0x2a>
 800459e:	4b6a      	ldr	r3, [pc, #424]	; (8004748 <USER_SPI_initialize+0x1cc>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	e0cb      	b.n	800473e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80045a6:	4b69      	ldr	r3, [pc, #420]	; (800474c <USER_SPI_initialize+0x1d0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80045b0:	4b66      	ldr	r3, [pc, #408]	; (800474c <USER_SPI_initialize+0x1d0>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80045b8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80045ba:	230a      	movs	r3, #10
 80045bc:	73fb      	strb	r3, [r7, #15]
 80045be:	e005      	b.n	80045cc <USER_SPI_initialize+0x50>
 80045c0:	20ff      	movs	r0, #255	; 0xff
 80045c2:	f7ff fe79 	bl	80042b8 <xchg_spi>
 80045c6:	7bfb      	ldrb	r3, [r7, #15]
 80045c8:	3b01      	subs	r3, #1
 80045ca:	73fb      	strb	r3, [r7, #15]
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f6      	bne.n	80045c0 <USER_SPI_initialize+0x44>

	ty = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80045d6:	2100      	movs	r1, #0
 80045d8:	2000      	movs	r0, #0
 80045da:	f7ff ff60 	bl	800449e <send_cmd>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	f040 808b 	bne.w	80046fc <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80045e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045ea:	f7ff fe3b 	bl	8004264 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80045ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80045f2:	2008      	movs	r0, #8
 80045f4:	f7ff ff53 	bl	800449e <send_cmd>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d151      	bne.n	80046a2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80045fe:	2300      	movs	r3, #0
 8004600:	73fb      	strb	r3, [r7, #15]
 8004602:	e00d      	b.n	8004620 <USER_SPI_initialize+0xa4>
 8004604:	7bfc      	ldrb	r4, [r7, #15]
 8004606:	20ff      	movs	r0, #255	; 0xff
 8004608:	f7ff fe56 	bl	80042b8 <xchg_spi>
 800460c:	4603      	mov	r3, r0
 800460e:	461a      	mov	r2, r3
 8004610:	f107 0310 	add.w	r3, r7, #16
 8004614:	4423      	add	r3, r4
 8004616:	f803 2c08 	strb.w	r2, [r3, #-8]
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	3301      	adds	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
 8004620:	7bfb      	ldrb	r3, [r7, #15]
 8004622:	2b03      	cmp	r3, #3
 8004624:	d9ee      	bls.n	8004604 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8004626:	7abb      	ldrb	r3, [r7, #10]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d167      	bne.n	80046fc <USER_SPI_initialize+0x180>
 800462c:	7afb      	ldrb	r3, [r7, #11]
 800462e:	2baa      	cmp	r3, #170	; 0xaa
 8004630:	d164      	bne.n	80046fc <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004632:	bf00      	nop
 8004634:	f7ff fe2a 	bl	800428c <SPI_Timer_Status>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d007      	beq.n	800464e <USER_SPI_initialize+0xd2>
 800463e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004642:	20a9      	movs	r0, #169	; 0xa9
 8004644:	f7ff ff2b 	bl	800449e <send_cmd>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f2      	bne.n	8004634 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800464e:	f7ff fe1d 	bl	800428c <SPI_Timer_Status>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d051      	beq.n	80046fc <USER_SPI_initialize+0x180>
 8004658:	2100      	movs	r1, #0
 800465a:	203a      	movs	r0, #58	; 0x3a
 800465c:	f7ff ff1f 	bl	800449e <send_cmd>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d14a      	bne.n	80046fc <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8004666:	2300      	movs	r3, #0
 8004668:	73fb      	strb	r3, [r7, #15]
 800466a:	e00d      	b.n	8004688 <USER_SPI_initialize+0x10c>
 800466c:	7bfc      	ldrb	r4, [r7, #15]
 800466e:	20ff      	movs	r0, #255	; 0xff
 8004670:	f7ff fe22 	bl	80042b8 <xchg_spi>
 8004674:	4603      	mov	r3, r0
 8004676:	461a      	mov	r2, r3
 8004678:	f107 0310 	add.w	r3, r7, #16
 800467c:	4423      	add	r3, r4
 800467e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	3301      	adds	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
 8004688:	7bfb      	ldrb	r3, [r7, #15]
 800468a:	2b03      	cmp	r3, #3
 800468c:	d9ee      	bls.n	800466c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800468e:	7a3b      	ldrb	r3, [r7, #8]
 8004690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <USER_SPI_initialize+0x120>
 8004698:	230c      	movs	r3, #12
 800469a:	e000      	b.n	800469e <USER_SPI_initialize+0x122>
 800469c:	2304      	movs	r3, #4
 800469e:	737b      	strb	r3, [r7, #13]
 80046a0:	e02c      	b.n	80046fc <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80046a2:	2100      	movs	r1, #0
 80046a4:	20a9      	movs	r0, #169	; 0xa9
 80046a6:	f7ff fefa 	bl	800449e <send_cmd>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d804      	bhi.n	80046ba <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80046b0:	2302      	movs	r3, #2
 80046b2:	737b      	strb	r3, [r7, #13]
 80046b4:	23a9      	movs	r3, #169	; 0xa9
 80046b6:	73bb      	strb	r3, [r7, #14]
 80046b8:	e003      	b.n	80046c2 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80046ba:	2301      	movs	r3, #1
 80046bc:	737b      	strb	r3, [r7, #13]
 80046be:	2301      	movs	r3, #1
 80046c0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80046c2:	bf00      	nop
 80046c4:	f7ff fde2 	bl	800428c <SPI_Timer_Status>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d007      	beq.n	80046de <USER_SPI_initialize+0x162>
 80046ce:	7bbb      	ldrb	r3, [r7, #14]
 80046d0:	2100      	movs	r1, #0
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fee3 	bl	800449e <send_cmd>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f2      	bne.n	80046c4 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80046de:	f7ff fdd5 	bl	800428c <SPI_Timer_Status>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <USER_SPI_initialize+0x17c>
 80046e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046ec:	2010      	movs	r0, #16
 80046ee:	f7ff fed6 	bl	800449e <send_cmd>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <USER_SPI_initialize+0x180>
				ty = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80046fc:	4a14      	ldr	r2, [pc, #80]	; (8004750 <USER_SPI_initialize+0x1d4>)
 80046fe:	7b7b      	ldrb	r3, [r7, #13]
 8004700:	7013      	strb	r3, [r2, #0]
	despiselect();
 8004702:	f7ff fe49 	bl	8004398 <despiselect>

	if (ty) {			/* OK */
 8004706:	7b7b      	ldrb	r3, [r7, #13]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d012      	beq.n	8004732 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <USER_SPI_initialize+0x1d0>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004716:	4b0d      	ldr	r3, [pc, #52]	; (800474c <USER_SPI_initialize+0x1d0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0210 	orr.w	r2, r2, #16
 800471e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004720:	4b09      	ldr	r3, [pc, #36]	; (8004748 <USER_SPI_initialize+0x1cc>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	f023 0301 	bic.w	r3, r3, #1
 800472a:	b2da      	uxtb	r2, r3
 800472c:	4b06      	ldr	r3, [pc, #24]	; (8004748 <USER_SPI_initialize+0x1cc>)
 800472e:	701a      	strb	r2, [r3, #0]
 8004730:	e002      	b.n	8004738 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8004732:	4b05      	ldr	r3, [pc, #20]	; (8004748 <USER_SPI_initialize+0x1cc>)
 8004734:	2201      	movs	r2, #1
 8004736:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004738:	4b03      	ldr	r3, [pc, #12]	; (8004748 <USER_SPI_initialize+0x1cc>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	b2db      	uxtb	r3, r3
}
 800473e:	4618      	mov	r0, r3
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	bd90      	pop	{r4, r7, pc}
 8004746:	bf00      	nop
 8004748:	20000084 	.word	0x20000084
 800474c:	20001578 	.word	0x20001578
 8004750:	20001542 	.word	0x20001542

08004754 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	4603      	mov	r3, r0
 800475c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <USER_SPI_status+0x14>
 8004764:	2301      	movs	r3, #1
 8004766:	e002      	b.n	800476e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004768:	4b03      	ldr	r3, [pc, #12]	; (8004778 <USER_SPI_status+0x24>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	b2db      	uxtb	r3, r3
}
 800476e:	4618      	mov	r0, r3
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	bc80      	pop	{r7}
 8004776:	4770      	bx	lr
 8004778:	20000084 	.word	0x20000084

0800477c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	607a      	str	r2, [r7, #4]
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	4603      	mov	r3, r0
 800478a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d102      	bne.n	8004798 <USER_SPI_read+0x1c>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <USER_SPI_read+0x20>
 8004798:	2304      	movs	r3, #4
 800479a:	e04d      	b.n	8004838 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800479c:	4b28      	ldr	r3, [pc, #160]	; (8004840 <USER_SPI_read+0xc4>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <USER_SPI_read+0x32>
 80047aa:	2303      	movs	r3, #3
 80047ac:	e044      	b.n	8004838 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80047ae:	4b25      	ldr	r3, [pc, #148]	; (8004844 <USER_SPI_read+0xc8>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d102      	bne.n	80047c0 <USER_SPI_read+0x44>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	025b      	lsls	r3, r3, #9
 80047be:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d111      	bne.n	80047ea <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	2011      	movs	r0, #17
 80047ca:	f7ff fe68 	bl	800449e <send_cmd>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d129      	bne.n	8004828 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80047d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047d8:	68b8      	ldr	r0, [r7, #8]
 80047da:	f7ff fe05 	bl	80043e8 <rcvr_datablock>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d021      	beq.n	8004828 <USER_SPI_read+0xac>
			count = 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	e01e      	b.n	8004828 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	2012      	movs	r0, #18
 80047ee:	f7ff fe56 	bl	800449e <send_cmd>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d117      	bne.n	8004828 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80047f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047fc:	68b8      	ldr	r0, [r7, #8]
 80047fe:	f7ff fdf3 	bl	80043e8 <rcvr_datablock>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <USER_SPI_read+0xa2>
				buff += 512;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800480e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	3b01      	subs	r3, #1
 8004814:	603b      	str	r3, [r7, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1ed      	bne.n	80047f8 <USER_SPI_read+0x7c>
 800481c:	e000      	b.n	8004820 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800481e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004820:	2100      	movs	r1, #0
 8004822:	200c      	movs	r0, #12
 8004824:	f7ff fe3b 	bl	800449e <send_cmd>
		}
	}
	despiselect();
 8004828:	f7ff fdb6 	bl	8004398 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	bf14      	ite	ne
 8004832:	2301      	movne	r3, #1
 8004834:	2300      	moveq	r3, #0
 8004836:	b2db      	uxtb	r3, r3
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20000084 	.word	0x20000084
 8004844:	20001542 	.word	0x20001542

08004848 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	4603      	mov	r3, r0
 8004856:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d102      	bne.n	8004864 <USER_SPI_write+0x1c>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <USER_SPI_write+0x20>
 8004864:	2304      	movs	r3, #4
 8004866:	e063      	b.n	8004930 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004868:	4b33      	ldr	r3, [pc, #204]	; (8004938 <USER_SPI_write+0xf0>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <USER_SPI_write+0x32>
 8004876:	2303      	movs	r3, #3
 8004878:	e05a      	b.n	8004930 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800487a:	4b2f      	ldr	r3, [pc, #188]	; (8004938 <USER_SPI_write+0xf0>)
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	b2db      	uxtb	r3, r3
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <USER_SPI_write+0x44>
 8004888:	2302      	movs	r3, #2
 800488a:	e051      	b.n	8004930 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800488c:	4b2b      	ldr	r3, [pc, #172]	; (800493c <USER_SPI_write+0xf4>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d102      	bne.n	800489e <USER_SPI_write+0x56>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	025b      	lsls	r3, r3, #9
 800489c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d110      	bne.n	80048c6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	2018      	movs	r0, #24
 80048a8:	f7ff fdf9 	bl	800449e <send_cmd>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d136      	bne.n	8004920 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80048b2:	21fe      	movs	r1, #254	; 0xfe
 80048b4:	68b8      	ldr	r0, [r7, #8]
 80048b6:	f7ff fdc0 	bl	800443a <xmit_datablock>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d02f      	beq.n	8004920 <USER_SPI_write+0xd8>
			count = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	e02c      	b.n	8004920 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80048c6:	4b1d      	ldr	r3, [pc, #116]	; (800493c <USER_SPI_write+0xf4>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	f003 0306 	and.w	r3, r3, #6
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <USER_SPI_write+0x92>
 80048d2:	6839      	ldr	r1, [r7, #0]
 80048d4:	2097      	movs	r0, #151	; 0x97
 80048d6:	f7ff fde2 	bl	800449e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	2019      	movs	r0, #25
 80048de:	f7ff fdde 	bl	800449e <send_cmd>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d11b      	bne.n	8004920 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80048e8:	21fc      	movs	r1, #252	; 0xfc
 80048ea:	68b8      	ldr	r0, [r7, #8]
 80048ec:	f7ff fda5 	bl	800443a <xmit_datablock>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <USER_SPI_write+0xc4>
				buff += 512;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80048fc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	3b01      	subs	r3, #1
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1ee      	bne.n	80048e8 <USER_SPI_write+0xa0>
 800490a:	e000      	b.n	800490e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800490c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800490e:	21fd      	movs	r1, #253	; 0xfd
 8004910:	2000      	movs	r0, #0
 8004912:	f7ff fd92 	bl	800443a <xmit_datablock>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <USER_SPI_write+0xd8>
 800491c:	2301      	movs	r3, #1
 800491e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004920:	f7ff fd3a 	bl	8004398 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	bf14      	ite	ne
 800492a:	2301      	movne	r3, #1
 800492c:	2300      	moveq	r3, #0
 800492e:	b2db      	uxtb	r3, r3
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	20000084 	.word	0x20000084
 800493c:	20001542 	.word	0x20001542

08004940 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08c      	sub	sp, #48	; 0x30
 8004944:	af00      	add	r7, sp, #0
 8004946:	4603      	mov	r3, r0
 8004948:	603a      	str	r2, [r7, #0]
 800494a:	71fb      	strb	r3, [r7, #7]
 800494c:	460b      	mov	r3, r1
 800494e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004950:	79fb      	ldrb	r3, [r7, #7]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <USER_SPI_ioctl+0x1a>
 8004956:	2304      	movs	r3, #4
 8004958:	e15a      	b.n	8004c10 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800495a:	4baf      	ldr	r3, [pc, #700]	; (8004c18 <USER_SPI_ioctl+0x2d8>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	b2db      	uxtb	r3, r3
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <USER_SPI_ioctl+0x2c>
 8004968:	2303      	movs	r3, #3
 800496a:	e151      	b.n	8004c10 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8004972:	79bb      	ldrb	r3, [r7, #6]
 8004974:	2b04      	cmp	r3, #4
 8004976:	f200 8136 	bhi.w	8004be6 <USER_SPI_ioctl+0x2a6>
 800497a:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <USER_SPI_ioctl+0x40>)
 800497c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004980:	08004995 	.word	0x08004995
 8004984:	080049a9 	.word	0x080049a9
 8004988:	08004be7 	.word	0x08004be7
 800498c:	08004a55 	.word	0x08004a55
 8004990:	08004b4b 	.word	0x08004b4b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004994:	f7ff fd0e 	bl	80043b4 <spiselect>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 8127 	beq.w	8004bee <USER_SPI_ioctl+0x2ae>
 80049a0:	2300      	movs	r3, #0
 80049a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80049a6:	e122      	b.n	8004bee <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80049a8:	2100      	movs	r1, #0
 80049aa:	2009      	movs	r0, #9
 80049ac:	f7ff fd77 	bl	800449e <send_cmd>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f040 811d 	bne.w	8004bf2 <USER_SPI_ioctl+0x2b2>
 80049b8:	f107 030c 	add.w	r3, r7, #12
 80049bc:	2110      	movs	r1, #16
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fd12 	bl	80043e8 <rcvr_datablock>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 8113 	beq.w	8004bf2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80049cc:	7b3b      	ldrb	r3, [r7, #12]
 80049ce:	099b      	lsrs	r3, r3, #6
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d111      	bne.n	80049fa <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80049d6:	7d7b      	ldrb	r3, [r7, #21]
 80049d8:	461a      	mov	r2, r3
 80049da:	7d3b      	ldrb	r3, [r7, #20]
 80049dc:	021b      	lsls	r3, r3, #8
 80049de:	4413      	add	r3, r2
 80049e0:	461a      	mov	r2, r3
 80049e2:	7cfb      	ldrb	r3, [r7, #19]
 80049e4:	041b      	lsls	r3, r3, #16
 80049e6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80049ea:	4413      	add	r3, r2
 80049ec:	3301      	adds	r3, #1
 80049ee:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	029a      	lsls	r2, r3, #10
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	e028      	b.n	8004a4c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80049fa:	7c7b      	ldrb	r3, [r7, #17]
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	7dbb      	ldrb	r3, [r7, #22]
 8004a04:	09db      	lsrs	r3, r3, #7
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	4413      	add	r3, r2
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	7d7b      	ldrb	r3, [r7, #21]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	f003 0306 	and.w	r3, r3, #6
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	4413      	add	r3, r2
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	3302      	adds	r3, #2
 8004a1e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004a22:	7d3b      	ldrb	r3, [r7, #20]
 8004a24:	099b      	lsrs	r3, r3, #6
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	7cfb      	ldrb	r3, [r7, #19]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	441a      	add	r2, r3
 8004a30:	7cbb      	ldrb	r3, [r7, #18]
 8004a32:	029b      	lsls	r3, r3, #10
 8004a34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a38:	4413      	add	r3, r2
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004a3e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a42:	3b09      	subs	r3, #9
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	409a      	lsls	r2, r3
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004a52:	e0ce      	b.n	8004bf2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004a54:	4b71      	ldr	r3, [pc, #452]	; (8004c1c <USER_SPI_ioctl+0x2dc>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d031      	beq.n	8004ac4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004a60:	2100      	movs	r1, #0
 8004a62:	208d      	movs	r0, #141	; 0x8d
 8004a64:	f7ff fd1b 	bl	800449e <send_cmd>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f040 80c3 	bne.w	8004bf6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004a70:	20ff      	movs	r0, #255	; 0xff
 8004a72:	f7ff fc21 	bl	80042b8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004a76:	f107 030c 	add.w	r3, r7, #12
 8004a7a:	2110      	movs	r1, #16
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff fcb3 	bl	80043e8 <rcvr_datablock>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 80b6 	beq.w	8004bf6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004a8a:	2330      	movs	r3, #48	; 0x30
 8004a8c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004a90:	e007      	b.n	8004aa2 <USER_SPI_ioctl+0x162>
 8004a92:	20ff      	movs	r0, #255	; 0xff
 8004a94:	f7ff fc10 	bl	80042b8 <xchg_spi>
 8004a98:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004aa2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f3      	bne.n	8004a92 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004aaa:	7dbb      	ldrb	r3, [r7, #22]
 8004aac:	091b      	lsrs	r3, r3, #4
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	2310      	movs	r3, #16
 8004ab4:	fa03 f202 	lsl.w	r2, r3, r2
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004ac2:	e098      	b.n	8004bf6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	2009      	movs	r0, #9
 8004ac8:	f7ff fce9 	bl	800449e <send_cmd>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f040 8091 	bne.w	8004bf6 <USER_SPI_ioctl+0x2b6>
 8004ad4:	f107 030c 	add.w	r3, r7, #12
 8004ad8:	2110      	movs	r1, #16
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff fc84 	bl	80043e8 <rcvr_datablock>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 8087 	beq.w	8004bf6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004ae8:	4b4c      	ldr	r3, [pc, #304]	; (8004c1c <USER_SPI_ioctl+0x2dc>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d012      	beq.n	8004b1a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004af4:	7dbb      	ldrb	r3, [r7, #22]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004afc:	7dfa      	ldrb	r2, [r7, #23]
 8004afe:	09d2      	lsrs	r2, r2, #7
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	4413      	add	r3, r2
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	7e7b      	ldrb	r3, [r7, #25]
 8004b08:	099b      	lsrs	r3, r3, #6
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	e013      	b.n	8004b42 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004b1a:	7dbb      	ldrb	r3, [r7, #22]
 8004b1c:	109b      	asrs	r3, r3, #2
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	f003 031f 	and.w	r3, r3, #31
 8004b24:	3301      	adds	r3, #1
 8004b26:	7dfa      	ldrb	r2, [r7, #23]
 8004b28:	00d2      	lsls	r2, r2, #3
 8004b2a:	f002 0218 	and.w	r2, r2, #24
 8004b2e:	7df9      	ldrb	r1, [r7, #23]
 8004b30:	0949      	lsrs	r1, r1, #5
 8004b32:	b2c9      	uxtb	r1, r1
 8004b34:	440a      	add	r2, r1
 8004b36:	3201      	adds	r2, #1
 8004b38:	fb02 f303 	mul.w	r3, r2, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004b48:	e055      	b.n	8004bf6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004b4a:	4b34      	ldr	r3, [pc, #208]	; (8004c1c <USER_SPI_ioctl+0x2dc>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	f003 0306 	and.w	r3, r3, #6
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d051      	beq.n	8004bfa <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004b56:	f107 020c 	add.w	r2, r7, #12
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	210b      	movs	r1, #11
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff feee 	bl	8004940 <USER_SPI_ioctl>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d149      	bne.n	8004bfe <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004b6a:	7b3b      	ldrb	r3, [r7, #12]
 8004b6c:	099b      	lsrs	r3, r3, #6
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d104      	bne.n	8004b7e <USER_SPI_ioctl+0x23e>
 8004b74:	7dbb      	ldrb	r3, [r7, #22]
 8004b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d041      	beq.n	8004c02 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	623b      	str	r3, [r7, #32]
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8004b8e:	4b23      	ldr	r3, [pc, #140]	; (8004c1c <USER_SPI_ioctl+0x2dc>)
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d105      	bne.n	8004ba6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	025b      	lsls	r3, r3, #9
 8004b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	025b      	lsls	r3, r3, #9
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004ba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ba8:	2020      	movs	r0, #32
 8004baa:	f7ff fc78 	bl	800449e <send_cmd>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d128      	bne.n	8004c06 <USER_SPI_ioctl+0x2c6>
 8004bb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bb6:	2021      	movs	r0, #33	; 0x21
 8004bb8:	f7ff fc71 	bl	800449e <send_cmd>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d121      	bne.n	8004c06 <USER_SPI_ioctl+0x2c6>
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	2026      	movs	r0, #38	; 0x26
 8004bc6:	f7ff fc6a 	bl	800449e <send_cmd>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d11a      	bne.n	8004c06 <USER_SPI_ioctl+0x2c6>
 8004bd0:	f247 5030 	movw	r0, #30000	; 0x7530
 8004bd4:	f7ff fbbd 	bl	8004352 <wait_ready>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d013      	beq.n	8004c06 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8004bde:	2300      	movs	r3, #0
 8004be0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004be4:	e00f      	b.n	8004c06 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8004be6:	2304      	movs	r3, #4
 8004be8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004bec:	e00c      	b.n	8004c08 <USER_SPI_ioctl+0x2c8>
		break;
 8004bee:	bf00      	nop
 8004bf0:	e00a      	b.n	8004c08 <USER_SPI_ioctl+0x2c8>
		break;
 8004bf2:	bf00      	nop
 8004bf4:	e008      	b.n	8004c08 <USER_SPI_ioctl+0x2c8>
		break;
 8004bf6:	bf00      	nop
 8004bf8:	e006      	b.n	8004c08 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004bfa:	bf00      	nop
 8004bfc:	e004      	b.n	8004c08 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004bfe:	bf00      	nop
 8004c00:	e002      	b.n	8004c08 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004c02:	bf00      	nop
 8004c04:	e000      	b.n	8004c08 <USER_SPI_ioctl+0x2c8>
		break;
 8004c06:	bf00      	nop
	}

	despiselect();
 8004c08:	f7ff fbc6 	bl	8004398 <despiselect>

	return res;
 8004c0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3730      	adds	r7, #48	; 0x30
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	20000084 	.word	0x20000084
 8004c1c:	20001542 	.word	0x20001542

08004c20 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	4603      	mov	r3, r0
 8004c28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	4a08      	ldr	r2, [pc, #32]	; (8004c50 <disk_status+0x30>)
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	79fa      	ldrb	r2, [r7, #7]
 8004c38:	4905      	ldr	r1, [pc, #20]	; (8004c50 <disk_status+0x30>)
 8004c3a:	440a      	add	r2, r1
 8004c3c:	7a12      	ldrb	r2, [r2, #8]
 8004c3e:	4610      	mov	r0, r2
 8004c40:	4798      	blx	r3
 8004c42:	4603      	mov	r3, r0
 8004c44:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	2000156c 	.word	0x2000156c

08004c54 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004c62:	79fb      	ldrb	r3, [r7, #7]
 8004c64:	4a0d      	ldr	r2, [pc, #52]	; (8004c9c <disk_initialize+0x48>)
 8004c66:	5cd3      	ldrb	r3, [r2, r3]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d111      	bne.n	8004c90 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	4a0b      	ldr	r2, [pc, #44]	; (8004c9c <disk_initialize+0x48>)
 8004c70:	2101      	movs	r1, #1
 8004c72:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	4a09      	ldr	r2, [pc, #36]	; (8004c9c <disk_initialize+0x48>)
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	79fa      	ldrb	r2, [r7, #7]
 8004c82:	4906      	ldr	r1, [pc, #24]	; (8004c9c <disk_initialize+0x48>)
 8004c84:	440a      	add	r2, r1
 8004c86:	7a12      	ldrb	r2, [r2, #8]
 8004c88:	4610      	mov	r0, r2
 8004c8a:	4798      	blx	r3
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	2000156c 	.word	0x2000156c

08004ca0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004ca0:	b590      	push	{r4, r7, lr}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	607a      	str	r2, [r7, #4]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	4603      	mov	r3, r0
 8004cae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	4a0a      	ldr	r2, [pc, #40]	; (8004cdc <disk_read+0x3c>)
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	689c      	ldr	r4, [r3, #8]
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	4a07      	ldr	r2, [pc, #28]	; (8004cdc <disk_read+0x3c>)
 8004cc0:	4413      	add	r3, r2
 8004cc2:	7a18      	ldrb	r0, [r3, #8]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	47a0      	blx	r4
 8004ccc:	4603      	mov	r3, r0
 8004cce:	75fb      	strb	r3, [r7, #23]
  return res;
 8004cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	371c      	adds	r7, #28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd90      	pop	{r4, r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	2000156c 	.word	0x2000156c

08004ce0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004ce0:	b590      	push	{r4, r7, lr}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	4603      	mov	r3, r0
 8004cee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <disk_write+0x3c>)
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	68dc      	ldr	r4, [r3, #12]
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	4a07      	ldr	r2, [pc, #28]	; (8004d1c <disk_write+0x3c>)
 8004d00:	4413      	add	r3, r2
 8004d02:	7a18      	ldrb	r0, [r3, #8]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	68b9      	ldr	r1, [r7, #8]
 8004d0a:	47a0      	blx	r4
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd90      	pop	{r4, r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	2000156c 	.word	0x2000156c

08004d20 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	603a      	str	r2, [r7, #0]
 8004d2a:	71fb      	strb	r3, [r7, #7]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004d30:	79fb      	ldrb	r3, [r7, #7]
 8004d32:	4a09      	ldr	r2, [pc, #36]	; (8004d58 <disk_ioctl+0x38>)
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	79fa      	ldrb	r2, [r7, #7]
 8004d3e:	4906      	ldr	r1, [pc, #24]	; (8004d58 <disk_ioctl+0x38>)
 8004d40:	440a      	add	r2, r1
 8004d42:	7a10      	ldrb	r0, [r2, #8]
 8004d44:	79b9      	ldrb	r1, [r7, #6]
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	4798      	blx	r3
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	73fb      	strb	r3, [r7, #15]
  return res;
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	2000156c 	.word	0x2000156c

08004d5c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3301      	adds	r3, #1
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004d6c:	89fb      	ldrh	r3, [r7, #14]
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	b21a      	sxth	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	b21b      	sxth	r3, r3
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	b21b      	sxth	r3, r3
 8004d7c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004d7e:	89fb      	ldrh	r3, [r7, #14]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bc80      	pop	{r7}
 8004d88:	4770      	bx	lr

08004d8a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b085      	sub	sp, #20
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3303      	adds	r3, #3
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	3202      	adds	r2, #2
 8004da2:	7812      	ldrb	r2, [r2, #0]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	3201      	adds	r2, #1
 8004db0:	7812      	ldrb	r2, [r2, #0]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	021b      	lsls	r3, r3, #8
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	7812      	ldrb	r2, [r2, #0]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]
	return rv;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr

08004dce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	887a      	ldrh	r2, [r7, #2]
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]
 8004de6:	887b      	ldrh	r3, [r7, #2]
 8004de8:	0a1b      	lsrs	r3, r3, #8
 8004dea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	607a      	str	r2, [r7, #4]
 8004df2:	887a      	ldrh	r2, [r7, #2]
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	701a      	strb	r2, [r3, #0]
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bc80      	pop	{r7}
 8004e00:	4770      	bx	lr

08004e02 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	607a      	str	r2, [r7, #4]
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	701a      	strb	r2, [r3, #0]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	0a1b      	lsrs	r3, r3, #8
 8004e1c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	0a1b      	lsrs	r3, r3, #8
 8004e2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	607a      	str	r2, [r7, #4]
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	0a1b      	lsrs	r3, r3, #8
 8004e40:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	701a      	strb	r2, [r3, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr

08004e58 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00d      	beq.n	8004e8e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	1c53      	adds	r3, r2, #1
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	1c59      	adds	r1, r3, #1
 8004e7c:	6179      	str	r1, [r7, #20]
 8004e7e:	7812      	ldrb	r2, [r2, #0]
 8004e80:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3b01      	subs	r3, #1
 8004e86:	607b      	str	r3, [r7, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f1      	bne.n	8004e72 <mem_cpy+0x1a>
	}
}
 8004e8e:	bf00      	nop
 8004e90:	371c      	adds	r7, #28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bc80      	pop	{r7}
 8004e96:	4770      	bx	lr

08004e98 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	617a      	str	r2, [r7, #20]
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	607b      	str	r3, [r7, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f3      	bne.n	8004ea8 <mem_set+0x10>
}
 8004ec0:	bf00      	nop
 8004ec2:	bf00      	nop
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr

08004ecc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004ecc:	b480      	push	{r7}
 8004ece:	b089      	sub	sp, #36	; 0x24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	61fb      	str	r3, [r7, #28]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	61fa      	str	r2, [r7, #28]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	4619      	mov	r1, r3
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	61ba      	str	r2, [r7, #24]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	1acb      	subs	r3, r1, r3
 8004ef8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	607b      	str	r3, [r7, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <mem_cmp+0x40>
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0eb      	beq.n	8004ee4 <mem_cmp+0x18>

	return r;
 8004f0c:	697b      	ldr	r3, [r7, #20]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3724      	adds	r7, #36	; 0x24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bc80      	pop	{r7}
 8004f16:	4770      	bx	lr

08004f18 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004f22:	e002      	b.n	8004f2a <chk_chr+0x12>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3301      	adds	r3, #1
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <chk_chr+0x26>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d1f2      	bne.n	8004f24 <chk_chr+0xc>
	return *str;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	781b      	ldrb	r3, [r3, #0]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc80      	pop	{r7}
 8004f4a:	4770      	bx	lr

08004f4c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004f56:	2300      	movs	r3, #0
 8004f58:	60bb      	str	r3, [r7, #8]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	e029      	b.n	8004fb4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004f60:	4a26      	ldr	r2, [pc, #152]	; (8004ffc <chk_lock+0xb0>)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	011b      	lsls	r3, r3, #4
 8004f66:	4413      	add	r3, r2
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01d      	beq.n	8004faa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004f6e:	4a23      	ldr	r2, [pc, #140]	; (8004ffc <chk_lock+0xb0>)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	4413      	add	r3, r2
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d116      	bne.n	8004fae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004f80:	4a1e      	ldr	r2, [pc, #120]	; (8004ffc <chk_lock+0xb0>)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	4413      	add	r3, r2
 8004f88:	3304      	adds	r3, #4
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d10c      	bne.n	8004fae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004f94:	4a19      	ldr	r2, [pc, #100]	; (8004ffc <chk_lock+0xb0>)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	4413      	add	r3, r2
 8004f9c:	3308      	adds	r3, #8
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d102      	bne.n	8004fae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004fa8:	e007      	b.n	8004fba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004faa:	2301      	movs	r3, #1
 8004fac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d9d2      	bls.n	8004f60 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d109      	bne.n	8004fd4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d102      	bne.n	8004fcc <chk_lock+0x80>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d101      	bne.n	8004fd0 <chk_lock+0x84>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e010      	b.n	8004ff2 <chk_lock+0xa6>
 8004fd0:	2312      	movs	r3, #18
 8004fd2:	e00e      	b.n	8004ff2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d108      	bne.n	8004fec <chk_lock+0xa0>
 8004fda:	4a08      	ldr	r2, [pc, #32]	; (8004ffc <chk_lock+0xb0>)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	4413      	add	r3, r2
 8004fe2:	330c      	adds	r3, #12
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fea:	d101      	bne.n	8004ff0 <chk_lock+0xa4>
 8004fec:	2310      	movs	r3, #16
 8004fee:	e000      	b.n	8004ff2 <chk_lock+0xa6>
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr
 8004ffc:	2000154c 	.word	0x2000154c

08005000 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005006:	2300      	movs	r3, #0
 8005008:	607b      	str	r3, [r7, #4]
 800500a:	e002      	b.n	8005012 <enq_lock+0x12>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3301      	adds	r3, #1
 8005010:	607b      	str	r3, [r7, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d806      	bhi.n	8005026 <enq_lock+0x26>
 8005018:	4a08      	ldr	r2, [pc, #32]	; (800503c <enq_lock+0x3c>)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	4413      	add	r3, r2
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f2      	bne.n	800500c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b02      	cmp	r3, #2
 800502a:	bf14      	ite	ne
 800502c:	2301      	movne	r3, #1
 800502e:	2300      	moveq	r3, #0
 8005030:	b2db      	uxtb	r3, r3
}
 8005032:	4618      	mov	r0, r3
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr
 800503c:	2000154c 	.word	0x2000154c

08005040 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	e01f      	b.n	8005090 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005050:	4a41      	ldr	r2, [pc, #260]	; (8005158 <inc_lock+0x118>)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	4413      	add	r3, r2
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d113      	bne.n	800508a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005062:	4a3d      	ldr	r2, [pc, #244]	; (8005158 <inc_lock+0x118>)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	4413      	add	r3, r2
 800506a:	3304      	adds	r3, #4
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005072:	429a      	cmp	r2, r3
 8005074:	d109      	bne.n	800508a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005076:	4a38      	ldr	r2, [pc, #224]	; (8005158 <inc_lock+0x118>)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	4413      	add	r3, r2
 800507e:	3308      	adds	r3, #8
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005086:	429a      	cmp	r2, r3
 8005088:	d006      	beq.n	8005098 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3301      	adds	r3, #1
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d9dc      	bls.n	8005050 <inc_lock+0x10>
 8005096:	e000      	b.n	800509a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005098:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b02      	cmp	r3, #2
 800509e:	d132      	bne.n	8005106 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	e002      	b.n	80050ac <inc_lock+0x6c>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	3301      	adds	r3, #1
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d806      	bhi.n	80050c0 <inc_lock+0x80>
 80050b2:	4a29      	ldr	r2, [pc, #164]	; (8005158 <inc_lock+0x118>)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	4413      	add	r3, r2
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1f2      	bne.n	80050a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d101      	bne.n	80050ca <inc_lock+0x8a>
 80050c6:	2300      	movs	r3, #0
 80050c8:	e040      	b.n	800514c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	4922      	ldr	r1, [pc, #136]	; (8005158 <inc_lock+0x118>)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	440b      	add	r3, r1
 80050d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	491e      	ldr	r1, [pc, #120]	; (8005158 <inc_lock+0x118>)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	440b      	add	r3, r1
 80050e4:	3304      	adds	r3, #4
 80050e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	695a      	ldr	r2, [r3, #20]
 80050ec:	491a      	ldr	r1, [pc, #104]	; (8005158 <inc_lock+0x118>)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	440b      	add	r3, r1
 80050f4:	3308      	adds	r3, #8
 80050f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80050f8:	4a17      	ldr	r2, [pc, #92]	; (8005158 <inc_lock+0x118>)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	4413      	add	r3, r2
 8005100:	330c      	adds	r3, #12
 8005102:	2200      	movs	r2, #0
 8005104:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d009      	beq.n	8005120 <inc_lock+0xe0>
 800510c:	4a12      	ldr	r2, [pc, #72]	; (8005158 <inc_lock+0x118>)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	4413      	add	r3, r2
 8005114:	330c      	adds	r3, #12
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <inc_lock+0xe0>
 800511c:	2300      	movs	r3, #0
 800511e:	e015      	b.n	800514c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d108      	bne.n	8005138 <inc_lock+0xf8>
 8005126:	4a0c      	ldr	r2, [pc, #48]	; (8005158 <inc_lock+0x118>)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	4413      	add	r3, r2
 800512e:	330c      	adds	r3, #12
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	3301      	adds	r3, #1
 8005134:	b29a      	uxth	r2, r3
 8005136:	e001      	b.n	800513c <inc_lock+0xfc>
 8005138:	f44f 7280 	mov.w	r2, #256	; 0x100
 800513c:	4906      	ldr	r1, [pc, #24]	; (8005158 <inc_lock+0x118>)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	440b      	add	r3, r1
 8005144:	330c      	adds	r3, #12
 8005146:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	3301      	adds	r3, #1
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	bc80      	pop	{r7}
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	2000154c 	.word	0x2000154c

0800515c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3b01      	subs	r3, #1
 8005168:	607b      	str	r3, [r7, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d825      	bhi.n	80051bc <dec_lock+0x60>
		n = Files[i].ctr;
 8005170:	4a16      	ldr	r2, [pc, #88]	; (80051cc <dec_lock+0x70>)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	4413      	add	r3, r2
 8005178:	330c      	adds	r3, #12
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800517e:	89fb      	ldrh	r3, [r7, #14]
 8005180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005184:	d101      	bne.n	800518a <dec_lock+0x2e>
 8005186:	2300      	movs	r3, #0
 8005188:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800518a:	89fb      	ldrh	r3, [r7, #14]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <dec_lock+0x3a>
 8005190:	89fb      	ldrh	r3, [r7, #14]
 8005192:	3b01      	subs	r3, #1
 8005194:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005196:	4a0d      	ldr	r2, [pc, #52]	; (80051cc <dec_lock+0x70>)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	4413      	add	r3, r2
 800519e:	330c      	adds	r3, #12
 80051a0:	89fa      	ldrh	r2, [r7, #14]
 80051a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80051a4:	89fb      	ldrh	r3, [r7, #14]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d105      	bne.n	80051b6 <dec_lock+0x5a>
 80051aa:	4a08      	ldr	r2, [pc, #32]	; (80051cc <dec_lock+0x70>)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	4413      	add	r3, r2
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	737b      	strb	r3, [r7, #13]
 80051ba:	e001      	b.n	80051c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80051bc:	2302      	movs	r3, #2
 80051be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80051c0:	7b7b      	ldrb	r3, [r7, #13]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr
 80051cc:	2000154c 	.word	0x2000154c

080051d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	e010      	b.n	8005200 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80051de:	4a0d      	ldr	r2, [pc, #52]	; (8005214 <clear_lock+0x44>)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	4413      	add	r3, r2
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d105      	bne.n	80051fa <clear_lock+0x2a>
 80051ee:	4a09      	ldr	r2, [pc, #36]	; (8005214 <clear_lock+0x44>)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	4413      	add	r3, r2
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3301      	adds	r3, #1
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d9eb      	bls.n	80051de <clear_lock+0xe>
	}
}
 8005206:	bf00      	nop
 8005208:	bf00      	nop
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	bc80      	pop	{r7}
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	2000154c 	.word	0x2000154c

08005218 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005220:	2300      	movs	r3, #0
 8005222:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	78db      	ldrb	r3, [r3, #3]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d034      	beq.n	8005296 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	7858      	ldrb	r0, [r3, #1]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800523c:	2301      	movs	r3, #1
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	f7ff fd4e 	bl	8004ce0 <disk_write>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <sync_window+0x38>
			res = FR_DISK_ERR;
 800524a:	2301      	movs	r3, #1
 800524c:	73fb      	strb	r3, [r7, #15]
 800524e:	e022      	b.n	8005296 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	1ad2      	subs	r2, r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	429a      	cmp	r2, r3
 8005264:	d217      	bcs.n	8005296 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	789b      	ldrb	r3, [r3, #2]
 800526a:	613b      	str	r3, [r7, #16]
 800526c:	e010      	b.n	8005290 <sync_window+0x78>
					wsect += fs->fsize;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4413      	add	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	7858      	ldrb	r0, [r3, #1]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005282:	2301      	movs	r3, #1
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	f7ff fd2b 	bl	8004ce0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	3b01      	subs	r3, #1
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d8eb      	bhi.n	800526e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005296:	7bfb      	ldrb	r3, [r7, #15]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d01b      	beq.n	80052f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff ffad 	bl	8005218 <sync_window>
 80052be:	4603      	mov	r3, r0
 80052c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d113      	bne.n	80052f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	7858      	ldrb	r0, [r3, #1]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80052d2:	2301      	movs	r3, #1
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	f7ff fce3 	bl	8004ca0 <disk_read>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d004      	beq.n	80052ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80052e0:	f04f 33ff 	mov.w	r3, #4294967295
 80052e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7ff ff87 	bl	8005218 <sync_window>
 800530a:	4603      	mov	r3, r0
 800530c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800530e:	7bfb      	ldrb	r3, [r7, #15]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d158      	bne.n	80053c6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b03      	cmp	r3, #3
 800531a:	d148      	bne.n	80053ae <sync_fs+0xb2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	791b      	ldrb	r3, [r3, #4]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d144      	bne.n	80053ae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3330      	adds	r3, #48	; 0x30
 8005328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800532c:	2100      	movs	r1, #0
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff fdb2 	bl	8004e98 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3330      	adds	r3, #48	; 0x30
 8005338:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800533c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff fd44 	bl	8004dce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3330      	adds	r3, #48	; 0x30
 800534a:	4921      	ldr	r1, [pc, #132]	; (80053d0 <sync_fs+0xd4>)
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff fd58 	bl	8004e02 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3330      	adds	r3, #48	; 0x30
 8005356:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800535a:	491e      	ldr	r1, [pc, #120]	; (80053d4 <sync_fs+0xd8>)
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff fd50 	bl	8004e02 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3330      	adds	r3, #48	; 0x30
 8005366:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	4619      	mov	r1, r3
 8005370:	4610      	mov	r0, r2
 8005372:	f7ff fd46 	bl	8004e02 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3330      	adds	r3, #48	; 0x30
 800537a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	4619      	mov	r1, r3
 8005384:	4610      	mov	r0, r2
 8005386:	f7ff fd3c 	bl	8004e02 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	7858      	ldrb	r0, [r3, #1]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a2:	2301      	movs	r3, #1
 80053a4:	f7ff fc9c 	bl	8004ce0 <disk_write>
			fs->fsi_flag = 0;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	785b      	ldrb	r3, [r3, #1]
 80053b2:	2200      	movs	r2, #0
 80053b4:	2100      	movs	r1, #0
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff fcb2 	bl	8004d20 <disk_ioctl>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <sync_fs+0xca>
 80053c2:	2301      	movs	r3, #1
 80053c4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	41615252 	.word	0x41615252
 80053d4:	61417272 	.word	0x61417272

080053d8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	3b02      	subs	r3, #2
 80053e6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	3b02      	subs	r3, #2
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d301      	bcc.n	80053f8 <clust2sect+0x20>
 80053f4:	2300      	movs	r3, #0
 80053f6:	e008      	b.n	800540a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	895b      	ldrh	r3, [r3, #10]
 80053fc:	461a      	mov	r2, r3
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	fb03 f202 	mul.w	r2, r3, r2
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005408:	4413      	add	r3, r2
}
 800540a:	4618      	mov	r0, r3
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	bc80      	pop	{r7}
 8005412:	4770      	bx	lr

08005414 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d904      	bls.n	8005434 <get_fat+0x20>
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	429a      	cmp	r2, r3
 8005432:	d302      	bcc.n	800543a <get_fat+0x26>
		val = 1;	/* Internal error */
 8005434:	2301      	movs	r3, #1
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	e08f      	b.n	800555a <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800543a:	f04f 33ff 	mov.w	r3, #4294967295
 800543e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b03      	cmp	r3, #3
 8005446:	d062      	beq.n	800550e <get_fat+0xfa>
 8005448:	2b03      	cmp	r3, #3
 800544a:	dc7c      	bgt.n	8005546 <get_fat+0x132>
 800544c:	2b01      	cmp	r3, #1
 800544e:	d002      	beq.n	8005456 <get_fat+0x42>
 8005450:	2b02      	cmp	r3, #2
 8005452:	d042      	beq.n	80054da <get_fat+0xc6>
 8005454:	e077      	b.n	8005546 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	085b      	lsrs	r3, r3, #1
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	4413      	add	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	6a1a      	ldr	r2, [r3, #32]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	0a5b      	lsrs	r3, r3, #9
 800546c:	4413      	add	r3, r2
 800546e:	4619      	mov	r1, r3
 8005470:	6938      	ldr	r0, [r7, #16]
 8005472:	f7ff ff15 	bl	80052a0 <move_window>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d167      	bne.n	800554c <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	60fa      	str	r2, [r7, #12]
 8005482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4413      	add	r3, r2
 800548a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800548e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	6a1a      	ldr	r2, [r3, #32]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	0a5b      	lsrs	r3, r3, #9
 8005498:	4413      	add	r3, r2
 800549a:	4619      	mov	r1, r3
 800549c:	6938      	ldr	r0, [r7, #16]
 800549e:	f7ff feff 	bl	80052a0 <move_window>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d153      	bne.n	8005550 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	4413      	add	r3, r2
 80054b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054b6:	021b      	lsls	r3, r3, #8
 80054b8:	461a      	mov	r2, r3
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <get_fat+0xbc>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	091b      	lsrs	r3, r3, #4
 80054ce:	e002      	b.n	80054d6 <get_fat+0xc2>
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054d6:	617b      	str	r3, [r7, #20]
			break;
 80054d8:	e03f      	b.n	800555a <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	6a1a      	ldr	r2, [r3, #32]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	0a1b      	lsrs	r3, r3, #8
 80054e2:	4413      	add	r3, r2
 80054e4:	4619      	mov	r1, r3
 80054e6:	6938      	ldr	r0, [r7, #16]
 80054e8:	f7ff feda 	bl	80052a0 <move_window>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d130      	bne.n	8005554 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005500:	4413      	add	r3, r2
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff fc2a 	bl	8004d5c <ld_word>
 8005508:	4603      	mov	r3, r0
 800550a:	617b      	str	r3, [r7, #20]
			break;
 800550c:	e025      	b.n	800555a <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	6a1a      	ldr	r2, [r3, #32]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	09db      	lsrs	r3, r3, #7
 8005516:	4413      	add	r3, r2
 8005518:	4619      	mov	r1, r3
 800551a:	6938      	ldr	r0, [r7, #16]
 800551c:	f7ff fec0 	bl	80052a0 <move_window>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d118      	bne.n	8005558 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005534:	4413      	add	r3, r2
 8005536:	4618      	mov	r0, r3
 8005538:	f7ff fc27 	bl	8004d8a <ld_dword>
 800553c:	4603      	mov	r3, r0
 800553e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005542:	617b      	str	r3, [r7, #20]
			break;
 8005544:	e009      	b.n	800555a <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005546:	2301      	movs	r3, #1
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	e006      	b.n	800555a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800554c:	bf00      	nop
 800554e:	e004      	b.n	800555a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005550:	bf00      	nop
 8005552:	e002      	b.n	800555a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005554:	bf00      	nop
 8005556:	e000      	b.n	800555a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005558:	bf00      	nop
		}
	}

	return val;
 800555a:	697b      	ldr	r3, [r7, #20]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005564:	b590      	push	{r4, r7, lr}
 8005566:	b089      	sub	sp, #36	; 0x24
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005570:	2302      	movs	r3, #2
 8005572:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b01      	cmp	r3, #1
 8005578:	f240 80d2 	bls.w	8005720 <put_fat+0x1bc>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	429a      	cmp	r2, r3
 8005584:	f080 80cc 	bcs.w	8005720 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b03      	cmp	r3, #3
 800558e:	f000 8096 	beq.w	80056be <put_fat+0x15a>
 8005592:	2b03      	cmp	r3, #3
 8005594:	f300 80cd 	bgt.w	8005732 <put_fat+0x1ce>
 8005598:	2b01      	cmp	r3, #1
 800559a:	d002      	beq.n	80055a2 <put_fat+0x3e>
 800559c:	2b02      	cmp	r3, #2
 800559e:	d06e      	beq.n	800567e <put_fat+0x11a>
 80055a0:	e0c7      	b.n	8005732 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	61bb      	str	r3, [r7, #24]
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	085b      	lsrs	r3, r3, #1
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	4413      	add	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a1a      	ldr	r2, [r3, #32]
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	0a5b      	lsrs	r3, r3, #9
 80055b8:	4413      	add	r3, r2
 80055ba:	4619      	mov	r1, r3
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f7ff fe6f 	bl	80052a0 <move_window>
 80055c2:	4603      	mov	r3, r0
 80055c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055c6:	7ffb      	ldrb	r3, [r7, #31]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f040 80ab 	bne.w	8005724 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	1c59      	adds	r1, r3, #1
 80055d8:	61b9      	str	r1, [r7, #24]
 80055da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055de:	4413      	add	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00d      	beq.n	8005608 <put_fat+0xa4>
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	b25b      	sxtb	r3, r3
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	b25a      	sxtb	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	b25b      	sxtb	r3, r3
 8005600:	4313      	orrs	r3, r2
 8005602:	b25b      	sxtb	r3, r3
 8005604:	b2db      	uxtb	r3, r3
 8005606:	e001      	b.n	800560c <put_fat+0xa8>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	b2db      	uxtb	r3, r3
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1a      	ldr	r2, [r3, #32]
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	0a5b      	lsrs	r3, r3, #9
 800561e:	4413      	add	r3, r2
 8005620:	4619      	mov	r1, r3
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f7ff fe3c 	bl	80052a0 <move_window>
 8005628:	4603      	mov	r3, r0
 800562a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800562c:	7ffb      	ldrb	r3, [r7, #31]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d17a      	bne.n	8005728 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563e:	4413      	add	r3, r2
 8005640:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <put_fat+0xf0>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	091b      	lsrs	r3, r3, #4
 8005650:	b2db      	uxtb	r3, r3
 8005652:	e00e      	b.n	8005672 <put_fat+0x10e>
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	b25b      	sxtb	r3, r3
 800565a:	f023 030f 	bic.w	r3, r3, #15
 800565e:	b25a      	sxtb	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	0a1b      	lsrs	r3, r3, #8
 8005664:	b25b      	sxtb	r3, r3
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	b25b      	sxtb	r3, r3
 800566c:	4313      	orrs	r3, r2
 800566e:	b25b      	sxtb	r3, r3
 8005670:	b2db      	uxtb	r3, r3
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	70da      	strb	r2, [r3, #3]
			break;
 800567c:	e059      	b.n	8005732 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a1a      	ldr	r2, [r3, #32]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	0a1b      	lsrs	r3, r3, #8
 8005686:	4413      	add	r3, r2
 8005688:	4619      	mov	r1, r3
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f7ff fe08 	bl	80052a0 <move_window>
 8005690:	4603      	mov	r3, r0
 8005692:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005694:	7ffb      	ldrb	r3, [r7, #31]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d148      	bne.n	800572c <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80056a8:	4413      	add	r3, r2
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	b292      	uxth	r2, r2
 80056ae:	4611      	mov	r1, r2
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff fb8c 	bl	8004dce <st_word>
			fs->wflag = 1;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	70da      	strb	r2, [r3, #3]
			break;
 80056bc:	e039      	b.n	8005732 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a1a      	ldr	r2, [r3, #32]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	09db      	lsrs	r3, r3, #7
 80056c6:	4413      	add	r3, r2
 80056c8:	4619      	mov	r1, r3
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f7ff fde8 	bl	80052a0 <move_window>
 80056d0:	4603      	mov	r3, r0
 80056d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80056d4:	7ffb      	ldrb	r3, [r7, #31]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d12a      	bne.n	8005730 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80056ee:	4413      	add	r3, r2
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff fb4a 	bl	8004d8a <ld_dword>
 80056f6:	4603      	mov	r3, r0
 80056f8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80056fc:	4323      	orrs	r3, r4
 80056fe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800570e:	4413      	add	r3, r2
 8005710:	6879      	ldr	r1, [r7, #4]
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff fb75 	bl	8004e02 <st_dword>
			fs->wflag = 1;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2201      	movs	r2, #1
 800571c:	70da      	strb	r2, [r3, #3]
			break;
 800571e:	e008      	b.n	8005732 <put_fat+0x1ce>
		}
	}
 8005720:	bf00      	nop
 8005722:	e006      	b.n	8005732 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005724:	bf00      	nop
 8005726:	e004      	b.n	8005732 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005728:	bf00      	nop
 800572a:	e002      	b.n	8005732 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800572c:	bf00      	nop
 800572e:	e000      	b.n	8005732 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005730:	bf00      	nop
	return res;
 8005732:	7ffb      	ldrb	r3, [r7, #31]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3724      	adds	r7, #36	; 0x24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd90      	pop	{r4, r7, pc}

0800573c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b088      	sub	sp, #32
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d904      	bls.n	8005762 <remove_chain+0x26>
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	429a      	cmp	r2, r3
 8005760:	d301      	bcc.n	8005766 <remove_chain+0x2a>
 8005762:	2302      	movs	r3, #2
 8005764:	e04b      	b.n	80057fe <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00c      	beq.n	8005786 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800576c:	f04f 32ff 	mov.w	r2, #4294967295
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	69b8      	ldr	r0, [r7, #24]
 8005774:	f7ff fef6 	bl	8005564 <put_fat>
 8005778:	4603      	mov	r3, r0
 800577a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800577c:	7ffb      	ldrb	r3, [r7, #31]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <remove_chain+0x4a>
 8005782:	7ffb      	ldrb	r3, [r7, #31]
 8005784:	e03b      	b.n	80057fe <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005786:	68b9      	ldr	r1, [r7, #8]
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f7ff fe43 	bl	8005414 <get_fat>
 800578e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d031      	beq.n	80057fa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <remove_chain+0x64>
 800579c:	2302      	movs	r3, #2
 800579e:	e02e      	b.n	80057fe <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a6:	d101      	bne.n	80057ac <remove_chain+0x70>
 80057a8:	2301      	movs	r3, #1
 80057aa:	e028      	b.n	80057fe <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80057ac:	2200      	movs	r2, #0
 80057ae:	68b9      	ldr	r1, [r7, #8]
 80057b0:	69b8      	ldr	r0, [r7, #24]
 80057b2:	f7ff fed7 	bl	8005564 <put_fat>
 80057b6:	4603      	mov	r3, r0
 80057b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80057ba:	7ffb      	ldrb	r3, [r7, #31]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <remove_chain+0x88>
 80057c0:	7ffb      	ldrb	r3, [r7, #31]
 80057c2:	e01c      	b.n	80057fe <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	3b02      	subs	r3, #2
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d20b      	bcs.n	80057ea <remove_chain+0xae>
			fs->free_clst++;
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	791b      	ldrb	r3, [r3, #4]
 80057e0:	f043 0301 	orr.w	r3, r3, #1
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d3c6      	bcc.n	8005786 <remove_chain+0x4a>
 80057f8:	e000      	b.n	80057fc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80057fa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3720      	adds	r7, #32
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b088      	sub	sp, #32
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10d      	bne.n	8005838 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d004      	beq.n	8005832 <create_chain+0x2c>
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	429a      	cmp	r2, r3
 8005830:	d31b      	bcc.n	800586a <create_chain+0x64>
 8005832:	2301      	movs	r3, #1
 8005834:	61bb      	str	r3, [r7, #24]
 8005836:	e018      	b.n	800586a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005838:	6839      	ldr	r1, [r7, #0]
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff fdea 	bl	8005414 <get_fat>
 8005840:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d801      	bhi.n	800584c <create_chain+0x46>
 8005848:	2301      	movs	r3, #1
 800584a:	e070      	b.n	800592e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005852:	d101      	bne.n	8005858 <create_chain+0x52>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	e06a      	b.n	800592e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	429a      	cmp	r2, r3
 8005860:	d201      	bcs.n	8005866 <create_chain+0x60>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	e063      	b.n	800592e <create_chain+0x128>
		scl = clst;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	3301      	adds	r3, #1
 8005872:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	69fa      	ldr	r2, [r7, #28]
 800587a:	429a      	cmp	r2, r3
 800587c:	d307      	bcc.n	800588e <create_chain+0x88>
				ncl = 2;
 800587e:	2302      	movs	r3, #2
 8005880:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005882:	69fa      	ldr	r2, [r7, #28]
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	429a      	cmp	r2, r3
 8005888:	d901      	bls.n	800588e <create_chain+0x88>
 800588a:	2300      	movs	r3, #0
 800588c:	e04f      	b.n	800592e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800588e:	69f9      	ldr	r1, [r7, #28]
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff fdbf 	bl	8005414 <get_fat>
 8005896:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00e      	beq.n	80058bc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d003      	beq.n	80058ac <create_chain+0xa6>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058aa:	d101      	bne.n	80058b0 <create_chain+0xaa>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	e03e      	b.n	800592e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80058b0:	69fa      	ldr	r2, [r7, #28]
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d1da      	bne.n	800586e <create_chain+0x68>
 80058b8:	2300      	movs	r3, #0
 80058ba:	e038      	b.n	800592e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80058bc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80058be:	f04f 32ff 	mov.w	r2, #4294967295
 80058c2:	69f9      	ldr	r1, [r7, #28]
 80058c4:	6938      	ldr	r0, [r7, #16]
 80058c6:	f7ff fe4d 	bl	8005564 <put_fat>
 80058ca:	4603      	mov	r3, r0
 80058cc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80058ce:	7dfb      	ldrb	r3, [r7, #23]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d109      	bne.n	80058e8 <create_chain+0xe2>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d006      	beq.n	80058e8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80058da:	69fa      	ldr	r2, [r7, #28]
 80058dc:	6839      	ldr	r1, [r7, #0]
 80058de:	6938      	ldr	r0, [r7, #16]
 80058e0:	f7ff fe40 	bl	8005564 <put_fat>
 80058e4:	4603      	mov	r3, r0
 80058e6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80058e8:	7dfb      	ldrb	r3, [r7, #23]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d116      	bne.n	800591c <create_chain+0x116>
		fs->last_clst = ncl;
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	69fa      	ldr	r2, [r7, #28]
 80058f2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	691a      	ldr	r2, [r3, #16]
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	3b02      	subs	r3, #2
 80058fe:	429a      	cmp	r2, r3
 8005900:	d804      	bhi.n	800590c <create_chain+0x106>
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	1e5a      	subs	r2, r3, #1
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	791b      	ldrb	r3, [r3, #4]
 8005910:	f043 0301 	orr.w	r3, r3, #1
 8005914:	b2da      	uxtb	r2, r3
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	711a      	strb	r2, [r3, #4]
 800591a:	e007      	b.n	800592c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800591c:	7dfb      	ldrb	r3, [r7, #23]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d102      	bne.n	8005928 <create_chain+0x122>
 8005922:	f04f 33ff 	mov.w	r3, #4294967295
 8005926:	e000      	b.n	800592a <create_chain+0x124>
 8005928:	2301      	movs	r3, #1
 800592a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800592c:	69fb      	ldr	r3, [r7, #28]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3720      	adds	r7, #32
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005936:	b480      	push	{r7}
 8005938:	b087      	sub	sp, #28
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594a:	3304      	adds	r3, #4
 800594c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	0a5b      	lsrs	r3, r3, #9
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	8952      	ldrh	r2, [r2, #10]
 8005956:	fbb3 f3f2 	udiv	r3, r3, r2
 800595a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	1d1a      	adds	r2, r3, #4
 8005960:	613a      	str	r2, [r7, #16]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <clmt_clust+0x3a>
 800596c:	2300      	movs	r3, #0
 800596e:	e010      	b.n	8005992 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	429a      	cmp	r2, r3
 8005976:	d307      	bcc.n	8005988 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	3304      	adds	r3, #4
 8005984:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005986:	e7e9      	b.n	800595c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005988:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	4413      	add	r3, r2
}
 8005992:	4618      	mov	r0, r3
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr

0800599c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059b2:	d204      	bcs.n	80059be <dir_sdi+0x22>
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	f003 031f 	and.w	r3, r3, #31
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80059be:	2302      	movs	r3, #2
 80059c0:	e063      	b.n	8005a8a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d106      	bne.n	80059e2 <dir_sdi+0x46>
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d902      	bls.n	80059e2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10c      	bne.n	8005a02 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	8912      	ldrh	r2, [r2, #8]
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d301      	bcc.n	80059f8 <dir_sdi+0x5c>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e048      	b.n	8005a8a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	61da      	str	r2, [r3, #28]
 8005a00:	e029      	b.n	8005a56 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	895b      	ldrh	r3, [r3, #10]
 8005a06:	025b      	lsls	r3, r3, #9
 8005a08:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005a0a:	e019      	b.n	8005a40 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6979      	ldr	r1, [r7, #20]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff fcff 	bl	8005414 <get_fat>
 8005a16:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1e:	d101      	bne.n	8005a24 <dir_sdi+0x88>
 8005a20:	2301      	movs	r3, #1
 8005a22:	e032      	b.n	8005a8a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d904      	bls.n	8005a34 <dir_sdi+0x98>
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d301      	bcc.n	8005a38 <dir_sdi+0x9c>
 8005a34:	2302      	movs	r3, #2
 8005a36:	e028      	b.n	8005a8a <dir_sdi+0xee>
			ofs -= csz;
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d2e1      	bcs.n	8005a0c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005a48:	6979      	ldr	r1, [r7, #20]
 8005a4a:	6938      	ldr	r0, [r7, #16]
 8005a4c:	f7ff fcc4 	bl	80053d8 <clust2sect>
 8005a50:	4602      	mov	r2, r0
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <dir_sdi+0xcc>
 8005a64:	2302      	movs	r3, #2
 8005a66:	e010      	b.n	8005a8a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	69da      	ldr	r2, [r3, #28]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	0a5b      	lsrs	r3, r3, #9
 8005a70:	441a      	add	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a82:	441a      	add	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b086      	sub	sp, #24
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	3320      	adds	r3, #32
 8005aa8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <dir_next+0x28>
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ab8:	d301      	bcc.n	8005abe <dir_next+0x2c>
 8005aba:	2304      	movs	r3, #4
 8005abc:	e0aa      	b.n	8005c14 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f040 8098 	bne.w	8005bfa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10b      	bne.n	8005af4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	095b      	lsrs	r3, r3, #5
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	8912      	ldrh	r2, [r2, #8]
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	f0c0 8088 	bcc.w	8005bfa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	61da      	str	r2, [r3, #28]
 8005af0:	2304      	movs	r3, #4
 8005af2:	e08f      	b.n	8005c14 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	0a5b      	lsrs	r3, r3, #9
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	8952      	ldrh	r2, [r2, #10]
 8005afc:	3a01      	subs	r2, #1
 8005afe:	4013      	ands	r3, r2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d17a      	bne.n	8005bfa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	f7ff fc81 	bl	8005414 <get_fat>
 8005b12:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d801      	bhi.n	8005b1e <dir_next+0x8c>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	e07a      	b.n	8005c14 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b24:	d101      	bne.n	8005b2a <dir_next+0x98>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e074      	b.n	8005c14 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d358      	bcc.n	8005be6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d104      	bne.n	8005b44 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	61da      	str	r2, [r3, #28]
 8005b40:	2304      	movs	r3, #4
 8005b42:	e067      	b.n	8005c14 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	f7ff fe5a 	bl	8005806 <create_chain>
 8005b52:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <dir_next+0xcc>
 8005b5a:	2307      	movs	r3, #7
 8005b5c:	e05a      	b.n	8005c14 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <dir_next+0xd6>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e055      	b.n	8005c14 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6e:	d101      	bne.n	8005b74 <dir_next+0xe2>
 8005b70:	2301      	movs	r3, #1
 8005b72:	e04f      	b.n	8005c14 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f7ff fb4f 	bl	8005218 <sync_window>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <dir_next+0xf2>
 8005b80:	2301      	movs	r3, #1
 8005b82:	e047      	b.n	8005c14 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3330      	adds	r3, #48	; 0x30
 8005b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7ff f982 	bl	8004e98 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005b94:	2300      	movs	r3, #0
 8005b96:	613b      	str	r3, [r7, #16]
 8005b98:	6979      	ldr	r1, [r7, #20]
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f7ff fc1c 	bl	80053d8 <clust2sect>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ba6:	e012      	b.n	8005bce <dir_next+0x13c>
						fs->wflag = 1;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f7ff fb32 	bl	8005218 <sync_window>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <dir_next+0x12c>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e02a      	b.n	8005c14 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	613b      	str	r3, [r7, #16]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	895b      	ldrh	r3, [r3, #10]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d3e6      	bcc.n	8005ba8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	1ad2      	subs	r2, r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005bec:	6979      	ldr	r1, [r7, #20]
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f7ff fbf2 	bl	80053d8 <clust2sect>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0c:	441a      	add	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7ff feb4 	bl	800599c <dir_sdi>
 8005c34:	4603      	mov	r3, r0
 8005c36:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d12b      	bne.n	8005c96 <dir_alloc+0x7a>
		n = 0;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	4619      	mov	r1, r3
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f7ff fb29 	bl	80052a0 <move_window>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d11d      	bne.n	8005c94 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2be5      	cmp	r3, #229	; 0xe5
 8005c60:	d004      	beq.n	8005c6c <dir_alloc+0x50>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d107      	bne.n	8005c7c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d102      	bne.n	8005c80 <dir_alloc+0x64>
 8005c7a:	e00c      	b.n	8005c96 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005c80:	2101      	movs	r1, #1
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7ff ff05 	bl	8005a92 <dir_next>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005c8c:	7dfb      	ldrb	r3, [r7, #23]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0d7      	beq.n	8005c42 <dir_alloc+0x26>
 8005c92:	e000      	b.n	8005c96 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005c94:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d101      	bne.n	8005ca0 <dir_alloc+0x84>
 8005c9c:	2307      	movs	r3, #7
 8005c9e:	75fb      	strb	r3, [r7, #23]
	return res;
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	331a      	adds	r3, #26
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7ff f84f 	bl	8004d5c <ld_word>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	d109      	bne.n	8005cde <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	3314      	adds	r3, #20
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff f844 	bl	8004d5c <ld_word>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	041b      	lsls	r3, r3, #16
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005cde:	68fb      	ldr	r3, [r7, #12]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	331a      	adds	r3, #26
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	b292      	uxth	r2, r2
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7ff f865 	bl	8004dce <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d109      	bne.n	8005d20 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	f103 0214 	add.w	r2, r3, #20
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	0c1b      	lsrs	r3, r3, #16
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	f7ff f857 	bl	8004dce <st_word>
	}
}
 8005d20:	bf00      	nop
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005d36:	2100      	movs	r1, #0
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff fe2f 	bl	800599c <dir_sdi>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005d42:	7dfb      	ldrb	r3, [r7, #23]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <dir_find+0x24>
 8005d48:	7dfb      	ldrb	r3, [r7, #23]
 8005d4a:	e03e      	b.n	8005dca <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	4619      	mov	r1, r3
 8005d52:	6938      	ldr	r0, [r7, #16]
 8005d54:	f7ff faa4 	bl	80052a0 <move_window>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005d5c:	7dfb      	ldrb	r3, [r7, #23]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d12f      	bne.n	8005dc2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d102      	bne.n	8005d76 <dir_find+0x4e>
 8005d70:	2304      	movs	r3, #4
 8005d72:	75fb      	strb	r3, [r7, #23]
 8005d74:	e028      	b.n	8005dc8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	330b      	adds	r3, #11
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	330b      	adds	r3, #11
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10a      	bne.n	8005dae <dir_find+0x86>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a18      	ldr	r0, [r3, #32]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3324      	adds	r3, #36	; 0x24
 8005da0:	220b      	movs	r2, #11
 8005da2:	4619      	mov	r1, r3
 8005da4:	f7ff f892 	bl	8004ecc <mem_cmp>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00b      	beq.n	8005dc6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005dae:	2100      	movs	r1, #0
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7ff fe6e 	bl	8005a92 <dir_next>
 8005db6:	4603      	mov	r3, r0
 8005db8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005dba:	7dfb      	ldrb	r3, [r7, #23]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0c5      	beq.n	8005d4c <dir_find+0x24>
 8005dc0:	e002      	b.n	8005dc8 <dir_find+0xa0>
		if (res != FR_OK) break;
 8005dc2:	bf00      	nop
 8005dc4:	e000      	b.n	8005dc8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005dc6:	bf00      	nop

	return res;
 8005dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005de0:	2101      	movs	r1, #1
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7ff ff1a 	bl	8005c1c <dir_alloc>
 8005de8:	4603      	mov	r3, r0
 8005dea:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d11c      	bne.n	8005e2c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	4619      	mov	r1, r3
 8005df8:	68b8      	ldr	r0, [r7, #8]
 8005dfa:	f7ff fa51 	bl	80052a0 <move_window>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d111      	bne.n	8005e2c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	2100      	movs	r1, #0
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7ff f841 	bl	8004e98 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a18      	ldr	r0, [r3, #32]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3324      	adds	r3, #36	; 0x24
 8005e1e:	220b      	movs	r2, #11
 8005e20:	4619      	mov	r1, r3
 8005e22:	f7ff f819 	bl	8004e58 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
	...

08005e38 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b088      	sub	sp, #32
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3324      	adds	r3, #36	; 0x24
 8005e4c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005e4e:	220b      	movs	r2, #11
 8005e50:	2120      	movs	r1, #32
 8005e52:	68b8      	ldr	r0, [r7, #8]
 8005e54:	f7ff f820 	bl	8004e98 <mem_set>
	si = i = 0; ni = 8;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	613b      	str	r3, [r7, #16]
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	61fb      	str	r3, [r7, #28]
 8005e60:	2308      	movs	r3, #8
 8005e62:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	1c5a      	adds	r2, r3, #1
 8005e68:	61fa      	str	r2, [r7, #28]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005e72:	7efb      	ldrb	r3, [r7, #27]
 8005e74:	2b20      	cmp	r3, #32
 8005e76:	d94e      	bls.n	8005f16 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005e78:	7efb      	ldrb	r3, [r7, #27]
 8005e7a:	2b2f      	cmp	r3, #47	; 0x2f
 8005e7c:	d006      	beq.n	8005e8c <create_name+0x54>
 8005e7e:	7efb      	ldrb	r3, [r7, #27]
 8005e80:	2b5c      	cmp	r3, #92	; 0x5c
 8005e82:	d110      	bne.n	8005ea6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005e84:	e002      	b.n	8005e8c <create_name+0x54>
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	61fb      	str	r3, [r7, #28]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	4413      	add	r3, r2
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b2f      	cmp	r3, #47	; 0x2f
 8005e96:	d0f6      	beq.n	8005e86 <create_name+0x4e>
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b5c      	cmp	r3, #92	; 0x5c
 8005ea2:	d0f0      	beq.n	8005e86 <create_name+0x4e>
			break;
 8005ea4:	e038      	b.n	8005f18 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005ea6:	7efb      	ldrb	r3, [r7, #27]
 8005ea8:	2b2e      	cmp	r3, #46	; 0x2e
 8005eaa:	d003      	beq.n	8005eb4 <create_name+0x7c>
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d30c      	bcc.n	8005ece <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2b0b      	cmp	r3, #11
 8005eb8:	d002      	beq.n	8005ec0 <create_name+0x88>
 8005eba:	7efb      	ldrb	r3, [r7, #27]
 8005ebc:	2b2e      	cmp	r3, #46	; 0x2e
 8005ebe:	d001      	beq.n	8005ec4 <create_name+0x8c>
 8005ec0:	2306      	movs	r3, #6
 8005ec2:	e044      	b.n	8005f4e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005ec4:	2308      	movs	r3, #8
 8005ec6:	613b      	str	r3, [r7, #16]
 8005ec8:	230b      	movs	r3, #11
 8005eca:	617b      	str	r3, [r7, #20]
			continue;
 8005ecc:	e022      	b.n	8005f14 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005ece:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	da04      	bge.n	8005ee0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005ed6:	7efb      	ldrb	r3, [r7, #27]
 8005ed8:	3b80      	subs	r3, #128	; 0x80
 8005eda:	4a1f      	ldr	r2, [pc, #124]	; (8005f58 <create_name+0x120>)
 8005edc:	5cd3      	ldrb	r3, [r2, r3]
 8005ede:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005ee0:	7efb      	ldrb	r3, [r7, #27]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	481d      	ldr	r0, [pc, #116]	; (8005f5c <create_name+0x124>)
 8005ee6:	f7ff f817 	bl	8004f18 <chk_chr>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <create_name+0xbc>
 8005ef0:	2306      	movs	r3, #6
 8005ef2:	e02c      	b.n	8005f4e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005ef4:	7efb      	ldrb	r3, [r7, #27]
 8005ef6:	2b60      	cmp	r3, #96	; 0x60
 8005ef8:	d905      	bls.n	8005f06 <create_name+0xce>
 8005efa:	7efb      	ldrb	r3, [r7, #27]
 8005efc:	2b7a      	cmp	r3, #122	; 0x7a
 8005efe:	d802      	bhi.n	8005f06 <create_name+0xce>
 8005f00:	7efb      	ldrb	r3, [r7, #27]
 8005f02:	3b20      	subs	r3, #32
 8005f04:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	613a      	str	r2, [r7, #16]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	4413      	add	r3, r2
 8005f10:	7efa      	ldrb	r2, [r7, #27]
 8005f12:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005f14:	e7a6      	b.n	8005e64 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005f16:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	441a      	add	r2, r3
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <create_name+0xf4>
 8005f28:	2306      	movs	r3, #6
 8005f2a:	e010      	b.n	8005f4e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2be5      	cmp	r3, #229	; 0xe5
 8005f32:	d102      	bne.n	8005f3a <create_name+0x102>
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2205      	movs	r2, #5
 8005f38:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005f3a:	7efb      	ldrb	r3, [r7, #27]
 8005f3c:	2b20      	cmp	r3, #32
 8005f3e:	d801      	bhi.n	8005f44 <create_name+0x10c>
 8005f40:	2204      	movs	r2, #4
 8005f42:	e000      	b.n	8005f46 <create_name+0x10e>
 8005f44:	2200      	movs	r2, #0
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	330b      	adds	r3, #11
 8005f4a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005f4c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3720      	adds	r7, #32
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	08007008 	.word	0x08007008
 8005f5c:	08006fa0 	.word	0x08006fa0

08005f60 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005f74:	e002      	b.n	8005f7c <follow_path+0x1c>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b2f      	cmp	r3, #47	; 0x2f
 8005f82:	d0f8      	beq.n	8005f76 <follow_path+0x16>
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b5c      	cmp	r3, #92	; 0x5c
 8005f8a:	d0f4      	beq.n	8005f76 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b1f      	cmp	r3, #31
 8005f98:	d80a      	bhi.n	8005fb0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2280      	movs	r2, #128	; 0x80
 8005f9e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7ff fcf9 	bl	800599c <dir_sdi>
 8005faa:	4603      	mov	r3, r0
 8005fac:	75fb      	strb	r3, [r7, #23]
 8005fae:	e043      	b.n	8006038 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005fb0:	463b      	mov	r3, r7
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7ff ff3f 	bl	8005e38 <create_name>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005fbe:	7dfb      	ldrb	r3, [r7, #23]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d134      	bne.n	800602e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7ff feaf 	bl	8005d28 <dir_find>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005fd4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005fd6:	7dfb      	ldrb	r3, [r7, #23]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00a      	beq.n	8005ff2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005fdc:	7dfb      	ldrb	r3, [r7, #23]
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d127      	bne.n	8006032 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005fe2:	7afb      	ldrb	r3, [r7, #11]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d122      	bne.n	8006032 <follow_path+0xd2>
 8005fec:	2305      	movs	r3, #5
 8005fee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005ff0:	e01f      	b.n	8006032 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005ff2:	7afb      	ldrb	r3, [r7, #11]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d11c      	bne.n	8006036 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	799b      	ldrb	r3, [r3, #6]
 8006000:	f003 0310 	and.w	r3, r3, #16
 8006004:	2b00      	cmp	r3, #0
 8006006:	d102      	bne.n	800600e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006008:	2305      	movs	r3, #5
 800600a:	75fb      	strb	r3, [r7, #23]
 800600c:	e014      	b.n	8006038 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601c:	4413      	add	r3, r2
 800601e:	4619      	mov	r1, r3
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f7ff fe42 	bl	8005caa <ld_clust>
 8006026:	4602      	mov	r2, r0
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800602c:	e7c0      	b.n	8005fb0 <follow_path+0x50>
			if (res != FR_OK) break;
 800602e:	bf00      	nop
 8006030:	e002      	b.n	8006038 <follow_path+0xd8>
				break;
 8006032:	bf00      	nop
 8006034:	e000      	b.n	8006038 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006036:	bf00      	nop
			}
		}
	}

	return res;
 8006038:	7dfb      	ldrb	r3, [r7, #23]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006042:	b480      	push	{r7}
 8006044:	b087      	sub	sp, #28
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800604a:	f04f 33ff 	mov.w	r3, #4294967295
 800604e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d031      	beq.n	80060bc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	e002      	b.n	8006066 <get_ldnumber+0x24>
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	3301      	adds	r3, #1
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	2b20      	cmp	r3, #32
 800606c:	d903      	bls.n	8006076 <get_ldnumber+0x34>
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	2b3a      	cmp	r3, #58	; 0x3a
 8006074:	d1f4      	bne.n	8006060 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2b3a      	cmp	r3, #58	; 0x3a
 800607c:	d11c      	bne.n	80060b8 <get_ldnumber+0x76>
			tp = *path;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	60fa      	str	r2, [r7, #12]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	3b30      	subs	r3, #48	; 0x30
 800608e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2b09      	cmp	r3, #9
 8006094:	d80e      	bhi.n	80060b4 <get_ldnumber+0x72>
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	429a      	cmp	r2, r3
 800609c:	d10a      	bne.n	80060b4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d107      	bne.n	80060b4 <get_ldnumber+0x72>
					vol = (int)i;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	3301      	adds	r3, #1
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	e002      	b.n	80060be <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80060b8:	2300      	movs	r3, #0
 80060ba:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80060bc:	693b      	ldr	r3, [r7, #16]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr

080060c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	70da      	strb	r2, [r3, #3]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f04f 32ff 	mov.w	r2, #4294967295
 80060de:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80060e0:	6839      	ldr	r1, [r7, #0]
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7ff f8dc 	bl	80052a0 <move_window>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <check_fs+0x2a>
 80060ee:	2304      	movs	r3, #4
 80060f0:	e038      	b.n	8006164 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3330      	adds	r3, #48	; 0x30
 80060f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fe fe2e 	bl	8004d5c <ld_word>
 8006100:	4603      	mov	r3, r0
 8006102:	461a      	mov	r2, r3
 8006104:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006108:	429a      	cmp	r2, r3
 800610a:	d001      	beq.n	8006110 <check_fs+0x48>
 800610c:	2303      	movs	r3, #3
 800610e:	e029      	b.n	8006164 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006116:	2be9      	cmp	r3, #233	; 0xe9
 8006118:	d009      	beq.n	800612e <check_fs+0x66>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006120:	2beb      	cmp	r3, #235	; 0xeb
 8006122:	d11e      	bne.n	8006162 <check_fs+0x9a>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800612a:	2b90      	cmp	r3, #144	; 0x90
 800612c:	d119      	bne.n	8006162 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3330      	adds	r3, #48	; 0x30
 8006132:	3336      	adds	r3, #54	; 0x36
 8006134:	4618      	mov	r0, r3
 8006136:	f7fe fe28 	bl	8004d8a <ld_dword>
 800613a:	4603      	mov	r3, r0
 800613c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006140:	4a0a      	ldr	r2, [pc, #40]	; (800616c <check_fs+0xa4>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d101      	bne.n	800614a <check_fs+0x82>
 8006146:	2300      	movs	r3, #0
 8006148:	e00c      	b.n	8006164 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3330      	adds	r3, #48	; 0x30
 800614e:	3352      	adds	r3, #82	; 0x52
 8006150:	4618      	mov	r0, r3
 8006152:	f7fe fe1a 	bl	8004d8a <ld_dword>
 8006156:	4603      	mov	r3, r0
 8006158:	4a05      	ldr	r2, [pc, #20]	; (8006170 <check_fs+0xa8>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d101      	bne.n	8006162 <check_fs+0x9a>
 800615e:	2300      	movs	r3, #0
 8006160:	e000      	b.n	8006164 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006162:	2302      	movs	r3, #2
}
 8006164:	4618      	mov	r0, r3
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	00544146 	.word	0x00544146
 8006170:	33544146 	.word	0x33544146

08006174 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b096      	sub	sp, #88	; 0x58
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	4613      	mov	r3, r2
 8006180:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f7ff ff5a 	bl	8006042 <get_ldnumber>
 800618e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006192:	2b00      	cmp	r3, #0
 8006194:	da01      	bge.n	800619a <find_volume+0x26>
 8006196:	230b      	movs	r3, #11
 8006198:	e22e      	b.n	80065f8 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800619a:	4aa8      	ldr	r2, [pc, #672]	; (800643c <find_volume+0x2c8>)
 800619c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800619e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061a2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80061a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <find_volume+0x3a>
 80061aa:	230c      	movs	r3, #12
 80061ac:	e224      	b.n	80065f8 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061b2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80061b4:	79fb      	ldrb	r3, [r7, #7]
 80061b6:	f023 0301 	bic.w	r3, r3, #1
 80061ba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80061bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d01a      	beq.n	80061fa <find_volume+0x86>
		stat = disk_status(fs->drv);
 80061c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c6:	785b      	ldrb	r3, [r3, #1]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fe fd29 	bl	8004c20 <disk_status>
 80061ce:	4603      	mov	r3, r0
 80061d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80061d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10c      	bne.n	80061fa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80061e0:	79fb      	ldrb	r3, [r7, #7]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d007      	beq.n	80061f6 <find_volume+0x82>
 80061e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061ea:	f003 0304 	and.w	r3, r3, #4
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80061f2:	230a      	movs	r3, #10
 80061f4:	e200      	b.n	80065f8 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80061f6:	2300      	movs	r3, #0
 80061f8:	e1fe      	b.n	80065f8 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80061fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fc:	2200      	movs	r2, #0
 80061fe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006202:	b2da      	uxtb	r2, r3
 8006204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006206:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	4618      	mov	r0, r3
 800620e:	f7fe fd21 	bl	8004c54 <disk_initialize>
 8006212:	4603      	mov	r3, r0
 8006214:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006218:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006224:	2303      	movs	r3, #3
 8006226:	e1e7      	b.n	80065f8 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006228:	79fb      	ldrb	r3, [r7, #7]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d007      	beq.n	800623e <find_volume+0xca>
 800622e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006232:	f003 0304 	and.w	r3, r3, #4
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800623a:	230a      	movs	r3, #10
 800623c:	e1dc      	b.n	80065f8 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800623e:	2300      	movs	r3, #0
 8006240:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006242:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006244:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006246:	f7ff ff3f 	bl	80060c8 <check_fs>
 800624a:	4603      	mov	r3, r0
 800624c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006250:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006254:	2b02      	cmp	r3, #2
 8006256:	d14b      	bne.n	80062f0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006258:	2300      	movs	r3, #0
 800625a:	643b      	str	r3, [r7, #64]	; 0x40
 800625c:	e01f      	b.n	800629e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800625e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006260:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006266:	011b      	lsls	r3, r3, #4
 8006268:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800626c:	4413      	add	r3, r2
 800626e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006272:	3304      	adds	r3, #4
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d006      	beq.n	8006288 <find_volume+0x114>
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	3308      	adds	r3, #8
 800627e:	4618      	mov	r0, r3
 8006280:	f7fe fd83 	bl	8004d8a <ld_dword>
 8006284:	4602      	mov	r2, r0
 8006286:	e000      	b.n	800628a <find_volume+0x116>
 8006288:	2200      	movs	r2, #0
 800628a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006292:	440b      	add	r3, r1
 8006294:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800629a:	3301      	adds	r3, #1
 800629c:	643b      	str	r3, [r7, #64]	; 0x40
 800629e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	d9dc      	bls.n	800625e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80062a4:	2300      	movs	r3, #0
 80062a6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80062a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <find_volume+0x140>
 80062ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b0:	3b01      	subs	r3, #1
 80062b2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80062b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80062bc:	4413      	add	r3, r2
 80062be:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80062c2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80062c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <find_volume+0x162>
 80062ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062ce:	f7ff fefb 	bl	80060c8 <check_fs>
 80062d2:	4603      	mov	r3, r0
 80062d4:	e000      	b.n	80062d8 <find_volume+0x164>
 80062d6:	2303      	movs	r3, #3
 80062d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80062dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d905      	bls.n	80062f0 <find_volume+0x17c>
 80062e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062e6:	3301      	adds	r3, #1
 80062e8:	643b      	str	r3, [r7, #64]	; 0x40
 80062ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d9e1      	bls.n	80062b4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80062f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d101      	bne.n	80062fc <find_volume+0x188>
 80062f8:	2301      	movs	r3, #1
 80062fa:	e17d      	b.n	80065f8 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80062fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006300:	2b01      	cmp	r3, #1
 8006302:	d901      	bls.n	8006308 <find_volume+0x194>
 8006304:	230d      	movs	r3, #13
 8006306:	e177      	b.n	80065f8 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630a:	3330      	adds	r3, #48	; 0x30
 800630c:	330b      	adds	r3, #11
 800630e:	4618      	mov	r0, r3
 8006310:	f7fe fd24 	bl	8004d5c <ld_word>
 8006314:	4603      	mov	r3, r0
 8006316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800631a:	d001      	beq.n	8006320 <find_volume+0x1ac>
 800631c:	230d      	movs	r3, #13
 800631e:	e16b      	b.n	80065f8 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006322:	3330      	adds	r3, #48	; 0x30
 8006324:	3316      	adds	r3, #22
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe fd18 	bl	8004d5c <ld_word>
 800632c:	4603      	mov	r3, r0
 800632e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006332:	2b00      	cmp	r3, #0
 8006334:	d106      	bne.n	8006344 <find_volume+0x1d0>
 8006336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006338:	3330      	adds	r3, #48	; 0x30
 800633a:	3324      	adds	r3, #36	; 0x24
 800633c:	4618      	mov	r0, r3
 800633e:	f7fe fd24 	bl	8004d8a <ld_dword>
 8006342:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006346:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006348:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800634a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006352:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006356:	789b      	ldrb	r3, [r3, #2]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d005      	beq.n	8006368 <find_volume+0x1f4>
 800635c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635e:	789b      	ldrb	r3, [r3, #2]
 8006360:	2b02      	cmp	r3, #2
 8006362:	d001      	beq.n	8006368 <find_volume+0x1f4>
 8006364:	230d      	movs	r3, #13
 8006366:	e147      	b.n	80065f8 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636a:	789b      	ldrb	r3, [r3, #2]
 800636c:	461a      	mov	r2, r3
 800636e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006370:	fb02 f303 	mul.w	r3, r2, r3
 8006374:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800637c:	b29a      	uxth	r2, r3
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006384:	895b      	ldrh	r3, [r3, #10]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d008      	beq.n	800639c <find_volume+0x228>
 800638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638c:	895b      	ldrh	r3, [r3, #10]
 800638e:	461a      	mov	r2, r3
 8006390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006392:	895b      	ldrh	r3, [r3, #10]
 8006394:	3b01      	subs	r3, #1
 8006396:	4013      	ands	r3, r2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <find_volume+0x22c>
 800639c:	230d      	movs	r3, #13
 800639e:	e12b      	b.n	80065f8 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80063a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a2:	3330      	adds	r3, #48	; 0x30
 80063a4:	3311      	adds	r3, #17
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fe fcd8 	bl	8004d5c <ld_word>
 80063ac:	4603      	mov	r3, r0
 80063ae:	461a      	mov	r2, r3
 80063b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80063b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b6:	891b      	ldrh	r3, [r3, #8]
 80063b8:	f003 030f 	and.w	r3, r3, #15
 80063bc:	b29b      	uxth	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <find_volume+0x252>
 80063c2:	230d      	movs	r3, #13
 80063c4:	e118      	b.n	80065f8 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80063c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c8:	3330      	adds	r3, #48	; 0x30
 80063ca:	3313      	adds	r3, #19
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fe fcc5 	bl	8004d5c <ld_word>
 80063d2:	4603      	mov	r3, r0
 80063d4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80063d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d106      	bne.n	80063ea <find_volume+0x276>
 80063dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063de:	3330      	adds	r3, #48	; 0x30
 80063e0:	3320      	adds	r3, #32
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fe fcd1 	bl	8004d8a <ld_dword>
 80063e8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80063ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ec:	3330      	adds	r3, #48	; 0x30
 80063ee:	330e      	adds	r3, #14
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fe fcb3 	bl	8004d5c <ld_word>
 80063f6:	4603      	mov	r3, r0
 80063f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80063fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <find_volume+0x290>
 8006400:	230d      	movs	r3, #13
 8006402:	e0f9      	b.n	80065f8 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006404:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006408:	4413      	add	r3, r2
 800640a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800640c:	8912      	ldrh	r2, [r2, #8]
 800640e:	0912      	lsrs	r2, r2, #4
 8006410:	b292      	uxth	r2, r2
 8006412:	4413      	add	r3, r2
 8006414:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006416:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641a:	429a      	cmp	r2, r3
 800641c:	d201      	bcs.n	8006422 <find_volume+0x2ae>
 800641e:	230d      	movs	r3, #13
 8006420:	e0ea      	b.n	80065f8 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006422:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800642a:	8952      	ldrh	r2, [r2, #10]
 800642c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	2b00      	cmp	r3, #0
 8006436:	d103      	bne.n	8006440 <find_volume+0x2cc>
 8006438:	230d      	movs	r3, #13
 800643a:	e0dd      	b.n	80065f8 <find_volume+0x484>
 800643c:	20001544 	.word	0x20001544
		fmt = FS_FAT32;
 8006440:	2303      	movs	r3, #3
 8006442:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800644c:	4293      	cmp	r3, r2
 800644e:	d802      	bhi.n	8006456 <find_volume+0x2e2>
 8006450:	2302      	movs	r3, #2
 8006452:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	f640 72f5 	movw	r2, #4085	; 0xff5
 800645c:	4293      	cmp	r3, r2
 800645e:	d802      	bhi.n	8006466 <find_volume+0x2f2>
 8006460:	2301      	movs	r3, #1
 8006462:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	1c9a      	adds	r2, r3, #2
 800646a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800646e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006470:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006472:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006474:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006478:	441a      	add	r2, r3
 800647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800647e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	441a      	add	r2, r3
 8006484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006486:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006488:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800648c:	2b03      	cmp	r3, #3
 800648e:	d11e      	bne.n	80064ce <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006492:	3330      	adds	r3, #48	; 0x30
 8006494:	332a      	adds	r3, #42	; 0x2a
 8006496:	4618      	mov	r0, r3
 8006498:	f7fe fc60 	bl	8004d5c <ld_word>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <find_volume+0x332>
 80064a2:	230d      	movs	r3, #13
 80064a4:	e0a8      	b.n	80065f8 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80064a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a8:	891b      	ldrh	r3, [r3, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <find_volume+0x33e>
 80064ae:	230d      	movs	r3, #13
 80064b0:	e0a2      	b.n	80065f8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80064b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b4:	3330      	adds	r3, #48	; 0x30
 80064b6:	332c      	adds	r3, #44	; 0x2c
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fe fc66 	bl	8004d8a <ld_dword>
 80064be:	4602      	mov	r2, r0
 80064c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80064c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	647b      	str	r3, [r7, #68]	; 0x44
 80064cc:	e01f      	b.n	800650e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80064ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d0:	891b      	ldrh	r3, [r3, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <find_volume+0x366>
 80064d6:	230d      	movs	r3, #13
 80064d8:	e08e      	b.n	80065f8 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80064da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064dc:	6a1a      	ldr	r2, [r3, #32]
 80064de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e0:	441a      	add	r2, r3
 80064e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80064e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d103      	bne.n	80064f6 <find_volume+0x382>
 80064ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	e00a      	b.n	800650c <find_volume+0x398>
 80064f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f8:	695a      	ldr	r2, [r3, #20]
 80064fa:	4613      	mov	r3, r2
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	4413      	add	r3, r2
 8006500:	085a      	lsrs	r2, r3, #1
 8006502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800650c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800650e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006510:	699a      	ldr	r2, [r3, #24]
 8006512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006514:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006518:	0a5b      	lsrs	r3, r3, #9
 800651a:	429a      	cmp	r2, r3
 800651c:	d201      	bcs.n	8006522 <find_volume+0x3ae>
 800651e:	230d      	movs	r3, #13
 8006520:	e06a      	b.n	80065f8 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006524:	f04f 32ff 	mov.w	r2, #4294967295
 8006528:	611a      	str	r2, [r3, #16]
 800652a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652c:	691a      	ldr	r2, [r3, #16]
 800652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006530:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006534:	2280      	movs	r2, #128	; 0x80
 8006536:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006538:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800653c:	2b03      	cmp	r3, #3
 800653e:	d149      	bne.n	80065d4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006542:	3330      	adds	r3, #48	; 0x30
 8006544:	3330      	adds	r3, #48	; 0x30
 8006546:	4618      	mov	r0, r3
 8006548:	f7fe fc08 	bl	8004d5c <ld_word>
 800654c:	4603      	mov	r3, r0
 800654e:	2b01      	cmp	r3, #1
 8006550:	d140      	bne.n	80065d4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006554:	3301      	adds	r3, #1
 8006556:	4619      	mov	r1, r3
 8006558:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800655a:	f7fe fea1 	bl	80052a0 <move_window>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d137      	bne.n	80065d4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8006564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006566:	2200      	movs	r2, #0
 8006568:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800656a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656c:	3330      	adds	r3, #48	; 0x30
 800656e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006572:	4618      	mov	r0, r3
 8006574:	f7fe fbf2 	bl	8004d5c <ld_word>
 8006578:	4603      	mov	r3, r0
 800657a:	461a      	mov	r2, r3
 800657c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006580:	429a      	cmp	r2, r3
 8006582:	d127      	bne.n	80065d4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006586:	3330      	adds	r3, #48	; 0x30
 8006588:	4618      	mov	r0, r3
 800658a:	f7fe fbfe 	bl	8004d8a <ld_dword>
 800658e:	4603      	mov	r3, r0
 8006590:	4a1b      	ldr	r2, [pc, #108]	; (8006600 <find_volume+0x48c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d11e      	bne.n	80065d4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006598:	3330      	adds	r3, #48	; 0x30
 800659a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe fbf3 	bl	8004d8a <ld_dword>
 80065a4:	4603      	mov	r3, r0
 80065a6:	4a17      	ldr	r2, [pc, #92]	; (8006604 <find_volume+0x490>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d113      	bne.n	80065d4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80065ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ae:	3330      	adds	r3, #48	; 0x30
 80065b0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fe fbe8 	bl	8004d8a <ld_dword>
 80065ba:	4602      	mov	r2, r0
 80065bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065be:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80065c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c2:	3330      	adds	r3, #48	; 0x30
 80065c4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fe fbde 	bl	8004d8a <ld_dword>
 80065ce:	4602      	mov	r2, r0
 80065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80065d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80065da:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80065dc:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <find_volume+0x494>)
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	3301      	adds	r3, #1
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	4b08      	ldr	r3, [pc, #32]	; (8006608 <find_volume+0x494>)
 80065e6:	801a      	strh	r2, [r3, #0]
 80065e8:	4b07      	ldr	r3, [pc, #28]	; (8006608 <find_volume+0x494>)
 80065ea:	881a      	ldrh	r2, [r3, #0]
 80065ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ee:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80065f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065f2:	f7fe fded 	bl	80051d0 <clear_lock>
#endif
	return FR_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3758      	adds	r7, #88	; 0x58
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	41615252 	.word	0x41615252
 8006604:	61417272 	.word	0x61417272
 8006608:	20001548 	.word	0x20001548

0800660c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006616:	2309      	movs	r3, #9
 8006618:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d01c      	beq.n	800665a <validate+0x4e>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d018      	beq.n	800665a <validate+0x4e>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d013      	beq.n	800665a <validate+0x4e>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	889a      	ldrh	r2, [r3, #4]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	88db      	ldrh	r3, [r3, #6]
 800663c:	429a      	cmp	r2, r3
 800663e:	d10c      	bne.n	800665a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	785b      	ldrb	r3, [r3, #1]
 8006646:	4618      	mov	r0, r3
 8006648:	f7fe faea 	bl	8004c20 <disk_status>
 800664c:	4603      	mov	r3, r0
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <validate+0x4e>
			res = FR_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800665a:	7bfb      	ldrb	r3, [r7, #15]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d102      	bne.n	8006666 <validate+0x5a>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	e000      	b.n	8006668 <validate+0x5c>
 8006666:	2300      	movs	r3, #0
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	6013      	str	r3, [r2, #0]
	return res;
 800666c:	7bfb      	ldrb	r3, [r7, #15]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
	...

08006678 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b088      	sub	sp, #32
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	4613      	mov	r3, r2
 8006684:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800668a:	f107 0310 	add.w	r3, r7, #16
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff fcd7 	bl	8006042 <get_ldnumber>
 8006694:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	2b00      	cmp	r3, #0
 800669a:	da01      	bge.n	80066a0 <f_mount+0x28>
 800669c:	230b      	movs	r3, #11
 800669e:	e02b      	b.n	80066f8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80066a0:	4a17      	ldr	r2, [pc, #92]	; (8006700 <f_mount+0x88>)
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d005      	beq.n	80066bc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80066b0:	69b8      	ldr	r0, [r7, #24]
 80066b2:	f7fe fd8d 	bl	80051d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	2200      	movs	r2, #0
 80066ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	490d      	ldr	r1, [pc, #52]	; (8006700 <f_mount+0x88>)
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d002      	beq.n	80066de <f_mount+0x66>
 80066d8:	79fb      	ldrb	r3, [r7, #7]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d001      	beq.n	80066e2 <f_mount+0x6a>
 80066de:	2300      	movs	r3, #0
 80066e0:	e00a      	b.n	80066f8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80066e2:	f107 010c 	add.w	r1, r7, #12
 80066e6:	f107 0308 	add.w	r3, r7, #8
 80066ea:	2200      	movs	r2, #0
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7ff fd41 	bl	8006174 <find_volume>
 80066f2:	4603      	mov	r3, r0
 80066f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80066f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3720      	adds	r7, #32
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	20001544 	.word	0x20001544

08006704 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b098      	sub	sp, #96	; 0x60
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	4613      	mov	r3, r2
 8006710:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <f_open+0x18>
 8006718:	2309      	movs	r3, #9
 800671a:	e1ad      	b.n	8006a78 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800671c:	79fb      	ldrb	r3, [r7, #7]
 800671e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006722:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006724:	79fa      	ldrb	r2, [r7, #7]
 8006726:	f107 0110 	add.w	r1, r7, #16
 800672a:	f107 0308 	add.w	r3, r7, #8
 800672e:	4618      	mov	r0, r3
 8006730:	f7ff fd20 	bl	8006174 <find_volume>
 8006734:	4603      	mov	r3, r0
 8006736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800673a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800673e:	2b00      	cmp	r3, #0
 8006740:	f040 8191 	bne.w	8006a66 <f_open+0x362>
		dj.obj.fs = fs;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	f107 0314 	add.w	r3, r7, #20
 800674e:	4611      	mov	r1, r2
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff fc05 	bl	8005f60 <follow_path>
 8006756:	4603      	mov	r3, r0
 8006758:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800675c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006760:	2b00      	cmp	r3, #0
 8006762:	d11a      	bne.n	800679a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006764:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006768:	b25b      	sxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	da03      	bge.n	8006776 <f_open+0x72>
				res = FR_INVALID_NAME;
 800676e:	2306      	movs	r3, #6
 8006770:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006774:	e011      	b.n	800679a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006776:	79fb      	ldrb	r3, [r7, #7]
 8006778:	f023 0301 	bic.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	bf14      	ite	ne
 8006780:	2301      	movne	r3, #1
 8006782:	2300      	moveq	r3, #0
 8006784:	b2db      	uxtb	r3, r3
 8006786:	461a      	mov	r2, r3
 8006788:	f107 0314 	add.w	r3, r7, #20
 800678c:	4611      	mov	r1, r2
 800678e:	4618      	mov	r0, r3
 8006790:	f7fe fbdc 	bl	8004f4c <chk_lock>
 8006794:	4603      	mov	r3, r0
 8006796:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800679a:	79fb      	ldrb	r3, [r7, #7]
 800679c:	f003 031c 	and.w	r3, r3, #28
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d07f      	beq.n	80068a4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80067a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d017      	beq.n	80067dc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80067ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d10e      	bne.n	80067d2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80067b4:	f7fe fc24 	bl	8005000 <enq_lock>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d006      	beq.n	80067cc <f_open+0xc8>
 80067be:	f107 0314 	add.w	r3, r7, #20
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7ff fb05 	bl	8005dd2 <dir_register>
 80067c8:	4603      	mov	r3, r0
 80067ca:	e000      	b.n	80067ce <f_open+0xca>
 80067cc:	2312      	movs	r3, #18
 80067ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	f043 0308 	orr.w	r3, r3, #8
 80067d8:	71fb      	strb	r3, [r7, #7]
 80067da:	e010      	b.n	80067fe <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80067dc:	7ebb      	ldrb	r3, [r7, #26]
 80067de:	f003 0311 	and.w	r3, r3, #17
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <f_open+0xea>
					res = FR_DENIED;
 80067e6:	2307      	movs	r3, #7
 80067e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80067ec:	e007      	b.n	80067fe <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80067ee:	79fb      	ldrb	r3, [r7, #7]
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <f_open+0xfa>
 80067f8:	2308      	movs	r3, #8
 80067fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80067fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006802:	2b00      	cmp	r3, #0
 8006804:	d168      	bne.n	80068d8 <f_open+0x1d4>
 8006806:	79fb      	ldrb	r3, [r7, #7]
 8006808:	f003 0308 	and.w	r3, r3, #8
 800680c:	2b00      	cmp	r3, #0
 800680e:	d063      	beq.n	80068d8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006810:	f7fd fccc 	bl	80041ac <get_fattime>
 8006814:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006818:	330e      	adds	r3, #14
 800681a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800681c:	4618      	mov	r0, r3
 800681e:	f7fe faf0 	bl	8004e02 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006824:	3316      	adds	r3, #22
 8006826:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006828:	4618      	mov	r0, r3
 800682a:	f7fe faea 	bl	8004e02 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800682e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006830:	330b      	adds	r3, #11
 8006832:	2220      	movs	r2, #32
 8006834:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800683a:	4611      	mov	r1, r2
 800683c:	4618      	mov	r0, r3
 800683e:	f7ff fa34 	bl	8005caa <ld_clust>
 8006842:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006848:	2200      	movs	r2, #0
 800684a:	4618      	mov	r0, r3
 800684c:	f7ff fa4c 	bl	8005ce8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006852:	331c      	adds	r3, #28
 8006854:	2100      	movs	r1, #0
 8006856:	4618      	mov	r0, r3
 8006858:	f7fe fad3 	bl	8004e02 <st_dword>
					fs->wflag = 1;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	2201      	movs	r2, #1
 8006860:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006864:	2b00      	cmp	r3, #0
 8006866:	d037      	beq.n	80068d8 <f_open+0x1d4>
						dw = fs->winsect;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800686e:	f107 0314 	add.w	r3, r7, #20
 8006872:	2200      	movs	r2, #0
 8006874:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006876:	4618      	mov	r0, r3
 8006878:	f7fe ff60 	bl	800573c <remove_chain>
 800687c:	4603      	mov	r3, r0
 800687e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006882:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006886:	2b00      	cmp	r3, #0
 8006888:	d126      	bne.n	80068d8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800688e:	4618      	mov	r0, r3
 8006890:	f7fe fd06 	bl	80052a0 <move_window>
 8006894:	4603      	mov	r3, r0
 8006896:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800689e:	3a01      	subs	r2, #1
 80068a0:	60da      	str	r2, [r3, #12]
 80068a2:	e019      	b.n	80068d8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80068a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d115      	bne.n	80068d8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80068ac:	7ebb      	ldrb	r3, [r7, #26]
 80068ae:	f003 0310 	and.w	r3, r3, #16
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <f_open+0x1ba>
					res = FR_NO_FILE;
 80068b6:	2304      	movs	r3, #4
 80068b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80068bc:	e00c      	b.n	80068d8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80068be:	79fb      	ldrb	r3, [r7, #7]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d007      	beq.n	80068d8 <f_open+0x1d4>
 80068c8:	7ebb      	ldrb	r3, [r7, #26]
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <f_open+0x1d4>
						res = FR_DENIED;
 80068d2:	2307      	movs	r3, #7
 80068d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80068d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d128      	bne.n	8006932 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80068e0:	79fb      	ldrb	r3, [r7, #7]
 80068e2:	f003 0308 	and.w	r3, r3, #8
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80068ea:	79fb      	ldrb	r3, [r7, #7]
 80068ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068f0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80068fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006900:	79fb      	ldrb	r3, [r7, #7]
 8006902:	f023 0301 	bic.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	bf14      	ite	ne
 800690a:	2301      	movne	r3, #1
 800690c:	2300      	moveq	r3, #0
 800690e:	b2db      	uxtb	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	f107 0314 	add.w	r3, r7, #20
 8006916:	4611      	mov	r1, r2
 8006918:	4618      	mov	r0, r3
 800691a:	f7fe fb91 	bl	8005040 <inc_lock>
 800691e:	4602      	mov	r2, r0
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d102      	bne.n	8006932 <f_open+0x22e>
 800692c:	2302      	movs	r3, #2
 800692e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006932:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006936:	2b00      	cmp	r3, #0
 8006938:	f040 8095 	bne.w	8006a66 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006940:	4611      	mov	r1, r2
 8006942:	4618      	mov	r0, r3
 8006944:	f7ff f9b1 	bl	8005caa <ld_clust>
 8006948:	4602      	mov	r2, r0
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800694e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006950:	331c      	adds	r3, #28
 8006952:	4618      	mov	r0, r3
 8006954:	f7fe fa19 	bl	8004d8a <ld_dword>
 8006958:	4602      	mov	r2, r0
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	88da      	ldrh	r2, [r3, #6]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	79fa      	ldrb	r2, [r7, #7]
 8006976:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3330      	adds	r3, #48	; 0x30
 800698e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006992:	2100      	movs	r1, #0
 8006994:	4618      	mov	r0, r3
 8006996:	f7fe fa7f 	bl	8004e98 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800699a:	79fb      	ldrb	r3, [r7, #7]
 800699c:	f003 0320 	and.w	r3, r3, #32
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d060      	beq.n	8006a66 <f_open+0x362>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d05c      	beq.n	8006a66 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	895b      	ldrh	r3, [r3, #10]
 80069b8:	025b      	lsls	r3, r3, #9
 80069ba:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	657b      	str	r3, [r7, #84]	; 0x54
 80069c8:	e016      	b.n	80069f8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fe fd20 	bl	8005414 <get_fat>
 80069d4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80069d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d802      	bhi.n	80069e2 <f_open+0x2de>
 80069dc:	2302      	movs	r3, #2
 80069de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80069e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e8:	d102      	bne.n	80069f0 <f_open+0x2ec>
 80069ea:	2301      	movs	r3, #1
 80069ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80069f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80069f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	657b      	str	r3, [r7, #84]	; 0x54
 80069f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d103      	bne.n	8006a08 <f_open+0x304>
 8006a00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d8e0      	bhi.n	80069ca <f_open+0x2c6>
				}
				fp->clust = clst;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a0c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006a0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d127      	bne.n	8006a66 <f_open+0x362>
 8006a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d022      	beq.n	8006a66 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fe fcd7 	bl	80053d8 <clust2sect>
 8006a2a:	6478      	str	r0, [r7, #68]	; 0x44
 8006a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d103      	bne.n	8006a3a <f_open+0x336>
						res = FR_INT_ERR;
 8006a32:	2302      	movs	r3, #2
 8006a34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006a38:	e015      	b.n	8006a66 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a3c:	0a5a      	lsrs	r2, r3, #9
 8006a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a40:	441a      	add	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	7858      	ldrb	r0, [r3, #1]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6a1a      	ldr	r2, [r3, #32]
 8006a54:	2301      	movs	r3, #1
 8006a56:	f7fe f923 	bl	8004ca0 <disk_read>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <f_open+0x362>
 8006a60:	2301      	movs	r3, #1
 8006a62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006a66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d002      	beq.n	8006a74 <f_open+0x370>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006a74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3760      	adds	r7, #96	; 0x60
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08e      	sub	sp, #56	; 0x38
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f107 0214 	add.w	r2, r7, #20
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7ff fdb3 	bl	800660c <validate>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006aac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d107      	bne.n	8006ac4 <f_read+0x44>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	7d5b      	ldrb	r3, [r3, #21]
 8006ab8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006abc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d002      	beq.n	8006aca <f_read+0x4a>
 8006ac4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ac8:	e115      	b.n	8006cf6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	7d1b      	ldrb	r3, [r3, #20]
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <f_read+0x5a>
 8006ad6:	2307      	movs	r3, #7
 8006ad8:	e10d      	b.n	8006cf6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	68da      	ldr	r2, [r3, #12]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	f240 80fe 	bls.w	8006cec <f_read+0x26c>
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006af4:	e0fa      	b.n	8006cec <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f040 80c6 	bne.w	8006c90 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	0a5b      	lsrs	r3, r3, #9
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	8952      	ldrh	r2, [r2, #10]
 8006b0e:	3a01      	subs	r2, #1
 8006b10:	4013      	ands	r3, r2
 8006b12:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d12f      	bne.n	8006b7a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d103      	bne.n	8006b2a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	633b      	str	r3, [r7, #48]	; 0x30
 8006b28:	e013      	b.n	8006b52 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d007      	beq.n	8006b42 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	4619      	mov	r1, r3
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f7fe fefc 	bl	8005936 <clmt_clust>
 8006b3e:	6338      	str	r0, [r7, #48]	; 0x30
 8006b40:	e007      	b.n	8006b52 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	f7fe fc62 	bl	8005414 <get_fat>
 8006b50:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d804      	bhi.n	8006b62 <f_read+0xe2>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	755a      	strb	r2, [r3, #21]
 8006b5e:	2302      	movs	r3, #2
 8006b60:	e0c9      	b.n	8006cf6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b68:	d104      	bne.n	8006b74 <f_read+0xf4>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	755a      	strb	r2, [r3, #21]
 8006b70:	2301      	movs	r3, #1
 8006b72:	e0c0      	b.n	8006cf6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b78:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f7fe fc28 	bl	80053d8 <clust2sect>
 8006b88:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d104      	bne.n	8006b9a <f_read+0x11a>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2202      	movs	r2, #2
 8006b94:	755a      	strb	r2, [r3, #21]
 8006b96:	2302      	movs	r3, #2
 8006b98:	e0ad      	b.n	8006cf6 <f_read+0x276>
			sect += csect;
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	0a5b      	lsrs	r3, r3, #9
 8006ba6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d039      	beq.n	8006c22 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006bae:	69fa      	ldr	r2, [r7, #28]
 8006bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb2:	4413      	add	r3, r2
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	8952      	ldrh	r2, [r2, #10]
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d905      	bls.n	8006bc8 <f_read+0x148>
					cc = fs->csize - csect;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	895b      	ldrh	r3, [r3, #10]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	7858      	ldrb	r0, [r3, #1]
 8006bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bce:	69ba      	ldr	r2, [r7, #24]
 8006bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bd2:	f7fe f865 	bl	8004ca0 <disk_read>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d004      	beq.n	8006be6 <f_read+0x166>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2201      	movs	r2, #1
 8006be0:	755a      	strb	r2, [r3, #21]
 8006be2:	2301      	movs	r3, #1
 8006be4:	e087      	b.n	8006cf6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	7d1b      	ldrb	r3, [r3, #20]
 8006bea:	b25b      	sxtb	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	da14      	bge.n	8006c1a <f_read+0x19a>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a1a      	ldr	r2, [r3, #32]
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d90d      	bls.n	8006c1a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a1a      	ldr	r2, [r3, #32]
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	025b      	lsls	r3, r3, #9
 8006c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c0a:	18d0      	adds	r0, r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	3330      	adds	r3, #48	; 0x30
 8006c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c14:	4619      	mov	r1, r3
 8006c16:	f7fe f91f 	bl	8004e58 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	025b      	lsls	r3, r3, #9
 8006c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006c20:	e050      	b.n	8006cc4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d02e      	beq.n	8006c8a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	7d1b      	ldrb	r3, [r3, #20]
 8006c30:	b25b      	sxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	da18      	bge.n	8006c68 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	7858      	ldrb	r0, [r3, #1]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a1a      	ldr	r2, [r3, #32]
 8006c44:	2301      	movs	r3, #1
 8006c46:	f7fe f84b 	bl	8004ce0 <disk_write>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d004      	beq.n	8006c5a <f_read+0x1da>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2201      	movs	r2, #1
 8006c54:	755a      	strb	r2, [r3, #21]
 8006c56:	2301      	movs	r3, #1
 8006c58:	e04d      	b.n	8006cf6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	7d1b      	ldrb	r3, [r3, #20]
 8006c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	7858      	ldrb	r0, [r3, #1]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c72:	2301      	movs	r3, #1
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	f7fe f813 	bl	8004ca0 <disk_read>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d004      	beq.n	8006c8a <f_read+0x20a>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2201      	movs	r2, #1
 8006c84:	755a      	strb	r2, [r3, #21]
 8006c86:	2301      	movs	r3, #1
 8006c88:	e035      	b.n	8006cf6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c98:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d901      	bls.n	8006caa <f_read+0x22a>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb8:	4413      	add	r3, r2
 8006cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cc0:	f7fe f8ca 	bl	8004e58 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc8:	4413      	add	r3, r2
 8006cca:	627b      	str	r3, [r7, #36]	; 0x24
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	699a      	ldr	r2, [r3, #24]
 8006cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd2:	441a      	add	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	619a      	str	r2, [r3, #24]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cde:	441a      	add	r2, r3
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f47f af01 	bne.w	8006af6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3738      	adds	r7, #56	; 0x38
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b086      	sub	sp, #24
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f107 0208 	add.w	r2, r7, #8
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7ff fc7c 	bl	800660c <validate>
 8006d14:	4603      	mov	r3, r0
 8006d16:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006d18:	7dfb      	ldrb	r3, [r7, #23]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d168      	bne.n	8006df0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	7d1b      	ldrb	r3, [r3, #20]
 8006d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d062      	beq.n	8006df0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	7d1b      	ldrb	r3, [r3, #20]
 8006d2e:	b25b      	sxtb	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	da15      	bge.n	8006d60 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	7858      	ldrb	r0, [r3, #1]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a1a      	ldr	r2, [r3, #32]
 8006d42:	2301      	movs	r3, #1
 8006d44:	f7fd ffcc 	bl	8004ce0 <disk_write>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <f_sync+0x54>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e04f      	b.n	8006df2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	7d1b      	ldrb	r3, [r3, #20]
 8006d56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006d60:	f7fd fa24 	bl	80041ac <get_fattime>
 8006d64:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4610      	mov	r0, r2
 8006d70:	f7fe fa96 	bl	80052a0 <move_window>
 8006d74:	4603      	mov	r3, r0
 8006d76:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d138      	bne.n	8006df0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d82:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	330b      	adds	r3, #11
 8006d88:	781a      	ldrb	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	330b      	adds	r3, #11
 8006d8e:	f042 0220 	orr.w	r2, r2, #32
 8006d92:	b2d2      	uxtb	r2, r2
 8006d94:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6818      	ldr	r0, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	68f9      	ldr	r1, [r7, #12]
 8006da2:	f7fe ffa1 	bl	8005ce8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f103 021c 	add.w	r2, r3, #28
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	4619      	mov	r1, r3
 8006db2:	4610      	mov	r0, r2
 8006db4:	f7fe f825 	bl	8004e02 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3316      	adds	r3, #22
 8006dbc:	6939      	ldr	r1, [r7, #16]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fe f81f 	bl	8004e02 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	3312      	adds	r3, #18
 8006dc8:	2100      	movs	r1, #0
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fd ffff 	bl	8004dce <st_word>
					fs->wflag = 1;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fe fa8f 	bl	80052fc <sync_fs>
 8006dde:	4603      	mov	r3, r0
 8006de0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	7d1b      	ldrb	r3, [r3, #20]
 8006de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff ff7b 	bl	8006cfe <f_sync>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d118      	bne.n	8006e44 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f107 0208 	add.w	r2, r7, #8
 8006e18:	4611      	mov	r1, r2
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff fbf6 	bl	800660c <validate>
 8006e20:	4603      	mov	r3, r0
 8006e22:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10c      	bne.n	8006e44 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fe f994 	bl	800515c <dec_lock>
 8006e34:	4603      	mov	r3, r0
 8006e36:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d102      	bne.n	8006e44 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
	...

08006e50 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006e66:	4b1e      	ldr	r3, [pc, #120]	; (8006ee0 <FATFS_LinkDriverEx+0x90>)
 8006e68:	7a5b      	ldrb	r3, [r3, #9]
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d131      	bne.n	8006ed4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006e70:	4b1b      	ldr	r3, [pc, #108]	; (8006ee0 <FATFS_LinkDriverEx+0x90>)
 8006e72:	7a5b      	ldrb	r3, [r3, #9]
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	461a      	mov	r2, r3
 8006e78:	4b19      	ldr	r3, [pc, #100]	; (8006ee0 <FATFS_LinkDriverEx+0x90>)
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006e7e:	4b18      	ldr	r3, [pc, #96]	; (8006ee0 <FATFS_LinkDriverEx+0x90>)
 8006e80:	7a5b      	ldrb	r3, [r3, #9]
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	4a16      	ldr	r2, [pc, #88]	; (8006ee0 <FATFS_LinkDriverEx+0x90>)
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006e8e:	4b14      	ldr	r3, [pc, #80]	; (8006ee0 <FATFS_LinkDriverEx+0x90>)
 8006e90:	7a5b      	ldrb	r3, [r3, #9]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	461a      	mov	r2, r3
 8006e96:	4b12      	ldr	r3, [pc, #72]	; (8006ee0 <FATFS_LinkDriverEx+0x90>)
 8006e98:	4413      	add	r3, r2
 8006e9a:	79fa      	ldrb	r2, [r7, #7]
 8006e9c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006e9e:	4b10      	ldr	r3, [pc, #64]	; (8006ee0 <FATFS_LinkDriverEx+0x90>)
 8006ea0:	7a5b      	ldrb	r3, [r3, #9]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	b2d1      	uxtb	r1, r2
 8006ea8:	4a0d      	ldr	r2, [pc, #52]	; (8006ee0 <FATFS_LinkDriverEx+0x90>)
 8006eaa:	7251      	strb	r1, [r2, #9]
 8006eac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006eae:	7dbb      	ldrb	r3, [r7, #22]
 8006eb0:	3330      	adds	r3, #48	; 0x30
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	223a      	movs	r2, #58	; 0x3a
 8006ebe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	3302      	adds	r3, #2
 8006ec4:	222f      	movs	r2, #47	; 0x2f
 8006ec6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	3303      	adds	r3, #3
 8006ecc:	2200      	movs	r2, #0
 8006ece:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr
 8006ee0:	2000156c 	.word	0x2000156c

08006ee4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006eee:	2200      	movs	r2, #0
 8006ef0:	6839      	ldr	r1, [r7, #0]
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7ff ffac 	bl	8006e50 <FATFS_LinkDriverEx>
 8006ef8:	4603      	mov	r3, r0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <__libc_init_array>:
 8006f04:	b570      	push	{r4, r5, r6, lr}
 8006f06:	2600      	movs	r6, #0
 8006f08:	4d0c      	ldr	r5, [pc, #48]	; (8006f3c <__libc_init_array+0x38>)
 8006f0a:	4c0d      	ldr	r4, [pc, #52]	; (8006f40 <__libc_init_array+0x3c>)
 8006f0c:	1b64      	subs	r4, r4, r5
 8006f0e:	10a4      	asrs	r4, r4, #2
 8006f10:	42a6      	cmp	r6, r4
 8006f12:	d109      	bne.n	8006f28 <__libc_init_array+0x24>
 8006f14:	f000 f822 	bl	8006f5c <_init>
 8006f18:	2600      	movs	r6, #0
 8006f1a:	4d0a      	ldr	r5, [pc, #40]	; (8006f44 <__libc_init_array+0x40>)
 8006f1c:	4c0a      	ldr	r4, [pc, #40]	; (8006f48 <__libc_init_array+0x44>)
 8006f1e:	1b64      	subs	r4, r4, r5
 8006f20:	10a4      	asrs	r4, r4, #2
 8006f22:	42a6      	cmp	r6, r4
 8006f24:	d105      	bne.n	8006f32 <__libc_init_array+0x2e>
 8006f26:	bd70      	pop	{r4, r5, r6, pc}
 8006f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f2c:	4798      	blx	r3
 8006f2e:	3601      	adds	r6, #1
 8006f30:	e7ee      	b.n	8006f10 <__libc_init_array+0xc>
 8006f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f36:	4798      	blx	r3
 8006f38:	3601      	adds	r6, #1
 8006f3a:	e7f2      	b.n	8006f22 <__libc_init_array+0x1e>
 8006f3c:	08007090 	.word	0x08007090
 8006f40:	08007090 	.word	0x08007090
 8006f44:	08007090 	.word	0x08007090
 8006f48:	08007094 	.word	0x08007094

08006f4c <memset>:
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	4402      	add	r2, r0
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d100      	bne.n	8006f56 <memset+0xa>
 8006f54:	4770      	bx	lr
 8006f56:	f803 1b01 	strb.w	r1, [r3], #1
 8006f5a:	e7f9      	b.n	8006f50 <memset+0x4>

08006f5c <_init>:
 8006f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5e:	bf00      	nop
 8006f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f62:	bc08      	pop	{r3}
 8006f64:	469e      	mov	lr, r3
 8006f66:	4770      	bx	lr

08006f68 <_fini>:
 8006f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6a:	bf00      	nop
 8006f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6e:	bc08      	pop	{r3}
 8006f70:	469e      	mov	lr, r3
 8006f72:	4770      	bx	lr
