
IHateEverything3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006938  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08006a74  08006a74  00016a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b18  08006b18  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08006b18  08006b18  00016b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b20  08006b20  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b20  08006b20  00016b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b24  08006b24  00016b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08006b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f20  200000b8  08006be0  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fd8  08006be0  00021fd8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b5d  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003626  00000000  00000000  00037c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  0003b268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  0003c338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ce9  00000000  00000000  0003d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013724  00000000  00000000  00055f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fae3  00000000  00000000  000696b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f9198  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004448  00000000  00000000  000f91ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000b8 	.word	0x200000b8
 8000158:	00000000 	.word	0x00000000
 800015c:	08006a5c 	.word	0x08006a5c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000bc 	.word	0x200000bc
 8000178:	08006a5c 	.word	0x08006a5c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <InitButtons>:
TIM_HandleTypeDef* Button1DebounceTimer;
TIM_HandleTypeDef* Button2DebounceTimer;
static enum ButtonType LastButtonPressed;

void InitButtons(TIM_HandleTypeDef *button1DebounceTimer, TIM_HandleTypeDef *button2DebounceTimer)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
	Button1DebounceTimer = button1DebounceTimer;
 800047e:	4a07      	ldr	r2, [pc, #28]	; (800049c <InitButtons+0x28>)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6013      	str	r3, [r2, #0]
	Button2DebounceTimer = button2DebounceTimer;
 8000484:	4a06      	ldr	r2, [pc, #24]	; (80004a0 <InitButtons+0x2c>)
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	6013      	str	r3, [r2, #0]
	LastButtonPressed = NO_BUTTON;
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <InitButtons+0x30>)
 800048c:	2200      	movs	r2, #0
 800048e:	701a      	strb	r2, [r3, #0]
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	200016b8 	.word	0x200016b8
 80004a0:	200016bc 	.word	0x200016bc
 80004a4:	200000d4 	.word	0x200000d4

080004a8 <Button1DebounceTimerCallback>:

void Button1DebounceTimerCallback()
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(Button1DebounceTimer);
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <Button1DebounceTimerCallback+0x28>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f005 f9b9 	bl	8005828 <HAL_TIM_Base_Stop_IT>
	if(HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_RESET)
 80004b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ba:	4806      	ldr	r0, [pc, #24]	; (80004d4 <Button1DebounceTimerCallback+0x2c>)
 80004bc:	f003 fef4 	bl	80042a8 <HAL_GPIO_ReadPin>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d101      	bne.n	80004ca <Button1DebounceTimerCallback+0x22>
	{
		OnButton1Press();
 80004c6:	f000 f837 	bl	8000538 <OnButton1Press>
	}
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	200016b8 	.word	0x200016b8
 80004d4:	40020c00 	.word	0x40020c00

080004d8 <Button2DebounceTimerCallback>:

void Button2DebounceTimerCallback()
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(Button2DebounceTimer);
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <Button2DebounceTimerCallback+0x28>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4618      	mov	r0, r3
 80004e2:	f005 f9a1 	bl	8005828 <HAL_TIM_Base_Stop_IT>
	if(HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == GPIO_PIN_RESET)
 80004e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ea:	4806      	ldr	r0, [pc, #24]	; (8000504 <Button2DebounceTimerCallback+0x2c>)
 80004ec:	f003 fedc 	bl	80042a8 <HAL_GPIO_ReadPin>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d101      	bne.n	80004fa <Button2DebounceTimerCallback+0x22>
	{
		OnButton2Press();
 80004f6:	f000 f82b 	bl	8000550 <OnButton2Press>
	}
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	200016bc 	.word	0x200016bc
 8000504:	40020c00 	.word	0x40020c00

08000508 <Button1Callback>:

void Button1Callback()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(Button1DebounceTimer);
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <Button1Callback+0x14>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4618      	mov	r0, r3
 8000512:	f005 f937 	bl	8005784 <HAL_TIM_Base_Start_IT>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	200016b8 	.word	0x200016b8

08000520 <Button2Callback>:

void Button2Callback()
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(Button2DebounceTimer);
 8000524:	4b03      	ldr	r3, [pc, #12]	; (8000534 <Button2Callback+0x14>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4618      	mov	r0, r3
 800052a:	f005 f92b 	bl	8005784 <HAL_TIM_Base_Start_IT>
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200016bc 	.word	0x200016bc

08000538 <OnButton1Press>:

static void OnButton1Press()
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
	LastButtonPressed = BUTTON1;
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <OnButton1Press+0x14>)
 800053e:	2201      	movs	r2, #1
 8000540:	701a      	strb	r2, [r3, #0]
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	200000d4 	.word	0x200000d4

08000550 <OnButton2Press>:

static void OnButton2Press()
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
	LastButtonPressed = BUTTON2;
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <OnButton2Press+0x14>)
 8000556:	2202      	movs	r2, #2
 8000558:	701a      	strb	r2, [r3, #0]
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	200000d4 	.word	0x200000d4

08000568 <GetLastButtonPressed>:

enum ButtonType GetLastButtonPressed()
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
	return LastButtonPressed;
 800056c:	4b02      	ldr	r3, [pc, #8]	; (8000578 <GetLastButtonPressed+0x10>)
 800056e:	781b      	ldrb	r3, [r3, #0]
}
 8000570:	4618      	mov	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	200000d4 	.word	0x200000d4

0800057c <enableHex>:
#include "leds.h"

void enableHex(SPI_HandleTypeDef * hspi){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	writeHexVal(hspi, LED_DECODE_MODE, 0xFF);
 8000584:	22ff      	movs	r2, #255	; 0xff
 8000586:	2101      	movs	r1, #1
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f000 f9d3 	bl	8000934 <writeHexVal>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <setIntensity>:

void setIntensity(SPI_HandleTypeDef * hspi, uint8_t val){
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
 800059e:	460b      	mov	r3, r1
 80005a0:	70fb      	strb	r3, [r7, #3]
	writeHexVal(hspi, LED_INTENSITY, val);
 80005a2:	78fb      	ldrb	r3, [r7, #3]
 80005a4:	461a      	mov	r2, r3
 80005a6:	2102      	movs	r1, #2
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 f9c3 	bl	8000934 <writeHexVal>
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <setScanLimit>:

void setScanLimit(SPI_HandleTypeDef * hspi, uint8_t val){
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b082      	sub	sp, #8
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	460b      	mov	r3, r1
 80005c0:	70fb      	strb	r3, [r7, #3]
	writeHexVal(hspi, LED_SCAN_LIMIT, val);
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	461a      	mov	r2, r3
 80005c6:	2103      	movs	r1, #3
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f000 f9b3 	bl	8000934 <writeHexVal>
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <enableOutput>:

void enableOutput(SPI_HandleTypeDef * hspi){
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
	writeHexVal(hspi, LED_CONFIGURATION, 0x01);
 80005de:	2201      	movs	r2, #1
 80005e0:	2104      	movs	r1, #4
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f000 f9a6 	bl	8000934 <writeHexVal>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <writeTime>:

void disableOutput(SPI_HandleTypeDef * hspi){
	writeHexVal(hspi, LED_CONFIGURATION, 0x00);
}

void writeTime(SPI_HandleTypeDef * hspi, int time, int player){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
	int sec = time % 60;
 80005fc:	68ba      	ldr	r2, [r7, #8]
 80005fe:	4b4d      	ldr	r3, [pc, #308]	; (8000734 <writeTime+0x144>)
 8000600:	fb83 1302 	smull	r1, r3, r3, r2
 8000604:	4413      	add	r3, r2
 8000606:	1159      	asrs	r1, r3, #5
 8000608:	17d3      	asrs	r3, r2, #31
 800060a:	1ac9      	subs	r1, r1, r3
 800060c:	460b      	mov	r3, r1
 800060e:	011b      	lsls	r3, r3, #4
 8000610:	1a5b      	subs	r3, r3, r1
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	617b      	str	r3, [r7, #20]
	int min = time / 60;
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4a46      	ldr	r2, [pc, #280]	; (8000734 <writeTime+0x144>)
 800061c:	fb82 1203 	smull	r1, r2, r2, r3
 8000620:	441a      	add	r2, r3
 8000622:	1152      	asrs	r2, r2, #5
 8000624:	17db      	asrs	r3, r3, #31
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	613b      	str	r3, [r7, #16]
	if (!player){
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d13e      	bne.n	80006ae <writeTime+0xbe>
		writeHexVal(hspi, LED_4, sec % 10);
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	4b41      	ldr	r3, [pc, #260]	; (8000738 <writeTime+0x148>)
 8000634:	fb83 1302 	smull	r1, r3, r3, r2
 8000638:	1099      	asrs	r1, r3, #2
 800063a:	17d3      	asrs	r3, r2, #31
 800063c:	1ac9      	subs	r1, r1, r3
 800063e:	460b      	mov	r3, r1
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	440b      	add	r3, r1
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	1ad1      	subs	r1, r2, r3
 8000648:	b2cb      	uxtb	r3, r1
 800064a:	461a      	mov	r2, r3
 800064c:	2163      	movs	r1, #99	; 0x63
 800064e:	68f8      	ldr	r0, [r7, #12]
 8000650:	f000 f970 	bl	8000934 <writeHexVal>
		writeHexVal(hspi, LED_3, sec / 10);
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	4a38      	ldr	r2, [pc, #224]	; (8000738 <writeTime+0x148>)
 8000658:	fb82 1203 	smull	r1, r2, r2, r3
 800065c:	1092      	asrs	r2, r2, #2
 800065e:	17db      	asrs	r3, r3, #31
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	b2db      	uxtb	r3, r3
 8000664:	461a      	mov	r2, r3
 8000666:	2162      	movs	r1, #98	; 0x62
 8000668:	68f8      	ldr	r0, [r7, #12]
 800066a:	f000 f963 	bl	8000934 <writeHexVal>
		writeHexVal(hspi, LED_2, min % 10);
 800066e:	693a      	ldr	r2, [r7, #16]
 8000670:	4b31      	ldr	r3, [pc, #196]	; (8000738 <writeTime+0x148>)
 8000672:	fb83 1302 	smull	r1, r3, r3, r2
 8000676:	1099      	asrs	r1, r3, #2
 8000678:	17d3      	asrs	r3, r2, #31
 800067a:	1ac9      	subs	r1, r1, r3
 800067c:	460b      	mov	r3, r1
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	440b      	add	r3, r1
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	1ad1      	subs	r1, r2, r3
 8000686:	b2cb      	uxtb	r3, r1
 8000688:	461a      	mov	r2, r3
 800068a:	2161      	movs	r1, #97	; 0x61
 800068c:	68f8      	ldr	r0, [r7, #12]
 800068e:	f000 f951 	bl	8000934 <writeHexVal>
		writeHexVal(hspi, LED_1, min / 10);
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	4a28      	ldr	r2, [pc, #160]	; (8000738 <writeTime+0x148>)
 8000696:	fb82 1203 	smull	r1, r2, r2, r3
 800069a:	1092      	asrs	r2, r2, #2
 800069c:	17db      	asrs	r3, r3, #31
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	461a      	mov	r2, r3
 80006a4:	2160      	movs	r1, #96	; 0x60
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	f000 f944 	bl	8000934 <writeHexVal>
		writeHexVal(hspi, LED_8, sec % 10);
		writeHexVal(hspi, LED_7, sec / 10);
		writeHexVal(hspi, LED_6, min % 10);
		writeHexVal(hspi, LED_5, min / 10);
	}
}
 80006ac:	e03d      	b.n	800072a <writeTime+0x13a>
		writeHexVal(hspi, LED_8, sec % 10);
 80006ae:	697a      	ldr	r2, [r7, #20]
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <writeTime+0x148>)
 80006b2:	fb83 1302 	smull	r1, r3, r3, r2
 80006b6:	1099      	asrs	r1, r3, #2
 80006b8:	17d3      	asrs	r3, r2, #31
 80006ba:	1ac9      	subs	r1, r1, r3
 80006bc:	460b      	mov	r3, r1
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	440b      	add	r3, r1
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	1ad1      	subs	r1, r2, r3
 80006c6:	b2cb      	uxtb	r3, r1
 80006c8:	461a      	mov	r2, r3
 80006ca:	2167      	movs	r1, #103	; 0x67
 80006cc:	68f8      	ldr	r0, [r7, #12]
 80006ce:	f000 f931 	bl	8000934 <writeHexVal>
		writeHexVal(hspi, LED_7, sec / 10);
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	4a18      	ldr	r2, [pc, #96]	; (8000738 <writeTime+0x148>)
 80006d6:	fb82 1203 	smull	r1, r2, r2, r3
 80006da:	1092      	asrs	r2, r2, #2
 80006dc:	17db      	asrs	r3, r3, #31
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	461a      	mov	r2, r3
 80006e4:	2166      	movs	r1, #102	; 0x66
 80006e6:	68f8      	ldr	r0, [r7, #12]
 80006e8:	f000 f924 	bl	8000934 <writeHexVal>
		writeHexVal(hspi, LED_6, min % 10);
 80006ec:	693a      	ldr	r2, [r7, #16]
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <writeTime+0x148>)
 80006f0:	fb83 1302 	smull	r1, r3, r3, r2
 80006f4:	1099      	asrs	r1, r3, #2
 80006f6:	17d3      	asrs	r3, r2, #31
 80006f8:	1ac9      	subs	r1, r1, r3
 80006fa:	460b      	mov	r3, r1
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	440b      	add	r3, r1
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	1ad1      	subs	r1, r2, r3
 8000704:	b2cb      	uxtb	r3, r1
 8000706:	461a      	mov	r2, r3
 8000708:	2165      	movs	r1, #101	; 0x65
 800070a:	68f8      	ldr	r0, [r7, #12]
 800070c:	f000 f912 	bl	8000934 <writeHexVal>
		writeHexVal(hspi, LED_5, min / 10);
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	4a09      	ldr	r2, [pc, #36]	; (8000738 <writeTime+0x148>)
 8000714:	fb82 1203 	smull	r1, r2, r2, r3
 8000718:	1092      	asrs	r2, r2, #2
 800071a:	17db      	asrs	r3, r3, #31
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	b2db      	uxtb	r3, r3
 8000720:	461a      	mov	r2, r3
 8000722:	2164      	movs	r1, #100	; 0x64
 8000724:	68f8      	ldr	r0, [r7, #12]
 8000726:	f000 f905 	bl	8000934 <writeHexVal>
}
 800072a:	bf00      	nop
 800072c:	3718      	adds	r7, #24
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	88888889 	.word	0x88888889
 8000738:	66666667 	.word	0x66666667

0800073c <LEDSInit>:

void LEDSInit(SPI_HandleTypeDef * hspi, uint8_t spi_num){
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

	// SPI setup
	if (spi_num == 1){
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d124      	bne.n	80007a8 <LEDSInit+0x6c>
		hspi->Instance = SPI1;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a3a      	ldr	r2, [pc, #232]	; (800084c <LEDSInit+0x110>)
 8000762:	601a      	str	r2, [r3, #0]

		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000764:	4b3a      	ldr	r3, [pc, #232]	; (8000850 <LEDSInit+0x114>)
 8000766:	69db      	ldr	r3, [r3, #28]
 8000768:	4a39      	ldr	r2, [pc, #228]	; (8000850 <LEDSInit+0x114>)
 800076a:	f043 0310 	orr.w	r3, r3, #16
 800076e:	61d3      	str	r3, [r2, #28]
 8000770:	4b37      	ldr	r3, [pc, #220]	; (8000850 <LEDSInit+0x114>)
 8000772:	69db      	ldr	r3, [r3, #28]
 8000774:	f003 0310 	and.w	r3, r3, #16
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	693b      	ldr	r3, [r7, #16]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000782:	4834      	ldr	r0, [pc, #208]	; (8000854 <LEDSInit+0x118>)
 8000784:	f003 fda7 	bl	80042d6 <HAL_GPIO_WritePin>

		GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 8000788:	f241 0304 	movw	r3, #4100	; 0x1004
 800078c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	482c      	ldr	r0, [pc, #176]	; (8000854 <LEDSInit+0x118>)
 80007a2:	f003 fbf1 	bl	8003f88 <HAL_GPIO_Init>
 80007a6:	e026      	b.n	80007f6 <LEDSInit+0xba>
	}
	else if (spi_num == 2){
 80007a8:	78fb      	ldrb	r3, [r7, #3]
 80007aa:	2b02      	cmp	r3, #2
 80007ac:	d123      	bne.n	80007f6 <LEDSInit+0xba>
		hspi->Instance = SPI2;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a29      	ldr	r2, [pc, #164]	; (8000858 <LEDSInit+0x11c>)
 80007b2:	601a      	str	r2, [r3, #0]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 80007b4:	4b26      	ldr	r3, [pc, #152]	; (8000850 <LEDSInit+0x114>)
 80007b6:	69db      	ldr	r3, [r3, #28]
 80007b8:	4a25      	ldr	r2, [pc, #148]	; (8000850 <LEDSInit+0x114>)
 80007ba:	f043 0308 	orr.w	r3, r3, #8
 80007be:	61d3      	str	r3, [r2, #28]
 80007c0:	4b23      	ldr	r3, [pc, #140]	; (8000850 <LEDSInit+0x114>)
 80007c2:	69db      	ldr	r3, [r3, #28]
 80007c4:	f003 0308 	and.w	r3, r3, #8
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d2:	4822      	ldr	r0, [pc, #136]	; (800085c <LEDSInit+0x120>)
 80007d4:	f003 fd7f 	bl	80042d6 <HAL_GPIO_WritePin>

		GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007dc:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	481a      	ldr	r0, [pc, #104]	; (800085c <LEDSInit+0x120>)
 80007f2:	f003 fbc9 	bl	8003f88 <HAL_GPIO_Init>
	}
	hspi->Init.Mode = SPI_MODE_MASTER;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007fc:	605a      	str	r2, [r3, #4]
	hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
	hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
	hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
	hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
	hspi->Init.NSS = SPI_NSS_SOFT;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800081c:	619a      	str	r2, [r3, #24]
	hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2228      	movs	r2, #40	; 0x28
 8000822:	61da      	str	r2, [r3, #28]
	hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
	hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2200      	movs	r2, #0
 800082e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2200      	movs	r2, #0
 8000834:	629a      	str	r2, [r3, #40]	; 0x28
	hspi->Init.CRCPolynomial = 10;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	220a      	movs	r2, #10
 800083a:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_SPI_Init(hspi);
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f004 fae5 	bl	8004e0c <HAL_SPI_Init>


}
 8000842:	bf00      	nop
 8000844:	3728      	adds	r7, #40	; 0x28
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40013000 	.word	0x40013000
 8000850:	40023800 	.word	0x40023800
 8000854:	40021000 	.word	0x40021000
 8000858:	40003800 	.word	0x40003800
 800085c:	40020c00 	.word	0x40020c00

08000860 <ChessTimerLEDInit>:

void ChessTimerLEDInit(SPI_HandleTypeDef * hspi){
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	enableOutput(hspi);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff feb4 	bl	80005d6 <enableOutput>
	setScanLimit(hspi, 0x07);
 800086e:	2107      	movs	r1, #7
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff fea0 	bl	80005b6 <setScanLimit>
	setIntensity(hspi, 0x00);
 8000876:	2100      	movs	r1, #0
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff fe8c 	bl	8000596 <setIntensity>
	enableHex(hspi);
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff fe7c 	bl	800057c <enableHex>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <BoardLEDInit>:

void BoardLEDInit(SPI_HandleTypeDef * hspi){
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	enableOutput(hspi);
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f7ff fe9e 	bl	80005d6 <enableOutput>
	setScanLimit(hspi, 0x07);
 800089a:	2107      	movs	r1, #7
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff fe8a 	bl	80005b6 <setScanLimit>
	setIntensity(hspi, 0x01);
 80008a2:	2101      	movs	r1, #1
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff fe76 	bl	8000596 <setIntensity>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <writeBoardValue>:

void writeBoardValue(SPI_HandleTypeDef * hspi, uint8_t board[8][8]){
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b086      	sub	sp, #24
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
 80008ba:	6039      	str	r1, [r7, #0]
	for (int row = 0; row < 8; row++){
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	e030      	b.n	8000924 <writeBoardValue+0x72>
		uint8_t val = 0x0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	74fb      	strb	r3, [r7, #19]
		for (int col = 7; col > 0; col--){
 80008c6:	2307      	movs	r3, #7
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	e010      	b.n	80008ee <writeBoardValue+0x3c>
			val = (val << 1) | board[row][col];
 80008cc:	7cfb      	ldrb	r3, [r7, #19]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	b25a      	sxtb	r2, r3
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	6839      	ldr	r1, [r7, #0]
 80008d8:	4419      	add	r1, r3
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	440b      	add	r3, r1
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b25b      	sxtb	r3, r3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	74fb      	strb	r3, [r7, #19]
		for (int col = 7; col > 0; col--){
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	dceb      	bgt.n	80008cc <writeBoardValue+0x1a>
		}
		val |= board[row][0] << 7;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	01db      	lsls	r3, r3, #7
 8000900:	b25a      	sxtb	r2, r3
 8000902:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000906:	4313      	orrs	r3, r2
 8000908:	b25b      	sxtb	r3, r3
 800090a:	74fb      	strb	r3, [r7, #19]

		writeHexVal(hspi, LED_1 + row, val);
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	3360      	adds	r3, #96	; 0x60
 8000912:	b2db      	uxtb	r3, r3
 8000914:	7cfa      	ldrb	r2, [r7, #19]
 8000916:	4619      	mov	r1, r3
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f000 f80b 	bl	8000934 <writeHexVal>
	for (int row = 0; row < 8; row++){
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	3301      	adds	r3, #1
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	2b07      	cmp	r3, #7
 8000928:	ddcb      	ble.n	80008c2 <writeBoardValue+0x10>
	}
}
 800092a:	bf00      	nop
 800092c:	bf00      	nop
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <writeHexVal>:
	board[row2][col2] = 1;

	writeBoardValue(hspi, board);
}

void writeHexVal(SPI_HandleTypeDef * hspi, uint8_t reg, uint8_t val){
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	460b      	mov	r3, r1
 800093e:	70fb      	strb	r3, [r7, #3]
 8000940:	4613      	mov	r3, r2
 8000942:	70bb      	strb	r3, [r7, #2]
	if (hspi->Instance == SPI2){
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a23      	ldr	r2, [pc, #140]	; (80009d8 <writeHexVal+0xa4>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d10c      	bne.n	8000968 <writeHexVal+0x34>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000954:	4821      	ldr	r0, [pc, #132]	; (80009dc <writeHexVal+0xa8>)
 8000956:	f003 fcbe 	bl	80042d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000960:	481e      	ldr	r0, [pc, #120]	; (80009dc <writeHexVal+0xa8>)
 8000962:	f003 fcb8 	bl	80042d6 <HAL_GPIO_WritePin>
 8000966:	e010      	b.n	800098a <writeHexVal+0x56>
	}
	else if (hspi->Instance == SPI1){
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a1c      	ldr	r2, [pc, #112]	; (80009e0 <writeHexVal+0xac>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d10b      	bne.n	800098a <writeHexVal+0x56>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8000972:	2201      	movs	r2, #1
 8000974:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000978:	481a      	ldr	r0, [pc, #104]	; (80009e4 <writeHexVal+0xb0>)
 800097a:	f003 fcac 	bl	80042d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000984:	4817      	ldr	r0, [pc, #92]	; (80009e4 <writeHexVal+0xb0>)
 8000986:	f003 fca6 	bl	80042d6 <HAL_GPIO_WritePin>
	}

	HAL_SPI_Transmit(hspi, &reg, 1, 100);
 800098a:	1cf9      	adds	r1, r7, #3
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f004 fac4 	bl	8004f1e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &val, 1, 100);
 8000996:	1cb9      	adds	r1, r7, #2
 8000998:	2364      	movs	r3, #100	; 0x64
 800099a:	2201      	movs	r2, #1
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f004 fabe 	bl	8004f1e <HAL_SPI_Transmit>

	if (hspi->Instance == SPI2){
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a0c      	ldr	r2, [pc, #48]	; (80009d8 <writeHexVal+0xa4>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d106      	bne.n	80009ba <writeHexVal+0x86>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009b2:	480a      	ldr	r0, [pc, #40]	; (80009dc <writeHexVal+0xa8>)
 80009b4:	f003 fc8f 	bl	80042d6 <HAL_GPIO_WritePin>
	}
	else if (hspi->Instance == SPI1){
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
	}
}
 80009b8:	e00a      	b.n	80009d0 <writeHexVal+0x9c>
	else if (hspi->Instance == SPI1){
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <writeHexVal+0xac>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d105      	bne.n	80009d0 <writeHexVal+0x9c>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ca:	4806      	ldr	r0, [pc, #24]	; (80009e4 <writeHexVal+0xb0>)
 80009cc:	f003 fc83 	bl	80042d6 <HAL_GPIO_WritePin>
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40003800 	.word	0x40003800
 80009dc:	40020c00 	.word	0x40020c00
 80009e0:	40013000 	.word	0x40013000
 80009e4:	40021000 	.word	0x40021000

080009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b097      	sub	sp, #92	; 0x5c
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ee:	f002 ff98 	bl	8003922 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f2:	f000 f8a5 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f6:	f000 f9d9 	bl	8000dac <MX_GPIO_Init>
  //MX_SPI2_Init();
  MX_TIM3_Init();
 80009fa:	f000 f93b 	bl	8000c74 <MX_TIM3_Init>
  //MX_DMA_Init();
  //MX_DAC_Init();
  //MX_FATFS_Init();
  //MX_TIM4_Init();
  //MX_USART1_UART_Init();
  MX_TIM2_Init();
 80009fe:	f000 f8ed 	bl	8000bdc <MX_TIM2_Init>
  MX_TIM5_Init();
 8000a02:	f000 f985 	bl	8000d10 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  LEDSInit(&hspi2, 2);
 8000a06:	2102      	movs	r1, #2
 8000a08:	4842      	ldr	r0, [pc, #264]	; (8000b14 <main+0x12c>)
 8000a0a:	f7ff fe97 	bl	800073c <LEDSInit>
  HAL_TIM_Base_Start_IT(&htim3);
 8000a0e:	4842      	ldr	r0, [pc, #264]	; (8000b18 <main+0x130>)
 8000a10:	f004 feb8 	bl	8005784 <HAL_TIM_Base_Start_IT>
  ChessTimerLEDInit(&hspi2);
 8000a14:	483f      	ldr	r0, [pc, #252]	; (8000b14 <main+0x12c>)
 8000a16:	f7ff ff23 	bl	8000860 <ChessTimerLEDInit>
  writeTime(&hspi2, timer1, 0);
 8000a1a:	4b40      	ldr	r3, [pc, #256]	; (8000b1c <main+0x134>)
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	4619      	mov	r1, r3
 8000a22:	483c      	ldr	r0, [pc, #240]	; (8000b14 <main+0x12c>)
 8000a24:	f7ff fde4 	bl	80005f0 <writeTime>
  writeTime(&hspi2, timer2, 1);
 8000a28:	4b3d      	ldr	r3, [pc, #244]	; (8000b20 <main+0x138>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4838      	ldr	r0, [pc, #224]	; (8000b14 <main+0x12c>)
 8000a32:	f7ff fddd 	bl	80005f0 <writeTime>

  LEDSInit(&hspi1, 1);
 8000a36:	2101      	movs	r1, #1
 8000a38:	483a      	ldr	r0, [pc, #232]	; (8000b24 <main+0x13c>)
 8000a3a:	f7ff fe7f 	bl	800073c <LEDSInit>
  BoardLEDInit(&hspi1);
 8000a3e:	4839      	ldr	r0, [pc, #228]	; (8000b24 <main+0x13c>)
 8000a40:	f7ff ff24 	bl	800088c <BoardLEDInit>
  uint8_t board[NUM_ROWS][NUM_COLS] = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2240      	movs	r2, #64	; 0x40
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f005 fffd 	bl	8006a4c <memset>
  writeBoardValue(&hspi1, board);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	4832      	ldr	r0, [pc, #200]	; (8000b24 <main+0x13c>)
 8000a5a:	f7ff ff2a 	bl	80008b2 <writeBoardValue>
  /*

  */

  char * audio[] = {"max.wav", "tom.wav", "jazz.wav", "d2d4.wav"};
 8000a5e:	4b32      	ldr	r3, [pc, #200]	; (8000b28 <main+0x140>)
 8000a60:	1d3c      	adds	r4, r7, #4
 8000a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SpeakerInit(&hdac, &htim4);
 8000a68:	4930      	ldr	r1, [pc, #192]	; (8000b2c <main+0x144>)
 8000a6a:	4831      	ldr	r0, [pc, #196]	; (8000b30 <main+0x148>)
 8000a6c:	f001 fa98 	bl	8001fa0 <SpeakerInit>
  WaveplayerInit(&hspi3, &hdac);
 8000a70:	492f      	ldr	r1, [pc, #188]	; (8000b30 <main+0x148>)
 8000a72:	4830      	ldr	r0, [pc, #192]	; (8000b34 <main+0x14c>)
 8000a74:	f002 fec6 	bl	8003804 <WaveplayerInit>
  HAL_Delay(2000);
 8000a78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a7c:	f002 ffc0 	bl	8003a00 <HAL_Delay>
	  receiveData(&huart1, recv);
  }
  */

  // Initialize Buttons
  InitButtons(&htim2, &htim5);
 8000a80:	492d      	ldr	r1, [pc, #180]	; (8000b38 <main+0x150>)
 8000a82:	482e      	ldr	r0, [pc, #184]	; (8000b3c <main+0x154>)
 8000a84:	f7ff fcf6 	bl	8000474 <InitButtons>

  // Initialize Tracker component
  InitTracker();
 8000a88:	f001 fce4 	bl	8002454 <InitTracker>
  while(!ValidateStartPositions())
 8000a8c:	e002      	b.n	8000a94 <main+0xac>
  {
	  /// @todo: play audio cue and invoke LEDs to put pieces in correct starting positions
	  HAL_Delay(10);
 8000a8e:	200a      	movs	r0, #10
 8000a90:	f002 ffb6 	bl	8003a00 <HAL_Delay>
  while(!ValidateStartPositions())
 8000a94:	f002 fbe2 	bl	800325c <ValidateStartPositions>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f7      	beq.n	8000a8e <main+0xa6>
  }

  // Splash LEDs when ready
  for(uint8_t i = 0; i < 8; i++)
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000aa4:	e026      	b.n	8000af4 <main+0x10c>
  {
	  board[i][0] = 1;
 8000aa6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000aaa:	00db      	lsls	r3, r3, #3
 8000aac:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000ab0:	4413      	add	r3, r2
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f803 2c44 	strb.w	r2, [r3, #-68]
	  board[i][7] = 1;
 8000ab8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000ac2:	4413      	add	r3, r2
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f803 2c3d 	strb.w	r2, [r3, #-61]
	  board[0][i] = 1;
 8000aca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000ace:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000ad2:	4413      	add	r3, r2
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f803 2c44 	strb.w	r2, [r3, #-68]
	  board[7][i] = 1;
 8000ada:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000ade:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000ae2:	4413      	add	r3, r2
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t i = 0; i < 8; i++)
 8000aea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000aee:	3301      	adds	r3, #1
 8000af0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000af4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000af8:	2b07      	cmp	r3, #7
 8000afa:	d9d4      	bls.n	8000aa6 <main+0xbe>
  }
  writeBoardValue(&hspi1, board);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	4808      	ldr	r0, [pc, #32]	; (8000b24 <main+0x13c>)
 8000b04:	f7ff fed5 	bl	80008b2 <writeBoardValue>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //TestLEDs();
	  Track();
 8000b08:	f001 fd9a 	bl	8002640 <Track>
	  HAL_Delay(10);
 8000b0c:	200a      	movs	r0, #10
 8000b0e:	f002 ff77 	bl	8003a00 <HAL_Delay>
	  Track();
 8000b12:	e7f9      	b.n	8000b08 <main+0x120>
 8000b14:	200016c0 	.word	0x200016c0
 8000b18:	20001798 	.word	0x20001798
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	20000002 	.word	0x20000002
 8000b24:	200018cc 	.word	0x200018cc
 8000b28:	08006a9c 	.word	0x08006a9c
 8000b2c:	20001718 	.word	0x20001718
 8000b30:	20001874 	.word	0x20001874
 8000b34:	200017d8 	.word	0x200017d8
 8000b38:	20001758 	.word	0x20001758
 8000b3c:	20001924 	.word	0x20001924

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b092      	sub	sp, #72	; 0x48
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	2234      	movs	r2, #52	; 0x34
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f005 ff7c 	bl	8006a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	463b      	mov	r3, r7
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <SystemClock_Config+0x98>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000b6a:	4a1b      	ldr	r2, [pc, #108]	; (8000bd8 <SystemClock_Config+0x98>)
 8000b6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b70:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b72:	2302      	movs	r3, #2
 8000b74:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b76:	2301      	movs	r3, #1
 8000b78:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b82:	2300      	movs	r3, #0
 8000b84:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000b86:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000b8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000b8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b90:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4618      	mov	r0, r3
 8000b98:	f003 fbce 	bl	8004338 <HAL_RCC_OscConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ba2:	f000 fa37 	bl	8001014 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba6:	230f      	movs	r3, #15
 8000ba8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000baa:	2303      	movs	r3, #3
 8000bac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bba:	463b      	mov	r3, r7
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f003 feea 	bl	8004998 <HAL_RCC_ClockConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000bca:	f000 fa23 	bl	8001014 <Error_Handler>
  }
}
 8000bce:	bf00      	nop
 8000bd0:	3748      	adds	r7, #72	; 0x48
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40007000 	.word	0x40007000

08000bdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000bfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bfe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3200;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c02:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000c06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c08:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c10:	2264      	movs	r2, #100	; 0x64
 8000c12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c20:	4813      	ldr	r0, [pc, #76]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c22:	f004 fd25 	bl	8005670 <HAL_TIM_Base_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c2c:	f000 f9f2 	bl	8001014 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c3e:	f004 fef5 	bl	8005a2c <HAL_TIM_ConfigClockSource>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c48:	f000 f9e4 	bl	8001014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c54:	463b      	mov	r3, r7
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c5a:	f005 f8d5 	bl	8005e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c64:	f000 f9d6 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20001924 	.word	0x20001924

08000c74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c88:	463b      	mov	r3, r7
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <MX_TIM3_Init+0x94>)
 8000c92:	4a1e      	ldr	r2, [pc, #120]	; (8000d0c <MX_TIM3_Init+0x98>)
 8000c94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000-1;
 8000c96:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <MX_TIM3_Init+0x94>)
 8000c98:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000c9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <MX_TIM3_Init+0x94>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <MX_TIM3_Init+0x94>)
 8000ca6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000caa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <MX_TIM3_Init+0x94>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <MX_TIM3_Init+0x94>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cb8:	4813      	ldr	r0, [pc, #76]	; (8000d08 <MX_TIM3_Init+0x94>)
 8000cba:	f004 fcd9 	bl	8005670 <HAL_TIM_Base_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000cc4:	f000 f9a6 	bl	8001014 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	480c      	ldr	r0, [pc, #48]	; (8000d08 <MX_TIM3_Init+0x94>)
 8000cd6:	f004 fea9 	bl	8005a2c <HAL_TIM_ConfigClockSource>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ce0:	f000 f998 	bl	8001014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_TIM3_Init+0x94>)
 8000cf2:	f005 f889 	bl	8005e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000cfc:	f000 f98a 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20001798 	.word	0x20001798
 8000d0c:	40000400 	.word	0x40000400

08000d10 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	f107 0308 	add.w	r3, r7, #8
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d24:	463b      	mov	r3, r7
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <MX_TIM5_Init+0x94>)
 8000d2e:	4a1e      	ldr	r2, [pc, #120]	; (8000da8 <MX_TIM5_Init+0x98>)
 8000d30:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 3200;
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <MX_TIM5_Init+0x94>)
 8000d34:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000d38:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <MX_TIM5_Init+0x94>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8000d40:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <MX_TIM5_Init+0x94>)
 8000d42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d46:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <MX_TIM5_Init+0x94>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <MX_TIM5_Init+0x94>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000d54:	4813      	ldr	r0, [pc, #76]	; (8000da4 <MX_TIM5_Init+0x94>)
 8000d56:	f004 fc8b 	bl	8005670 <HAL_TIM_Base_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000d60:	f000 f958 	bl	8001014 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480c      	ldr	r0, [pc, #48]	; (8000da4 <MX_TIM5_Init+0x94>)
 8000d72:	f004 fe5b 	bl	8005a2c <HAL_TIM_ConfigClockSource>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000d7c:	f000 f94a 	bl	8001014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d80:	2300      	movs	r3, #0
 8000d82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d88:	463b      	mov	r3, r7
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_TIM5_Init+0x94>)
 8000d8e:	f005 f83b 	bl	8005e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000d98:	f000 f93c 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20001758 	.word	0x20001758
 8000da8:	40000c00 	.word	0x40000c00

08000dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08c      	sub	sp, #48	; 0x30
 8000db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dc2:	4b6b      	ldr	r3, [pc, #428]	; (8000f70 <MX_GPIO_Init+0x1c4>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	4a6a      	ldr	r2, [pc, #424]	; (8000f70 <MX_GPIO_Init+0x1c4>)
 8000dc8:	f043 0310 	orr.w	r3, r3, #16
 8000dcc:	61d3      	str	r3, [r2, #28]
 8000dce:	4b68      	ldr	r3, [pc, #416]	; (8000f70 <MX_GPIO_Init+0x1c4>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	f003 0310 	and.w	r3, r3, #16
 8000dd6:	61bb      	str	r3, [r7, #24]
 8000dd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	4b65      	ldr	r3, [pc, #404]	; (8000f70 <MX_GPIO_Init+0x1c4>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	4a64      	ldr	r2, [pc, #400]	; (8000f70 <MX_GPIO_Init+0x1c4>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	61d3      	str	r3, [r2, #28]
 8000de6:	4b62      	ldr	r3, [pc, #392]	; (8000f70 <MX_GPIO_Init+0x1c4>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000df2:	4b5f      	ldr	r3, [pc, #380]	; (8000f70 <MX_GPIO_Init+0x1c4>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	4a5e      	ldr	r2, [pc, #376]	; (8000f70 <MX_GPIO_Init+0x1c4>)
 8000df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dfc:	61d3      	str	r3, [r2, #28]
 8000dfe:	4b5c      	ldr	r3, [pc, #368]	; (8000f70 <MX_GPIO_Init+0x1c4>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e0a:	4b59      	ldr	r3, [pc, #356]	; (8000f70 <MX_GPIO_Init+0x1c4>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	4a58      	ldr	r2, [pc, #352]	; (8000f70 <MX_GPIO_Init+0x1c4>)
 8000e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e14:	61d3      	str	r3, [r2, #28]
 8000e16:	4b56      	ldr	r3, [pc, #344]	; (8000f70 <MX_GPIO_Init+0x1c4>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	4b53      	ldr	r3, [pc, #332]	; (8000f70 <MX_GPIO_Init+0x1c4>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4a52      	ldr	r2, [pc, #328]	; (8000f70 <MX_GPIO_Init+0x1c4>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	61d3      	str	r3, [r2, #28]
 8000e2e:	4b50      	ldr	r3, [pc, #320]	; (8000f70 <MX_GPIO_Init+0x1c4>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3a:	4b4d      	ldr	r3, [pc, #308]	; (8000f70 <MX_GPIO_Init+0x1c4>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	4a4c      	ldr	r2, [pc, #304]	; (8000f70 <MX_GPIO_Init+0x1c4>)
 8000e40:	f043 0308 	orr.w	r3, r3, #8
 8000e44:	61d3      	str	r3, [r2, #28]
 8000e46:	4b4a      	ldr	r3, [pc, #296]	; (8000f70 <MX_GPIO_Init+0x1c4>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	f003 0308 	and.w	r3, r3, #8
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	4b47      	ldr	r3, [pc, #284]	; (8000f70 <MX_GPIO_Init+0x1c4>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	4a46      	ldr	r2, [pc, #280]	; (8000f70 <MX_GPIO_Init+0x1c4>)
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	61d3      	str	r3, [r2, #28]
 8000e5e:	4b44      	ldr	r3, [pc, #272]	; (8000f70 <MX_GPIO_Init+0x1c4>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEARTBEAT_LED_GPIO_Port, HEARTBEAT_LED_Pin, GPIO_PIN_SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	4841      	ldr	r0, [pc, #260]	; (8000f74 <MX_GPIO_Init+0x1c8>)
 8000e70:	f003 fa31 	bl	80042d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HALLSEL0_Pin|HALLSEL1_Pin|HALLSEL2_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2107      	movs	r1, #7
 8000e78:	483f      	ldr	r0, [pc, #252]	; (8000f78 <MX_GPIO_Init+0x1cc>)
 8000e7a:	f003 fa2c 	bl	80042d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e84:	483b      	ldr	r0, [pc, #236]	; (8000f74 <MX_GPIO_Init+0x1c8>)
 8000e86:	f003 fa26 	bl	80042d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|SD_CS_Pin, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f240 1101 	movw	r1, #257	; 0x101
 8000e90:	483a      	ldr	r0, [pc, #232]	; (8000f7c <MX_GPIO_Init+0x1d0>)
 8000e92:	f003 fa20 	bl	80042d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HEARTBEAT_LED_Pin PE12 */
  GPIO_InitStruct.Pin = HEARTBEAT_LED_Pin|GPIO_PIN_12;
 8000e96:	f241 0304 	movw	r3, #4100	; 0x1004
 8000e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4619      	mov	r1, r3
 8000eae:	4831      	ldr	r0, [pc, #196]	; (8000f74 <MX_GPIO_Init+0x1c8>)
 8000eb0:	f003 f86a 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALLSEL0_Pin HALLSEL1_Pin HALLSEL2_Pin */
  GPIO_InitStruct.Pin = HALLSEL0_Pin|HALLSEL1_Pin|HALLSEL2_Pin;
 8000eb4:	2307      	movs	r3, #7
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	4619      	mov	r1, r3
 8000eca:	482b      	ldr	r0, [pc, #172]	; (8000f78 <MX_GPIO_Init+0x1cc>)
 8000ecc:	f003 f85c 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALLOUT0_Pin HALLOUT1_Pin HALLOUT2_Pin */
  GPIO_InitStruct.Pin = HALLOUT0_Pin|HALLOUT1_Pin|HALLOUT2_Pin;
 8000ed0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4826      	ldr	r0, [pc, #152]	; (8000f80 <MX_GPIO_Init+0x1d4>)
 8000ee6:	f003 f84f 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALLOUT3_Pin HALLOUT4_Pin */
  GPIO_InitStruct.Pin = HALLOUT3_Pin|HALLOUT4_Pin;
 8000eea:	2303      	movs	r3, #3
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4619      	mov	r1, r3
 8000efc:	4821      	ldr	r0, [pc, #132]	; (8000f84 <MX_GPIO_Init+0x1d8>)
 8000efe:	f003 f843 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALLOUT5_Pin HALLOUT6_Pin HALLOUT7_Pin */
  GPIO_InitStruct.Pin = HALLOUT5_Pin|HALLOUT6_Pin|HALLOUT7_Pin;
 8000f02:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	4619      	mov	r1, r3
 8000f16:	4817      	ldr	r0, [pc, #92]	; (8000f74 <MX_GPIO_Init+0x1c8>)
 8000f18:	f003 f836 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 SD_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|SD_CS_Pin;
 8000f1c:	f240 1301 	movw	r3, #257	; 0x101
 8000f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	4811      	ldr	r0, [pc, #68]	; (8000f7c <MX_GPIO_Init+0x1d0>)
 8000f36:	f003 f827 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 8000f3a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f40:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480a      	ldr	r0, [pc, #40]	; (8000f7c <MX_GPIO_Init+0x1d0>)
 8000f52:	f003 f819 	bl	8003f88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2028      	movs	r0, #40	; 0x28
 8000f5c:	f002 fe49 	bl	8003bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f60:	2028      	movs	r0, #40	; 0x28
 8000f62:	f002 fe62 	bl	8003c2a <HAL_NVIC_EnableIRQ>

}
 8000f66:	bf00      	nop
 8000f68:	3730      	adds	r7, #48	; 0x30
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	40020c00 	.word	0x40020c00
 8000f80:	40021800 	.word	0x40021800
 8000f84:	40021c00 	.word	0x40021c00

08000f88 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Chess clock callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d10c      	bne.n	8000fb4 <HAL_TIM_PeriodElapsedCallback+0x2c>
	  timer1--;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000fa4:	801a      	strh	r2, [r3, #0]
	  writeTime(&hspi2, timer1, 0);
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	2200      	movs	r2, #0
 8000fac:	4619      	mov	r1, r3
 8000fae:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000fb0:	f7ff fb1e 	bl	80005f0 <writeTime>
  }
  if (htim->Instance == TIM2) {
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fbc:	d101      	bne.n	8000fc2 <HAL_TIM_PeriodElapsedCallback+0x3a>
	  Button1DebounceTimerCallback();
 8000fbe:	f7ff fa73 	bl	80004a8 <Button1DebounceTimerCallback>
  }
  if (htim->Instance == TIM5) {
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d101      	bne.n	8000fd0 <HAL_TIM_PeriodElapsedCallback+0x48>
	  Button2DebounceTimerCallback();
 8000fcc:	f7ff fa84 	bl	80004d8 <Button2DebounceTimerCallback>
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40000400 	.word	0x40000400
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	200016c0 	.word	0x200016c0
 8000fe4:	40000c00 	.word	0x40000c00

08000fe8 <HAL_GPIO_EXTI_Callback>:

// Button0 and Button1 callbacks
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON1_Pin)
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ff8:	d102      	bne.n	8001000 <HAL_GPIO_EXTI_Callback+0x18>
	{
		Button1Callback();
 8000ffa:	f7ff fa85 	bl	8000508 <Button1Callback>
	}
	else if(GPIO_Pin == BUTTON2_Pin)
	{
		Button2Callback();
	}
}
 8000ffe:	e005      	b.n	800100c <HAL_GPIO_EXTI_Callback+0x24>
	else if(GPIO_Pin == BUTTON2_Pin)
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001006:	d101      	bne.n	800100c <HAL_GPIO_EXTI_Callback+0x24>
		Button2Callback();
 8001008:	f7ff fa8a 	bl	8000520 <Button2Callback>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001018:	b672      	cpsid	i
}
 800101a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800101c:	e7fe      	b.n	800101c <Error_Handler+0x8>
	...

08001020 <CalculateTeamsLegalMoves>:

// All legal moves for the current team - calculated at the beginning of each turn
static struct Moves LegalMoveSet[PIECES_PER_TEAM];

void CalculateTeamsLegalMoves(enum PieceOwner owner)
{
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b0a4      	sub	sp, #144	; 0x90
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
	// Initialize MockChessboard with current chessboard
	for (uint8_t row = 0; row < NUM_ROWS; row++)
 800102a:	2300      	movs	r3, #0
 800102c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001030:	e023      	b.n	800107a <CalculateTeamsLegalMoves+0x5a>
	{
		for (uint8_t column = 0; column < NUM_COLS; column++)
 8001032:	2300      	movs	r3, #0
 8001034:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8001038:	e016      	b.n	8001068 <CalculateTeamsLegalMoves+0x48>
		{
			MockChessboard[row][column] = GetPiece(row, column);
 800103a:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800103e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001042:	4d47      	ldr	r5, [pc, #284]	; (8001160 <CalculateTeamsLegalMoves+0x140>)
 8001044:	00d2      	lsls	r2, r2, #3
 8001046:	18d4      	adds	r4, r2, r3
 8001048:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800104c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001050:	4611      	mov	r1, r2
 8001052:	4618      	mov	r0, r3
 8001054:	f002 fb12 	bl	800367c <GetPiece>
 8001058:	4603      	mov	r3, r0
 800105a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		for (uint8_t column = 0; column < NUM_COLS; column++)
 800105e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001062:	3301      	adds	r3, #1
 8001064:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8001068:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800106c:	2b07      	cmp	r3, #7
 800106e:	d9e4      	bls.n	800103a <CalculateTeamsLegalMoves+0x1a>
	for (uint8_t row = 0; row < NUM_ROWS; row++)
 8001070:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001074:	3301      	adds	r3, #1
 8001076:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800107a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800107e:	2b07      	cmp	r3, #7
 8001080:	d9d7      	bls.n	8001032 <CalculateTeamsLegalMoves+0x12>
	}

	// Get all pieces for this team
	uint8_t numTeamPieces;
	struct PieceCoordinate teamsPieces[PIECES_PER_TEAM];
	GetPiecesForTeam(owner, teamsPieces, &numTeamPieces);
 8001082:	f107 028b 	add.w	r2, r7, #139	; 0x8b
 8001086:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fda5 	bl	8001bdc <GetPiecesForTeam>

	for (uint8_t i = 0; i < numTeamPieces; i++)
 8001092:	2300      	movs	r3, #0
 8001094:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8001098:	e057      	b.n	800114a <CalculateTeamsLegalMoves+0x12a>
	{
		struct PieceCoordinate teamPiece = teamsPieces[i];
 800109a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80010a4:	4413      	add	r3, r2
 80010a6:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80010aa:	647b      	str	r3, [r7, #68]	; 0x44

		// Get all legal paths for teamPiece
		uint8_t numLegalPaths;
		struct Coordinate allLegalPaths[MAX_LEGAL_MOVES];
		CalculateAllLegalPathsAndChecks(teamPiece, allLegalPaths, &numLegalPaths);
 80010ac:	f107 0243 	add.w	r2, r7, #67	; 0x43
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	4619      	mov	r1, r3
 80010b6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80010b8:	f000 f8ce 	bl	8001258 <CalculateAllLegalPathsAndChecks>

		// Add possible moves for this piece
		LegalMoveSet[i].from = teamPiece;
 80010bc:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 80010c0:	4928      	ldr	r1, [pc, #160]	; (8001164 <CalculateTeamsLegalMoves+0x144>)
 80010c2:	4613      	mov	r3, r2
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	1a9b      	subs	r3, r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	1a9b      	subs	r3, r3, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	461a      	mov	r2, r3
 80010d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	6010      	str	r0, [r2, #0]
		LegalMoveSet[i].numMoves = numLegalPaths;
 80010d8:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 80010dc:	f897 0043 	ldrb.w	r0, [r7, #67]	; 0x43
 80010e0:	4920      	ldr	r1, [pc, #128]	; (8001164 <CalculateTeamsLegalMoves+0x144>)
 80010e2:	4613      	mov	r3, r2
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	1a9b      	subs	r3, r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	1a9b      	subs	r3, r3, r2
 80010ec:	440b      	add	r3, r1
 80010ee:	333a      	adds	r3, #58	; 0x3a
 80010f0:	4602      	mov	r2, r0
 80010f2:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < numLegalPaths; j++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 80010fa:	e01b      	b.n	8001134 <CalculateTeamsLegalMoves+0x114>
		{
			LegalMoveSet[i].moves[j] = allLegalPaths[j];
 80010fc:	f897 108c 	ldrb.w	r1, [r7, #140]	; 0x8c
 8001100:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 8001104:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001108:	4c16      	ldr	r4, [pc, #88]	; (8001164 <CalculateTeamsLegalMoves+0x144>)
 800110a:	0058      	lsls	r0, r3, #1
 800110c:	4613      	mov	r3, r2
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	1a9b      	subs	r3, r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	1a9b      	subs	r3, r3, r2
 8001116:	4403      	add	r3, r0
 8001118:	4423      	add	r3, r4
 800111a:	1d1a      	adds	r2, r3, #4
 800111c:	004b      	lsls	r3, r1, #1
 800111e:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8001122:	440b      	add	r3, r1
 8001124:	3b84      	subs	r3, #132	; 0x84
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	8013      	strh	r3, [r2, #0]
		for (uint8_t j = 0; j < numLegalPaths; j++)
 800112a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800112e:	3301      	adds	r3, #1
 8001130:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8001134:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001138:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 800113c:	429a      	cmp	r2, r3
 800113e:	d3dd      	bcc.n	80010fc <CalculateTeamsLegalMoves+0xdc>
	for (uint8_t i = 0; i < numTeamPieces; i++)
 8001140:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001144:	3301      	adds	r3, #1
 8001146:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 800114a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800114e:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 8001152:	429a      	cmp	r2, r3
 8001154:	d3a1      	bcc.n	800109a <CalculateTeamsLegalMoves+0x7a>
		}
	}
}
 8001156:	bf00      	nop
 8001158:	bf00      	nop
 800115a:	3790      	adds	r7, #144	; 0x90
 800115c:	46bd      	mov	sp, r7
 800115e:	bdb0      	pop	{r4, r5, r7, pc}
 8001160:	200000d8 	.word	0x200000d8
 8001164:	20000158 	.word	0x20000158

08001168 <IsLegalMove>:

uint8_t IsLegalMove(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8001168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116a:	b093      	sub	sp, #76	; 0x4c
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
	// Find the legal moves for "from"
	struct Moves legalMoves;
	for (uint8_t i = 0; i < PIECES_PER_TEAM; i++)
 8001172:	2300      	movs	r3, #0
 8001174:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001178:	e03a      	b.n	80011f0 <IsLegalMove+0x88>
	{
		if (IsPieceCoordinateEqual(from, LegalMoveSet[i].from))
 800117a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800117e:	4935      	ldr	r1, [pc, #212]	; (8001254 <IsLegalMove+0xec>)
 8001180:	4613      	mov	r3, r2
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	1a9b      	subs	r3, r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	1a9b      	subs	r3, r3, r2
 800118a:	440b      	add	r3, r1
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	2300      	movs	r3, #0
 8001190:	4613      	mov	r3, r2
 8001192:	4619      	mov	r1, r3
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f002 fb03 	bl	80037a0 <IsPieceCoordinateEqual>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d022      	beq.n	80011e6 <IsLegalMove+0x7e>
		{
			legalMoves = LegalMoveSet[i];
 80011a0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80011a4:	492b      	ldr	r1, [pc, #172]	; (8001254 <IsLegalMove+0xec>)
 80011a6:	4613      	mov	r3, r2
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	1a9b      	subs	r3, r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	1a9b      	subs	r3, r3, r2
 80011b0:	440b      	add	r3, r1
 80011b2:	461c      	mov	r4, r3
 80011b4:	f107 0608 	add.w	r6, r7, #8
 80011b8:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80011bc:	4635      	mov	r5, r6
 80011be:	4623      	mov	r3, r4
 80011c0:	6818      	ldr	r0, [r3, #0]
 80011c2:	6859      	ldr	r1, [r3, #4]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ca:	3410      	adds	r4, #16
 80011cc:	3610      	adds	r6, #16
 80011ce:	4564      	cmp	r4, ip
 80011d0:	d1f4      	bne.n	80011bc <IsLegalMove+0x54>
 80011d2:	4633      	mov	r3, r6
 80011d4:	4622      	mov	r2, r4
 80011d6:	6810      	ldr	r0, [r2, #0]
 80011d8:	6851      	ldr	r1, [r2, #4]
 80011da:	c303      	stmia	r3!, {r0, r1}
 80011dc:	8911      	ldrh	r1, [r2, #8]
 80011de:	7a92      	ldrb	r2, [r2, #10]
 80011e0:	8019      	strh	r1, [r3, #0]
 80011e2:	709a      	strb	r2, [r3, #2]
			break;
 80011e4:	e008      	b.n	80011f8 <IsLegalMove+0x90>
	for (uint8_t i = 0; i < PIECES_PER_TEAM; i++)
 80011e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80011ea:	3301      	adds	r3, #1
 80011ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80011f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80011f4:	2b0f      	cmp	r3, #15
 80011f6:	d9c0      	bls.n	800117a <IsLegalMove+0x12>
		}
	}

	// Go through all legal moves and make sure "to" is in there
	for (uint8_t i = 0; i < legalMoves.numMoves; i++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80011fe:	e01e      	b.n	800123e <IsLegalMove+0xd6>
	{
		if ((to.row == legalMoves.moves[i].row) && (to.column == legalMoves.moves[i].column))
 8001200:	78bb      	ldrb	r3, [r7, #2]
 8001202:	461a      	mov	r2, r3
 8001204:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800120e:	440b      	add	r3, r1
 8001210:	f913 3c3c 	ldrsb.w	r3, [r3, #-60]
 8001214:	429a      	cmp	r2, r3
 8001216:	d10d      	bne.n	8001234 <IsLegalMove+0xcc>
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	461a      	mov	r2, r3
 800121c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001226:	440b      	add	r3, r1
 8001228:	f913 3c3b 	ldrsb.w	r3, [r3, #-59]
 800122c:	429a      	cmp	r2, r3
 800122e:	d101      	bne.n	8001234 <IsLegalMove+0xcc>
		{
			return 1;
 8001230:	2301      	movs	r3, #1
 8001232:	e00b      	b.n	800124c <IsLegalMove+0xe4>
	for (uint8_t i = 0; i < legalMoves.numMoves; i++)
 8001234:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001238:	3301      	adds	r3, #1
 800123a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800123e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001242:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001246:	429a      	cmp	r2, r3
 8001248:	d3da      	bcc.n	8001200 <IsLegalMove+0x98>
		}
	}
	return 0;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	374c      	adds	r7, #76	; 0x4c
 8001250:	46bd      	mov	sp, r7
 8001252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001254:	20000158 	.word	0x20000158

08001258 <CalculateAllLegalPathsAndChecks>:


void CalculateAllLegalPathsAndChecks(struct PieceCoordinate from, struct Coordinate* allLegalPaths, uint8_t* numLegalPaths)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]

	CalculateAllLegalPaths(from, allLegalPaths, numLegalPaths, 1);
 8001264:	2301      	movs	r3, #1
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	68b9      	ldr	r1, [r7, #8]
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f000 f814 	bl	8001298 <CalculateAllLegalPaths>
}
 8001270:	bf00      	nop
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <CalculateAllLegalPathsNoChecks>:

/**
 * @brief Calculates all legal paths but without regard for putting their own king in check. Used by WillResultInSelfCheck for each enemy piece.
 */
static void CalculateAllLegalPathsNoChecks(struct PieceCoordinate from, struct Coordinate* allLegalPaths, uint8_t* numLegalPaths)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
	CalculateAllLegalPaths(from, allLegalPaths, numLegalPaths, 0);
 8001284:	2300      	movs	r3, #0
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f000 f804 	bl	8001298 <CalculateAllLegalPaths>
}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <CalculateAllLegalPaths>:

/**
 * @brief Calculates all legal paths with trimming off moves that would put their king in check controlled by calculateCheck
 */
static void CalculateAllLegalPaths(struct PieceCoordinate from, struct Coordinate* allLegalPaths, uint8_t* numLegalPaths, uint8_t calculateCheck)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b094      	sub	sp, #80	; 0x50
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	70fb      	strb	r3, [r7, #3]
	*numLegalPaths = 0;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]

	// Get all paths
	uint8_t numPaths;
	struct Coordinate allPaths[MAX_LEGAL_MOVES] = { 0 };
 80012ac:	f107 0318 	add.w	r3, r7, #24
 80012b0:	2236      	movs	r2, #54	; 0x36
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f005 fbc9 	bl	8006a4c <memset>
	CalculateAllPaths(from, &numPaths, allPaths);
 80012ba:	f107 0218 	add.w	r2, r7, #24
 80012be:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 80012c2:	4619      	mov	r1, r3
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f000 f889 	bl	80013dc <CalculateAllPaths>

	// Populate legal paths from all paths
	for (uint8_t i = 0; i < numPaths; i++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80012d0:	e076      	b.n	80013c0 <CalculateAllLegalPaths+0x128>
	{
		struct Coordinate path = allPaths[i];
 80012d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80012dc:	4413      	add	r3, r2
 80012de:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 80012e2:	82bb      	strh	r3, [r7, #20]
		struct PieceCoordinate to = { MockChessboard[path.row][path.column], path.row, path.column };
 80012e4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80012e8:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80012ec:	4611      	mov	r1, r2
 80012ee:	4a3a      	ldr	r2, [pc, #232]	; (80013d8 <CalculateAllLegalPaths+0x140>)
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	440b      	add	r3, r1
 80012f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012f8:	823b      	strh	r3, [r7, #16]
 80012fa:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	74bb      	strb	r3, [r7, #18]
 8001302:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	74fb      	strb	r3, [r7, #19]

		if (IsPieceCoordinateSameTeam(from, to))
 800130a:	6939      	ldr	r1, [r7, #16]
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	f000 fd87 	bl	8001e20 <IsPieceCoordinateSameTeam>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d145      	bne.n	80013a4 <CalculateAllLegalPaths+0x10c>
		{
			continue;
		}
		else if (IsPieceMovingStraight(from, to) && IsPieceBlockingStraight(from, to))
 8001318:	6939      	ldr	r1, [r7, #16]
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 fd48 	bl	8001db0 <IsPieceMovingStraight>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d006      	beq.n	8001334 <CalculateAllLegalPaths+0x9c>
 8001326:	6939      	ldr	r1, [r7, #16]
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f000 fb4f 	bl	80019cc <IsPieceBlockingStraight>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d139      	bne.n	80013a8 <CalculateAllLegalPaths+0x110>
		{
			continue;
		}
		else if (IsPieceMovingDiagonal(from, to))
 8001334:	6939      	ldr	r1, [r7, #16]
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f000 fd50 	bl	8001ddc <IsPieceMovingDiagonal>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d017      	beq.n	8001372 <CalculateAllLegalPaths+0xda>
		{
			// For pawn to move in diagonal line, it must have an enemy piece on the diagonal
			if ((from.piece.type == PAWN) && (to.piece.owner == NEUTRAL))
 8001342:	7b3b      	ldrb	r3, [r7, #12]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d102      	bne.n	800134e <CalculateAllLegalPaths+0xb6>
 8001348:	7c7b      	ldrb	r3, [r7, #17]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d02e      	beq.n	80013ac <CalculateAllLegalPaths+0x114>
			{
				continue;
			}
			else if (IsPieceBlockingDiagonal(from, to))
 800134e:	6939      	ldr	r1, [r7, #16]
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f000 fc85 	bl	8001c60 <IsPieceBlockingDiagonal>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d129      	bne.n	80013b0 <CalculateAllLegalPaths+0x118>
			{
				continue;
			}
			else if (calculateCheck && WillResultInSelfCheck(from, to))
 800135c:	78fb      	ldrb	r3, [r7, #3]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d011      	beq.n	8001386 <CalculateAllLegalPaths+0xee>
 8001362:	6939      	ldr	r1, [r7, #16]
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	f000 fb8d 	bl	8001a84 <WillResultInSelfCheck>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00a      	beq.n	8001386 <CalculateAllLegalPaths+0xee>
			{
				continue;
 8001370:	e021      	b.n	80013b6 <CalculateAllLegalPaths+0x11e>
			}
		}
		else if (calculateCheck && WillResultInSelfCheck(from, to))
 8001372:	78fb      	ldrb	r3, [r7, #3]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d006      	beq.n	8001386 <CalculateAllLegalPaths+0xee>
 8001378:	6939      	ldr	r1, [r7, #16]
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f000 fb82 	bl	8001a84 <WillResultInSelfCheck>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d116      	bne.n	80013b4 <CalculateAllLegalPaths+0x11c>
		{
			continue;
		}
		allLegalPaths[(*numLegalPaths)++] = path;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	b2d1      	uxtb	r1, r2
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	7011      	strb	r1, [r2, #0]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	4413      	add	r3, r2
 8001398:	461a      	mov	r2, r3
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	8013      	strh	r3, [r2, #0]
 80013a2:	e008      	b.n	80013b6 <CalculateAllLegalPaths+0x11e>
			continue;
 80013a4:	bf00      	nop
 80013a6:	e006      	b.n	80013b6 <CalculateAllLegalPaths+0x11e>
			continue;
 80013a8:	bf00      	nop
 80013aa:	e004      	b.n	80013b6 <CalculateAllLegalPaths+0x11e>
				continue;
 80013ac:	bf00      	nop
 80013ae:	e002      	b.n	80013b6 <CalculateAllLegalPaths+0x11e>
				continue;
 80013b0:	bf00      	nop
 80013b2:	e000      	b.n	80013b6 <CalculateAllLegalPaths+0x11e>
			continue;
 80013b4:	bf00      	nop
	for (uint8_t i = 0; i < numPaths; i++)
 80013b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80013ba:	3301      	adds	r3, #1
 80013bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80013c0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80013c4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d382      	bcc.n	80012d2 <CalculateAllLegalPaths+0x3a>
	}
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3750      	adds	r7, #80	; 0x50
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200000d8 	.word	0x200000d8

080013dc <CalculateAllPaths>:

static void CalculateAllPaths(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
	*numPaths = 0;
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]

	switch (pieceCoordinate.piece.type)
 80013ee:	7b3b      	ldrb	r3, [r7, #12]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	2b05      	cmp	r3, #5
 80013f4:	d832      	bhi.n	800145c <CalculateAllPaths+0x80>
 80013f6:	a201      	add	r2, pc, #4	; (adr r2, 80013fc <CalculateAllPaths+0x20>)
 80013f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fc:	08001415 	.word	0x08001415
 8001400:	08001439 	.word	0x08001439
 8001404:	0800142d 	.word	0x0800142d
 8001408:	08001421 	.word	0x08001421
 800140c:	08001445 	.word	0x08001445
 8001410:	08001451 	.word	0x08001451
	{
	case PAWN:
		CalculateAllPathsPawn(pieceCoordinate, numPaths, paths);
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	68b9      	ldr	r1, [r7, #8]
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f000 f825 	bl	8001468 <CalculateAllPathsPawn>
		break;
 800141e:	e01e      	b.n	800145e <CalculateAllPaths+0x82>
	case ROOK:
		CalculateAllPathsRook(pieceCoordinate, numPaths, paths);
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	68b9      	ldr	r1, [r7, #8]
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f000 f89a 	bl	800155e <CalculateAllPathsRook>
		break;
 800142a:	e018      	b.n	800145e <CalculateAllPaths+0x82>
	case BISHOP:
		CalculateAllPathsBishop(pieceCoordinate, numPaths, paths);
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	68b9      	ldr	r1, [r7, #8]
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f000 f8dd 	bl	80015f0 <CalculateAllPathsBishop>
		break;
 8001436:	e012      	b.n	800145e <CalculateAllPaths+0x82>
	case KNIGHT:
		CalculateAllPathsKnight(pieceCoordinate, numPaths, paths);
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	68b9      	ldr	r1, [r7, #8]
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f000 f999 	bl	8001774 <CalculateAllPathsKnight>
		break;
 8001442:	e00c      	b.n	800145e <CalculateAllPaths+0x82>
	case QUEEN:
		CalculateAllPathsQueen(pieceCoordinate, numPaths, paths);
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	68b9      	ldr	r1, [r7, #8]
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f000 f9f1 	bl	8001830 <CalculateAllPathsQueen>
		break;
 800144e:	e006      	b.n	800145e <CalculateAllPaths+0x82>
	case KING:
		CalculateAllPathsKing(pieceCoordinate, numPaths, paths);
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	68b9      	ldr	r1, [r7, #8]
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f000 fa65 	bl	8001924 <CalculateAllPathsKing>
		break;
 800145a:	e000      	b.n	800145e <CalculateAllPaths+0x82>
	default:
		break;
 800145c:	bf00      	nop
	}
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop

08001468 <CalculateAllPathsPawn>:

static void CalculateAllPathsPawn(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
	uint8_t row = pieceCoordinate.piece.owner == WHITE ? pieceCoordinate.row + 1 : pieceCoordinate.row - 1;
 8001474:	7b7b      	ldrb	r3, [r7, #13]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d103      	bne.n	8001482 <CalculateAllPathsPawn+0x1a>
 800147a:	7bbb      	ldrb	r3, [r7, #14]
 800147c:	3301      	adds	r3, #1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	e002      	b.n	8001488 <CalculateAllPathsPawn+0x20>
 8001482:	7bbb      	ldrb	r3, [r7, #14]
 8001484:	3b01      	subs	r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	77bb      	strb	r3, [r7, #30]
	uint8_t column = pieceCoordinate.column;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	777b      	strb	r3, [r7, #29]

	for (int8_t i = -1; i <= 1; i++)
 800148e:	23ff      	movs	r3, #255	; 0xff
 8001490:	77fb      	strb	r3, [r7, #31]
 8001492:	e022      	b.n	80014da <CalculateAllPathsPawn+0x72>
	{

		struct Coordinate path = { row, column + i };
 8001494:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001498:	763b      	strb	r3, [r7, #24]
 800149a:	7ffa      	ldrb	r2, [r7, #31]
 800149c:	7f7b      	ldrb	r3, [r7, #29]
 800149e:	4413      	add	r3, r2
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	b25b      	sxtb	r3, r3
 80014a4:	767b      	strb	r3, [r7, #25]
		if (IsValidCoordinate(path))
 80014a6:	69b8      	ldr	r0, [r7, #24]
 80014a8:	f000 fc65 	bl	8001d76 <IsValidCoordinate>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00d      	beq.n	80014ce <CalculateAllPathsPawn+0x66>
		{
			paths[(*numPaths)++] = path;
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	b2d1      	uxtb	r1, r2
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	7011      	strb	r1, [r2, #0]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	4413      	add	r3, r2
 80014c4:	461a      	mov	r2, r3
 80014c6:	f107 0318 	add.w	r3, r7, #24
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	8013      	strh	r3, [r2, #0]
	for (int8_t i = -1; i <= 1; i++)
 80014ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	3301      	adds	r3, #1
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	77fb      	strb	r3, [r7, #31]
 80014da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	ddd8      	ble.n	8001494 <CalculateAllPathsPawn+0x2c>
		}
	}

	if (pieceCoordinate.piece.owner == WHITE && pieceCoordinate.row == 1)
 80014e2:	7b7b      	ldrb	r3, [r7, #13]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d11a      	bne.n	800151e <CalculateAllPathsPawn+0xb6>
 80014e8:	7bbb      	ldrb	r3, [r7, #14]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d117      	bne.n	800151e <CalculateAllPathsPawn+0xb6>
	{
		struct Coordinate path = { row + 1, column };
 80014ee:	7fbb      	ldrb	r3, [r7, #30]
 80014f0:	3301      	adds	r3, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	753b      	strb	r3, [r7, #20]
 80014f8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80014fc:	757b      	strb	r3, [r7, #21]
		paths[(*numPaths)++] = path;
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	b2d1      	uxtb	r1, r2
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	7011      	strb	r1, [r2, #0]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	4413      	add	r3, r2
 8001510:	461a      	mov	r2, r3
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	8013      	strh	r3, [r2, #0]
	{
 800151a:	bf00      	nop
	else if (pieceCoordinate.piece.owner == BLACK && pieceCoordinate.row == 6)
	{
		struct Coordinate path = { row - 1, column };
		paths[(*numPaths)++] = path;
	}
}
 800151c:	e01b      	b.n	8001556 <CalculateAllPathsPawn+0xee>
	else if (pieceCoordinate.piece.owner == BLACK && pieceCoordinate.row == 6)
 800151e:	7b7b      	ldrb	r3, [r7, #13]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d118      	bne.n	8001556 <CalculateAllPathsPawn+0xee>
 8001524:	7bbb      	ldrb	r3, [r7, #14]
 8001526:	2b06      	cmp	r3, #6
 8001528:	d115      	bne.n	8001556 <CalculateAllPathsPawn+0xee>
		struct Coordinate path = { row - 1, column };
 800152a:	7fbb      	ldrb	r3, [r7, #30]
 800152c:	3b01      	subs	r3, #1
 800152e:	b2db      	uxtb	r3, r3
 8001530:	b25b      	sxtb	r3, r3
 8001532:	743b      	strb	r3, [r7, #16]
 8001534:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001538:	747b      	strb	r3, [r7, #17]
		paths[(*numPaths)++] = path;
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	b2d1      	uxtb	r1, r2
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	7011      	strb	r1, [r2, #0]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	461a      	mov	r2, r3
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	8013      	strh	r3, [r2, #0]
}
 8001556:	bf00      	nop
 8001558:	3720      	adds	r7, #32
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <CalculateAllPathsRook>:

static void CalculateAllPathsRook(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 800155e:	b480      	push	{r7}
 8001560:	b089      	sub	sp, #36	; 0x24
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
	uint8_t row = pieceCoordinate.row;
 800156a:	7bbb      	ldrb	r3, [r7, #14]
 800156c:	77bb      	strb	r3, [r7, #30]
	uint8_t column = pieceCoordinate.column;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	777b      	strb	r3, [r7, #29]

	for (uint8_t move = 0; move < 8; move++)
 8001572:	2300      	movs	r3, #0
 8001574:	77fb      	strb	r3, [r7, #31]
 8001576:	e032      	b.n	80015de <CalculateAllPathsRook+0x80>
	{
		if (move != row)
 8001578:	7ffa      	ldrb	r2, [r7, #31]
 800157a:	7fbb      	ldrb	r3, [r7, #30]
 800157c:	429a      	cmp	r2, r3
 800157e:	d013      	beq.n	80015a8 <CalculateAllPathsRook+0x4a>
		{
			struct Coordinate path = { move, column };
 8001580:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001584:	763b      	strb	r3, [r7, #24]
 8001586:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800158a:	767b      	strb	r3, [r7, #25]
			paths[(*numPaths)++] = path;
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	b2d1      	uxtb	r1, r2
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	7011      	strb	r1, [r2, #0]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	461a      	mov	r2, r3
 80015a0:	f107 0318 	add.w	r3, r7, #24
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	8013      	strh	r3, [r2, #0]
		}

		if (move != column)
 80015a8:	7ffa      	ldrb	r2, [r7, #31]
 80015aa:	7f7b      	ldrb	r3, [r7, #29]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d013      	beq.n	80015d8 <CalculateAllPathsRook+0x7a>
		{
			struct Coordinate path = { row, move };
 80015b0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80015b4:	753b      	strb	r3, [r7, #20]
 80015b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015ba:	757b      	strb	r3, [r7, #21]
			paths[(*numPaths)++] = path;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	b2d1      	uxtb	r1, r2
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	7011      	strb	r1, [r2, #0]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	461a      	mov	r2, r3
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	8013      	strh	r3, [r2, #0]
	for (uint8_t move = 0; move < 8; move++)
 80015d8:	7ffb      	ldrb	r3, [r7, #31]
 80015da:	3301      	adds	r3, #1
 80015dc:	77fb      	strb	r3, [r7, #31]
 80015de:	7ffb      	ldrb	r3, [r7, #31]
 80015e0:	2b07      	cmp	r3, #7
 80015e2:	d9c9      	bls.n	8001578 <CalculateAllPathsRook+0x1a>
		}
	}
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <CalculateAllPathsBishop>:

static void CalculateAllPathsBishop(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b08b      	sub	sp, #44	; 0x2c
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
	uint8_t row = pieceCoordinate.row;
 80015fc:	7bbb      	ldrb	r3, [r7, #14]
 80015fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t column = pieceCoordinate.column;
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	for (uint8_t move = 1; move < 8; move++)
 8001608:	2301      	movs	r3, #1
 800160a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800160e:	e0a5      	b.n	800175c <CalculateAllPathsBishop+0x16c>
	{
		if (row + move < 8)
 8001610:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001618:	4413      	add	r3, r2
 800161a:	2b07      	cmp	r3, #7
 800161c:	dc4a      	bgt.n	80016b4 <CalculateAllPathsBishop+0xc4>
		{
			if (column + move < 8)
 800161e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001626:	4413      	add	r3, r2
 8001628:	2b07      	cmp	r3, #7
 800162a:	dc1f      	bgt.n	800166c <CalculateAllPathsBishop+0x7c>
			{
				struct Coordinate path = { row + move, column + move };
 800162c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001634:	4413      	add	r3, r2
 8001636:	b2db      	uxtb	r3, r3
 8001638:	b25b      	sxtb	r3, r3
 800163a:	f887 3020 	strb.w	r3, [r7, #32]
 800163e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001646:	4413      	add	r3, r2
 8001648:	b2db      	uxtb	r3, r3
 800164a:	b25b      	sxtb	r3, r3
 800164c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				paths[(*numPaths)++] = path;
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	b2d1      	uxtb	r1, r2
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	7011      	strb	r1, [r2, #0]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	461a      	mov	r2, r3
 8001664:	f107 0320 	add.w	r3, r7, #32
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	8013      	strh	r3, [r2, #0]
			}
			if (column >= move)
 800166c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001674:	429a      	cmp	r2, r3
 8001676:	d31d      	bcc.n	80016b4 <CalculateAllPathsBishop+0xc4>
			{
				struct Coordinate path = { row + move, column - move };
 8001678:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800167c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001680:	4413      	add	r3, r2
 8001682:	b2db      	uxtb	r3, r3
 8001684:	b25b      	sxtb	r3, r3
 8001686:	773b      	strb	r3, [r7, #28]
 8001688:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800168c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	b25b      	sxtb	r3, r3
 8001696:	777b      	strb	r3, [r7, #29]
				paths[(*numPaths)++] = path;
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	1c5a      	adds	r2, r3, #1
 800169e:	b2d1      	uxtb	r1, r2
 80016a0:	68ba      	ldr	r2, [r7, #8]
 80016a2:	7011      	strb	r1, [r2, #0]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	461a      	mov	r2, r3
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	8013      	strh	r3, [r2, #0]
			}

		}

		if (row >= move)
 80016b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80016b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016bc:	429a      	cmp	r2, r3
 80016be:	d348      	bcc.n	8001752 <CalculateAllPathsBishop+0x162>
		{
			if (column + move < 8)
 80016c0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80016c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016c8:	4413      	add	r3, r2
 80016ca:	2b07      	cmp	r3, #7
 80016cc:	dc1d      	bgt.n	800170a <CalculateAllPathsBishop+0x11a>
			{
				struct Coordinate path = { row - move, column + move };
 80016ce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80016d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	763b      	strb	r3, [r7, #24]
 80016de:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80016e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016e6:	4413      	add	r3, r2
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	767b      	strb	r3, [r7, #25]
				paths[(*numPaths)++] = path;
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	b2d1      	uxtb	r1, r2
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	7011      	strb	r1, [r2, #0]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	461a      	mov	r2, r3
 8001702:	f107 0318 	add.w	r3, r7, #24
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	8013      	strh	r3, [r2, #0]
			}
			if (column >= move)
 800170a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800170e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001712:	429a      	cmp	r2, r3
 8001714:	d31d      	bcc.n	8001752 <CalculateAllPathsBishop+0x162>
			{
				struct Coordinate path = { row - move, column - move };
 8001716:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800171a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	b2db      	uxtb	r3, r3
 8001722:	b25b      	sxtb	r3, r3
 8001724:	753b      	strb	r3, [r7, #20]
 8001726:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800172a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	b2db      	uxtb	r3, r3
 8001732:	b25b      	sxtb	r3, r3
 8001734:	757b      	strb	r3, [r7, #21]
				paths[(*numPaths)++] = path;
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	b2d1      	uxtb	r1, r2
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	7011      	strb	r1, [r2, #0]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	4413      	add	r3, r2
 8001748:	461a      	mov	r2, r3
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	8013      	strh	r3, [r2, #0]
	for (uint8_t move = 1; move < 8; move++)
 8001752:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001756:	3301      	adds	r3, #1
 8001758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800175c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001760:	2b07      	cmp	r3, #7
 8001762:	f67f af55 	bls.w	8001610 <CalculateAllPathsBishop+0x20>
			}
		}
	}
}
 8001766:	bf00      	nop
 8001768:	bf00      	nop
 800176a:	372c      	adds	r7, #44	; 0x2c
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
	...

08001774 <CalculateAllPathsKnight>:

static void CalculateAllPathsKnight(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b08d      	sub	sp, #52	; 0x34
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
	uint8_t row = pieceCoordinate.row;
 8001780:	7bbb      	ldrb	r3, [r7, #14]
 8001782:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t column = pieceCoordinate.column;
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	const struct Coordinate adders[] = {
 800178c:	4b27      	ldr	r3, [pc, #156]	; (800182c <CalculateAllPathsKnight+0xb8>)
 800178e:	f107 0418 	add.w	r4, r7, #24
 8001792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001794:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		{1, 2}, {-1, 2}, {1, -2}, {-1, -2},
		{2, 1}, {-2, 1}, {2, -1}, {-2, -1}
	};

	for (uint8_t move = 0; move < sizeof(adders) / sizeof(*adders); move++)
 8001798:	2300      	movs	r3, #0
 800179a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800179e:	e03c      	b.n	800181a <CalculateAllPathsKnight+0xa6>
	{
		int8_t newRow = row + adders[move].row;
 80017a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80017aa:	4413      	add	r3, r2
 80017ac:	f913 3c18 	ldrsb.w	r3, [r3, #-24]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80017b6:	4413      	add	r3, r2
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		int8_t newColumn = column + adders[move].column;
 80017be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80017c8:	4413      	add	r3, r2
 80017ca:	f913 3c17 	ldrsb.w	r3, [r3, #-23]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80017d4:	4413      	add	r3, r2
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		struct Coordinate path = { newRow, newColumn };
 80017dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017e0:	753b      	strb	r3, [r7, #20]
 80017e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80017e6:	757b      	strb	r3, [r7, #21]
		if (IsValidCoordinate(path))
 80017e8:	6978      	ldr	r0, [r7, #20]
 80017ea:	f000 fac4 	bl	8001d76 <IsValidCoordinate>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00d      	beq.n	8001810 <CalculateAllPathsKnight+0x9c>
		{
			paths[(*numPaths)++] = path;
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	b2d1      	uxtb	r1, r2
 80017fc:	68ba      	ldr	r2, [r7, #8]
 80017fe:	7011      	strb	r1, [r2, #0]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	461a      	mov	r2, r3
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	8013      	strh	r3, [r2, #0]
	for (uint8_t move = 0; move < sizeof(adders) / sizeof(*adders); move++)
 8001810:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001814:	3301      	adds	r3, #1
 8001816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800181a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800181e:	2b07      	cmp	r3, #7
 8001820:	d9be      	bls.n	80017a0 <CalculateAllPathsKnight+0x2c>
		}
	}
}
 8001822:	bf00      	nop
 8001824:	bf00      	nop
 8001826:	3734      	adds	r7, #52	; 0x34
 8001828:	46bd      	mov	sp, r7
 800182a:	bd90      	pop	{r4, r7, pc}
 800182c:	08006aac 	.word	0x08006aac

08001830 <CalculateAllPathsQueen>:

static void CalculateAllPathsQueen(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b094      	sub	sp, #80	; 0x50
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
	uint8_t numRookPaths = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	struct Coordinate rookPaths[MAX_ROOK_MOVES] = { 0 };
 8001842:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	611a      	str	r2, [r3, #16]
 8001852:	615a      	str	r2, [r3, #20]
 8001854:	619a      	str	r2, [r3, #24]
	CalculateAllPathsRook(pieceCoordinate, &numRookPaths, rookPaths);
 8001856:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800185a:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 800185e:	4619      	mov	r1, r3
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f7ff fe7c 	bl	800155e <CalculateAllPathsRook>

	uint8_t numBishopPaths = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	struct Coordinate bishopPaths[MAX_BISHOP_MOVES] = { 0 };
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
 800187c:	615a      	str	r2, [r3, #20]
 800187e:	831a      	strh	r2, [r3, #24]
	CalculateAllPathsBishop(pieceCoordinate, &numBishopPaths, bishopPaths);
 8001880:	f107 0214 	add.w	r2, r7, #20
 8001884:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001888:	4619      	mov	r1, r3
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f7ff feb0 	bl	80015f0 <CalculateAllPathsBishop>

	*numPaths = numRookPaths + numBishopPaths;
 8001890:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001894:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001898:	4413      	add	r3, r2
 800189a:	b2da      	uxtb	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	701a      	strb	r2, [r3, #0]

	// Add in Rook paths
	for (uint8_t i = 0; i < numRookPaths; i++)
 80018a0:	2300      	movs	r3, #0
 80018a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80018a6:	e012      	b.n	80018ce <CalculateAllPathsQueen+0x9e>
	{
		paths[i] = rookPaths[i];
 80018a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80018ac:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80018b0:	0052      	lsls	r2, r2, #1
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	440a      	add	r2, r1
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80018bc:	440b      	add	r3, r1
 80018be:	3b20      	subs	r3, #32
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < numRookPaths; i++)
 80018c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80018c8:	3301      	adds	r3, #1
 80018ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80018ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018d2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d3e6      	bcc.n	80018a8 <CalculateAllPathsQueen+0x78>
	}

	// Append Bishop paths
	for (uint8_t i = 0; i < numBishopPaths; i++)
 80018da:	2300      	movs	r3, #0
 80018dc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80018e0:	e015      	b.n	800190e <CalculateAllPathsQueen+0xde>
	{
		paths[i + numRookPaths] = bishopPaths[i];
 80018e2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80018e6:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80018ea:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 80018ee:	440a      	add	r2, r1
 80018f0:	0052      	lsls	r2, r2, #1
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	440a      	add	r2, r1
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80018fc:	440b      	add	r3, r1
 80018fe:	3b3c      	subs	r3, #60	; 0x3c
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < numBishopPaths; i++)
 8001904:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001908:	3301      	adds	r3, #1
 800190a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800190e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001912:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001916:	429a      	cmp	r2, r3
 8001918:	d3e3      	bcc.n	80018e2 <CalculateAllPathsQueen+0xb2>
	}
}
 800191a:	bf00      	nop
 800191c:	bf00      	nop
 800191e:	3750      	adds	r7, #80	; 0x50
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <CalculateAllPathsKing>:

static void CalculateAllPathsKing(struct PieceCoordinate pieceCoordinate, uint8_t* numPaths, struct Coordinate* paths)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
	uint8_t row = pieceCoordinate.row;
 8001930:	7bbb      	ldrb	r3, [r7, #14]
 8001932:	757b      	strb	r3, [r7, #21]
	uint8_t column = pieceCoordinate.column;
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	753b      	strb	r3, [r7, #20]

	for (int8_t i = -1; i <= 1; i++)
 8001938:	23ff      	movs	r3, #255	; 0xff
 800193a:	75fb      	strb	r3, [r7, #23]
 800193c:	e03c      	b.n	80019b8 <CalculateAllPathsKing+0x94>
	{
		for (int8_t j = -1; j <= 1; j++)
 800193e:	23ff      	movs	r3, #255	; 0xff
 8001940:	75bb      	strb	r3, [r7, #22]
 8001942:	e02f      	b.n	80019a4 <CalculateAllPathsKing+0x80>
		{
			if (i == 0 && j == 0)
 8001944:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d103      	bne.n	8001954 <CalculateAllPathsKing+0x30>
 800194c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d020      	beq.n	8001996 <CalculateAllPathsKing+0x72>
			{
				continue;
			}

			struct Coordinate path = { row + i, column + j };
 8001954:	7dfa      	ldrb	r2, [r7, #23]
 8001956:	7d7b      	ldrb	r3, [r7, #21]
 8001958:	4413      	add	r3, r2
 800195a:	b2db      	uxtb	r3, r3
 800195c:	b25b      	sxtb	r3, r3
 800195e:	743b      	strb	r3, [r7, #16]
 8001960:	7dba      	ldrb	r2, [r7, #22]
 8001962:	7d3b      	ldrb	r3, [r7, #20]
 8001964:	4413      	add	r3, r2
 8001966:	b2db      	uxtb	r3, r3
 8001968:	b25b      	sxtb	r3, r3
 800196a:	747b      	strb	r3, [r7, #17]
			if (IsValidCoordinate(path))
 800196c:	6938      	ldr	r0, [r7, #16]
 800196e:	f000 fa02 	bl	8001d76 <IsValidCoordinate>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00f      	beq.n	8001998 <CalculateAllPathsKing+0x74>
			{
				paths[(*numPaths)++] = path;
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	b2d1      	uxtb	r1, r2
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	7011      	strb	r1, [r2, #0]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	461a      	mov	r2, r3
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	8013      	strh	r3, [r2, #0]
 8001994:	e000      	b.n	8001998 <CalculateAllPathsKing+0x74>
				continue;
 8001996:	bf00      	nop
		for (int8_t j = -1; j <= 1; j++)
 8001998:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	3301      	adds	r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	75bb      	strb	r3, [r7, #22]
 80019a4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	ddcb      	ble.n	8001944 <CalculateAllPathsKing+0x20>
	for (int8_t i = -1; i <= 1; i++)
 80019ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	3301      	adds	r3, #1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	75fb      	strb	r3, [r7, #23]
 80019b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	ddbe      	ble.n	800193e <CalculateAllPathsKing+0x1a>
			}
		}
	}
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <IsPieceBlockingStraight>:

static uint8_t IsPieceBlockingStraight(struct PieceCoordinate from, struct PieceCoordinate to)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
	// If move is in same column
	if (from.column == to.column)
 80019d6:	79fa      	ldrb	r2, [r7, #7]
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d123      	bne.n	8001a26 <IsPieceBlockingStraight+0x5a>
	{
		uint8_t startRow = from.row > to.row ? to.row : from.row;
 80019de:	79ba      	ldrb	r2, [r7, #6]
 80019e0:	78bb      	ldrb	r3, [r7, #2]
 80019e2:	4293      	cmp	r3, r2
 80019e4:	bf28      	it	cs
 80019e6:	4613      	movcs	r3, r2
 80019e8:	72fb      	strb	r3, [r7, #11]
		uint8_t endRow = from.row > to.row ? from.row : to.row;
 80019ea:	78ba      	ldrb	r2, [r7, #2]
 80019ec:	79bb      	ldrb	r3, [r7, #6]
 80019ee:	4293      	cmp	r3, r2
 80019f0:	bf38      	it	cc
 80019f2:	4613      	movcc	r3, r2
 80019f4:	72bb      	strb	r3, [r7, #10]

		for (uint8_t row = startRow + 1; row < endRow; row++)
 80019f6:	7afb      	ldrb	r3, [r7, #11]
 80019f8:	3301      	adds	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	e00e      	b.n	8001a1c <IsPieceBlockingStraight+0x50>
		{
			if (MockChessboard[row][from.column].type != NONE) // If piece in row between "from" and "to" then it is blocking it.
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	79fa      	ldrb	r2, [r7, #7]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4a1e      	ldr	r2, [pc, #120]	; (8001a80 <IsPieceBlockingStraight+0xb4>)
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	440b      	add	r3, r1
 8001a0a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <IsPieceBlockingStraight+0x4a>
			{
				return 1;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e02f      	b.n	8001a76 <IsPieceBlockingStraight+0xaa>
		for (uint8_t row = startRow + 1; row < endRow; row++)
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	7bfa      	ldrb	r2, [r7, #15]
 8001a1e:	7abb      	ldrb	r3, [r7, #10]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d3ec      	bcc.n	80019fe <IsPieceBlockingStraight+0x32>
 8001a24:	e026      	b.n	8001a74 <IsPieceBlockingStraight+0xa8>
			}
		}
	}
	// If move is in same row
	else if (from.row == to.row)
 8001a26:	79ba      	ldrb	r2, [r7, #6]
 8001a28:	78bb      	ldrb	r3, [r7, #2]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d122      	bne.n	8001a74 <IsPieceBlockingStraight+0xa8>
	{
		uint8_t startColumn = from.column > to.column ? to.column : from.column;
 8001a2e:	79fa      	ldrb	r2, [r7, #7]
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	4293      	cmp	r3, r2
 8001a34:	bf28      	it	cs
 8001a36:	4613      	movcs	r3, r2
 8001a38:	737b      	strb	r3, [r7, #13]
		uint8_t endColumn = from.column > to.column ? from.column : to.column;
 8001a3a:	78fa      	ldrb	r2, [r7, #3]
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	bf38      	it	cc
 8001a42:	4613      	movcc	r3, r2
 8001a44:	733b      	strb	r3, [r7, #12]
		for (uint8_t column = startColumn + 1; column < endColumn; column++)
 8001a46:	7b7b      	ldrb	r3, [r7, #13]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	73bb      	strb	r3, [r7, #14]
 8001a4c:	e00e      	b.n	8001a6c <IsPieceBlockingStraight+0xa0>
		{
			// If piece in column between "from" and "to" then it is blocking it.
			if (MockChessboard[from.row][column].type != NONE)
 8001a4e:	79bb      	ldrb	r3, [r7, #6]
 8001a50:	461a      	mov	r2, r3
 8001a52:	7bbb      	ldrb	r3, [r7, #14]
 8001a54:	490a      	ldr	r1, [pc, #40]	; (8001a80 <IsPieceBlockingStraight+0xb4>)
 8001a56:	00d2      	lsls	r2, r2, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <IsPieceBlockingStraight+0x9a>
			{
				return 1;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e007      	b.n	8001a76 <IsPieceBlockingStraight+0xaa>
		for (uint8_t column = startColumn + 1; column < endColumn; column++)
 8001a66:	7bbb      	ldrb	r3, [r7, #14]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	73bb      	strb	r3, [r7, #14]
 8001a6c:	7bba      	ldrb	r2, [r7, #14]
 8001a6e:	7b3b      	ldrb	r3, [r7, #12]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d3ec      	bcc.n	8001a4e <IsPieceBlockingStraight+0x82>
			}
		}
	}
	return 0;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	200000d8 	.word	0x200000d8

08001a84 <WillResultInSelfCheck>:

uint8_t WillResultInSelfCheck(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b0a4      	sub	sp, #144	; 0x90
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
	// Temporarily populate the chessboard with this move to see if it causes a self check
	MockChessboard[from.row][from.column] = EMPTY_PIECE;
 8001a8e:	79bb      	ldrb	r3, [r7, #6]
 8001a90:	79fa      	ldrb	r2, [r7, #7]
 8001a92:	4950      	ldr	r1, [pc, #320]	; (8001bd4 <WillResultInSelfCheck+0x150>)
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4413      	add	r3, r2
 8001a98:	4a4f      	ldr	r2, [pc, #316]	; (8001bd8 <WillResultInSelfCheck+0x154>)
 8001a9a:	8812      	ldrh	r2, [r2, #0]
 8001a9c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	MockChessboard[to.row][to.column] = from.piece;
 8001aa0:	78bb      	ldrb	r3, [r7, #2]
 8001aa2:	78fa      	ldrb	r2, [r7, #3]
 8001aa4:	494b      	ldr	r1, [pc, #300]	; (8001bd4 <WillResultInSelfCheck+0x150>)
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	88ba      	ldrh	r2, [r7, #4]
 8001aac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	enum PieceOwner enemyTeam = from.piece.owner == WHITE ? BLACK : WHITE;
 8001ab0:	797b      	ldrb	r3, [r7, #5]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <WillResultInSelfCheck+0x36>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e000      	b.n	8001abc <WillResultInSelfCheck+0x38>
 8001aba:	2301      	movs	r3, #1
 8001abc:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
	uint8_t numEnemyPieces;
	struct PieceCoordinate enemyPieces[PIECES_PER_TEAM] = { 0 };
 8001ac0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ac4:	2240      	movs	r2, #64	; 0x40
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f004 ffbf 	bl	8006a4c <memset>

	// For each enemy piece
	GetPiecesForTeam(enemyTeam, enemyPieces, &numEnemyPieces);
 8001ace:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001ad2:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001ad6:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f87e 	bl	8001bdc <GetPiecesForTeam>
	for (uint8_t i = 0; i < numEnemyPieces; i++)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001ae6:	e059      	b.n	8001b9c <WillResultInSelfCheck+0x118>
	{
		uint8_t numEnemyPieceLegalPaths;
		struct Coordinate enemyPieceLegalPaths[MAX_LEGAL_MOVES] = { 0 };
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2236      	movs	r2, #54	; 0x36
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f004 ffab 	bl	8006a4c <memset>

		// For each legal path this enemy piece can take
		CalculateAllLegalPathsNoChecks(enemyPieces[i], enemyPieceLegalPaths, &numEnemyPieceLegalPaths);
 8001af6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001afa:	f107 024b 	add.w	r2, r7, #75	; 0x4b
 8001afe:	f107 010c 	add.w	r1, r7, #12
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8001b08:	4403      	add	r3, r0
 8001b0a:	f853 0c44 	ldr.w	r0, [r3, #-68]
 8001b0e:	f7ff fbb3 	bl	8001278 <CalculateAllLegalPathsNoChecks>
		for (uint8_t j = 0; j < numEnemyPieceLegalPaths; j++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8001b18:	e035      	b.n	8001b86 <WillResultInSelfCheck+0x102>
		{
			struct Coordinate enemyFinalLocation = enemyPieceLegalPaths[j];
 8001b1a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001b24:	4413      	add	r3, r2
 8001b26:	f833 3c84 	ldrh.w	r3, [r3, #-132]
 8001b2a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			struct Piece killedPiece = MockChessboard[enemyFinalLocation.row][enemyFinalLocation.column];
 8001b2e:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 8001b32:	f997 2049 	ldrsb.w	r2, [r7, #73]	; 0x49
 8001b36:	4611      	mov	r1, r2
 8001b38:	4a26      	ldr	r2, [pc, #152]	; (8001bd4 <WillResultInSelfCheck+0x150>)
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	440b      	add	r3, r1
 8001b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b42:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

			// If the enemy piece can take our king, this move (from -> to) will result in a check so it cannot be legal
			if ((killedPiece.type == KING) && (killedPiece.owner == from.piece.owner))
 8001b46:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d116      	bne.n	8001b7c <WillResultInSelfCheck+0xf8>
 8001b4e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001b52:	797b      	ldrb	r3, [r7, #5]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d111      	bne.n	8001b7c <WillResultInSelfCheck+0xf8>
			{
				// Undo temporary move
				MockChessboard[from.row][from.column] = from.piece;
 8001b58:	79bb      	ldrb	r3, [r7, #6]
 8001b5a:	79fa      	ldrb	r2, [r7, #7]
 8001b5c:	491d      	ldr	r1, [pc, #116]	; (8001bd4 <WillResultInSelfCheck+0x150>)
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4413      	add	r3, r2
 8001b62:	88ba      	ldrh	r2, [r7, #4]
 8001b64:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				MockChessboard[to.row][to.column] = to.piece;
 8001b68:	78bb      	ldrb	r3, [r7, #2]
 8001b6a:	78fa      	ldrb	r2, [r7, #3]
 8001b6c:	4919      	ldr	r1, [pc, #100]	; (8001bd4 <WillResultInSelfCheck+0x150>)
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4413      	add	r3, r2
 8001b72:	883a      	ldrh	r2, [r7, #0]
 8001b74:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				return 1;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e026      	b.n	8001bca <WillResultInSelfCheck+0x146>
		for (uint8_t j = 0; j < numEnemyPieceLegalPaths; j++)
 8001b7c:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001b80:	3301      	adds	r3, #1
 8001b82:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8001b86:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001b8a:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d3c3      	bcc.n	8001b1a <WillResultInSelfCheck+0x96>
	for (uint8_t i = 0; i < numEnemyPieces; i++)
 8001b92:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001b96:	3301      	adds	r3, #1
 8001b98:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001b9c:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001ba0:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d39f      	bcc.n	8001ae8 <WillResultInSelfCheck+0x64>
			}
		}
	}

	// Undo temporary move
	MockChessboard[from.row][from.column] = from.piece;
 8001ba8:	79bb      	ldrb	r3, [r7, #6]
 8001baa:	79fa      	ldrb	r2, [r7, #7]
 8001bac:	4909      	ldr	r1, [pc, #36]	; (8001bd4 <WillResultInSelfCheck+0x150>)
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	88ba      	ldrh	r2, [r7, #4]
 8001bb4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	MockChessboard[to.row][to.column] = to.piece;
 8001bb8:	78bb      	ldrb	r3, [r7, #2]
 8001bba:	78fa      	ldrb	r2, [r7, #3]
 8001bbc:	4905      	ldr	r1, [pc, #20]	; (8001bd4 <WillResultInSelfCheck+0x150>)
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	883a      	ldrh	r2, [r7, #0]
 8001bc4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	return 0;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3790      	adds	r7, #144	; 0x90
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200000d8 	.word	0x200000d8
 8001bd8:	20000004 	.word	0x20000004

08001bdc <GetPiecesForTeam>:

void GetPiecesForTeam(enum PieceOwner owner, struct PieceCoordinate* pieces, uint8_t* numPieces)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b087      	sub	sp, #28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	73fb      	strb	r3, [r7, #15]
	*numPieces = 0;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]

	for (uint8_t row = 0; row < NUM_ROWS; row++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	75fb      	strb	r3, [r7, #23]
 8001bf4:	e029      	b.n	8001c4a <GetPiecesForTeam+0x6e>
	{
		for (uint8_t column = 0; column < NUM_COLS; column++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	75bb      	strb	r3, [r7, #22]
 8001bfa:	e020      	b.n	8001c3e <GetPiecesForTeam+0x62>
		{
			struct PieceCoordinate piece = { MockChessboard[row][column], row, column };
 8001bfc:	7dfa      	ldrb	r2, [r7, #23]
 8001bfe:	7dbb      	ldrb	r3, [r7, #22]
 8001c00:	4916      	ldr	r1, [pc, #88]	; (8001c5c <GetPiecesForTeam+0x80>)
 8001c02:	00d2      	lsls	r2, r2, #3
 8001c04:	4413      	add	r3, r2
 8001c06:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c0a:	823b      	strh	r3, [r7, #16]
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
 8001c0e:	74bb      	strb	r3, [r7, #18]
 8001c10:	7dbb      	ldrb	r3, [r7, #22]
 8001c12:	74fb      	strb	r3, [r7, #19]
			if (piece.piece.owner == owner)
 8001c14:	7c7b      	ldrb	r3, [r7, #17]
 8001c16:	7bfa      	ldrb	r2, [r7, #15]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d10d      	bne.n	8001c38 <GetPiecesForTeam+0x5c>
			{
				pieces[(*numPieces)++] = piece;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	b2d1      	uxtb	r1, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	7011      	strb	r1, [r2, #0]
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	461a      	mov	r2, r3
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	6010      	str	r0, [r2, #0]
		for (uint8_t column = 0; column < NUM_COLS; column++)
 8001c38:	7dbb      	ldrb	r3, [r7, #22]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	75bb      	strb	r3, [r7, #22]
 8001c3e:	7dbb      	ldrb	r3, [r7, #22]
 8001c40:	2b07      	cmp	r3, #7
 8001c42:	d9db      	bls.n	8001bfc <GetPiecesForTeam+0x20>
	for (uint8_t row = 0; row < NUM_ROWS; row++)
 8001c44:	7dfb      	ldrb	r3, [r7, #23]
 8001c46:	3301      	adds	r3, #1
 8001c48:	75fb      	strb	r3, [r7, #23]
 8001c4a:	7dfb      	ldrb	r3, [r7, #23]
 8001c4c:	2b07      	cmp	r3, #7
 8001c4e:	d9d2      	bls.n	8001bf6 <GetPiecesForTeam+0x1a>
			}
		}
	}
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	371c      	adds	r7, #28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	200000d8 	.word	0x200000d8

08001c60 <IsPieceBlockingDiagonal>:

static uint8_t IsPieceBlockingDiagonal(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
	uint8_t startRow;
	uint8_t startColumn;
	uint8_t endRow;
	uint8_t endColumn;

	if (from.row > to.row)
 8001c6a:	79ba      	ldrb	r2, [r7, #6]
 8001c6c:	78bb      	ldrb	r3, [r7, #2]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d908      	bls.n	8001c84 <IsPieceBlockingDiagonal+0x24>
	{
		startRow = to.row;
 8001c72:	78bb      	ldrb	r3, [r7, #2]
 8001c74:	73fb      	strb	r3, [r7, #15]
		startColumn = to.column;
 8001c76:	78fb      	ldrb	r3, [r7, #3]
 8001c78:	73bb      	strb	r3, [r7, #14]
		endRow = from.row;
 8001c7a:	79bb      	ldrb	r3, [r7, #6]
 8001c7c:	737b      	strb	r3, [r7, #13]
		endColumn = from.column;
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	733b      	strb	r3, [r7, #12]
 8001c82:	e007      	b.n	8001c94 <IsPieceBlockingDiagonal+0x34>
	}
	else
	{
		startRow = from.row;
 8001c84:	79bb      	ldrb	r3, [r7, #6]
 8001c86:	73fb      	strb	r3, [r7, #15]
		startColumn = from.column;
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	73bb      	strb	r3, [r7, #14]
		endRow = to.row;
 8001c8c:	78bb      	ldrb	r3, [r7, #2]
 8001c8e:	737b      	strb	r3, [r7, #13]
		endColumn = to.column;
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	733b      	strb	r3, [r7, #12]
	}

	int8_t columnIncrement = startColumn > endColumn ? -1 : 1;
 8001c94:	7bba      	ldrb	r2, [r7, #14]
 8001c96:	7b3b      	ldrb	r3, [r7, #12]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d902      	bls.n	8001ca2 <IsPieceBlockingDiagonal+0x42>
 8001c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca0:	e000      	b.n	8001ca4 <IsPieceBlockingDiagonal+0x44>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	727b      	strb	r3, [r7, #9]
	int8_t column = startColumn + columnIncrement;
 8001ca6:	7a7a      	ldrb	r2, [r7, #9]
 8001ca8:	7bbb      	ldrb	r3, [r7, #14]
 8001caa:	4413      	add	r3, r2
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	72fb      	strb	r3, [r7, #11]
	for (uint8_t row = startRow + 1; row < endRow; row++, column += columnIncrement)
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	72bb      	strb	r3, [r7, #10]
 8001cb6:	e013      	b.n	8001ce0 <IsPieceBlockingDiagonal+0x80>
	{
		// If piece is between "from" and "to" on the diagonal, it is blocking it
		if (MockChessboard[row][column].type != NONE)
 8001cb8:	7aba      	ldrb	r2, [r7, #10]
 8001cba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001cbe:	490d      	ldr	r1, [pc, #52]	; (8001cf4 <IsPieceBlockingDiagonal+0x94>)
 8001cc0:	00d2      	lsls	r2, r2, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <IsPieceBlockingDiagonal+0x70>
		{
			return 1;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e00c      	b.n	8001cea <IsPieceBlockingDiagonal+0x8a>
	for (uint8_t row = startRow + 1; row < endRow; row++, column += columnIncrement)
 8001cd0:	7abb      	ldrb	r3, [r7, #10]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	72bb      	strb	r3, [r7, #10]
 8001cd6:	7afa      	ldrb	r2, [r7, #11]
 8001cd8:	7a7b      	ldrb	r3, [r7, #9]
 8001cda:	4413      	add	r3, r2
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	72fb      	strb	r3, [r7, #11]
 8001ce0:	7aba      	ldrb	r2, [r7, #10]
 8001ce2:	7b7b      	ldrb	r3, [r7, #13]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d3e7      	bcc.n	8001cb8 <IsPieceBlockingDiagonal+0x58>
		}
	}
	return 0;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	200000d8 	.word	0x200000d8

08001cf8 <CalculateCastlingPositions>:


void CalculateCastlingPositions(
	struct PieceCoordinate rookPieceCoordinate,
	struct PieceCoordinate* expectedKingPieceCoordinate, struct PieceCoordinate* expectedRookPieceCoordinate)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
	// Fill in the piece attributes
	expectedKingPieceCoordinate->piece.owner = rookPieceCoordinate.piece.owner;
 8001d04:	7b7a      	ldrb	r2, [r7, #13]
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	705a      	strb	r2, [r3, #1]
	expectedRookPieceCoordinate->piece.owner = rookPieceCoordinate.piece.owner;
 8001d0a:	7b7a      	ldrb	r2, [r7, #13]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	705a      	strb	r2, [r3, #1]
	expectedKingPieceCoordinate->piece.type = KING;
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2206      	movs	r2, #6
 8001d14:	701a      	strb	r2, [r3, #0]
	expectedRookPieceCoordinate->piece.type = ROOK;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2204      	movs	r2, #4
 8001d1a:	701a      	strb	r2, [r3, #0]

	// Calculate expected ROOK and KING columns
	if (rookPieceCoordinate.column == 0)
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d106      	bne.n	8001d30 <CalculateCastlingPositions+0x38>
	{
		expectedKingPieceCoordinate->column = 1;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2201      	movs	r2, #1
 8001d26:	70da      	strb	r2, [r3, #3]
		expectedRookPieceCoordinate->column = 2;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	70da      	strb	r2, [r3, #3]
 8001d2e:	e008      	b.n	8001d42 <CalculateCastlingPositions+0x4a>
	}
	else if (rookPieceCoordinate.column == 7)
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	2b07      	cmp	r3, #7
 8001d34:	d105      	bne.n	8001d42 <CalculateCastlingPositions+0x4a>
	{
		expectedKingPieceCoordinate->column = 6;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2206      	movs	r2, #6
 8001d3a:	70da      	strb	r2, [r3, #3]
		expectedRookPieceCoordinate->column = 5;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2205      	movs	r2, #5
 8001d40:	70da      	strb	r2, [r3, #3]
	}

	// Calculate expected ROOK and KING rows
	if (rookPieceCoordinate.piece.owner == WHITE)
 8001d42:	7b7b      	ldrb	r3, [r7, #13]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d107      	bne.n	8001d58 <CalculateCastlingPositions+0x60>
	{
		expectedKingPieceCoordinate->row = expectedRookPieceCoordinate->row = 0;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	709a      	strb	r2, [r3, #2]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	789a      	ldrb	r2, [r3, #2]
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	709a      	strb	r2, [r3, #2]
	}
	else if (rookPieceCoordinate.piece.owner == BLACK)
	{
		expectedKingPieceCoordinate->row = expectedRookPieceCoordinate->row = 7;
	}
}
 8001d56:	e009      	b.n	8001d6c <CalculateCastlingPositions+0x74>
	else if (rookPieceCoordinate.piece.owner == BLACK)
 8001d58:	7b7b      	ldrb	r3, [r7, #13]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d106      	bne.n	8001d6c <CalculateCastlingPositions+0x74>
		expectedKingPieceCoordinate->row = expectedRookPieceCoordinate->row = 7;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2207      	movs	r2, #7
 8001d62:	709a      	strb	r2, [r3, #2]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	789a      	ldrb	r2, [r3, #2]
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	709a      	strb	r2, [r3, #2]
}
 8001d6c:	bf00      	nop
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr

08001d76 <IsValidCoordinate>:

static inline uint8_t IsValidCoordinate(struct Coordinate path)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	80b8      	strh	r0, [r7, #4]
	return path.row >= 0 && path.row < 8 && path.column >= 0 && path.column < 8;
 8001d7e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	db0d      	blt.n	8001da2 <IsValidCoordinate+0x2c>
 8001d86:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001d8a:	2b07      	cmp	r3, #7
 8001d8c:	dc09      	bgt.n	8001da2 <IsValidCoordinate+0x2c>
 8001d8e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	db05      	blt.n	8001da2 <IsValidCoordinate+0x2c>
 8001d96:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001d9a:	2b07      	cmp	r3, #7
 8001d9c:	dc01      	bgt.n	8001da2 <IsValidCoordinate+0x2c>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <IsValidCoordinate+0x2e>
 8001da2:	2300      	movs	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <IsPieceMovingStraight>:

static inline uint8_t IsPieceMovingStraight(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
	return (from.column == to.column || from.row == to.row);
 8001dba:	79fa      	ldrb	r2, [r7, #7]
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d003      	beq.n	8001dca <IsPieceMovingStraight+0x1a>
 8001dc2:	79ba      	ldrb	r2, [r7, #6]
 8001dc4:	78bb      	ldrb	r3, [r7, #2]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d101      	bne.n	8001dce <IsPieceMovingStraight+0x1e>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <IsPieceMovingStraight+0x20>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <IsPieceMovingDiagonal>:

static inline uint8_t IsPieceMovingDiagonal(struct PieceCoordinate from, struct PieceCoordinate to)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
	return abs((int8_t)from.column - (int8_t)to.column) == abs((int8_t)from.row - (int8_t)to.row);
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	b25b      	sxtb	r3, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	b25b      	sxtb	r3, r3
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001df6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001dfa:	79bb      	ldrb	r3, [r7, #6]
 8001dfc:	b25b      	sxtb	r3, r3
 8001dfe:	4619      	mov	r1, r3
 8001e00:	78bb      	ldrb	r3, [r7, #2]
 8001e02:	b25b      	sxtb	r3, r3
 8001e04:	1acb      	subs	r3, r1, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bfb8      	it	lt
 8001e0a:	425b      	neglt	r3, r3
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <IsPieceCoordinateSameTeam>:

static inline uint8_t IsPieceCoordinateSameTeam(struct PieceCoordinate pieceCoordinate1, struct PieceCoordinate pieceCoordinate2)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
	return pieceCoordinate1.piece.owner == pieceCoordinate2.piece.owner;
 8001e2a:	797a      	ldrb	r2, [r7, #5]
 8001e2c:	787b      	ldrb	r3, [r7, #1]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	bf0c      	ite	eq
 8001e32:	2301      	moveq	r3, #1
 8001e34:	2300      	movne	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr
	...

08001e44 <SpeakerGPIOInit>:
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <SpeakerGPIOInit+0x3c>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <SpeakerGPIOInit+0x3c>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	61d3      	str	r3, [r2, #28]
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <SpeakerGPIOInit+0x3c>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	2320      	movs	r3, #32
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	2303      	movs	r3, #3
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	4619      	mov	r1, r3
 8001e72:	4804      	ldr	r0, [pc, #16]	; (8001e84 <SpeakerGPIOInit+0x40>)
 8001e74:	f002 f888 	bl	8003f88 <HAL_GPIO_Init>
 8001e78:	bf00      	nop
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40020000 	.word	0x40020000

08001e88 <DACInit>:
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	f107 0310 	add.w	r3, r7, #16
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <DACInit+0x54>)
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	4a0f      	ldr	r2, [pc, #60]	; (8001edc <DACInit+0x54>)
 8001ea0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ea4:	6253      	str	r3, [r2, #36]	; 0x24
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <DACInit+0x54>)
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <DACInit+0x58>)
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f001 fed0 	bl	8003c5e <HAL_DAC_Init>
 8001ebe:	232c      	movs	r3, #44	; 0x2c
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	f107 0310 	add.w	r3, r7, #16
 8001eca:	2210      	movs	r2, #16
 8001ecc:	4619      	mov	r1, r3
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f001 fee7 	bl	8003ca2 <HAL_DAC_ConfigChannel>
 8001ed4:	bf00      	nop
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40007400 	.word	0x40007400

08001ee4 <DMAInit>:
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <DMAInit+0x38>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <DMAInit+0x38>)
 8001ef0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef4:	61d3      	str	r3, [r2, #28]
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <DMAInit+0x38>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001efe:	607b      	str	r3, [r7, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	2100      	movs	r1, #0
 8001f06:	200d      	movs	r0, #13
 8001f08:	f001 fe73 	bl	8003bf2 <HAL_NVIC_SetPriority>
 8001f0c:	200d      	movs	r0, #13
 8001f0e:	f001 fe8c 	bl	8003c2a <HAL_NVIC_EnableIRQ>
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800

08001f20 <TimerInit>:
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	f107 0310 	add.w	r3, r7, #16
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	f107 0308 	add.w	r3, r7, #8
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <TimerInit+0x7c>)
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f240 22d5 	movw	r2, #725	; 0x2d5
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	615a      	str	r2, [r3, #20]
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f003 fb82 	bl	8005670 <HAL_TIM_Base_Init>
 8001f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	f107 0310 	add.w	r3, r7, #16
 8001f76:	4619      	mov	r1, r3
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f003 fd57 	bl	8005a2c <HAL_TIM_ConfigClockSource>
 8001f7e:	2320      	movs	r3, #32
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	f107 0308 	add.w	r3, r7, #8
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f003 ff3b 	bl	8005e08 <HAL_TIMEx_MasterConfigSynchronization>
 8001f92:	bf00      	nop
 8001f94:	3720      	adds	r7, #32
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40000800 	.word	0x40000800

08001fa0 <SpeakerInit>:
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	f7ff ff4b 	bl	8001e44 <SpeakerGPIOInit>
 8001fae:	f7ff ff99 	bl	8001ee4 <DMAInit>
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ff68 	bl	8001e88 <DACInit>
 8001fb8:	6838      	ldr	r0, [r7, #0]
 8001fba:	f7ff ffb1 	bl	8001f20 <TimerInit>
 8001fbe:	6838      	ldr	r0, [r7, #0]
 8001fc0:	f003 fb96 	bl	80056f0 <HAL_TIM_Base_Start>
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_MspInit>:
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <HAL_MspInit+0x58>)
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	4a13      	ldr	r2, [pc, #76]	; (8002024 <HAL_MspInit+0x58>)
 8001fd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fdc:	6253      	str	r3, [r2, #36]	; 0x24
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <HAL_MspInit+0x58>)
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <HAL_MspInit+0x58>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4a0d      	ldr	r2, [pc, #52]	; (8002024 <HAL_MspInit+0x58>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6213      	str	r3, [r2, #32]
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_MspInit+0x58>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	4b08      	ldr	r3, [pc, #32]	; (8002024 <HAL_MspInit+0x58>)
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	4a07      	ldr	r2, [pc, #28]	; (8002024 <HAL_MspInit+0x58>)
 8002008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200c:	6253      	str	r3, [r2, #36]	; 0x24
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_MspInit+0x58>)
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	40023800 	.word	0x40023800

08002028 <HAL_DAC_MspInit>:
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a28      	ldr	r2, [pc, #160]	; (80020e8 <HAL_DAC_MspInit+0xc0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d14a      	bne.n	80020e0 <HAL_DAC_MspInit+0xb8>
 800204a:	4b28      	ldr	r3, [pc, #160]	; (80020ec <HAL_DAC_MspInit+0xc4>)
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	4a27      	ldr	r2, [pc, #156]	; (80020ec <HAL_DAC_MspInit+0xc4>)
 8002050:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002054:	6253      	str	r3, [r2, #36]	; 0x24
 8002056:	4b25      	ldr	r3, [pc, #148]	; (80020ec <HAL_DAC_MspInit+0xc4>)
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4b22      	ldr	r3, [pc, #136]	; (80020ec <HAL_DAC_MspInit+0xc4>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	4a21      	ldr	r2, [pc, #132]	; (80020ec <HAL_DAC_MspInit+0xc4>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	61d3      	str	r3, [r2, #28]
 800206e:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <HAL_DAC_MspInit+0xc4>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2320      	movs	r3, #32
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	2303      	movs	r3, #3
 8002080:	61bb      	str	r3, [r7, #24]
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	4619      	mov	r1, r3
 800208c:	4818      	ldr	r0, [pc, #96]	; (80020f0 <HAL_DAC_MspInit+0xc8>)
 800208e:	f001 ff7b 	bl	8003f88 <HAL_GPIO_Init>
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <HAL_DAC_MspInit+0xcc>)
 8002094:	4a18      	ldr	r2, [pc, #96]	; (80020f8 <HAL_DAC_MspInit+0xd0>)
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <HAL_DAC_MspInit+0xcc>)
 800209a:	2210      	movs	r2, #16
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <HAL_DAC_MspInit+0xcc>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_DAC_MspInit+0xcc>)
 80020a6:	2280      	movs	r2, #128	; 0x80
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <HAL_DAC_MspInit+0xcc>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_DAC_MspInit+0xcc>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	615a      	str	r2, [r3, #20]
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_DAC_MspInit+0xcc>)
 80020b8:	2220      	movs	r2, #32
 80020ba:	619a      	str	r2, [r3, #24]
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_DAC_MspInit+0xcc>)
 80020be:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80020c2:	61da      	str	r2, [r3, #28]
 80020c4:	480b      	ldr	r0, [pc, #44]	; (80020f4 <HAL_DAC_MspInit+0xcc>)
 80020c6:	f001 fe3b 	bl	8003d40 <HAL_DMA_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_DAC_MspInit+0xac>
 80020d0:	f7fe ffa0 	bl	8001014 <Error_Handler>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a07      	ldr	r2, [pc, #28]	; (80020f4 <HAL_DAC_MspInit+0xcc>)
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	4a06      	ldr	r2, [pc, #24]	; (80020f4 <HAL_DAC_MspInit+0xcc>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6253      	str	r3, [r2, #36]	; 0x24
 80020e0:	bf00      	nop
 80020e2:	3728      	adds	r7, #40	; 0x28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40007400 	.word	0x40007400
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40020000 	.word	0x40020000
 80020f4:	20001888 	.word	0x20001888
 80020f8:	40026030 	.word	0x40026030

080020fc <HAL_SPI_MspInit>:
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08e      	sub	sp, #56	; 0x38
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a54      	ldr	r2, [pc, #336]	; (800226c <HAL_SPI_MspInit+0x170>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d145      	bne.n	80021aa <HAL_SPI_MspInit+0xae>
 800211e:	4b54      	ldr	r3, [pc, #336]	; (8002270 <HAL_SPI_MspInit+0x174>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4a53      	ldr	r2, [pc, #332]	; (8002270 <HAL_SPI_MspInit+0x174>)
 8002124:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002128:	6213      	str	r3, [r2, #32]
 800212a:	4b51      	ldr	r3, [pc, #324]	; (8002270 <HAL_SPI_MspInit+0x174>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002132:	623b      	str	r3, [r7, #32]
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	4b4e      	ldr	r3, [pc, #312]	; (8002270 <HAL_SPI_MspInit+0x174>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	4a4d      	ldr	r2, [pc, #308]	; (8002270 <HAL_SPI_MspInit+0x174>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	61d3      	str	r3, [r2, #28]
 8002142:	4b4b      	ldr	r3, [pc, #300]	; (8002270 <HAL_SPI_MspInit+0x174>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	61fb      	str	r3, [r7, #28]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	4b48      	ldr	r3, [pc, #288]	; (8002270 <HAL_SPI_MspInit+0x174>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	4a47      	ldr	r2, [pc, #284]	; (8002270 <HAL_SPI_MspInit+0x174>)
 8002154:	f043 0310 	orr.w	r3, r3, #16
 8002158:	61d3      	str	r3, [r2, #28]
 800215a:	4b45      	ldr	r3, [pc, #276]	; (8002270 <HAL_SPI_MspInit+0x174>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	23c0      	movs	r3, #192	; 0xc0
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
 800216a:	2302      	movs	r3, #2
 800216c:	62bb      	str	r3, [r7, #40]	; 0x28
 800216e:	2300      	movs	r3, #0
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002172:	2303      	movs	r3, #3
 8002174:	633b      	str	r3, [r7, #48]	; 0x30
 8002176:	2305      	movs	r3, #5
 8002178:	637b      	str	r3, [r7, #52]	; 0x34
 800217a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217e:	4619      	mov	r1, r3
 8002180:	483c      	ldr	r0, [pc, #240]	; (8002274 <HAL_SPI_MspInit+0x178>)
 8002182:	f001 ff01 	bl	8003f88 <HAL_GPIO_Init>
 8002186:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
 800218c:	2302      	movs	r3, #2
 800218e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002190:	2300      	movs	r3, #0
 8002192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002194:	2303      	movs	r3, #3
 8002196:	633b      	str	r3, [r7, #48]	; 0x30
 8002198:	2305      	movs	r3, #5
 800219a:	637b      	str	r3, [r7, #52]	; 0x34
 800219c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a0:	4619      	mov	r1, r3
 80021a2:	4835      	ldr	r0, [pc, #212]	; (8002278 <HAL_SPI_MspInit+0x17c>)
 80021a4:	f001 fef0 	bl	8003f88 <HAL_GPIO_Init>
 80021a8:	e05c      	b.n	8002264 <HAL_SPI_MspInit+0x168>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a33      	ldr	r2, [pc, #204]	; (800227c <HAL_SPI_MspInit+0x180>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d129      	bne.n	8002208 <HAL_SPI_MspInit+0x10c>
 80021b4:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <HAL_SPI_MspInit+0x174>)
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	4a2d      	ldr	r2, [pc, #180]	; (8002270 <HAL_SPI_MspInit+0x174>)
 80021ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021be:	6253      	str	r3, [r2, #36]	; 0x24
 80021c0:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <HAL_SPI_MspInit+0x174>)
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	4b28      	ldr	r3, [pc, #160]	; (8002270 <HAL_SPI_MspInit+0x174>)
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	4a27      	ldr	r2, [pc, #156]	; (8002270 <HAL_SPI_MspInit+0x174>)
 80021d2:	f043 0302 	orr.w	r3, r3, #2
 80021d6:	61d3      	str	r3, [r2, #28]
 80021d8:	4b25      	ldr	r3, [pc, #148]	; (8002270 <HAL_SPI_MspInit+0x174>)
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ea:	2302      	movs	r3, #2
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ee:	2300      	movs	r3, #0
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021f2:	2303      	movs	r3, #3
 80021f4:	633b      	str	r3, [r7, #48]	; 0x30
 80021f6:	2305      	movs	r3, #5
 80021f8:	637b      	str	r3, [r7, #52]	; 0x34
 80021fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fe:	4619      	mov	r1, r3
 8002200:	481f      	ldr	r0, [pc, #124]	; (8002280 <HAL_SPI_MspInit+0x184>)
 8002202:	f001 fec1 	bl	8003f88 <HAL_GPIO_Init>
 8002206:	e02d      	b.n	8002264 <HAL_SPI_MspInit+0x168>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a1d      	ldr	r2, [pc, #116]	; (8002284 <HAL_SPI_MspInit+0x188>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d128      	bne.n	8002264 <HAL_SPI_MspInit+0x168>
 8002212:	4b17      	ldr	r3, [pc, #92]	; (8002270 <HAL_SPI_MspInit+0x174>)
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	4a16      	ldr	r2, [pc, #88]	; (8002270 <HAL_SPI_MspInit+0x174>)
 8002218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800221c:	6253      	str	r3, [r2, #36]	; 0x24
 800221e:	4b14      	ldr	r3, [pc, #80]	; (8002270 <HAL_SPI_MspInit+0x174>)
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4b11      	ldr	r3, [pc, #68]	; (8002270 <HAL_SPI_MspInit+0x174>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	4a10      	ldr	r2, [pc, #64]	; (8002270 <HAL_SPI_MspInit+0x174>)
 8002230:	f043 0304 	orr.w	r3, r3, #4
 8002234:	61d3      	str	r3, [r2, #28]
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <HAL_SPI_MspInit+0x174>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
 8002248:	2302      	movs	r3, #2
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
 800224c:	2300      	movs	r3, #0
 800224e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002250:	2303      	movs	r3, #3
 8002252:	633b      	str	r3, [r7, #48]	; 0x30
 8002254:	2306      	movs	r3, #6
 8002256:	637b      	str	r3, [r7, #52]	; 0x34
 8002258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225c:	4619      	mov	r1, r3
 800225e:	480a      	ldr	r0, [pc, #40]	; (8002288 <HAL_SPI_MspInit+0x18c>)
 8002260:	f001 fe92 	bl	8003f88 <HAL_GPIO_Init>
 8002264:	bf00      	nop
 8002266:	3738      	adds	r7, #56	; 0x38
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40013000 	.word	0x40013000
 8002270:	40023800 	.word	0x40023800
 8002274:	40020000 	.word	0x40020000
 8002278:	40021000 	.word	0x40021000
 800227c:	40003800 	.word	0x40003800
 8002280:	40020400 	.word	0x40020400
 8002284:	40003c00 	.word	0x40003c00
 8002288:	40020800 	.word	0x40020800

0800228c <HAL_TIM_Base_MspInit>:
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229c:	d114      	bne.n	80022c8 <HAL_TIM_Base_MspInit+0x3c>
 800229e:	4b33      	ldr	r3, [pc, #204]	; (800236c <HAL_TIM_Base_MspInit+0xe0>)
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	4a32      	ldr	r2, [pc, #200]	; (800236c <HAL_TIM_Base_MspInit+0xe0>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6253      	str	r3, [r2, #36]	; 0x24
 80022aa:	4b30      	ldr	r3, [pc, #192]	; (800236c <HAL_TIM_Base_MspInit+0xe0>)
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2200      	movs	r2, #0
 80022b8:	2100      	movs	r1, #0
 80022ba:	201c      	movs	r0, #28
 80022bc:	f001 fc99 	bl	8003bf2 <HAL_NVIC_SetPriority>
 80022c0:	201c      	movs	r0, #28
 80022c2:	f001 fcb2 	bl	8003c2a <HAL_NVIC_EnableIRQ>
 80022c6:	e04c      	b.n	8002362 <HAL_TIM_Base_MspInit+0xd6>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a28      	ldr	r2, [pc, #160]	; (8002370 <HAL_TIM_Base_MspInit+0xe4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d114      	bne.n	80022fc <HAL_TIM_Base_MspInit+0x70>
 80022d2:	4b26      	ldr	r3, [pc, #152]	; (800236c <HAL_TIM_Base_MspInit+0xe0>)
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	4a25      	ldr	r2, [pc, #148]	; (800236c <HAL_TIM_Base_MspInit+0xe0>)
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	6253      	str	r3, [r2, #36]	; 0x24
 80022de:	4b23      	ldr	r3, [pc, #140]	; (800236c <HAL_TIM_Base_MspInit+0xe0>)
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	201d      	movs	r0, #29
 80022f0:	f001 fc7f 	bl	8003bf2 <HAL_NVIC_SetPriority>
 80022f4:	201d      	movs	r0, #29
 80022f6:	f001 fc98 	bl	8003c2a <HAL_NVIC_EnableIRQ>
 80022fa:	e032      	b.n	8002362 <HAL_TIM_Base_MspInit+0xd6>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a1c      	ldr	r2, [pc, #112]	; (8002374 <HAL_TIM_Base_MspInit+0xe8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d114      	bne.n	8002330 <HAL_TIM_Base_MspInit+0xa4>
 8002306:	4b19      	ldr	r3, [pc, #100]	; (800236c <HAL_TIM_Base_MspInit+0xe0>)
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	4a18      	ldr	r2, [pc, #96]	; (800236c <HAL_TIM_Base_MspInit+0xe0>)
 800230c:	f043 0304 	orr.w	r3, r3, #4
 8002310:	6253      	str	r3, [r2, #36]	; 0x24
 8002312:	4b16      	ldr	r3, [pc, #88]	; (800236c <HAL_TIM_Base_MspInit+0xe0>)
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	2100      	movs	r1, #0
 8002322:	201e      	movs	r0, #30
 8002324:	f001 fc65 	bl	8003bf2 <HAL_NVIC_SetPriority>
 8002328:	201e      	movs	r0, #30
 800232a:	f001 fc7e 	bl	8003c2a <HAL_NVIC_EnableIRQ>
 800232e:	e018      	b.n	8002362 <HAL_TIM_Base_MspInit+0xd6>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a10      	ldr	r2, [pc, #64]	; (8002378 <HAL_TIM_Base_MspInit+0xec>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d113      	bne.n	8002362 <HAL_TIM_Base_MspInit+0xd6>
 800233a:	4b0c      	ldr	r3, [pc, #48]	; (800236c <HAL_TIM_Base_MspInit+0xe0>)
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	4a0b      	ldr	r2, [pc, #44]	; (800236c <HAL_TIM_Base_MspInit+0xe0>)
 8002340:	f043 0308 	orr.w	r3, r3, #8
 8002344:	6253      	str	r3, [r2, #36]	; 0x24
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_TIM_Base_MspInit+0xe0>)
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	202e      	movs	r0, #46	; 0x2e
 8002358:	f001 fc4b 	bl	8003bf2 <HAL_NVIC_SetPriority>
 800235c:	202e      	movs	r0, #46	; 0x2e
 800235e:	f001 fc64 	bl	8003c2a <HAL_NVIC_EnableIRQ>
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	40000400 	.word	0x40000400
 8002374:	40000800 	.word	0x40000800
 8002378:	40000c00 	.word	0x40000c00

0800237c <NMI_Handler>:
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
 8002380:	e7fe      	b.n	8002380 <NMI_Handler+0x4>

08002382 <HardFault_Handler>:
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0
 8002386:	e7fe      	b.n	8002386 <HardFault_Handler+0x4>

08002388 <MemManage_Handler>:
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
 800238c:	e7fe      	b.n	800238c <MemManage_Handler+0x4>

0800238e <BusFault_Handler>:
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0
 8002392:	e7fe      	b.n	8002392 <BusFault_Handler+0x4>

08002394 <UsageFault_Handler>:
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
 8002398:	e7fe      	b.n	8002398 <UsageFault_Handler+0x4>

0800239a <SVC_Handler>:
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr

080023a6 <DebugMon_Handler>:
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr

080023b2 <PendSV_Handler>:
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr

080023be <SysTick_Handler>:
 80023be:	b580      	push	{r7, lr}
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	f001 fb01 	bl	80039c8 <HAL_IncTick>
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <DMA1_Channel3_IRQHandler>:
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <DMA1_Channel3_IRQHandler+0x10>)
 80023d2:	f001 fd29 	bl	8003e28 <HAL_DMA_IRQHandler>
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20001888 	.word	0x20001888

080023e0 <TIM2_IRQHandler>:
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <TIM2_IRQHandler+0x10>)
 80023e6:	f003 fa45 	bl	8005874 <HAL_TIM_IRQHandler>
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20001924 	.word	0x20001924

080023f4 <TIM3_IRQHandler>:
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4802      	ldr	r0, [pc, #8]	; (8002404 <TIM3_IRQHandler+0x10>)
 80023fa:	f003 fa3b 	bl	8005874 <HAL_TIM_IRQHandler>
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20001798 	.word	0x20001798

08002408 <TIM4_IRQHandler>:
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <TIM4_IRQHandler+0x10>)
 800240e:	f003 fa31 	bl	8005874 <HAL_TIM_IRQHandler>
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20001718 	.word	0x20001718

0800241c <EXTI15_10_IRQHandler>:
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
 8002420:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002424:	f001 ff70 	bl	8004308 <HAL_GPIO_EXTI_IRQHandler>
 8002428:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800242c:	f001 ff6c 	bl	8004308 <HAL_GPIO_EXTI_IRQHandler>
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}

08002434 <TIM5_IRQHandler>:
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <TIM5_IRQHandler+0x10>)
 800243a:	f003 fa1b 	bl	8005874 <HAL_TIM_IRQHandler>
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20001758 	.word	0x20001758

08002448 <SystemInit>:
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <InitTracker>:

// Integration //
extern SPI_HandleTypeDef hspi1; // LED matrix controller

void InitTracker()
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
	// Initialize globals
	LastTransitionType = PLACE;
 800245a:	4b40      	ldr	r3, [pc, #256]	; (800255c <InitTracker+0x108>)
 800245c:	2201      	movs	r2, #1
 800245e:	701a      	strb	r2, [r3, #0]
	CurrentTurn = WHITE;
 8002460:	4b3f      	ldr	r3, [pc, #252]	; (8002560 <InitTracker+0x10c>)
 8002462:	2201      	movs	r2, #1
 8002464:	701a      	strb	r2, [r3, #0]
	CanA1Castle = 1;
 8002466:	4b3f      	ldr	r3, [pc, #252]	; (8002564 <InitTracker+0x110>)
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
	CanH1Castle = 1;
 800246c:	4b3e      	ldr	r3, [pc, #248]	; (8002568 <InitTracker+0x114>)
 800246e:	2201      	movs	r2, #1
 8002470:	701a      	strb	r2, [r3, #0]
	CanA8Castle = 1;
 8002472:	4b3e      	ldr	r3, [pc, #248]	; (800256c <InitTracker+0x118>)
 8002474:	2201      	movs	r2, #1
 8002476:	701a      	strb	r2, [r3, #0]
	CanH8Castle = 1;
 8002478:	4b3d      	ldr	r3, [pc, #244]	; (8002570 <InitTracker+0x11c>)
 800247a:	2201      	movs	r2, #1
 800247c:	701a      	strb	r2, [r3, #0]
	CanWhiteKingCastle = 1;
 800247e:	4b3d      	ldr	r3, [pc, #244]	; (8002574 <InitTracker+0x120>)
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
	CanBlackKingCastle = 1;
 8002484:	4b3c      	ldr	r3, [pc, #240]	; (8002578 <InitTracker+0x124>)
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
	SwitchTurnsAfterLegalState = 0;
 800248a:	4b3c      	ldr	r3, [pc, #240]	; (800257c <InitTracker+0x128>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]

	ClearPiece(&LastPickedUpPiece);
 8002490:	483b      	ldr	r0, [pc, #236]	; (8002580 <InitTracker+0x12c>)
 8002492:	f001 f8b7 	bl	8003604 <ClearPiece>
	ClearPiece(&PieceToKill);
 8002496:	483b      	ldr	r0, [pc, #236]	; (8002584 <InitTracker+0x130>)
 8002498:	f001 f8b4 	bl	8003604 <ClearPiece>
	ClearPiece(&ExpectedKingCastleCoordinate);
 800249c:	483a      	ldr	r0, [pc, #232]	; (8002588 <InitTracker+0x134>)
 800249e:	f001 f8b1 	bl	8003604 <ClearPiece>
	ClearPiece(&ExpectedRookCastleCoordinate);
 80024a2:	483a      	ldr	r0, [pc, #232]	; (800258c <InitTracker+0x138>)
 80024a4:	f001 f8ae 	bl	8003604 <ClearPiece>
	ClearPiece(&PawnToPromote);
 80024a8:	4839      	ldr	r0, [pc, #228]	; (8002590 <InitTracker+0x13c>)
 80024aa:	f001 f8ab 	bl	8003604 <ClearPiece>

	// Initialize the Chessboard to the initial chessboard and zero the debouncing Histroy array
	for (uint8_t column = 0; column < NUM_COLS; column++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	71fb      	strb	r3, [r7, #7]
 80024b2:	e02d      	b.n	8002510 <InitTracker+0xbc>
	{
		for (uint8_t row = 0; row < NUM_ROWS; row++)
 80024b4:	2300      	movs	r3, #0
 80024b6:	71bb      	strb	r3, [r7, #6]
 80024b8:	e024      	b.n	8002504 <InitTracker+0xb0>
		{
			Chessboard[row][column] = INITIAL_CHESSBOARD[row][column];
 80024ba:	79b9      	ldrb	r1, [r7, #6]
 80024bc:	79fa      	ldrb	r2, [r7, #7]
 80024be:	79b8      	ldrb	r0, [r7, #6]
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	4c34      	ldr	r4, [pc, #208]	; (8002594 <InitTracker+0x140>)
 80024c4:	00c0      	lsls	r0, r0, #3
 80024c6:	4403      	add	r3, r0
 80024c8:	4833      	ldr	r0, [pc, #204]	; (8002598 <InitTracker+0x144>)
 80024ca:	00c9      	lsls	r1, r1, #3
 80024cc:	440a      	add	r2, r1
 80024ce:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80024d2:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]

			// Initialize debouncing history array
			for(uint8_t i = 0; i < NUM_HISTORY_ENTRIES; i++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	717b      	strb	r3, [r7, #5]
 80024da:	e00d      	b.n	80024f8 <InitTracker+0xa4>
			{
				History[row][column][i] = 0;
 80024dc:	79b9      	ldrb	r1, [r7, #6]
 80024de:	79fa      	ldrb	r2, [r7, #7]
 80024e0:	797b      	ldrb	r3, [r7, #5]
 80024e2:	482e      	ldr	r0, [pc, #184]	; (800259c <InitTracker+0x148>)
 80024e4:	00c9      	lsls	r1, r1, #3
 80024e6:	440a      	add	r2, r1
 80024e8:	00d2      	lsls	r2, r2, #3
 80024ea:	4402      	add	r2, r0
 80024ec:	4413      	add	r3, r2
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < NUM_HISTORY_ENTRIES; i++)
 80024f2:	797b      	ldrb	r3, [r7, #5]
 80024f4:	3301      	adds	r3, #1
 80024f6:	717b      	strb	r3, [r7, #5]
 80024f8:	797b      	ldrb	r3, [r7, #5]
 80024fa:	2b07      	cmp	r3, #7
 80024fc:	d9ee      	bls.n	80024dc <InitTracker+0x88>
		for (uint8_t row = 0; row < NUM_ROWS; row++)
 80024fe:	79bb      	ldrb	r3, [r7, #6]
 8002500:	3301      	adds	r3, #1
 8002502:	71bb      	strb	r3, [r7, #6]
 8002504:	79bb      	ldrb	r3, [r7, #6]
 8002506:	2b07      	cmp	r3, #7
 8002508:	d9d7      	bls.n	80024ba <InitTracker+0x66>
	for (uint8_t column = 0; column < NUM_COLS; column++)
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	3301      	adds	r3, #1
 800250e:	71fb      	strb	r3, [r7, #7]
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	2b07      	cmp	r3, #7
 8002514:	d9ce      	bls.n	80024b4 <InitTracker+0x60>
			}
		}
	}

	// Initialize illegal piece destinations to empty pieces
	NumIllegalPieces = 0;
 8002516:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <InitTracker+0x14c>)
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_ILLEGAL_PIECES; i++)
 800251c:	2300      	movs	r3, #0
 800251e:	713b      	strb	r3, [r7, #4]
 8002520:	e00f      	b.n	8002542 <InitTracker+0xee>
	{
		IllegalPieces[i].destination = EMPTY_PIECE_COORDINATE;
 8002522:	793b      	ldrb	r3, [r7, #4]
 8002524:	491f      	ldr	r1, [pc, #124]	; (80025a4 <InitTracker+0x150>)
 8002526:	4a20      	ldr	r2, [pc, #128]	; (80025a8 <InitTracker+0x154>)
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		IllegalPieces[i].current = EMPTY_PIECE_COORDINATE;
 800252e:	793b      	ldrb	r3, [r7, #4]
 8002530:	4a1c      	ldr	r2, [pc, #112]	; (80025a4 <InitTracker+0x150>)
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4413      	add	r3, r2
 8002536:	4a1c      	ldr	r2, [pc, #112]	; (80025a8 <InitTracker+0x154>)
 8002538:	6812      	ldr	r2, [r2, #0]
 800253a:	605a      	str	r2, [r3, #4]
	for (uint8_t i = 0; i < MAX_ILLEGAL_PIECES; i++)
 800253c:	793b      	ldrb	r3, [r7, #4]
 800253e:	3301      	adds	r3, #1
 8002540:	713b      	strb	r3, [r7, #4]
 8002542:	793b      	ldrb	r3, [r7, #4]
 8002544:	2b1f      	cmp	r3, #31
 8002546:	d9ec      	bls.n	8002522 <InitTracker+0xce>
	}

	// Initialize PathFinder
	CalculateTeamsLegalMoves(CurrentTurn);
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <InitTracker+0x10c>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7fe fd67 	bl	8001020 <CalculateTeamsLegalMoves>
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	bd90      	pop	{r4, r7, pc}
 800255a:	bf00      	nop
 800255c:	20000589 	.word	0x20000589
 8002560:	20000588 	.word	0x20000588
 8002564:	20000696 	.word	0x20000696
 8002568:	20000697 	.word	0x20000697
 800256c:	20000698 	.word	0x20000698
 8002570:	20000699 	.word	0x20000699
 8002574:	2000069a 	.word	0x2000069a
 8002578:	2000069b 	.word	0x2000069b
 800257c:	20000695 	.word	0x20000695
 8002580:	2000058c 	.word	0x2000058c
 8002584:	20000590 	.word	0x20000590
 8002588:	2000069c 	.word	0x2000069c
 800258c:	200006a0 	.word	0x200006a0
 8002590:	200006a4 	.word	0x200006a4
 8002594:	20000508 	.word	0x20000508
 8002598:	20000018 	.word	0x20000018
 800259c:	20001964 	.word	0x20001964
 80025a0:	20000694 	.word	0x20000694
 80025a4:	20000594 	.word	0x20000594
 80025a8:	20000010 	.word	0x20000010

080025ac <WriteColumn>:

static void WriteColumn(uint8_t column)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
	uint8_t columnBit0 = (column & 1) >> 0;
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
	uint8_t columnBit1 = (column & 2) >> 1;
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	105b      	asrs	r3, r3, #1
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	73bb      	strb	r3, [r7, #14]
	uint8_t columnBit2 = (column & 4) >> 2;
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	109b      	asrs	r3, r3, #2
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(COLUMN_BIT_TO_PIN_TABLE[0].bus, COLUMN_BIT_TO_PIN_TABLE[0].pin, columnBit0);
 80025d6:	480b      	ldr	r0, [pc, #44]	; (8002604 <WriteColumn+0x58>)
 80025d8:	2101      	movs	r1, #1
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	461a      	mov	r2, r3
 80025de:	f001 fe7a 	bl	80042d6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COLUMN_BIT_TO_PIN_TABLE[1].bus, COLUMN_BIT_TO_PIN_TABLE[1].pin, columnBit1);
 80025e2:	4808      	ldr	r0, [pc, #32]	; (8002604 <WriteColumn+0x58>)
 80025e4:	2102      	movs	r1, #2
 80025e6:	7bbb      	ldrb	r3, [r7, #14]
 80025e8:	461a      	mov	r2, r3
 80025ea:	f001 fe74 	bl	80042d6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COLUMN_BIT_TO_PIN_TABLE[2].bus, COLUMN_BIT_TO_PIN_TABLE[2].pin, columnBit2);
 80025ee:	4805      	ldr	r0, [pc, #20]	; (8002604 <WriteColumn+0x58>)
 80025f0:	2104      	movs	r1, #4
 80025f2:	7b7b      	ldrb	r3, [r7, #13]
 80025f4:	461a      	mov	r2, r3
 80025f6:	f001 fe6e 	bl	80042d6 <HAL_GPIO_WritePin>
}
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40020000 	.word	0x40020000

08002608 <ReadRow>:

static uint8_t ReadRow(uint8_t rowNumber)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
	struct GPIO_Pin rowPin = ROW_NUMBER_TO_PIN_TABLE[rowNumber];
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	4909      	ldr	r1, [pc, #36]	; (800263c <ReadRow+0x34>)
 8002616:	f107 0208 	add.w	r2, r7, #8
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	440b      	add	r3, r1
 800261e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002622:	e882 0003 	stmia.w	r2, {r0, r1}
	return HAL_GPIO_ReadPin(rowPin.bus, rowPin.pin);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	893a      	ldrh	r2, [r7, #8]
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f001 fe3b 	bl	80042a8 <HAL_GPIO_ReadPin>
 8002632:	4603      	mov	r3, r0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	08006ad8 	.word	0x08006ad8

08002640 <Track>:

uint8_t Track()
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
	uint8_t transitionOccured = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	71fb      	strb	r3, [r7, #7]

	for (uint8_t column = 0; column < NUM_COLS; column++)
 800264a:	2300      	movs	r3, #0
 800264c:	71bb      	strb	r3, [r7, #6]
 800264e:	e043      	b.n	80026d8 <Track+0x98>
	{
		WriteColumn(column);
 8002650:	79bb      	ldrb	r3, [r7, #6]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ffaa 	bl	80025ac <WriteColumn>

		for (uint8_t row = 0; row < NUM_ROWS; row++)
 8002658:	2300      	movs	r3, #0
 800265a:	717b      	strb	r3, [r7, #5]
 800265c:	e036      	b.n	80026cc <Track+0x8c>
		{
			uint8_t cellValue = ReadRow(row);
 800265e:	797b      	ldrb	r3, [r7, #5]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ffd1 	bl	8002608 <ReadRow>
 8002666:	4603      	mov	r3, r0
 8002668:	713b      	strb	r3, [r7, #4]

			// Add cellValue to front of debouncing History array for this cell
			AppendHistory(row, column, cellValue);
 800266a:	793a      	ldrb	r2, [r7, #4]
 800266c:	79b9      	ldrb	r1, [r7, #6]
 800266e:	797b      	ldrb	r3, [r7, #5]
 8002670:	4618      	mov	r0, r3
 8002672:	f000 f839 	bl	80026e8 <AppendHistory>

			// If the debouncing History of this cell is all the same value, then we can consider it for a transition
			if(IsHistoryConsensus(row, column))
 8002676:	79ba      	ldrb	r2, [r7, #6]
 8002678:	797b      	ldrb	r3, [r7, #5]
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f000 f871 	bl	8002764 <IsHistoryConsensus>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d01e      	beq.n	80026c6 <Track+0x86>
			{
				struct PieceCoordinate currentPieceCoordinate = GetPieceCoordinate(row, column);
 8002688:	79ba      	ldrb	r2, [r7, #6]
 800268a:	797b      	ldrb	r3, [r7, #5]
 800268c:	4611      	mov	r1, r2
 800268e:	4618      	mov	r0, r3
 8002690:	f001 f812 	bl	80036b8 <GetPieceCoordinate>
 8002694:	4603      	mov	r3, r0
 8002696:	603b      	str	r3, [r7, #0]

				// If there was no piece here but the IO is HIGH, a piece was placed
				if ((currentPieceCoordinate.piece.type == NONE) && (cellValue == 1))
 8002698:	783b      	ldrb	r3, [r7, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d108      	bne.n	80026b0 <Track+0x70>
 800269e:	793b      	ldrb	r3, [r7, #4]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d105      	bne.n	80026b0 <Track+0x70>
				{
					HandlePlace(currentPieceCoordinate);
 80026a4:	6838      	ldr	r0, [r7, #0]
 80026a6:	f000 f88f 	bl	80027c8 <HandlePlace>
					transitionOccured = 1;
 80026aa:	2301      	movs	r3, #1
 80026ac:	71fb      	strb	r3, [r7, #7]
 80026ae:	e00a      	b.n	80026c6 <Track+0x86>
				}

				// If there was a piece here but the IO is LOW, a piece has been picked up
				else if ((currentPieceCoordinate.piece.type != NONE) && (cellValue == 0))
 80026b0:	783b      	ldrb	r3, [r7, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <Track+0x86>
 80026b6:	793b      	ldrb	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d104      	bne.n	80026c6 <Track+0x86>
				{
					HandlePickup(currentPieceCoordinate);
 80026bc:	6838      	ldr	r0, [r7, #0]
 80026be:	f000 fa43 	bl	8002b48 <HandlePickup>
					transitionOccured = 1;
 80026c2:	2301      	movs	r3, #1
 80026c4:	71fb      	strb	r3, [r7, #7]
		for (uint8_t row = 0; row < NUM_ROWS; row++)
 80026c6:	797b      	ldrb	r3, [r7, #5]
 80026c8:	3301      	adds	r3, #1
 80026ca:	717b      	strb	r3, [r7, #5]
 80026cc:	797b      	ldrb	r3, [r7, #5]
 80026ce:	2b07      	cmp	r3, #7
 80026d0:	d9c5      	bls.n	800265e <Track+0x1e>
	for (uint8_t column = 0; column < NUM_COLS; column++)
 80026d2:	79bb      	ldrb	r3, [r7, #6]
 80026d4:	3301      	adds	r3, #1
 80026d6:	71bb      	strb	r3, [r7, #6]
 80026d8:	79bb      	ldrb	r3, [r7, #6]
 80026da:	2b07      	cmp	r3, #7
 80026dc:	d9b8      	bls.n	8002650 <Track+0x10>
				}
			}
		}
	}

	return transitionOccured;
 80026de:	79fb      	ldrb	r3, [r7, #7]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <AppendHistory>:

static void AppendHistory(uint8_t row, uint8_t column, uint8_t cellValue)
{
 80026e8:	b4f0      	push	{r4, r5, r6, r7}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	71fb      	strb	r3, [r7, #7]
 80026f2:	460b      	mov	r3, r1
 80026f4:	71bb      	strb	r3, [r7, #6]
 80026f6:	4613      	mov	r3, r2
 80026f8:	717b      	strb	r3, [r7, #5]
	// Append cellValue to front of History array
	for(int8_t i = NUM_HISTORY_ENTRIES - 1; i > 0; i--)
 80026fa:	2307      	movs	r3, #7
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	e01d      	b.n	800273c <AppendHistory+0x54>
	{
		History[row][column][i] = History[row][column][i - 1];
 8002700:	79fd      	ldrb	r5, [r7, #7]
 8002702:	79bc      	ldrb	r4, [r7, #6]
 8002704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002708:	1e58      	subs	r0, r3, #1
 800270a:	79f9      	ldrb	r1, [r7, #7]
 800270c:	79ba      	ldrb	r2, [r7, #6]
 800270e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002712:	4e13      	ldr	r6, [pc, #76]	; (8002760 <AppendHistory+0x78>)
 8002714:	00ed      	lsls	r5, r5, #3
 8002716:	442c      	add	r4, r5
 8002718:	00e4      	lsls	r4, r4, #3
 800271a:	4434      	add	r4, r6
 800271c:	4420      	add	r0, r4
 800271e:	7804      	ldrb	r4, [r0, #0]
 8002720:	480f      	ldr	r0, [pc, #60]	; (8002760 <AppendHistory+0x78>)
 8002722:	00c9      	lsls	r1, r1, #3
 8002724:	440a      	add	r2, r1
 8002726:	00d2      	lsls	r2, r2, #3
 8002728:	4402      	add	r2, r0
 800272a:	4413      	add	r3, r2
 800272c:	4622      	mov	r2, r4
 800272e:	701a      	strb	r2, [r3, #0]
	for(int8_t i = NUM_HISTORY_ENTRIES - 1; i > 0; i--)
 8002730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	3b01      	subs	r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	73fb      	strb	r3, [r7, #15]
 800273c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002740:	2b00      	cmp	r3, #0
 8002742:	dcdd      	bgt.n	8002700 <AppendHistory+0x18>
	}
	History[row][column][0] = cellValue;
 8002744:	79fa      	ldrb	r2, [r7, #7]
 8002746:	79bb      	ldrb	r3, [r7, #6]
 8002748:	4905      	ldr	r1, [pc, #20]	; (8002760 <AppendHistory+0x78>)
 800274a:	00d2      	lsls	r2, r2, #3
 800274c:	4413      	add	r3, r2
 800274e:	797a      	ldrb	r2, [r7, #5]
 8002750:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bcf0      	pop	{r4, r5, r6, r7}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20001964 	.word	0x20001964

08002764 <IsHistoryConsensus>:

static uint8_t IsHistoryConsensus(uint8_t row, uint8_t column)
{
 8002764:	b490      	push	{r4, r7}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	460a      	mov	r2, r1
 800276e:	71fb      	strb	r3, [r7, #7]
 8002770:	4613      	mov	r3, r2
 8002772:	71bb      	strb	r3, [r7, #6]
	// If any two History values are the same, there is not a consensus
	for(uint8_t i = 0; i < NUM_HISTORY_ENTRIES - 1; i++)
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	e01b      	b.n	80027b2 <IsHistoryConsensus+0x4e>
	{
		if(History[row][column][i] != History[row][column][i + 1])
 800277a:	79f9      	ldrb	r1, [r7, #7]
 800277c:	79ba      	ldrb	r2, [r7, #6]
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	4810      	ldr	r0, [pc, #64]	; (80027c4 <IsHistoryConsensus+0x60>)
 8002782:	00c9      	lsls	r1, r1, #3
 8002784:	440a      	add	r2, r1
 8002786:	00d2      	lsls	r2, r2, #3
 8002788:	4402      	add	r2, r0
 800278a:	4413      	add	r3, r2
 800278c:	781a      	ldrb	r2, [r3, #0]
 800278e:	79f8      	ldrb	r0, [r7, #7]
 8002790:	79b9      	ldrb	r1, [r7, #6]
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	3301      	adds	r3, #1
 8002796:	4c0b      	ldr	r4, [pc, #44]	; (80027c4 <IsHistoryConsensus+0x60>)
 8002798:	00c0      	lsls	r0, r0, #3
 800279a:	4401      	add	r1, r0
 800279c:	00c9      	lsls	r1, r1, #3
 800279e:	4421      	add	r1, r4
 80027a0:	440b      	add	r3, r1
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <IsHistoryConsensus+0x48>
		{
			return 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	e006      	b.n	80027ba <IsHistoryConsensus+0x56>
	for(uint8_t i = 0; i < NUM_HISTORY_ENTRIES - 1; i++)
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	3301      	adds	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	2b06      	cmp	r3, #6
 80027b6:	d9e0      	bls.n	800277a <IsHistoryConsensus+0x16>
		}
	}

	return 1;
 80027b8:	2301      	movs	r3, #1
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc90      	pop	{r4, r7}
 80027c2:	4770      	bx	lr
 80027c4:	20001964 	.word	0x20001964

080027c8 <HandlePlace>:

static void HandlePlace(struct PieceCoordinate placedPiece)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	// If board is in illegal state
	if (NumIllegalPieces > 0)
 80027d0:	4b22      	ldr	r3, [pc, #136]	; (800285c <HandlePlace+0x94>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HandlePlace+0x18>
	{
		HandlePlaceIllegalState(placedPiece);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f84d 	bl	8002878 <HandlePlaceIllegalState>
 80027de:	e036      	b.n	800284e <HandlePlace+0x86>
	}

	// If promotion is occurring, this placed piece must be a knight or queen placed into PawnToPromote's place
	else if (PieceExists(PawnToPromote))
 80027e0:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <HandlePlace+0x98>)
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	f000 fef8 	bl	80035d8 <PieceExists>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HandlePlace+0x2e>
	{
		HandlePlacePromotion(placedPiece);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f972 	bl	8002ad8 <HandlePlacePromotion>
 80027f4:	e02b      	b.n	800284e <HandlePlace+0x86>
	}

	// If the piece lifted did not move, don't do anything except update Chessboard
	else if (IsPieceCoordinateSamePosition(placedPiece, LastPickedUpPiece))
 80027f6:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <HandlePlace+0x9c>)
 80027f8:	6819      	ldr	r1, [r3, #0]
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 ffec 	bl	80037d8 <IsPieceCoordinateSamePosition>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HandlePlace+0x46>
	{
		HandlePlaceNoMove(placedPiece);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f87a 	bl	8002900 <HandlePlaceNoMove>
 800280c:	e01f      	b.n	800284e <HandlePlace+0x86>
	}

	// If there's a piece being killed, this placement should be in its stead
	else if (PieceExists(PieceToKill))
 800280e:	4b16      	ldr	r3, [pc, #88]	; (8002868 <HandlePlace+0xa0>)
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	f000 fee1 	bl	80035d8 <PieceExists>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HandlePlace+0x5c>
	{
		HandlePlaceKill(placedPiece);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f885 	bl	800292c <HandlePlaceKill>
 8002822:	e014      	b.n	800284e <HandlePlace+0x86>
	}

	// If player is castling, this placement should be the king or rook being placed in the right spots
	else if (PieceExists(ExpectedKingCastleCoordinate) || PieceExists(ExpectedRookCastleCoordinate))
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <HandlePlace+0xa4>)
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	f000 fed6 	bl	80035d8 <PieceExists>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HandlePlace+0x78>
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <HandlePlace+0xa8>)
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	f000 fecf 	bl	80035d8 <PieceExists>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HandlePlace+0x80>
	{
		HandlePlaceCastling(placedPiece);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f8a3 	bl	800298c <HandlePlaceCastling>
 8002846:	e002      	b.n	800284e <HandlePlace+0x86>
	}

	// Any other move, the last picked up piece is set to this position
	else
	{
		HandlePlaceMove(placedPiece);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f90f 	bl	8002a6c <HandlePlaceMove>
	}

	LastTransitionType = PLACE;
 800284e:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HandlePlace+0xac>)
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20000694 	.word	0x20000694
 8002860:	200006a4 	.word	0x200006a4
 8002864:	2000058c 	.word	0x2000058c
 8002868:	20000590 	.word	0x20000590
 800286c:	2000069c 	.word	0x2000069c
 8002870:	200006a0 	.word	0x200006a0
 8002874:	20000589 	.word	0x20000589

08002878 <HandlePlaceIllegalState>:

static void HandlePlaceIllegalState(struct PieceCoordinate placedPiece)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < NumIllegalPieces; i++)
 8002880:	2300      	movs	r3, #0
 8002882:	73fb      	strb	r3, [r7, #15]
 8002884:	e01e      	b.n	80028c4 <HandlePlaceIllegalState+0x4c>
	{
		// If placing an illegal piece in it's proper destination, remove it from the illegal pieces array
		if (IsPieceCoordinateSamePosition(IllegalPieces[i].destination, placedPiece))
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	4a18      	ldr	r2, [pc, #96]	; (80028ec <HandlePlaceIllegalState+0x74>)
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002890:	f000 ffa2 	bl	80037d8 <IsPieceCoordinateSamePosition>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d011      	beq.n	80028be <HandlePlaceIllegalState+0x46>
		{
			SetPiece(placedPiece.row, placedPiece.column, IllegalPieces[i].destination.piece);
 800289a:	79b8      	ldrb	r0, [r7, #6]
 800289c:	79f9      	ldrb	r1, [r7, #7]
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	4a12      	ldr	r2, [pc, #72]	; (80028ec <HandlePlaceIllegalState+0x74>)
 80028a2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80028a6:	f000 febd 	bl	8003624 <SetPiece>

			// Remove from illegal pieces array
			RemoveIllegalPiece(i);
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fbd1 	bl	8003054 <RemoveIllegalPiece>

			// If chessboard is valid, switch turns if flagged to do so
			CheckChessboardValidity(SwitchTurnsAfterLegalState);
 80028b2:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <HandlePlaceIllegalState+0x78>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fc40 	bl	800313c <CheckChessboardValidity>

			return;
 80028bc:	e013      	b.n	80028e6 <HandlePlaceIllegalState+0x6e>
	for (uint8_t i = 0; i < NumIllegalPieces; i++)
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	3301      	adds	r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HandlePlaceIllegalState+0x7c>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	7bfa      	ldrb	r2, [r7, #15]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d3db      	bcc.n	8002886 <HandlePlaceIllegalState+0xe>
		}
	}

	// A piece was placed in an unexpected destination, add it as an illegal piece that must be removed from the board
	SetPiece(placedPiece.row, placedPiece.column, LastPickedUpPiece.piece);
 80028ce:	79bb      	ldrb	r3, [r7, #6]
 80028d0:	79f9      	ldrb	r1, [r7, #7]
 80028d2:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <HandlePlaceIllegalState+0x80>)
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fea4 	bl	8003624 <SetPiece>
	AddIllegalPiece(placedPiece, OFFBOARD_PIECE_COORDINATE);
 80028dc:	4b07      	ldr	r3, [pc, #28]	; (80028fc <HandlePlaceIllegalState+0x84>)
 80028de:	6819      	ldr	r1, [r3, #0]
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fb2f 	bl	8002f44 <AddIllegalPiece>
}
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000594 	.word	0x20000594
 80028f0:	20000695 	.word	0x20000695
 80028f4:	20000694 	.word	0x20000694
 80028f8:	2000058c 	.word	0x2000058c
 80028fc:	20000014 	.word	0x20000014

08002900 <HandlePlaceNoMove>:

static void HandlePlaceNoMove(struct PieceCoordinate placedPiece)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	SetPiece(placedPiece.row, placedPiece.column, LastPickedUpPiece.piece);
 8002908:	79bb      	ldrb	r3, [r7, #6]
 800290a:	79f9      	ldrb	r1, [r7, #7]
 800290c:	4a06      	ldr	r2, [pc, #24]	; (8002928 <HandlePlaceNoMove+0x28>)
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f000 fe87 	bl	8003624 <SetPiece>

	// Turn off all squares
	IlluminateCoordinates(NULL, 0);
 8002916:	2100      	movs	r1, #0
 8002918:	2000      	movs	r0, #0
 800291a:	f000 fad3 	bl	8002ec4 <IlluminateCoordinates>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	2000058c 	.word	0x2000058c

0800292c <HandlePlaceKill>:

static void HandlePlaceKill(struct PieceCoordinate placedPiece)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
	SetPiece(placedPiece.row, placedPiece.column, LastPickedUpPiece.piece);
 8002934:	79bb      	ldrb	r3, [r7, #6]
 8002936:	79f9      	ldrb	r1, [r7, #7]
 8002938:	4a11      	ldr	r2, [pc, #68]	; (8002980 <HandlePlaceKill+0x54>)
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fe71 	bl	8003624 <SetPiece>

	// If player put killer in victim's place, clear PieceToKill
	if (IsPieceCoordinateSamePosition(PieceToKill, placedPiece))
 8002942:	4b10      	ldr	r3, [pc, #64]	; (8002984 <HandlePlaceKill+0x58>)
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	f000 ff46 	bl	80037d8 <IsPieceCoordinateSamePosition>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <HandlePlaceKill+0x32>
	{
		ClearPiece(&PieceToKill);
 8002952:	480c      	ldr	r0, [pc, #48]	; (8002984 <HandlePlaceKill+0x58>)
 8002954:	f000 fe56 	bl	8003604 <ClearPiece>
		EndTurn();
 8002958:	f000 fd06 	bl	8003368 <EndTurn>
		struct PieceCoordinate killerDestination = PieceToKill;
		killerDestination.piece = LastPickedUpPiece.piece;
		AddIllegalPiece(placedPiece, killerDestination);
		SwitchTurnsAfterLegalState = 1;
	}
}
 800295c:	e00c      	b.n	8002978 <HandlePlaceKill+0x4c>
		struct PieceCoordinate killerDestination = PieceToKill;
 800295e:	4b09      	ldr	r3, [pc, #36]	; (8002984 <HandlePlaceKill+0x58>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60fb      	str	r3, [r7, #12]
		killerDestination.piece = LastPickedUpPiece.piece;
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HandlePlaceKill+0x54>)
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	81bb      	strh	r3, [r7, #12]
		AddIllegalPiece(placedPiece, killerDestination);
 800296a:	68f9      	ldr	r1, [r7, #12]
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fae9 	bl	8002f44 <AddIllegalPiece>
		SwitchTurnsAfterLegalState = 1;
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HandlePlaceKill+0x5c>)
 8002974:	2201      	movs	r2, #1
 8002976:	701a      	strb	r2, [r3, #0]
}
 8002978:	bf00      	nop
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	2000058c 	.word	0x2000058c
 8002984:	20000590 	.word	0x20000590
 8002988:	20000695 	.word	0x20000695

0800298c <HandlePlaceCastling>:

static void HandlePlaceCastling(struct PieceCoordinate placedPiece)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
	// If placing a piece in the King's expected location, assume it's a king and place it
	if (IsPieceCoordinateSamePosition(ExpectedKingCastleCoordinate, placedPiece))
 8002994:	4b32      	ldr	r3, [pc, #200]	; (8002a60 <HandlePlaceCastling+0xd4>)
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	f000 ff1d 	bl	80037d8 <IsPieceCoordinateSamePosition>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <HandlePlaceCastling+0x2e>
	{
		SetPiece(placedPiece.row, placedPiece.column, ExpectedKingCastleCoordinate.piece);
 80029a4:	79bb      	ldrb	r3, [r7, #6]
 80029a6:	79f9      	ldrb	r1, [r7, #7]
 80029a8:	4a2d      	ldr	r2, [pc, #180]	; (8002a60 <HandlePlaceCastling+0xd4>)
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 fe39 	bl	8003624 <SetPiece>
		ClearPiece(&ExpectedKingCastleCoordinate);
 80029b2:	482b      	ldr	r0, [pc, #172]	; (8002a60 <HandlePlaceCastling+0xd4>)
 80029b4:	f000 fe26 	bl	8003604 <ClearPiece>
 80029b8:	e03e      	b.n	8002a38 <HandlePlaceCastling+0xac>
	}
	// If placing a piece in the Rook's expected location, assume it's a rook and place it
	else if (IsPieceCoordinateSamePosition(ExpectedRookCastleCoordinate, placedPiece))
 80029ba:	4b2a      	ldr	r3, [pc, #168]	; (8002a64 <HandlePlaceCastling+0xd8>)
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	f000 ff0a 	bl	80037d8 <IsPieceCoordinateSamePosition>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HandlePlaceCastling+0x54>
	{
		SetPiece(placedPiece.row, placedPiece.column, ExpectedRookCastleCoordinate.piece);
 80029ca:	79bb      	ldrb	r3, [r7, #6]
 80029cc:	79f9      	ldrb	r1, [r7, #7]
 80029ce:	4a25      	ldr	r2, [pc, #148]	; (8002a64 <HandlePlaceCastling+0xd8>)
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fe26 	bl	8003624 <SetPiece>
		ClearPiece(&ExpectedRookCastleCoordinate);
 80029d8:	4822      	ldr	r0, [pc, #136]	; (8002a64 <HandlePlaceCastling+0xd8>)
 80029da:	f000 fe13 	bl	8003604 <ClearPiece>
 80029de:	e02b      	b.n	8002a38 <HandlePlaceCastling+0xac>
	}
	// If placing piece in wrong location
	else
	{
		// If King wasn't already placed in correct spot, put it in the correct spot
		if (PieceExists(ExpectedKingCastleCoordinate))
 80029e0:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <HandlePlaceCastling+0xd4>)
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	f000 fdf8 	bl	80035d8 <PieceExists>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00e      	beq.n	8002a0c <HandlePlaceCastling+0x80>
		{
			SetPiece(placedPiece.row, placedPiece.column, ExpectedKingCastleCoordinate.piece); // Assume the king was placed here (doesn't matter)
 80029ee:	79bb      	ldrb	r3, [r7, #6]
 80029f0:	79f9      	ldrb	r1, [r7, #7]
 80029f2:	4a1b      	ldr	r2, [pc, #108]	; (8002a60 <HandlePlaceCastling+0xd4>)
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 fe14 	bl	8003624 <SetPiece>
			AddIllegalPiece(placedPiece, ExpectedKingCastleCoordinate);
 80029fc:	4b18      	ldr	r3, [pc, #96]	; (8002a60 <HandlePlaceCastling+0xd4>)
 80029fe:	6819      	ldr	r1, [r3, #0]
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 fa9f 	bl	8002f44 <AddIllegalPiece>
			SwitchTurnsAfterLegalState = 1;
 8002a06:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <HandlePlaceCastling+0xdc>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]
		}

		// If Rook wasn't already placed in correct spot, put it in correct spot
		if (PieceExists(ExpectedRookCastleCoordinate))
 8002a0c:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <HandlePlaceCastling+0xd8>)
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	f000 fde2 	bl	80035d8 <PieceExists>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00e      	beq.n	8002a38 <HandlePlaceCastling+0xac>
		{
			SetPiece(placedPiece.row, placedPiece.column, ExpectedRookCastleCoordinate.piece); // Assume the rook was placed here (doesn't matter)
 8002a1a:	79bb      	ldrb	r3, [r7, #6]
 8002a1c:	79f9      	ldrb	r1, [r7, #7]
 8002a1e:	4a11      	ldr	r2, [pc, #68]	; (8002a64 <HandlePlaceCastling+0xd8>)
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 fdfe 	bl	8003624 <SetPiece>
			AddIllegalPiece(placedPiece, ExpectedRookCastleCoordinate);
 8002a28:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <HandlePlaceCastling+0xd8>)
 8002a2a:	6819      	ldr	r1, [r3, #0]
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 fa89 	bl	8002f44 <AddIllegalPiece>
			SwitchTurnsAfterLegalState = 1;
 8002a32:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <HandlePlaceCastling+0xdc>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
		}
	}

	// If castling has been fulfilled
	if (!PieceExists(ExpectedKingCastleCoordinate) && !PieceExists(ExpectedRookCastleCoordinate))
 8002a38:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HandlePlaceCastling+0xd4>)
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	f000 fdcc 	bl	80035d8 <PieceExists>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d108      	bne.n	8002a58 <HandlePlaceCastling+0xcc>
 8002a46:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <HandlePlaceCastling+0xd8>)
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	f000 fdc5 	bl	80035d8 <PieceExists>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HandlePlaceCastling+0xcc>
	{
		EndTurn();
 8002a54:	f000 fc88 	bl	8003368 <EndTurn>
	}
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	2000069c 	.word	0x2000069c
 8002a64:	200006a0 	.word	0x200006a0
 8002a68:	20000695 	.word	0x20000695

08002a6c <HandlePlaceMove>:

static void HandlePlaceMove(struct PieceCoordinate placedPiece)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	uint8_t isMoveValid = ValidateMove(LastPickedUpPiece, placedPiece);
 8002a74:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <HandlePlaceMove+0x44>)
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	f000 fb8f 	bl	800319c <ValidateMove>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	73fb      	strb	r3, [r7, #15]
	SetPiece(placedPiece.row, placedPiece.column, LastPickedUpPiece.piece);
 8002a82:	79bb      	ldrb	r3, [r7, #6]
 8002a84:	79f9      	ldrb	r1, [r7, #7]
 8002a86:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <HandlePlaceMove+0x44>)
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 fdca 	bl	8003624 <SetPiece>

	if (isMoveValid)
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <HandlePlaceMove+0x30>
	{
		EndTurn();
 8002a96:	f000 fc67 	bl	8003368 <EndTurn>
	// If move was invalid, put piece back
	else
	{
		AddIllegalPiece(placedPiece, LastPickedUpPiece);
	}
}
 8002a9a:	e004      	b.n	8002aa6 <HandlePlaceMove+0x3a>
		AddIllegalPiece(placedPiece, LastPickedUpPiece);
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <HandlePlaceMove+0x44>)
 8002a9e:	6819      	ldr	r1, [r3, #0]
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fa4f 	bl	8002f44 <AddIllegalPiece>
}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	2000058c 	.word	0x2000058c

08002ab4 <HandlePlacePreemptPromotion>:

static void HandlePlacePreemptPromotion(struct PieceCoordinate placedPiece)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
	PawnToPromote = placedPiece;
 8002abc:	4a05      	ldr	r2, [pc, #20]	; (8002ad4 <HandlePlacePreemptPromotion+0x20>)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6013      	str	r3, [r2, #0]

	// Illuminate the PawnToPromote
	IlluminatePieceCoordinates(&PawnToPromote, 1);
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	4803      	ldr	r0, [pc, #12]	; (8002ad4 <HandlePlacePreemptPromotion+0x20>)
 8002ac6:	f000 f9bf 	bl	8002e48 <IlluminatePieceCoordinates>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200006a4 	.word	0x200006a4

08002ad8 <HandlePlacePromotion>:

static void HandlePlacePromotion(struct PieceCoordinate placedPiece)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	// If placed the promoted piece back into the pawn's old spot, get the PieceType (knight or queen) from the last button pressed and set the piece as that type
	if (IsPieceCoordinateSamePosition(placedPiece, PawnToPromote))
 8002ae0:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <HandlePlacePromotion+0x68>)
 8002ae2:	6819      	ldr	r1, [r3, #0]
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fe77 	bl	80037d8 <IsPieceCoordinateSamePosition>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01e      	beq.n	8002b2e <HandlePlacePromotion+0x56>
	{
		// Get last button pressed, choose the piece type based on which button was pressed
		enum PieceType selectedPieceType;
		switch(GetLastButtonPressed())
 8002af0:	f7fd fd3a 	bl	8000568 <GetLastButtonPressed>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d002      	beq.n	8002b00 <HandlePlacePromotion+0x28>
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d003      	beq.n	8002b06 <HandlePlacePromotion+0x2e>
			case KNIGHT_BUTTON:
				selectedPieceType = KNIGHT;
				break;
			default:
				/// @todo: play audio cue to select the piece type to promote to
				return;
 8002afe:	e01b      	b.n	8002b38 <HandlePlacePromotion+0x60>
				selectedPieceType = QUEEN;
 8002b00:	2305      	movs	r3, #5
 8002b02:	73fb      	strb	r3, [r7, #15]
				break;
 8002b04:	e002      	b.n	8002b0c <HandlePlacePromotion+0x34>
				selectedPieceType = KNIGHT;
 8002b06:	2302      	movs	r3, #2
 8002b08:	73fb      	strb	r3, [r7, #15]
				break;
 8002b0a:	bf00      	nop
		}

		// Set piece on chessboard and end the turn
		struct Piece promotedPiece = {selectedPieceType, CurrentTurn};
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	733b      	strb	r3, [r7, #12]
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <HandlePlacePromotion+0x6c>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	737b      	strb	r3, [r7, #13]
		SetPiece(placedPiece.row, placedPiece.column, promotedPiece);
 8002b16:	79bb      	ldrb	r3, [r7, #6]
 8002b18:	79f9      	ldrb	r1, [r7, #7]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fd81 	bl	8003624 <SetPiece>
		ClearPiece(&PawnToPromote);
 8002b22:	4807      	ldr	r0, [pc, #28]	; (8002b40 <HandlePlacePromotion+0x68>)
 8002b24:	f000 fd6e 	bl	8003604 <ClearPiece>
		EndTurn();
 8002b28:	f000 fc1e 	bl	8003368 <EndTurn>
 8002b2c:	e004      	b.n	8002b38 <HandlePlacePromotion+0x60>
	}

	// If player doesn't place the promotion into the pawn's old spot, it must be placed in the right spot
	else
	{
		AddIllegalPiece(placedPiece, PawnToPromote);
 8002b2e:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <HandlePlacePromotion+0x68>)
 8002b30:	6819      	ldr	r1, [r3, #0]
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fa06 	bl	8002f44 <AddIllegalPiece>
	}
}
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200006a4 	.word	0x200006a4
 8002b44:	20000588 	.word	0x20000588

08002b48 <HandlePickup>:



static void HandlePickup(struct PieceCoordinate pickedUpPiece)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	SetPiece(pickedUpPiece.row, pickedUpPiece.column, EMPTY_PIECE);
 8002b50:	79bb      	ldrb	r3, [r7, #6]
 8002b52:	79f9      	ldrb	r1, [r7, #7]
 8002b54:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <HandlePickup+0x94>)
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 fd63 	bl	8003624 <SetPiece>

	// If a piece is picked up during an illegal state, if it's not an illegal piece it is NOW illegal
	if (NumIllegalPieces > 0)
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <HandlePickup+0x98>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HandlePickup+0x26>
	{
		HandlePickupIllegalState(pickedUpPiece);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f846 	bl	8002bf8 <HandlePickupIllegalState>
 8002b6c:	e02b      	b.n	8002bc6 <HandlePickup+0x7e>
	}

	// If player picked up piece from other team, they will kill it
	else if (pickedUpPiece.piece.owner != CurrentTurn)
 8002b6e:	797a      	ldrb	r2, [r7, #5]
 8002b70:	4b1c      	ldr	r3, [pc, #112]	; (8002be4 <HandlePickup+0x9c>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d003      	beq.n	8002b80 <HandlePickup+0x38>
	{
		HandlePickupPreemptKill(pickedUpPiece);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f87f 	bl	8002c7c <HandlePickupPreemptKill>
 8002b7e:	e022      	b.n	8002bc6 <HandlePickup+0x7e>
	}

	// If there's a piece to kill, this picked up piece must be able to kill it
	else if (PieceExists(PieceToKill))
 8002b80:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <HandlePickup+0xa0>)
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	f000 fd28 	bl	80035d8 <PieceExists>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HandlePickup+0x4e>
	{
		HandlePickupKill(pickedUpPiece);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f882 	bl	8002c98 <HandlePickupKill>
 8002b94:	e017      	b.n	8002bc6 <HandlePickup+0x7e>
	}

	// If there's a pawn to promote, the picked up piece must be this pawn
	else if (PieceExists(PawnToPromote))
 8002b96:	4b15      	ldr	r3, [pc, #84]	; (8002bec <HandlePickup+0xa4>)
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	f000 fd1d 	bl	80035d8 <PieceExists>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HandlePickup+0x64>
	{
		HandlePickupPromotion(pickedUpPiece);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f90d 	bl	8002dc4 <HandlePickupPromotion>
 8002baa:	e00c      	b.n	8002bc6 <HandlePickup+0x7e>
	}

	// Same team picked up piece twice in a row, so castling is occurring
	else if (DidSameTeamPickupLast(pickedUpPiece.piece))
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 fdab 	bl	8003708 <DidSameTeamPickupLast>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HandlePickup+0x78>
	{
		HandlePickupCastling(pickedUpPiece);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f895 	bl	8002ce8 <HandlePickupCastling>
 8002bbe:	e002      	b.n	8002bc6 <HandlePickup+0x7e>
	}

	// If simple pickup
	else
	{
		HandlePickupMove(pickedUpPiece);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f919 	bl	8002df8 <HandlePickupMove>
	}

	LastPickedUpPiece = pickedUpPiece;
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <HandlePickup+0xa8>)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6013      	str	r3, [r2, #0]
	LastTransitionType = PICKUP;
 8002bcc:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <HandlePickup+0xac>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	2000000c 	.word	0x2000000c
 8002be0:	20000694 	.word	0x20000694
 8002be4:	20000588 	.word	0x20000588
 8002be8:	20000590 	.word	0x20000590
 8002bec:	200006a4 	.word	0x200006a4
 8002bf0:	2000058c 	.word	0x2000058c
 8002bf4:	20000589 	.word	0x20000589

08002bf8 <HandlePickupIllegalState>:

static void HandlePickupIllegalState(struct PieceCoordinate pickedUpPiece)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < NumIllegalPieces; i++)
 8002c00:	2300      	movs	r3, #0
 8002c02:	73fb      	strb	r3, [r7, #15]
 8002c04:	e022      	b.n	8002c4c <HandlePickupIllegalState+0x54>
	{
		// If pickup for illegal piece, let it slide
		if (IsPieceCoordinateSamePosition(IllegalPieces[i].current, pickedUpPiece))
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	4a18      	ldr	r2, [pc, #96]	; (8002c6c <HandlePickupIllegalState+0x74>)
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	6858      	ldr	r0, [r3, #4]
 8002c12:	f000 fde1 	bl	80037d8 <IsPieceCoordinateSamePosition>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d014      	beq.n	8002c46 <HandlePickupIllegalState+0x4e>
		{
			// If pickup an illegal piece which is to be removed from the board is picked up, it is no longer illegal
			if (IsPieceCoordinateEqual(IllegalPieces[i].destination, OFFBOARD_PIECE_COORDINATE))
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	4914      	ldr	r1, [pc, #80]	; (8002c70 <HandlePickupIllegalState+0x78>)
 8002c20:	4a12      	ldr	r2, [pc, #72]	; (8002c6c <HandlePickupIllegalState+0x74>)
 8002c22:	6809      	ldr	r1, [r1, #0]
 8002c24:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002c28:	f000 fdba 	bl	80037a0 <IsPieceCoordinateEqual>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d017      	beq.n	8002c62 <HandlePickupIllegalState+0x6a>
			{
				// Remove from illegal pieces array
				RemoveIllegalPiece(i);
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 fa0d 	bl	8003054 <RemoveIllegalPiece>

				// If chessboard is valid, switch turns if flagged to do so
				CheckChessboardValidity(SwitchTurnsAfterLegalState);
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <HandlePickupIllegalState+0x7c>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fa7c 	bl	800313c <CheckChessboardValidity>
			}
			return;
 8002c44:	e00d      	b.n	8002c62 <HandlePickupIllegalState+0x6a>
	for (uint8_t i = 0; i < NumIllegalPieces; i++)
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
 8002c4c:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <HandlePickupIllegalState+0x80>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	7bfa      	ldrb	r2, [r7, #15]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d3d7      	bcc.n	8002c06 <HandlePickupIllegalState+0xe>
		}
	}

	// Player picked up a piece that wasn't illegal, so it must be added as an illegal piece which must be placed back
	AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HandlePickupIllegalState+0x78>)
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	f000 f972 	bl	8002f44 <AddIllegalPiece>
 8002c60:	e000      	b.n	8002c64 <HandlePickupIllegalState+0x6c>
			return;
 8002c62:	bf00      	nop
}
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000594 	.word	0x20000594
 8002c70:	20000014 	.word	0x20000014
 8002c74:	20000695 	.word	0x20000695
 8002c78:	20000694 	.word	0x20000694

08002c7c <HandlePickupPreemptKill>:

static void HandlePickupPreemptKill(struct PieceCoordinate pickedUpPiece)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
	PieceToKill = pickedUpPiece;
 8002c84:	4a03      	ldr	r2, [pc, #12]	; (8002c94 <HandlePickupPreemptKill+0x18>)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6013      	str	r3, [r2, #0]
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	20000590 	.word	0x20000590

08002c98 <HandlePickupKill>:

static void HandlePickupKill(struct PieceCoordinate pickedUpPiece)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	// If pickedUpPiece can kill it, illuminate PieceToKill's spot
	if(ValidateKill(PieceToKill, pickedUpPiece))
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <HandlePickupKill+0x48>)
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	f000 fa5d 	bl	8003164 <ValidateKill>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d004      	beq.n	8002cba <HandlePickupKill+0x22>
	{
		IlluminatePieceCoordinates(&PieceToKill, 1);
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	480b      	ldr	r0, [pc, #44]	; (8002ce0 <HandlePickupKill+0x48>)
 8002cb4:	f000 f8c8 	bl	8002e48 <IlluminatePieceCoordinates>
	{
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, PieceToKill);
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
		ClearPiece(&PieceToKill);
	}
}
 8002cb8:	e00d      	b.n	8002cd6 <HandlePickupKill+0x3e>
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, PieceToKill);
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <HandlePickupKill+0x48>)
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HandlePickupKill+0x4c>)
 8002cbe:	6811      	ldr	r1, [r2, #0]
 8002cc0:	6818      	ldr	r0, [r3, #0]
 8002cc2:	f000 f93f 	bl	8002f44 <AddIllegalPiece>
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
 8002cc6:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <HandlePickupKill+0x4c>)
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	f000 f93a 	bl	8002f44 <AddIllegalPiece>
		ClearPiece(&PieceToKill);
 8002cd0:	4803      	ldr	r0, [pc, #12]	; (8002ce0 <HandlePickupKill+0x48>)
 8002cd2:	f000 fc97 	bl	8003604 <ClearPiece>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20000590 	.word	0x20000590
 8002ce4:	20000014 	.word	0x20000014

08002ce8 <HandlePickupCastling>:

static void HandlePickupCastling(struct PieceCoordinate pickedUpPiece)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	struct PieceCoordinate rook;
	struct PieceCoordinate king;

	if (pickedUpPiece.piece.type == ROOK && LastPickedUpPiece.piece.type == KING)
 8002cf0:	793b      	ldrb	r3, [r7, #4]
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d109      	bne.n	8002d0a <HandlePickupCastling+0x22>
 8002cf6:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <HandlePickupCastling+0xcc>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b06      	cmp	r3, #6
 8002cfc:	d105      	bne.n	8002d0a <HandlePickupCastling+0x22>
	{
		rook = pickedUpPiece;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	61fb      	str	r3, [r7, #28]
		king = LastPickedUpPiece;
 8002d02:	4b2c      	ldr	r3, [pc, #176]	; (8002db4 <HandlePickupCastling+0xcc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	61bb      	str	r3, [r7, #24]
 8002d08:	e018      	b.n	8002d3c <HandlePickupCastling+0x54>
	}
	else if (pickedUpPiece.piece.type == KING && LastPickedUpPiece.piece.type == ROOK)
 8002d0a:	793b      	ldrb	r3, [r7, #4]
 8002d0c:	2b06      	cmp	r3, #6
 8002d0e:	d109      	bne.n	8002d24 <HandlePickupCastling+0x3c>
 8002d10:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <HandlePickupCastling+0xcc>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d105      	bne.n	8002d24 <HandlePickupCastling+0x3c>
	{
		rook = LastPickedUpPiece;
 8002d18:	4b26      	ldr	r3, [pc, #152]	; (8002db4 <HandlePickupCastling+0xcc>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	61fb      	str	r3, [r7, #28]
		king = pickedUpPiece;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	e00b      	b.n	8002d3c <HandlePickupCastling+0x54>
	}
	// If the past two picked up pieces aren't a king and rook, put them back
	else
	{
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
 8002d24:	4b24      	ldr	r3, [pc, #144]	; (8002db8 <HandlePickupCastling+0xd0>)
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	6818      	ldr	r0, [r3, #0]
 8002d2a:	f000 f90b 	bl	8002f44 <AddIllegalPiece>
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, LastPickedUpPiece);
 8002d2e:	4a21      	ldr	r2, [pc, #132]	; (8002db4 <HandlePickupCastling+0xcc>)
 8002d30:	4b21      	ldr	r3, [pc, #132]	; (8002db8 <HandlePickupCastling+0xd0>)
 8002d32:	6811      	ldr	r1, [r2, #0]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	f000 f905 	bl	8002f44 <AddIllegalPiece>
		return;
 8002d3a:	e038      	b.n	8002dae <HandlePickupCastling+0xc6>
	}

	if (ValidateCastling(rook, king))
 8002d3c:	69b9      	ldr	r1, [r7, #24]
 8002d3e:	69f8      	ldr	r0, [r7, #28]
 8002d40:	f000 fa3a 	bl	80031b8 <ValidateCastling>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d026      	beq.n	8002d98 <HandlePickupCastling+0xb0>
	{
		struct PieceCoordinate expectedKingPieceCoordinate;
		struct PieceCoordinate expectedRookPieceCoordinate;
		CalculateCastlingPositions(rook, &expectedKingPieceCoordinate, &expectedRookPieceCoordinate);
 8002d4a:	f107 0210 	add.w	r2, r7, #16
 8002d4e:	f107 0314 	add.w	r3, r7, #20
 8002d52:	4619      	mov	r1, r3
 8002d54:	69f8      	ldr	r0, [r7, #28]
 8002d56:	f7fe ffcf 	bl	8001cf8 <CalculateCastlingPositions>

		// If castling won't result in a self-check then it's valid so copy to globals. Otherwise fall through to AddIllegalPiece.
		if (!WillResultInSelfCheck(rook, expectedRookPieceCoordinate) && !WillResultInSelfCheck(king, expectedKingPieceCoordinate))
 8002d5a:	6939      	ldr	r1, [r7, #16]
 8002d5c:	69f8      	ldr	r0, [r7, #28]
 8002d5e:	f7fe fe91 	bl	8001a84 <WillResultInSelfCheck>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d117      	bne.n	8002d98 <HandlePickupCastling+0xb0>
 8002d68:	6979      	ldr	r1, [r7, #20]
 8002d6a:	69b8      	ldr	r0, [r7, #24]
 8002d6c:	f7fe fe8a 	bl	8001a84 <WillResultInSelfCheck>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d110      	bne.n	8002d98 <HandlePickupCastling+0xb0>
		{
			ExpectedKingCastleCoordinate = expectedKingPieceCoordinate;
 8002d76:	4a11      	ldr	r2, [pc, #68]	; (8002dbc <HandlePickupCastling+0xd4>)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	6013      	str	r3, [r2, #0]
			ExpectedRookCastleCoordinate = expectedRookPieceCoordinate;
 8002d7c:	4a10      	ldr	r2, [pc, #64]	; (8002dc0 <HandlePickupCastling+0xd8>)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	6013      	str	r3, [r2, #0]

			// Illuminate LEDs to the target castling locations
			struct PieceCoordinate pieceCoordinatesToIlluminate[] = { expectedKingPieceCoordinate, expectedRookPieceCoordinate};
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	60fb      	str	r3, [r7, #12]
			IlluminatePieceCoordinates(pieceCoordinatesToIlluminate, sizeof(pieceCoordinatesToIlluminate) / sizeof(*pieceCoordinatesToIlluminate));
 8002d8a:	f107 0308 	add.w	r3, r7, #8
 8002d8e:	2102      	movs	r1, #2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 f859 	bl	8002e48 <IlluminatePieceCoordinates>
 8002d96:	e00a      	b.n	8002dae <HandlePickupCastling+0xc6>

			return;
		}
	}

	AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
 8002d98:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <HandlePickupCastling+0xd0>)
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	f000 f8d1 	bl	8002f44 <AddIllegalPiece>
	AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, LastPickedUpPiece);
 8002da2:	4a04      	ldr	r2, [pc, #16]	; (8002db4 <HandlePickupCastling+0xcc>)
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <HandlePickupCastling+0xd0>)
 8002da6:	6811      	ldr	r1, [r2, #0]
 8002da8:	6818      	ldr	r0, [r3, #0]
 8002daa:	f000 f8cb 	bl	8002f44 <AddIllegalPiece>
}
 8002dae:	3720      	adds	r7, #32
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	2000058c 	.word	0x2000058c
 8002db8:	20000014 	.word	0x20000014
 8002dbc:	2000069c 	.word	0x2000069c
 8002dc0:	200006a0 	.word	0x200006a0

08002dc4 <HandlePickupPromotion>:

static void HandlePickupPromotion(struct PieceCoordinate pickedUpPiece)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	// All picked up pieces during a promotion must be the PawnToPromote, otherwise they must be placed back
	if (!IsPieceCoordinateEqual(pickedUpPiece, PawnToPromote))
 8002dcc:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HandlePickupPromotion+0x2c>)
 8002dce:	6819      	ldr	r1, [r3, #0]
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 fce5 	bl	80037a0 <IsPieceCoordinateEqual>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d104      	bne.n	8002de6 <HandlePickupPromotion+0x22>
	{
		AddIllegalPiece(OFFBOARD_PIECE_COORDINATE, pickedUpPiece);
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <HandlePickupPromotion+0x30>)
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	f000 f8af 	bl	8002f44 <AddIllegalPiece>
	}
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	200006a4 	.word	0x200006a4
 8002df4:	20000014 	.word	0x20000014

08002df8 <HandlePickupMove>:

static void HandlePickupMove(struct PieceCoordinate pickedUpPiece)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b090      	sub	sp, #64	; 0x40
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
	// If this piece isn't owned by the current team, then they must put it back down
	if (pickedUpPiece.piece.owner != CurrentTurn)
 8002e00:	797a      	ldrb	r2, [r7, #5]
 8002e02:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <HandlePickupMove+0x48>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d005      	beq.n	8002e16 <HandlePickupMove+0x1e>
	{
		AddIllegalPiece(EMPTY_PIECE_COORDINATE, pickedUpPiece);
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <HandlePickupMove+0x4c>)
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	f000 f898 	bl	8002f44 <AddIllegalPiece>
		CalculateAllLegalPathsAndChecks(pickedUpPiece, allLegalPaths, &numLegalPaths);

		// Illuminate legal paths on LEDs
		IlluminateCoordinates(allLegalPaths, numLegalPaths);
	}
}
 8002e14:	e00f      	b.n	8002e36 <HandlePickupMove+0x3e>
		CalculateAllLegalPathsAndChecks(pickedUpPiece, allLegalPaths, &numLegalPaths);
 8002e16:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002e1a:	f107 0308 	add.w	r3, r7, #8
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7fe fa19 	bl	8001258 <CalculateAllLegalPathsAndChecks>
		IlluminateCoordinates(allLegalPaths, numLegalPaths);
 8002e26:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002e2a:	f107 0308 	add.w	r3, r7, #8
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 f847 	bl	8002ec4 <IlluminateCoordinates>
}
 8002e36:	bf00      	nop
 8002e38:	3740      	adds	r7, #64	; 0x40
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000588 	.word	0x20000588
 8002e44:	20000010 	.word	0x20000010

08002e48 <IlluminatePieceCoordinates>:

static void IlluminatePieceCoordinates(struct PieceCoordinate* pieceCoordinates, uint8_t numPieceCoordinates)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b094      	sub	sp, #80	; 0x50
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	70fb      	strb	r3, [r7, #3]
	uint8_t board[NUM_ROWS][NUM_COLS] = {0};
 8002e54:	f107 030c 	add.w	r3, r7, #12
 8002e58:	2240      	movs	r2, #64	; 0x40
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f003 fdf5 	bl	8006a4c <memset>
	for(uint8_t i = 0; i < numPieceCoordinates; i++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002e68:	e01a      	b.n	8002ea0 <IlluminatePieceCoordinates+0x58>
	{
		board[pieceCoordinates[i].row][pieceCoordinates[i].column] = 1;
 8002e6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	789b      	ldrb	r3, [r3, #2]
 8002e76:	4619      	mov	r1, r3
 8002e78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4413      	add	r3, r2
 8002e82:	78db      	ldrb	r3, [r3, #3]
 8002e84:	461a      	mov	r2, r3
 8002e86:	00cb      	lsls	r3, r1, #3
 8002e88:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002e8c:	440b      	add	r3, r1
 8002e8e:	4413      	add	r3, r2
 8002e90:	3b44      	subs	r3, #68	; 0x44
 8002e92:	2201      	movs	r2, #1
 8002e94:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < numPieceCoordinates; i++)
 8002e96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002ea0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d3df      	bcc.n	8002e6a <IlluminatePieceCoordinates+0x22>
	}
	writeBoardValue(&hspi1, board);
 8002eaa:	f107 030c 	add.w	r3, r7, #12
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4803      	ldr	r0, [pc, #12]	; (8002ec0 <IlluminatePieceCoordinates+0x78>)
 8002eb2:	f7fd fcfe 	bl	80008b2 <writeBoardValue>
}
 8002eb6:	bf00      	nop
 8002eb8:	3750      	adds	r7, #80	; 0x50
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200018cc 	.word	0x200018cc

08002ec4 <IlluminateCoordinates>:

static void IlluminateCoordinates(struct Coordinate* coordinates, uint8_t numCoordinates)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b094      	sub	sp, #80	; 0x50
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	70fb      	strb	r3, [r7, #3]
	uint8_t board[NUM_ROWS][NUM_COLS] = {0};
 8002ed0:	f107 030c 	add.w	r3, r7, #12
 8002ed4:	2240      	movs	r2, #64	; 0x40
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f003 fdb7 	bl	8006a4c <memset>
	for(uint8_t i = 0; i < numCoordinates; i++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002ee4:	e01c      	b.n	8002f20 <IlluminateCoordinates+0x5c>
	{
		board[coordinates[i].row][coordinates[i].column] = 1;
 8002ee6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f993 3000 	ldrsb.w	r3, [r3]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	4413      	add	r3, r2
 8002f00:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002f04:	461a      	mov	r2, r3
 8002f06:	00cb      	lsls	r3, r1, #3
 8002f08:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002f0c:	440b      	add	r3, r1
 8002f0e:	4413      	add	r3, r2
 8002f10:	3b44      	subs	r3, #68	; 0x44
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < numCoordinates; i++)
 8002f16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002f20:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d3dd      	bcc.n	8002ee6 <IlluminateCoordinates+0x22>
	}
	writeBoardValue(&hspi1, board);
 8002f2a:	f107 030c 	add.w	r3, r7, #12
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4803      	ldr	r0, [pc, #12]	; (8002f40 <IlluminateCoordinates+0x7c>)
 8002f32:	f7fd fcbe 	bl	80008b2 <writeBoardValue>
}
 8002f36:	bf00      	nop
 8002f38:	3750      	adds	r7, #80	; 0x50
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	200018cc 	.word	0x200018cc

08002f44 <AddIllegalPiece>:

/**
 * @brief Put an illegal piece in the IllegalPieceDestinations array. Destination is the correct destination of the piece and Current is the current position of the piece.
 */
static void AddIllegalPiece(struct PieceCoordinate current, struct PieceCoordinate destination)
{
 8002f44:	b590      	push	{r4, r7, lr}
 8002f46:	b0c5      	sub	sp, #276	; 0x114
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	1d3b      	adds	r3, r7, #4
 8002f4c:	6018      	str	r0, [r3, #0]
 8002f4e:	463b      	mov	r3, r7
 8002f50:	6019      	str	r1, [r3, #0]
	current.piece = destination.piece;
 8002f52:	1d3b      	adds	r3, r7, #4
 8002f54:	463a      	mov	r2, r7
 8002f56:	8812      	ldrh	r2, [r2, #0]
 8002f58:	801a      	strh	r2, [r3, #0]

	// Do not add duplicate pieces
	for(uint8_t i = 0; i < NumIllegalPieces; i++)
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002f60:	e011      	b.n	8002f86 <AddIllegalPiece+0x42>
	{
		if(IsPieceCoordinateSamePosition(IllegalPieces[i].current, current))
 8002f62:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002f66:	1d3a      	adds	r2, r7, #4
 8002f68:	4938      	ldr	r1, [pc, #224]	; (800304c <AddIllegalPiece+0x108>)
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	440b      	add	r3, r1
 8002f6e:	6811      	ldr	r1, [r2, #0]
 8002f70:	6858      	ldr	r0, [r3, #4]
 8002f72:	f000 fc31 	bl	80037d8 <IsPieceCoordinateSamePosition>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d161      	bne.n	8003040 <AddIllegalPiece+0xfc>
	for(uint8_t i = 0; i < NumIllegalPieces; i++)
 8002f7c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002f80:	3301      	adds	r3, #1
 8002f82:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002f86:	4b32      	ldr	r3, [pc, #200]	; (8003050 <AddIllegalPiece+0x10c>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d3e7      	bcc.n	8002f62 <AddIllegalPiece+0x1e>
			return;
		}
	}

	// Add illegal pieces to array
	IllegalPieces[NumIllegalPieces].current = current;
 8002f92:	4b2f      	ldr	r3, [pc, #188]	; (8003050 <AddIllegalPiece+0x10c>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	4a2d      	ldr	r2, [pc, #180]	; (800304c <AddIllegalPiece+0x108>)
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	1d3a      	adds	r2, r7, #4
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
	IllegalPieces[NumIllegalPieces].destination = destination;
 8002fa2:	4b2b      	ldr	r3, [pc, #172]	; (8003050 <AddIllegalPiece+0x10c>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4a28      	ldr	r2, [pc, #160]	; (800304c <AddIllegalPiece+0x108>)
 8002faa:	463b      	mov	r3, r7
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
	NumIllegalPieces++;
 8002fb2:	4b27      	ldr	r3, [pc, #156]	; (8003050 <AddIllegalPiece+0x10c>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4b25      	ldr	r3, [pc, #148]	; (8003050 <AddIllegalPiece+0x10c>)
 8002fbc:	701a      	strb	r2, [r3, #0]

	// Illuminate all illegal pieces
	uint8_t j = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	struct PieceCoordinate pieceCoordinates[2 * MAX_ILLEGAL_PIECES] = {0};
 8002fc4:	f107 030c 	add.w	r3, r7, #12
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fce:	461a      	mov	r2, r3
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	f003 fd3b 	bl	8006a4c <memset>
	for(uint8_t i = 0; i < NumIllegalPieces; i++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8002fdc:	e023      	b.n	8003026 <AddIllegalPiece+0xe2>
	{
		pieceCoordinates[j++] = IllegalPieces[i].current;
 8002fde:	f897 110d 	ldrb.w	r1, [r7, #269]	; 0x10d
 8002fe2:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	f887 210e 	strb.w	r2, [r7, #270]	; 0x10e
 8002fec:	461c      	mov	r4, r3
 8002fee:	f107 020c 	add.w	r2, r7, #12
 8002ff2:	4816      	ldr	r0, [pc, #88]	; (800304c <AddIllegalPiece+0x108>)
 8002ff4:	00cb      	lsls	r3, r1, #3
 8002ff6:	4403      	add	r3, r0
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		pieceCoordinates[j++] = IllegalPieces[i].destination;
 8002ffe:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8003002:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8003006:	1c59      	adds	r1, r3, #1
 8003008:	f887 110e 	strb.w	r1, [r7, #270]	; 0x10e
 800300c:	4618      	mov	r0, r3
 800300e:	f107 030c 	add.w	r3, r7, #12
 8003012:	490e      	ldr	r1, [pc, #56]	; (800304c <AddIllegalPiece+0x108>)
 8003014:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8003018:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	for(uint8_t i = 0; i < NumIllegalPieces; i++)
 800301c:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8003020:	3301      	adds	r3, #1
 8003022:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8003026:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <AddIllegalPiece+0x10c>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800302e:	429a      	cmp	r2, r3
 8003030:	d3d5      	bcc.n	8002fde <AddIllegalPiece+0x9a>
	}
	IlluminatePieceCoordinates(pieceCoordinates, sizeof(pieceCoordinates) / sizeof(*pieceCoordinates));
 8003032:	f107 030c 	add.w	r3, r7, #12
 8003036:	2140      	movs	r1, #64	; 0x40
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff ff05 	bl	8002e48 <IlluminatePieceCoordinates>
 800303e:	e000      	b.n	8003042 <AddIllegalPiece+0xfe>
			return;
 8003040:	bf00      	nop
}
 8003042:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003046:	46bd      	mov	sp, r7
 8003048:	bd90      	pop	{r4, r7, pc}
 800304a:	bf00      	nop
 800304c:	20000594 	.word	0x20000594
 8003050:	20000694 	.word	0x20000694

08003054 <RemoveIllegalPiece>:

/**
 * @brief Remove illegal piece from IllegalPieces array given its index
 */
static void RemoveIllegalPiece(uint8_t index)
{
 8003054:	b590      	push	{r4, r7, lr}
 8003056:	b0c5      	sub	sp, #276	; 0x114
 8003058:	af00      	add	r7, sp, #0
 800305a:	4602      	mov	r2, r0
 800305c:	1dfb      	adds	r3, r7, #7
 800305e:	701a      	strb	r2, [r3, #0]
	// Remove illegal piece from array
	NumIllegalPieces--;
 8003060:	4b34      	ldr	r3, [pc, #208]	; (8003134 <RemoveIllegalPiece+0xe0>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	3b01      	subs	r3, #1
 8003066:	b2da      	uxtb	r2, r3
 8003068:	4b32      	ldr	r3, [pc, #200]	; (8003134 <RemoveIllegalPiece+0xe0>)
 800306a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = index; i < NumIllegalPieces; i++)
 800306c:	1dfb      	adds	r3, r7, #7
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003074:	e013      	b.n	800309e <RemoveIllegalPiece+0x4a>
	{
		IllegalPieces[i] = IllegalPieces[i + 1];
 8003076:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003080:	482d      	ldr	r0, [pc, #180]	; (8003138 <RemoveIllegalPiece+0xe4>)
 8003082:	492d      	ldr	r1, [pc, #180]	; (8003138 <RemoveIllegalPiece+0xe4>)
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4403      	add	r3, r0
 8003088:	00d2      	lsls	r2, r2, #3
 800308a:	440a      	add	r2, r1
 800308c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003090:	e883 0003 	stmia.w	r3, {r0, r1}
	for (uint8_t i = index; i < NumIllegalPieces; i++)
 8003094:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003098:	3301      	adds	r3, #1
 800309a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800309e:	4b25      	ldr	r3, [pc, #148]	; (8003134 <RemoveIllegalPiece+0xe0>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d3e5      	bcc.n	8003076 <RemoveIllegalPiece+0x22>
	}

	// Unilluminate the piece that was removed
	uint8_t j = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	struct PieceCoordinate pieceCoordinates[2 * MAX_ILLEGAL_PIECES] = {0};
 80030b0:	f107 030c 	add.w	r3, r7, #12
 80030b4:	4618      	mov	r0, r3
 80030b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ba:	461a      	mov	r2, r3
 80030bc:	2100      	movs	r1, #0
 80030be:	f003 fcc5 	bl	8006a4c <memset>
	for(uint8_t i = 0; i < NumIllegalPieces; i++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 80030c8:	e023      	b.n	8003112 <RemoveIllegalPiece+0xbe>
	{
		pieceCoordinates[j++] = IllegalPieces[i].current;
 80030ca:	f897 110d 	ldrb.w	r1, [r7, #269]	; 0x10d
 80030ce:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	f887 210e 	strb.w	r2, [r7, #270]	; 0x10e
 80030d8:	461c      	mov	r4, r3
 80030da:	f107 020c 	add.w	r2, r7, #12
 80030de:	4816      	ldr	r0, [pc, #88]	; (8003138 <RemoveIllegalPiece+0xe4>)
 80030e0:	00cb      	lsls	r3, r1, #3
 80030e2:	4403      	add	r3, r0
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		pieceCoordinates[j++] = IllegalPieces[i].destination;
 80030ea:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 80030ee:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80030f2:	1c59      	adds	r1, r3, #1
 80030f4:	f887 110e 	strb.w	r1, [r7, #270]	; 0x10e
 80030f8:	4618      	mov	r0, r3
 80030fa:	f107 030c 	add.w	r3, r7, #12
 80030fe:	490e      	ldr	r1, [pc, #56]	; (8003138 <RemoveIllegalPiece+0xe4>)
 8003100:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8003104:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	for(uint8_t i = 0; i < NumIllegalPieces; i++)
 8003108:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800310c:	3301      	adds	r3, #1
 800310e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8003112:	4b08      	ldr	r3, [pc, #32]	; (8003134 <RemoveIllegalPiece+0xe0>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800311a:	429a      	cmp	r2, r3
 800311c:	d3d5      	bcc.n	80030ca <RemoveIllegalPiece+0x76>
	}
	IlluminatePieceCoordinates(pieceCoordinates, sizeof(pieceCoordinates) / sizeof(*pieceCoordinates));
 800311e:	f107 030c 	add.w	r3, r7, #12
 8003122:	2140      	movs	r1, #64	; 0x40
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fe8f 	bl	8002e48 <IlluminatePieceCoordinates>
}
 800312a:	bf00      	nop
 800312c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003130:	46bd      	mov	sp, r7
 8003132:	bd90      	pop	{r4, r7, pc}
 8003134:	20000694 	.word	0x20000694
 8003138:	20000594 	.word	0x20000594

0800313c <CheckChessboardValidity>:

/**
 * @brief Check if chessboard is valid and switch turns if flagged to do so
 */
static void CheckChessboardValidity(uint8_t switchTurns)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
	if (NumIllegalPieces == 0)
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <CheckChessboardValidity+0x24>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d104      	bne.n	8003158 <CheckChessboardValidity+0x1c>
	{
		if (switchTurns)
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <CheckChessboardValidity+0x1c>
		{
			EndTurn();
 8003154:	f000 f908 	bl	8003368 <EndTurn>
		}
	}
}
 8003158:	bf00      	nop
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20000694 	.word	0x20000694

08003164 <ValidateKill>:
/**
 * @brief Return 1 if the given killer can take the victim, 0 otherwise. If the victim cannot be killed, then this is an illegal/impossible kill
 * so the victim and killer must return to their original spots, and a new move must be done.
 */
static uint8_t ValidateKill(struct PieceCoordinate victim, struct PieceCoordinate killer)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
	// Temporarily add back victim and then check if it can be killed (need to be done for PAWN)
	SetPieceCoordinate(victim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fa70 	bl	8003654 <SetPieceCoordinate>

	uint8_t valid = ValidateMove(killer, victim);
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	6838      	ldr	r0, [r7, #0]
 8003178:	f000 f810 	bl	800319c <ValidateMove>
 800317c:	4603      	mov	r3, r0
 800317e:	73fb      	strb	r3, [r7, #15]

	// Clear victim again
	victim.piece = EMPTY_PIECE;
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <ValidateKill+0x34>)
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	80bb      	strh	r3, [r7, #4]
	SetPieceCoordinate(victim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fa64 	bl	8003654 <SetPieceCoordinate>

	return valid;
 800318c:	7bfb      	ldrb	r3, [r7, #15]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	2000000c 	.word	0x2000000c

0800319c <ValidateMove>:
/**
 * @brief Return 1 if the "to" is in the legal paths for "from", 0 otherwise. If the move is invalid, then the "from" must be placed back
 * in its original spot, and a new move must be done.
 */
static uint8_t ValidateMove(struct PieceCoordinate from, struct PieceCoordinate to)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
	return IsLegalMove(from, to);
 80031a6:	6839      	ldr	r1, [r7, #0]
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7fd ffdd 	bl	8001168 <IsLegalMove>
 80031ae:	4603      	mov	r3, r0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <ValidateCastling>:

/**
 * @brief Return 1 if the given rook can castle with the given king. If not, they should return to their original positions.
 */
static uint8_t ValidateCastling(struct PieceCoordinate rook, struct PieceCoordinate king)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
	// If white king can castle and the king and rook are in the starting row
	if (king.row == 0 && rook.row == 0 && CanWhiteKingCastle)
 80031c2:	78bb      	ldrb	r3, [r7, #2]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d119      	bne.n	80031fc <ValidateCastling+0x44>
 80031c8:	79bb      	ldrb	r3, [r7, #6]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d116      	bne.n	80031fc <ValidateCastling+0x44>
 80031ce:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <ValidateCastling+0x8c>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d012      	beq.n	80031fc <ValidateCastling+0x44>
	{
		return (rook.column == 0 && CanA1Castle) || (rook.column == 7 && CanH1Castle);
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d103      	bne.n	80031e4 <ValidateCastling+0x2c>
 80031dc:	4b1a      	ldr	r3, [pc, #104]	; (8003248 <ValidateCastling+0x90>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d106      	bne.n	80031f2 <ValidateCastling+0x3a>
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	2b07      	cmp	r3, #7
 80031e8:	d105      	bne.n	80031f6 <ValidateCastling+0x3e>
 80031ea:	4b18      	ldr	r3, [pc, #96]	; (800324c <ValidateCastling+0x94>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <ValidateCastling+0x3e>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <ValidateCastling+0x40>
 80031f6:	2300      	movs	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e01d      	b.n	8003238 <ValidateCastling+0x80>
	}
	// If black king can castle and the king and rook are in the starting row
	else if (king.row == 7 && rook.row == 7 && CanBlackKingCastle)
 80031fc:	78bb      	ldrb	r3, [r7, #2]
 80031fe:	2b07      	cmp	r3, #7
 8003200:	d119      	bne.n	8003236 <ValidateCastling+0x7e>
 8003202:	79bb      	ldrb	r3, [r7, #6]
 8003204:	2b07      	cmp	r3, #7
 8003206:	d116      	bne.n	8003236 <ValidateCastling+0x7e>
 8003208:	4b11      	ldr	r3, [pc, #68]	; (8003250 <ValidateCastling+0x98>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d012      	beq.n	8003236 <ValidateCastling+0x7e>
	{
		return (rook.column == 0 && CanA8Castle) || (rook.column == 7 && CanH8Castle);
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d103      	bne.n	800321e <ValidateCastling+0x66>
 8003216:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <ValidateCastling+0x9c>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <ValidateCastling+0x74>
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	2b07      	cmp	r3, #7
 8003222:	d105      	bne.n	8003230 <ValidateCastling+0x78>
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <ValidateCastling+0xa0>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <ValidateCastling+0x78>
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <ValidateCastling+0x7a>
 8003230:	2300      	movs	r3, #0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	e000      	b.n	8003238 <ValidateCastling+0x80>
	}
	return 0;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	2000069a 	.word	0x2000069a
 8003248:	20000696 	.word	0x20000696
 800324c:	20000697 	.word	0x20000697
 8003250:	2000069b 	.word	0x2000069b
 8003254:	20000698 	.word	0x20000698
 8003258:	20000699 	.word	0x20000699

0800325c <ValidateStartPositions>:

uint8_t ValidateStartPositions()
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b0a2      	sub	sp, #136	; 0x88
 8003260:	af00      	add	r7, sp, #0
	struct Coordinate invalidCoordinates[NUM_COLS * NUM_ROWS] = {0};
 8003262:	1d3b      	adds	r3, r7, #4
 8003264:	2280      	movs	r2, #128	; 0x80
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f003 fbef 	bl	8006a4c <memset>
	uint8_t numInvalidCoordinates = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	for (uint8_t column = 0; column < NUM_COLS; column++)
 8003274:	2300      	movs	r3, #0
 8003276:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800327a:	e05c      	b.n	8003336 <ValidateStartPositions+0xda>
	{
		WriteColumn(column);
 800327c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff f993 	bl	80025ac <WriteColumn>
		for (uint8_t row = 0; row < NUM_ROWS; row++)
 8003286:	2300      	movs	r3, #0
 8003288:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 800328c:	e04a      	b.n	8003324 <ValidateStartPositions+0xc8>
		{
			GPIO_PinState cellValue = ReadRow(row);
 800328e:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff f9b8 	bl	8002608 <ReadRow>
 8003298:	4603      	mov	r3, r0
 800329a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
			struct Coordinate coordinate = {row, column};
 800329e:	f997 3085 	ldrsb.w	r3, [r7, #133]	; 0x85
 80032a2:	703b      	strb	r3, [r7, #0]
 80032a4:	f997 3086 	ldrsb.w	r3, [r7, #134]	; 0x86
 80032a8:	707b      	strb	r3, [r7, #1]

			if(cellValue == GPIO_PIN_SET && INITIAL_CHESSBOARD[row][column].type == NONE)
 80032aa:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d117      	bne.n	80032e2 <ValidateStartPositions+0x86>
 80032b2:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80032b6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80032ba:	492a      	ldr	r1, [pc, #168]	; (8003364 <ValidateStartPositions+0x108>)
 80032bc:	00d2      	lsls	r2, r2, #3
 80032be:	4413      	add	r3, r2
 80032c0:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10b      	bne.n	80032e2 <ValidateStartPositions+0x86>
			{
				invalidCoordinates[numInvalidCoordinates++] = coordinate;
 80032ca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80032da:	4413      	add	r3, r2
 80032dc:	883a      	ldrh	r2, [r7, #0]
 80032de:	f823 2c84 	strh.w	r2, [r3, #-132]
			}

			if(cellValue == GPIO_PIN_RESET && INITIAL_CHESSBOARD[row][column].type != NONE)
 80032e2:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d117      	bne.n	800331a <ValidateStartPositions+0xbe>
 80032ea:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80032ee:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80032f2:	491c      	ldr	r1, [pc, #112]	; (8003364 <ValidateStartPositions+0x108>)
 80032f4:	00d2      	lsls	r2, r2, #3
 80032f6:	4413      	add	r3, r2
 80032f8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <ValidateStartPositions+0xbe>
			{
				invalidCoordinates[numInvalidCoordinates++] = coordinate;
 8003302:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003312:	4413      	add	r3, r2
 8003314:	883a      	ldrh	r2, [r7, #0]
 8003316:	f823 2c84 	strh.w	r2, [r3, #-132]
		for (uint8_t row = 0; row < NUM_ROWS; row++)
 800331a:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800331e:	3301      	adds	r3, #1
 8003320:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8003324:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8003328:	2b07      	cmp	r3, #7
 800332a:	d9b0      	bls.n	800328e <ValidateStartPositions+0x32>
	for (uint8_t column = 0; column < NUM_COLS; column++)
 800332c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003330:	3301      	adds	r3, #1
 8003332:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8003336:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800333a:	2b07      	cmp	r3, #7
 800333c:	d99e      	bls.n	800327c <ValidateStartPositions+0x20>
			}
		}
	}


	IlluminateCoordinates(invalidCoordinates, numInvalidCoordinates);
 800333e:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8003342:	1d3b      	adds	r3, r7, #4
 8003344:	4611      	mov	r1, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff fdbc 	bl	8002ec4 <IlluminateCoordinates>
	return (numInvalidCoordinates == 0);
 800334c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003350:	2b00      	cmp	r3, #0
 8003352:	bf0c      	ite	eq
 8003354:	2301      	moveq	r3, #1
 8003356:	2300      	movne	r3, #0
 8003358:	b2db      	uxtb	r3, r3
}
 800335a:	4618      	mov	r0, r3
 800335c:	3788      	adds	r7, #136	; 0x88
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000018 	.word	0x20000018

08003368 <EndTurn>:

static void EndTurn()
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
#ifndef TEST
	// Check for a promotion. If found, do not end turn, HandlePlacePreemptPromotion
	CheckForPromotion();
 800336c:	f000 f828 	bl	80033c0 <CheckForPromotion>
	if (PieceExists(PawnToPromote))
 8003370:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <EndTurn+0x4c>)
 8003372:	6818      	ldr	r0, [r3, #0]
 8003374:	f000 f930 	bl	80035d8 <PieceExists>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d117      	bne.n	80033ae <EndTurn+0x46>
		return;
	}
#endif // !TEST

	// Turn LEDs off
	IlluminateCoordinates(NULL, 0);
 800337e:	2100      	movs	r1, #0
 8003380:	2000      	movs	r0, #0
 8003382:	f7ff fd9f 	bl	8002ec4 <IlluminateCoordinates>

#ifndef TEST
	// Check if any rooks or kings moved so they can be flagged as not castleable
	UpdateCastleFlags();
 8003386:	f000 f851 	bl	800342c <UpdateCastleFlags>

	SwitchTurnsAfterLegalState = 0;
 800338a:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <EndTurn+0x50>)
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]

	// Switch teams
	CurrentTurn = CurrentTurn == WHITE ? BLACK : WHITE;
 8003390:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <EndTurn+0x54>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <EndTurn+0x34>
 8003398:	2202      	movs	r2, #2
 800339a:	e000      	b.n	800339e <EndTurn+0x36>
 800339c:	2201      	movs	r2, #1
 800339e:	4b07      	ldr	r3, [pc, #28]	; (80033bc <EndTurn+0x54>)
 80033a0:	701a      	strb	r2, [r3, #0]
#endif // !TEST

	// Invoke PathFinder to store all legal moves for this team
	CalculateTeamsLegalMoves(CurrentTurn);
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <EndTurn+0x54>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fd fe3a 	bl	8001020 <CalculateTeamsLegalMoves>
 80033ac:	e000      	b.n	80033b0 <EndTurn+0x48>
		return;
 80033ae:	bf00      	nop
}
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	200006a4 	.word	0x200006a4
 80033b8:	20000695 	.word	0x20000695
 80033bc:	20000588 	.word	0x20000588

080033c0 <CheckForPromotion>:

static void CheckForPromotion()
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	; 0x28
 80033c4:	af00      	add	r7, sp, #0
	// Get all pawns
	struct PieceCoordinate pawns[NUM_PAWNS_PER_TEAM];
	uint8_t numPawns;
	GetPiecesForTeam(CurrentTurn, PAWN, pawns, &numPawns);
 80033c6:	4b18      	ldr	r3, [pc, #96]	; (8003428 <CheckForPromotion+0x68>)
 80033c8:	7818      	ldrb	r0, [r3, #0]
 80033ca:	1cfb      	adds	r3, r7, #3
 80033cc:	1d3a      	adds	r2, r7, #4
 80033ce:	2101      	movs	r1, #1
 80033d0:	f000 f896 	bl	8003500 <GetPiecesForTeam>

	// If the pawn has reached the end, it must be promoted
	for (uint8_t i = 0; i < numPawns; i++)
 80033d4:	2300      	movs	r3, #0
 80033d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80033da:	e01b      	b.n	8003414 <CheckForPromotion+0x54>
	{
		if (PawnReachedEnd(pawns[i]))
 80033dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033e6:	4413      	add	r3, r2
 80033e8:	f853 0c24 	ldr.w	r0, [r3, #-36]
 80033ec:	f000 f8d0 	bl	8003590 <PawnReachedEnd>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <CheckForPromotion+0x4a>
		{
			HandlePlacePreemptPromotion(pawns[i]);
 80033f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003400:	4413      	add	r3, r2
 8003402:	f853 0c24 	ldr.w	r0, [r3, #-36]
 8003406:	f7ff fb55 	bl	8002ab4 <HandlePlacePreemptPromotion>
	for (uint8_t i = 0; i < numPawns; i++)
 800340a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800340e:	3301      	adds	r3, #1
 8003410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800341a:	429a      	cmp	r2, r3
 800341c:	d3de      	bcc.n	80033dc <CheckForPromotion+0x1c>
		}
	}
}
 800341e:	bf00      	nop
 8003420:	bf00      	nop
 8003422:	3728      	adds	r7, #40	; 0x28
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	20000588 	.word	0x20000588

0800342c <UpdateCastleFlags>:

static void UpdateCastleFlags()
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
	// If any rooks moved, flag them as not castle-able
	if (CanA1Castle && !IsPiecePresent(A1_COORDINATE))
 8003430:	4b2d      	ldr	r3, [pc, #180]	; (80034e8 <UpdateCastleFlags+0xbc>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <UpdateCastleFlags+0x22>
 8003438:	2100      	movs	r1, #0
 800343a:	2000      	movs	r0, #0
 800343c:	f000 f994 	bl	8003768 <IsPiecePresent>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d103      	bne.n	800344e <UpdateCastleFlags+0x22>
	{
		CanA1Castle = 0;
 8003446:	4b28      	ldr	r3, [pc, #160]	; (80034e8 <UpdateCastleFlags+0xbc>)
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]
 800344c:	e04a      	b.n	80034e4 <UpdateCastleFlags+0xb8>
	}
	else if (CanH1Castle && !IsPiecePresent(H1_COORDINATE))
 800344e:	4b27      	ldr	r3, [pc, #156]	; (80034ec <UpdateCastleFlags+0xc0>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <UpdateCastleFlags+0x40>
 8003456:	2107      	movs	r1, #7
 8003458:	2000      	movs	r0, #0
 800345a:	f000 f985 	bl	8003768 <IsPiecePresent>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d103      	bne.n	800346c <UpdateCastleFlags+0x40>
	{
		CanH1Castle = 0;
 8003464:	4b21      	ldr	r3, [pc, #132]	; (80034ec <UpdateCastleFlags+0xc0>)
 8003466:	2200      	movs	r2, #0
 8003468:	701a      	strb	r2, [r3, #0]
 800346a:	e03b      	b.n	80034e4 <UpdateCastleFlags+0xb8>
	}
	else if (CanA8Castle && !IsPiecePresent(A8_COORDINATE))
 800346c:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <UpdateCastleFlags+0xc4>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <UpdateCastleFlags+0x5e>
 8003474:	2100      	movs	r1, #0
 8003476:	2007      	movs	r0, #7
 8003478:	f000 f976 	bl	8003768 <IsPiecePresent>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d103      	bne.n	800348a <UpdateCastleFlags+0x5e>
	{
		CanA8Castle = 0;
 8003482:	4b1b      	ldr	r3, [pc, #108]	; (80034f0 <UpdateCastleFlags+0xc4>)
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]
 8003488:	e02c      	b.n	80034e4 <UpdateCastleFlags+0xb8>
	}
	else if (CanH8Castle && !IsPiecePresent(H8_COORDINATE))
 800348a:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <UpdateCastleFlags+0xc8>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <UpdateCastleFlags+0x7c>
 8003492:	2107      	movs	r1, #7
 8003494:	2007      	movs	r0, #7
 8003496:	f000 f967 	bl	8003768 <IsPiecePresent>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d103      	bne.n	80034a8 <UpdateCastleFlags+0x7c>
	{
		CanH8Castle = 0;
 80034a0:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <UpdateCastleFlags+0xc8>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	e01d      	b.n	80034e4 <UpdateCastleFlags+0xb8>
	}
	// If any kings moved, flag them as not castle-able
	else if (CanWhiteKingCastle && !IsPiecePresent(E1_COORDINATE))
 80034a8:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <UpdateCastleFlags+0xcc>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <UpdateCastleFlags+0x9a>
 80034b0:	2104      	movs	r1, #4
 80034b2:	2000      	movs	r0, #0
 80034b4:	f000 f958 	bl	8003768 <IsPiecePresent>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d103      	bne.n	80034c6 <UpdateCastleFlags+0x9a>
	{
		CanWhiteKingCastle = 0;
 80034be:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <UpdateCastleFlags+0xcc>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	701a      	strb	r2, [r3, #0]
 80034c4:	e00e      	b.n	80034e4 <UpdateCastleFlags+0xb8>
	}
	else if (CanBlackKingCastle && !IsPiecePresent(E8_COORDINATE))
 80034c6:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <UpdateCastleFlags+0xd0>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <UpdateCastleFlags+0xb8>
 80034ce:	2104      	movs	r1, #4
 80034d0:	2007      	movs	r0, #7
 80034d2:	f000 f949 	bl	8003768 <IsPiecePresent>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d103      	bne.n	80034e4 <UpdateCastleFlags+0xb8>
	{
		CanBlackKingCastle = 0;
 80034dc:	4b07      	ldr	r3, [pc, #28]	; (80034fc <UpdateCastleFlags+0xd0>)
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
	}
}
 80034e2:	e7ff      	b.n	80034e4 <UpdateCastleFlags+0xb8>
 80034e4:	bf00      	nop
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	20000696 	.word	0x20000696
 80034ec:	20000697 	.word	0x20000697
 80034f0:	20000698 	.word	0x20000698
 80034f4:	20000699 	.word	0x20000699
 80034f8:	2000069a 	.word	0x2000069a
 80034fc:	2000069b 	.word	0x2000069b

08003500 <GetPiecesForTeam>:

static void GetPiecesForTeam(enum PieceOwner team, enum PieceType type, struct PieceCoordinate* pieces, uint8_t* numPieces)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	60ba      	str	r2, [r7, #8]
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	4603      	mov	r3, r0
 800350c:	73fb      	strb	r3, [r7, #15]
 800350e:	460b      	mov	r3, r1
 8003510:	73bb      	strb	r3, [r7, #14]
	*numPieces = 0;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]
	for (uint8_t row = 0; row < NUM_ROWS; row++)
 8003518:	2300      	movs	r3, #0
 800351a:	75fb      	strb	r3, [r7, #23]
 800351c:	e02d      	b.n	800357a <GetPiecesForTeam+0x7a>
	{
		for (uint8_t col = 0; col < NUM_COLS; col++)
 800351e:	2300      	movs	r3, #0
 8003520:	75bb      	strb	r3, [r7, #22]
 8003522:	e024      	b.n	800356e <GetPiecesForTeam+0x6e>
		{
			struct PieceCoordinate pieceCoordinate = { Chessboard[row][col], row, col };
 8003524:	7dfa      	ldrb	r2, [r7, #23]
 8003526:	7dbb      	ldrb	r3, [r7, #22]
 8003528:	4918      	ldr	r1, [pc, #96]	; (800358c <GetPiecesForTeam+0x8c>)
 800352a:	00d2      	lsls	r2, r2, #3
 800352c:	4413      	add	r3, r2
 800352e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003532:	823b      	strh	r3, [r7, #16]
 8003534:	7dfb      	ldrb	r3, [r7, #23]
 8003536:	74bb      	strb	r3, [r7, #18]
 8003538:	7dbb      	ldrb	r3, [r7, #22]
 800353a:	74fb      	strb	r3, [r7, #19]
			if (pieceCoordinate.piece.owner == team && pieceCoordinate.piece.type == type)
 800353c:	7c7b      	ldrb	r3, [r7, #17]
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	429a      	cmp	r2, r3
 8003542:	d111      	bne.n	8003568 <GetPiecesForTeam+0x68>
 8003544:	7c3b      	ldrb	r3, [r7, #16]
 8003546:	7bba      	ldrb	r2, [r7, #14]
 8003548:	429a      	cmp	r2, r3
 800354a:	d10d      	bne.n	8003568 <GetPiecesForTeam+0x68>
			{
				pieces[(*numPieces)++] = pieceCoordinate;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	b2d1      	uxtb	r1, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	7011      	strb	r1, [r2, #0]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	4413      	add	r3, r2
 800355e:	461a      	mov	r2, r3
 8003560:	f107 0310 	add.w	r3, r7, #16
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	6010      	str	r0, [r2, #0]
		for (uint8_t col = 0; col < NUM_COLS; col++)
 8003568:	7dbb      	ldrb	r3, [r7, #22]
 800356a:	3301      	adds	r3, #1
 800356c:	75bb      	strb	r3, [r7, #22]
 800356e:	7dbb      	ldrb	r3, [r7, #22]
 8003570:	2b07      	cmp	r3, #7
 8003572:	d9d7      	bls.n	8003524 <GetPiecesForTeam+0x24>
	for (uint8_t row = 0; row < NUM_ROWS; row++)
 8003574:	7dfb      	ldrb	r3, [r7, #23]
 8003576:	3301      	adds	r3, #1
 8003578:	75fb      	strb	r3, [r7, #23]
 800357a:	7dfb      	ldrb	r3, [r7, #23]
 800357c:	2b07      	cmp	r3, #7
 800357e:	d9ce      	bls.n	800351e <GetPiecesForTeam+0x1e>
			}
		}
	}
}
 8003580:	bf00      	nop
 8003582:	bf00      	nop
 8003584:	371c      	adds	r7, #28
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr
 800358c:	20000508 	.word	0x20000508

08003590 <PawnReachedEnd>:

uint8_t PawnReachedEnd(struct PieceCoordinate pieceCoordinate)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	uint8_t finalRow = CurrentTurn == WHITE ? 7 : 0;
 8003598:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <PawnReachedEnd+0x44>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <PawnReachedEnd+0x14>
 80035a0:	2307      	movs	r3, #7
 80035a2:	e000      	b.n	80035a6 <PawnReachedEnd+0x16>
 80035a4:	2300      	movs	r3, #0
 80035a6:	73fb      	strb	r3, [r7, #15]
	return (pieceCoordinate.piece.owner == CurrentTurn) && (pieceCoordinate.piece.type == PAWN) && (pieceCoordinate.row == finalRow);
 80035a8:	797a      	ldrb	r2, [r7, #5]
 80035aa:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <PawnReachedEnd+0x44>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d108      	bne.n	80035c4 <PawnReachedEnd+0x34>
 80035b2:	793b      	ldrb	r3, [r7, #4]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d105      	bne.n	80035c4 <PawnReachedEnd+0x34>
 80035b8:	79bb      	ldrb	r3, [r7, #6]
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d101      	bne.n	80035c4 <PawnReachedEnd+0x34>
 80035c0:	2301      	movs	r3, #1
 80035c2:	e000      	b.n	80035c6 <PawnReachedEnd+0x36>
 80035c4:	2300      	movs	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	20000588 	.word	0x20000588

080035d8 <PieceExists>:

inline uint8_t PieceExists(struct PieceCoordinate pieceCoordinate)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	return !IsPieceCoordinateEqual(pieceCoordinate, EMPTY_PIECE_COORDINATE);
 80035e0:	4b07      	ldr	r3, [pc, #28]	; (8003600 <PieceExists+0x28>)
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f8db 	bl	80037a0 <IsPieceCoordinateEqual>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000010 	.word	0x20000010

08003604 <ClearPiece>:

inline void ClearPiece(struct PieceCoordinate* pieceCoordinate)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
	*pieceCoordinate = EMPTY_PIECE_COORDINATE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a04      	ldr	r2, [pc, #16]	; (8003620 <ClearPiece+0x1c>)
 8003610:	6810      	ldr	r0, [r2, #0]
 8003612:	6018      	str	r0, [r3, #0]
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	20000010 	.word	0x20000010

08003624 <SetPiece>:

inline void SetPiece(uint8_t row, uint8_t column, struct Piece piece)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	803a      	strh	r2, [r7, #0]
 800362e:	71fb      	strb	r3, [r7, #7]
 8003630:	460b      	mov	r3, r1
 8003632:	71bb      	strb	r3, [r7, #6]
	Chessboard[row][column] = piece;
 8003634:	79fa      	ldrb	r2, [r7, #7]
 8003636:	79bb      	ldrb	r3, [r7, #6]
 8003638:	4905      	ldr	r1, [pc, #20]	; (8003650 <SetPiece+0x2c>)
 800363a:	00d2      	lsls	r2, r2, #3
 800363c:	4413      	add	r3, r2
 800363e:	883a      	ldrh	r2, [r7, #0]
 8003640:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	20000508 	.word	0x20000508

08003654 <SetPieceCoordinate>:

inline void SetPieceCoordinate(struct PieceCoordinate pieceCoordinate)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	Chessboard[pieceCoordinate.row][pieceCoordinate.column] = pieceCoordinate.piece;
 800365c:	79bb      	ldrb	r3, [r7, #6]
 800365e:	79fa      	ldrb	r2, [r7, #7]
 8003660:	4905      	ldr	r1, [pc, #20]	; (8003678 <SetPieceCoordinate+0x24>)
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4413      	add	r3, r2
 8003666:	88ba      	ldrh	r2, [r7, #4]
 8003668:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	20000508 	.word	0x20000508

0800367c <GetPiece>:

inline struct Piece GetPiece(uint8_t row, uint8_t column)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	460a      	mov	r2, r1
 8003686:	71fb      	strb	r3, [r7, #7]
 8003688:	4613      	mov	r3, r2
 800368a:	71bb      	strb	r3, [r7, #6]
	return Chessboard[row][column];
 800368c:	79fa      	ldrb	r2, [r7, #7]
 800368e:	79bb      	ldrb	r3, [r7, #6]
 8003690:	4908      	ldr	r1, [pc, #32]	; (80036b4 <GetPiece+0x38>)
 8003692:	00d2      	lsls	r2, r2, #3
 8003694:	4413      	add	r3, r2
 8003696:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800369a:	81bb      	strh	r3, [r7, #12]
 800369c:	2300      	movs	r3, #0
 800369e:	7b3a      	ldrb	r2, [r7, #12]
 80036a0:	f362 0307 	bfi	r3, r2, #0, #8
 80036a4:	7b7a      	ldrb	r2, [r7, #13]
 80036a6:	f362 230f 	bfi	r3, r2, #8, #8
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr
 80036b4:	20000508 	.word	0x20000508

080036b8 <GetPieceCoordinate>:

inline struct PieceCoordinate GetPieceCoordinate(uint8_t row, uint8_t column)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	460a      	mov	r2, r1
 80036c2:	71fb      	strb	r3, [r7, #7]
 80036c4:	4613      	mov	r3, r2
 80036c6:	71bb      	strb	r3, [r7, #6]
	struct PieceCoordinate pieceCoordinate = { GetPiece(row, column), row, column };
 80036c8:	79ba      	ldrb	r2, [r7, #6]
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	4611      	mov	r1, r2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff ffd4 	bl	800367c <GetPiece>
 80036d4:	4603      	mov	r3, r0
 80036d6:	813b      	strh	r3, [r7, #8]
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	72bb      	strb	r3, [r7, #10]
 80036dc:	79bb      	ldrb	r3, [r7, #6]
 80036de:	72fb      	strb	r3, [r7, #11]
	return pieceCoordinate;
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	2300      	movs	r3, #0
 80036e6:	7b3a      	ldrb	r2, [r7, #12]
 80036e8:	f362 0307 	bfi	r3, r2, #0, #8
 80036ec:	7b7a      	ldrb	r2, [r7, #13]
 80036ee:	f362 230f 	bfi	r3, r2, #8, #8
 80036f2:	7bba      	ldrb	r2, [r7, #14]
 80036f4:	f362 4317 	bfi	r3, r2, #16, #8
 80036f8:	7bfa      	ldrb	r2, [r7, #15]
 80036fa:	f362 631f 	bfi	r3, r2, #24, #8
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <DidSameTeamPickupLast>:
{
	return LastTransitionType == PICKUP && LastPickedUpPiece.piece.owner != piece.owner;
}

inline uint8_t DidSameTeamPickupLast(struct Piece piece)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	80b8      	strh	r0, [r7, #4]
	return LastTransitionType == PICKUP && LastPickedUpPiece.piece.owner == piece.owner;
 8003710:	4b08      	ldr	r3, [pc, #32]	; (8003734 <DidSameTeamPickupLast+0x2c>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d106      	bne.n	8003726 <DidSameTeamPickupLast+0x1e>
 8003718:	4b07      	ldr	r3, [pc, #28]	; (8003738 <DidSameTeamPickupLast+0x30>)
 800371a:	785a      	ldrb	r2, [r3, #1]
 800371c:	797b      	ldrb	r3, [r7, #5]
 800371e:	429a      	cmp	r2, r3
 8003720:	d101      	bne.n	8003726 <DidSameTeamPickupLast+0x1e>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <DidSameTeamPickupLast+0x20>
 8003726:	2300      	movs	r3, #0
 8003728:	b2db      	uxtb	r3, r3
}
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr
 8003734:	20000589 	.word	0x20000589
 8003738:	2000058c 	.word	0x2000058c

0800373c <IsPieceEqual>:

inline uint8_t IsPieceEqual(struct Piece piece1, struct Piece piece2)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	80b8      	strh	r0, [r7, #4]
 8003744:	8039      	strh	r1, [r7, #0]
	return piece1.owner == piece2.owner
 8003746:	797a      	ldrb	r2, [r7, #5]
 8003748:	787b      	ldrb	r3, [r7, #1]
		&& piece1.type == piece2.type;
 800374a:	429a      	cmp	r2, r3
 800374c:	d105      	bne.n	800375a <IsPieceEqual+0x1e>
 800374e:	793a      	ldrb	r2, [r7, #4]
 8003750:	783b      	ldrb	r3, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d101      	bne.n	800375a <IsPieceEqual+0x1e>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <IsPieceEqual+0x20>
 800375a:	2300      	movs	r3, #0
 800375c:	b2db      	uxtb	r3, r3
}
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <IsPiecePresent>:

uint8_t IsPiecePresent(uint8_t row, uint8_t column)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	460a      	mov	r2, r1
 8003772:	71fb      	strb	r3, [r7, #7]
 8003774:	4613      	mov	r3, r2
 8003776:	71bb      	strb	r3, [r7, #6]
	return Chessboard[row][column].type != NONE;
 8003778:	79fa      	ldrb	r2, [r7, #7]
 800377a:	79bb      	ldrb	r3, [r7, #6]
 800377c:	4907      	ldr	r1, [pc, #28]	; (800379c <IsPiecePresent+0x34>)
 800377e:	00d2      	lsls	r2, r2, #3
 8003780:	4413      	add	r3, r2
 8003782:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8003786:	2b00      	cmp	r3, #0
 8003788:	bf14      	ite	ne
 800378a:	2301      	movne	r3, #1
 800378c:	2300      	moveq	r3, #0
 800378e:	b2db      	uxtb	r3, r3
}
 8003790:	4618      	mov	r0, r3
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	20000508 	.word	0x20000508

080037a0 <IsPieceCoordinateEqual>:

inline uint8_t IsPieceCoordinateEqual(struct PieceCoordinate pieceCoordinate1, struct PieceCoordinate pieceCoordinate2)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
	return IsPieceEqual(pieceCoordinate1.piece, pieceCoordinate2.piece)
 80037aa:	6839      	ldr	r1, [r7, #0]
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff ffc5 	bl	800373c <IsPieceEqual>
 80037b2:	4603      	mov	r3, r0
		&& pieceCoordinate1.row == pieceCoordinate2.row
		&& pieceCoordinate1.column == pieceCoordinate2.column;
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d009      	beq.n	80037cc <IsPieceCoordinateEqual+0x2c>
		&& pieceCoordinate1.row == pieceCoordinate2.row
 80037b8:	79ba      	ldrb	r2, [r7, #6]
 80037ba:	78bb      	ldrb	r3, [r7, #2]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d105      	bne.n	80037cc <IsPieceCoordinateEqual+0x2c>
		&& pieceCoordinate1.column == pieceCoordinate2.column;
 80037c0:	79fa      	ldrb	r2, [r7, #7]
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d101      	bne.n	80037cc <IsPieceCoordinateEqual+0x2c>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <IsPieceCoordinateEqual+0x2e>
 80037cc:	2300      	movs	r3, #0
 80037ce:	b2db      	uxtb	r3, r3
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <IsPieceCoordinateSamePosition>:

inline uint8_t IsPieceCoordinateSamePosition(struct PieceCoordinate pieceCoordinate1, struct PieceCoordinate pieceCoordinate2)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
	return pieceCoordinate1.row == pieceCoordinate2.row && pieceCoordinate1.column == pieceCoordinate2.column;
 80037e2:	79ba      	ldrb	r2, [r7, #6]
 80037e4:	78bb      	ldrb	r3, [r7, #2]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d105      	bne.n	80037f6 <IsPieceCoordinateSamePosition+0x1e>
 80037ea:	79fa      	ldrb	r2, [r7, #7]
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d101      	bne.n	80037f6 <IsPieceCoordinateSamePosition+0x1e>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <IsPieceCoordinateSamePosition+0x20>
 80037f6:	2300      	movs	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr

08003804 <WaveplayerInit>:
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
 800380e:	f107 030c 	add.w	r3, r7, #12
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	605a      	str	r2, [r3, #4]
 8003818:	609a      	str	r2, [r3, #8]
 800381a:	60da      	str	r2, [r3, #12]
 800381c:	611a      	str	r2, [r3, #16]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a29      	ldr	r2, [pc, #164]	; (80038c8 <WaveplayerInit+0xc4>)
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f44f 7282 	mov.w	r2, #260	; 0x104
 800382a:	605a      	str	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	609a      	str	r2, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	60da      	str	r2, [r3, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	615a      	str	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800384a:	619a      	str	r2, [r3, #24]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2210      	movs	r2, #16
 8003850:	61da      	str	r2, [r3, #28]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	621a      	str	r2, [r3, #32]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	625a      	str	r2, [r3, #36]	; 0x24
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	629a      	str	r2, [r3, #40]	; 0x28
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	220a      	movs	r2, #10
 8003868:	62da      	str	r2, [r3, #44]	; 0x2c
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f001 face 	bl	8004e0c <HAL_SPI_Init>
 8003870:	4b16      	ldr	r3, [pc, #88]	; (80038cc <WaveplayerInit+0xc8>)
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	4a15      	ldr	r2, [pc, #84]	; (80038cc <WaveplayerInit+0xc8>)
 8003876:	f043 0308 	orr.w	r3, r3, #8
 800387a:	61d3      	str	r3, [r2, #28]
 800387c:	4b13      	ldr	r3, [pc, #76]	; (80038cc <WaveplayerInit+0xc8>)
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2200      	movs	r2, #0
 800388a:	2101      	movs	r1, #1
 800388c:	4810      	ldr	r0, [pc, #64]	; (80038d0 <WaveplayerInit+0xcc>)
 800388e:	f000 fd22 	bl	80042d6 <HAL_GPIO_WritePin>
 8003892:	2301      	movs	r3, #1
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	2301      	movs	r3, #1
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	2300      	movs	r3, #0
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	f107 030c 	add.w	r3, r7, #12
 80038a6:	4619      	mov	r1, r3
 80038a8:	4809      	ldr	r0, [pc, #36]	; (80038d0 <WaveplayerInit+0xcc>)
 80038aa:	f000 fb6d 	bl	8003f88 <HAL_GPIO_Init>
 80038ae:	f002 fb09 	bl	8005ec4 <MX_FATFS_Init>
 80038b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038b6:	2180      	movs	r1, #128	; 0x80
 80038b8:	4806      	ldr	r0, [pc, #24]	; (80038d4 <WaveplayerInit+0xd0>)
 80038ba:	f003 f8c7 	bl	8006a4c <memset>
 80038be:	bf00      	nop
 80038c0:	3720      	adds	r7, #32
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40003c00 	.word	0x40003c00
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40020c00 	.word	0x40020c00
 80038d4:	200006a8 	.word	0x200006a8

080038d8 <Reset_Handler>:
 80038d8:	480c      	ldr	r0, [pc, #48]	; (800390c <LoopFillZerobss+0x12>)
 80038da:	490d      	ldr	r1, [pc, #52]	; (8003910 <LoopFillZerobss+0x16>)
 80038dc:	4a0d      	ldr	r2, [pc, #52]	; (8003914 <LoopFillZerobss+0x1a>)
 80038de:	2300      	movs	r3, #0
 80038e0:	e002      	b.n	80038e8 <LoopCopyDataInit>

080038e2 <CopyDataInit>:
 80038e2:	58d4      	ldr	r4, [r2, r3]
 80038e4:	50c4      	str	r4, [r0, r3]
 80038e6:	3304      	adds	r3, #4

080038e8 <LoopCopyDataInit>:
 80038e8:	18c4      	adds	r4, r0, r3
 80038ea:	428c      	cmp	r4, r1
 80038ec:	d3f9      	bcc.n	80038e2 <CopyDataInit>
 80038ee:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <LoopFillZerobss+0x1e>)
 80038f0:	4c0a      	ldr	r4, [pc, #40]	; (800391c <LoopFillZerobss+0x22>)
 80038f2:	2300      	movs	r3, #0
 80038f4:	e001      	b.n	80038fa <LoopFillZerobss>

080038f6 <FillZerobss>:
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	3204      	adds	r2, #4

080038fa <LoopFillZerobss>:
 80038fa:	42a2      	cmp	r2, r4
 80038fc:	d3fb      	bcc.n	80038f6 <FillZerobss>
 80038fe:	f7fe fda3 	bl	8002448 <SystemInit>
 8003902:	f003 f87f 	bl	8006a04 <__libc_init_array>
 8003906:	f7fd f86f 	bl	80009e8 <main>
 800390a:	4770      	bx	lr
 800390c:	20000000 	.word	0x20000000
 8003910:	200000b8 	.word	0x200000b8
 8003914:	08006b28 	.word	0x08006b28
 8003918:	200000b8 	.word	0x200000b8
 800391c:	20001fd8 	.word	0x20001fd8

08003920 <ADC1_IRQHandler>:
 8003920:	e7fe      	b.n	8003920 <ADC1_IRQHandler>

08003922 <HAL_Init>:
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	2300      	movs	r3, #0
 800392a:	71fb      	strb	r3, [r7, #7]
 800392c:	2003      	movs	r0, #3
 800392e:	f000 f955 	bl	8003bdc <HAL_NVIC_SetPriorityGrouping>
 8003932:	200f      	movs	r0, #15
 8003934:	f000 f80e 	bl	8003954 <HAL_InitTick>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <HAL_Init+0x22>
 800393e:	2301      	movs	r3, #1
 8003940:	71fb      	strb	r3, [r7, #7]
 8003942:	e001      	b.n	8003948 <HAL_Init+0x26>
 8003944:	f7fe fb42 	bl	8001fcc <HAL_MspInit>
 8003948:	79fb      	ldrb	r3, [r7, #7]
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <HAL_InitTick>:
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	2300      	movs	r3, #0
 800395e:	73fb      	strb	r3, [r7, #15]
 8003960:	4b16      	ldr	r3, [pc, #88]	; (80039bc <HAL_InitTick+0x68>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d022      	beq.n	80039ae <HAL_InitTick+0x5a>
 8003968:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <HAL_InitTick+0x6c>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b13      	ldr	r3, [pc, #76]	; (80039bc <HAL_InitTick+0x68>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003974:	fbb1 f3f3 	udiv	r3, r1, r3
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	4618      	mov	r0, r3
 800397e:	f000 f962 	bl	8003c46 <HAL_SYSTICK_Config>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10f      	bne.n	80039a8 <HAL_InitTick+0x54>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b0f      	cmp	r3, #15
 800398c:	d809      	bhi.n	80039a2 <HAL_InitTick+0x4e>
 800398e:	2200      	movs	r2, #0
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	f04f 30ff 	mov.w	r0, #4294967295
 8003996:	f000 f92c 	bl	8003bf2 <HAL_NVIC_SetPriority>
 800399a:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <HAL_InitTick+0x70>)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	e007      	b.n	80039b2 <HAL_InitTick+0x5e>
 80039a2:	2301      	movs	r3, #1
 80039a4:	73fb      	strb	r3, [r7, #15]
 80039a6:	e004      	b.n	80039b2 <HAL_InitTick+0x5e>
 80039a8:	2301      	movs	r3, #1
 80039aa:	73fb      	strb	r3, [r7, #15]
 80039ac:	e001      	b.n	80039b2 <HAL_InitTick+0x5e>
 80039ae:	2301      	movs	r3, #1
 80039b0:	73fb      	strb	r3, [r7, #15]
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	2000009c 	.word	0x2000009c
 80039c0:	20000008 	.word	0x20000008
 80039c4:	20000098 	.word	0x20000098

080039c8 <HAL_IncTick>:
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_IncTick+0x1c>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_IncTick+0x20>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4413      	add	r3, r2
 80039d6:	4a03      	ldr	r2, [pc, #12]	; (80039e4 <HAL_IncTick+0x1c>)
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	bf00      	nop
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20001b64 	.word	0x20001b64
 80039e8:	2000009c 	.word	0x2000009c

080039ec <HAL_GetTick>:
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	4b02      	ldr	r3, [pc, #8]	; (80039fc <HAL_GetTick+0x10>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr
 80039fc:	20001b64 	.word	0x20001b64

08003a00 <HAL_Delay>:
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	f7ff fff0 	bl	80039ec <HAL_GetTick>
 8003a0c:	60b8      	str	r0, [r7, #8]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a18:	d004      	beq.n	8003a24 <HAL_Delay+0x24>
 8003a1a:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <HAL_Delay+0x40>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4413      	add	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	bf00      	nop
 8003a26:	f7ff ffe1 	bl	80039ec <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d8f7      	bhi.n	8003a26 <HAL_Delay+0x26>
 8003a36:	bf00      	nop
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	2000009c 	.word	0x2000009c

08003a44 <__NVIC_SetPriorityGrouping>:
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <__NVIC_SetPriorityGrouping+0x44>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	60bb      	str	r3, [r7, #8]
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a60:	4013      	ands	r3, r2
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	021a      	lsls	r2, r3, #8
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	4a04      	ldr	r2, [pc, #16]	; (8003a88 <__NVIC_SetPriorityGrouping+0x44>)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	60d3      	str	r3, [r2, #12]
 8003a7c:	bf00      	nop
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	e000ed00 	.word	0xe000ed00

08003a8c <__NVIC_GetPriorityGrouping>:
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	0a1b      	lsrs	r3, r3, #8
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	e000ed00 	.word	0xe000ed00

08003aa8 <__NVIC_EnableIRQ>:
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	71fb      	strb	r3, [r7, #7]
 8003ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	db0b      	blt.n	8003ad2 <__NVIC_EnableIRQ+0x2a>
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	f003 021f 	and.w	r2, r3, #31
 8003ac0:	4906      	ldr	r1, [pc, #24]	; (8003adc <__NVIC_EnableIRQ+0x34>)
 8003ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	2001      	movs	r0, #1
 8003aca:	fa00 f202 	lsl.w	r2, r0, r2
 8003ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr
 8003adc:	e000e100 	.word	0xe000e100

08003ae0 <__NVIC_SetPriority>:
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	6039      	str	r1, [r7, #0]
 8003aea:	71fb      	strb	r3, [r7, #7]
 8003aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	db0a      	blt.n	8003b0a <__NVIC_SetPriority+0x2a>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	490c      	ldr	r1, [pc, #48]	; (8003b2c <__NVIC_SetPriority+0x4c>)
 8003afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afe:	0112      	lsls	r2, r2, #4
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	440b      	add	r3, r1
 8003b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003b08:	e00a      	b.n	8003b20 <__NVIC_SetPriority+0x40>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	4908      	ldr	r1, [pc, #32]	; (8003b30 <__NVIC_SetPriority+0x50>)
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	3b04      	subs	r3, #4
 8003b18:	0112      	lsls	r2, r2, #4
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	761a      	strb	r2, [r3, #24]
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	e000e100 	.word	0xe000e100
 8003b30:	e000ed00 	.word	0xe000ed00

08003b34 <NVIC_EncodePriority>:
 8003b34:	b480      	push	{r7}
 8003b36:	b089      	sub	sp, #36	; 0x24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	61fb      	str	r3, [r7, #28]
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f1c3 0307 	rsb	r3, r3, #7
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	bf28      	it	cs
 8003b52:	2304      	movcs	r3, #4
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	2b06      	cmp	r3, #6
 8003b5c:	d902      	bls.n	8003b64 <NVIC_EncodePriority+0x30>
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	3b03      	subs	r3, #3
 8003b62:	e000      	b.n	8003b66 <NVIC_EncodePriority+0x32>
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	f04f 32ff 	mov.w	r2, #4294967295
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	43da      	mvns	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	401a      	ands	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	fa01 f303 	lsl.w	r3, r1, r3
 8003b86:	43d9      	mvns	r1, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	400b      	ands	r3, r1
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3724      	adds	r7, #36	; 0x24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr

08003b98 <SysTick_Config>:
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ba8:	d301      	bcc.n	8003bae <SysTick_Config+0x16>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e00f      	b.n	8003bce <SysTick_Config+0x36>
 8003bae:	4a0a      	ldr	r2, [pc, #40]	; (8003bd8 <SysTick_Config+0x40>)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	6053      	str	r3, [r2, #4]
 8003bb6:	210f      	movs	r1, #15
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbc:	f7ff ff90 	bl	8003ae0 <__NVIC_SetPriority>
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <SysTick_Config+0x40>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	609a      	str	r2, [r3, #8]
 8003bc6:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <SysTick_Config+0x40>)
 8003bc8:	2207      	movs	r2, #7
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	e000e010 	.word	0xe000e010

08003bdc <HAL_NVIC_SetPriorityGrouping>:
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff ff2d 	bl	8003a44 <__NVIC_SetPriorityGrouping>
 8003bea:	bf00      	nop
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_NVIC_SetPriority>:
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b086      	sub	sp, #24
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	607a      	str	r2, [r7, #4]
 8003bfe:	73fb      	strb	r3, [r7, #15]
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	f7ff ff42 	bl	8003a8c <__NVIC_GetPriorityGrouping>
 8003c08:	6178      	str	r0, [r7, #20]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	68b9      	ldr	r1, [r7, #8]
 8003c0e:	6978      	ldr	r0, [r7, #20]
 8003c10:	f7ff ff90 	bl	8003b34 <NVIC_EncodePriority>
 8003c14:	4602      	mov	r2, r0
 8003c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff ff5f 	bl	8003ae0 <__NVIC_SetPriority>
 8003c22:	bf00      	nop
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_NVIC_EnableIRQ>:
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	4603      	mov	r3, r0
 8003c32:	71fb      	strb	r3, [r7, #7]
 8003c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff ff35 	bl	8003aa8 <__NVIC_EnableIRQ>
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_SYSTICK_Config>:
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff ffa2 	bl	8003b98 <SysTick_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_DAC_Init>:
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_DAC_Init+0x12>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e014      	b.n	8003c9a <HAL_DAC_Init+0x3c>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	791b      	ldrb	r3, [r3, #4]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d105      	bne.n	8003c86 <HAL_DAC_Init+0x28>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	715a      	strb	r2, [r3, #5]
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7fe f9d1 	bl	8002028 <HAL_DAC_MspInit>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2202      	movs	r2, #2
 8003c8a:	711a      	strb	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	611a      	str	r2, [r3, #16]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	711a      	strb	r2, [r3, #4]
 8003c98:	2300      	movs	r3, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_DAC_ConfigChannel>:
 8003ca2:	b480      	push	{r7}
 8003ca4:	b087      	sub	sp, #28
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	607a      	str	r2, [r7, #4]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	795b      	ldrb	r3, [r3, #5]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <HAL_DAC_ConfigChannel+0x18>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e03c      	b.n	8003d34 <HAL_DAC_ConfigChannel+0x92>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	715a      	strb	r2, [r3, #5]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	711a      	strb	r2, [r3, #4]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6819      	ldr	r1, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f003 0310 	and.w	r3, r3, #16
 8003d16:	22c0      	movs	r2, #192	; 0xc0
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	43da      	mvns	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	400a      	ands	r2, r1
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	711a      	strb	r2, [r3, #4]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	715a      	strb	r2, [r3, #5]
 8003d32:	2300      	movs	r3, #0
 8003d34:	4618      	mov	r0, r3
 8003d36:	371c      	adds	r7, #28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr
	...

08003d40 <HAL_DMA_Init>:
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_DMA_Init+0x12>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e059      	b.n	8003e06 <HAL_DMA_Init+0xc6>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	4b2d      	ldr	r3, [pc, #180]	; (8003e10 <HAL_DMA_Init+0xd0>)
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d80f      	bhi.n	8003d7e <HAL_DMA_Init+0x3e>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	4b2b      	ldr	r3, [pc, #172]	; (8003e14 <HAL_DMA_Init+0xd4>)
 8003d66:	4413      	add	r3, r2
 8003d68:	4a2b      	ldr	r2, [pc, #172]	; (8003e18 <HAL_DMA_Init+0xd8>)
 8003d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6e:	091b      	lsrs	r3, r3, #4
 8003d70:	009a      	lsls	r2, r3, #2
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	641a      	str	r2, [r3, #64]	; 0x40
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a28      	ldr	r2, [pc, #160]	; (8003e1c <HAL_DMA_Init+0xdc>)
 8003d7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d7c:	e00e      	b.n	8003d9c <HAL_DMA_Init+0x5c>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	461a      	mov	r2, r3
 8003d84:	4b26      	ldr	r3, [pc, #152]	; (8003e20 <HAL_DMA_Init+0xe0>)
 8003d86:	4413      	add	r3, r2
 8003d88:	4a23      	ldr	r2, [pc, #140]	; (8003e18 <HAL_DMA_Init+0xd8>)
 8003d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8e:	091b      	lsrs	r3, r3, #4
 8003d90:	009a      	lsls	r2, r3, #2
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a22      	ldr	r2, [pc, #136]	; (8003e24 <HAL_DMA_Init+0xe4>)
 8003d9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	639a      	str	r2, [r3, #56]	; 0x38
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2020 	strb.w	r2, [r3, #32]
 8003e04:	2300      	movs	r3, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr
 8003e10:	40026407 	.word	0x40026407
 8003e14:	bffd9ff8 	.word	0xbffd9ff8
 8003e18:	cccccccd 	.word	0xcccccccd
 8003e1c:	40026000 	.word	0x40026000
 8003e20:	bffd9bf8 	.word	0xbffd9bf8
 8003e24:	40026400 	.word	0x40026400

08003e28 <HAL_DMA_IRQHandler>:
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	f003 031c 	and.w	r3, r3, #28
 8003e48:	2204      	movs	r2, #4
 8003e4a:	409a      	lsls	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d026      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x7a>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d021      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x7a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0320 	and.w	r3, r3, #32
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d107      	bne.n	8003e7c <HAL_DMA_IRQHandler+0x54>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0204 	bic.w	r2, r2, #4
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	f003 021c 	and.w	r2, r3, #28
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e88:	2104      	movs	r1, #4
 8003e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e8e:	605a      	str	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d071      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x154>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	4798      	blx	r3
 8003ea0:	e06c      	b.n	8003f7c <HAL_DMA_IRQHandler+0x154>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	f003 031c 	and.w	r3, r3, #28
 8003eaa:	2202      	movs	r2, #2
 8003eac:	409a      	lsls	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d02e      	beq.n	8003f14 <HAL_DMA_IRQHandler+0xec>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d029      	beq.n	8003f14 <HAL_DMA_IRQHandler+0xec>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0320 	and.w	r3, r3, #32
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10b      	bne.n	8003ee6 <HAL_DMA_IRQHandler+0xbe>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 020a 	bic.w	r2, r2, #10
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	f003 021c 	and.w	r2, r3, #28
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef8:	605a      	str	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2020 	strb.w	r2, [r3, #32]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d038      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x154>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	4798      	blx	r3
 8003f12:	e033      	b.n	8003f7c <HAL_DMA_IRQHandler+0x154>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	f003 031c 	and.w	r3, r3, #28
 8003f1c:	2208      	movs	r2, #8
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d02a      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x156>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d025      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x156>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 020e 	bic.w	r2, r2, #14
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	f003 021c 	and.w	r2, r3, #28
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4e:	2101      	movs	r1, #1
 8003f50:	fa01 f202 	lsl.w	r2, r1, r2
 8003f54:	605a      	str	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	639a      	str	r2, [r3, #56]	; 0x38
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2020 	strb.w	r2, [r3, #32]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d004      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x156>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	4798      	blx	r3
 8003f7c:	bf00      	nop
 8003f7e:	bf00      	nop
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_GPIO_Init>:
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
 8003f92:	2300      	movs	r3, #0
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	e160      	b.n	8004262 <HAL_GPIO_Init+0x2da>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fac:	4013      	ands	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 8152 	beq.w	800425c <HAL_GPIO_Init+0x2d4>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d005      	beq.n	8003fd0 <HAL_GPIO_Init+0x48>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 0303 	and.w	r3, r3, #3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d130      	bne.n	8004032 <HAL_GPIO_Init+0xaa>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	2203      	movs	r2, #3
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	609a      	str	r2, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	2201      	movs	r2, #1
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	43db      	mvns	r3, r3
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4013      	ands	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	091b      	lsrs	r3, r3, #4
 800401c:	f003 0201 	and.w	r2, r3, #1
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	605a      	str	r2, [r3, #4]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	2b03      	cmp	r3, #3
 800403c:	d017      	beq.n	800406e <HAL_GPIO_Init+0xe6>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	2203      	movs	r2, #3
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	43db      	mvns	r3, r3
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4013      	ands	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d123      	bne.n	80040c2 <HAL_GPIO_Init+0x13a>
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	08da      	lsrs	r2, r3, #3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3208      	adds	r2, #8
 8004082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004086:	613b      	str	r3, [r7, #16]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	220f      	movs	r2, #15
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43db      	mvns	r3, r3
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4013      	ands	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	08da      	lsrs	r2, r3, #3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3208      	adds	r2, #8
 80040bc:	6939      	ldr	r1, [r7, #16]
 80040be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	2203      	movs	r2, #3
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	43db      	mvns	r3, r3
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4013      	ands	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f003 0203 	and.w	r2, r3, #3
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80ac 	beq.w	800425c <HAL_GPIO_Init+0x2d4>
 8004104:	4b5e      	ldr	r3, [pc, #376]	; (8004280 <HAL_GPIO_Init+0x2f8>)
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	4a5d      	ldr	r2, [pc, #372]	; (8004280 <HAL_GPIO_Init+0x2f8>)
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	6213      	str	r3, [r2, #32]
 8004110:	4b5b      	ldr	r3, [pc, #364]	; (8004280 <HAL_GPIO_Init+0x2f8>)
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	4a59      	ldr	r2, [pc, #356]	; (8004284 <HAL_GPIO_Init+0x2fc>)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	089b      	lsrs	r3, r3, #2
 8004122:	3302      	adds	r3, #2
 8004124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f003 0303 	and.w	r3, r3, #3
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	220f      	movs	r2, #15
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	43db      	mvns	r3, r3
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4013      	ands	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a51      	ldr	r2, [pc, #324]	; (8004288 <HAL_GPIO_Init+0x300>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d025      	beq.n	8004194 <HAL_GPIO_Init+0x20c>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a50      	ldr	r2, [pc, #320]	; (800428c <HAL_GPIO_Init+0x304>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d01f      	beq.n	8004190 <HAL_GPIO_Init+0x208>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a4f      	ldr	r2, [pc, #316]	; (8004290 <HAL_GPIO_Init+0x308>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d019      	beq.n	800418c <HAL_GPIO_Init+0x204>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a4e      	ldr	r2, [pc, #312]	; (8004294 <HAL_GPIO_Init+0x30c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d013      	beq.n	8004188 <HAL_GPIO_Init+0x200>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a4d      	ldr	r2, [pc, #308]	; (8004298 <HAL_GPIO_Init+0x310>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00d      	beq.n	8004184 <HAL_GPIO_Init+0x1fc>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a4c      	ldr	r2, [pc, #304]	; (800429c <HAL_GPIO_Init+0x314>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d007      	beq.n	8004180 <HAL_GPIO_Init+0x1f8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a4b      	ldr	r2, [pc, #300]	; (80042a0 <HAL_GPIO_Init+0x318>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d101      	bne.n	800417c <HAL_GPIO_Init+0x1f4>
 8004178:	2306      	movs	r3, #6
 800417a:	e00c      	b.n	8004196 <HAL_GPIO_Init+0x20e>
 800417c:	2307      	movs	r3, #7
 800417e:	e00a      	b.n	8004196 <HAL_GPIO_Init+0x20e>
 8004180:	2305      	movs	r3, #5
 8004182:	e008      	b.n	8004196 <HAL_GPIO_Init+0x20e>
 8004184:	2304      	movs	r3, #4
 8004186:	e006      	b.n	8004196 <HAL_GPIO_Init+0x20e>
 8004188:	2303      	movs	r3, #3
 800418a:	e004      	b.n	8004196 <HAL_GPIO_Init+0x20e>
 800418c:	2302      	movs	r3, #2
 800418e:	e002      	b.n	8004196 <HAL_GPIO_Init+0x20e>
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <HAL_GPIO_Init+0x20e>
 8004194:	2300      	movs	r3, #0
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	f002 0203 	and.w	r2, r2, #3
 800419c:	0092      	lsls	r2, r2, #2
 800419e:	4093      	lsls	r3, r2
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	4937      	ldr	r1, [pc, #220]	; (8004284 <HAL_GPIO_Init+0x2fc>)
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	089b      	lsrs	r3, r3, #2
 80041ac:	3302      	adds	r3, #2
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80041b4:	4b3b      	ldr	r3, [pc, #236]	; (80042a4 <HAL_GPIO_Init+0x31c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	43db      	mvns	r3, r3
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4013      	ands	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <HAL_GPIO_Init+0x250>
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	4a32      	ldr	r2, [pc, #200]	; (80042a4 <HAL_GPIO_Init+0x31c>)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <HAL_GPIO_Init+0x31c>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	43db      	mvns	r3, r3
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4013      	ands	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_GPIO_Init+0x27a>
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	4a28      	ldr	r2, [pc, #160]	; (80042a4 <HAL_GPIO_Init+0x31c>)
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	6053      	str	r3, [r2, #4]
 8004208:	4b26      	ldr	r3, [pc, #152]	; (80042a4 <HAL_GPIO_Init+0x31c>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	43db      	mvns	r3, r3
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4013      	ands	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_GPIO_Init+0x2a4>
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	4a1d      	ldr	r2, [pc, #116]	; (80042a4 <HAL_GPIO_Init+0x31c>)
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	6093      	str	r3, [r2, #8]
 8004232:	4b1c      	ldr	r3, [pc, #112]	; (80042a4 <HAL_GPIO_Init+0x31c>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	43db      	mvns	r3, r3
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4013      	ands	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_GPIO_Init+0x2ce>
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	4a13      	ldr	r2, [pc, #76]	; (80042a4 <HAL_GPIO_Init+0x31c>)
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	60d3      	str	r3, [r2, #12]
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	3301      	adds	r3, #1
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	f47f ae97 	bne.w	8003fa0 <HAL_GPIO_Init+0x18>
 8004272:	bf00      	nop
 8004274:	bf00      	nop
 8004276:	371c      	adds	r7, #28
 8004278:	46bd      	mov	sp, r7
 800427a:	bc80      	pop	{r7}
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40023800 	.word	0x40023800
 8004284:	40010000 	.word	0x40010000
 8004288:	40020000 	.word	0x40020000
 800428c:	40020400 	.word	0x40020400
 8004290:	40020800 	.word	0x40020800
 8004294:	40020c00 	.word	0x40020c00
 8004298:	40021000 	.word	0x40021000
 800429c:	40021400 	.word	0x40021400
 80042a0:	40021800 	.word	0x40021800
 80042a4:	40010400 	.word	0x40010400

080042a8 <HAL_GPIO_ReadPin>:
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	807b      	strh	r3, [r7, #2]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	887b      	ldrh	r3, [r7, #2]
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_GPIO_ReadPin+0x1e>
 80042c0:	2301      	movs	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
 80042c4:	e001      	b.n	80042ca <HAL_GPIO_ReadPin+0x22>
 80042c6:	2300      	movs	r3, #0
 80042c8:	73fb      	strb	r3, [r7, #15]
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	4618      	mov	r0, r3
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr

080042d6 <HAL_GPIO_WritePin>:
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	460b      	mov	r3, r1
 80042e0:	807b      	strh	r3, [r7, #2]
 80042e2:	4613      	mov	r3, r2
 80042e4:	707b      	strb	r3, [r7, #1]
 80042e6:	787b      	ldrb	r3, [r7, #1]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <HAL_GPIO_WritePin+0x1e>
 80042ec:	887a      	ldrh	r2, [r7, #2]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	619a      	str	r2, [r3, #24]
 80042f2:	e003      	b.n	80042fc <HAL_GPIO_WritePin+0x26>
 80042f4:	887b      	ldrh	r3, [r7, #2]
 80042f6:	041a      	lsls	r2, r3, #16
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	619a      	str	r2, [r3, #24]
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr
	...

08004308 <HAL_GPIO_EXTI_IRQHandler>:
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	80fb      	strh	r3, [r7, #6]
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	4013      	ands	r3, r2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d006      	beq.n	800432c <HAL_GPIO_EXTI_IRQHandler+0x24>
 800431e:	4a05      	ldr	r2, [pc, #20]	; (8004334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004320:	88fb      	ldrh	r3, [r7, #6]
 8004322:	6153      	str	r3, [r2, #20]
 8004324:	88fb      	ldrh	r3, [r7, #6]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fc fe5e 	bl	8000fe8 <HAL_GPIO_EXTI_Callback>
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40010400 	.word	0x40010400

08004338 <HAL_RCC_OscConfig>:
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_RCC_OscConfig+0x12>
 8004346:	2301      	movs	r3, #1
 8004348:	e31d      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 800434a:	4b94      	ldr	r3, [pc, #592]	; (800459c <HAL_RCC_OscConfig+0x264>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	4b91      	ldr	r3, [pc, #580]	; (800459c <HAL_RCC_OscConfig+0x264>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d07b      	beq.n	8004462 <HAL_RCC_OscConfig+0x12a>
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	2b08      	cmp	r3, #8
 800436e:	d006      	beq.n	800437e <HAL_RCC_OscConfig+0x46>
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	2b0c      	cmp	r3, #12
 8004374:	d10f      	bne.n	8004396 <HAL_RCC_OscConfig+0x5e>
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800437c:	d10b      	bne.n	8004396 <HAL_RCC_OscConfig+0x5e>
 800437e:	4b87      	ldr	r3, [pc, #540]	; (800459c <HAL_RCC_OscConfig+0x264>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d06a      	beq.n	8004460 <HAL_RCC_OscConfig+0x128>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d166      	bne.n	8004460 <HAL_RCC_OscConfig+0x128>
 8004392:	2301      	movs	r3, #1
 8004394:	e2f7      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d106      	bne.n	80043ac <HAL_RCC_OscConfig+0x74>
 800439e:	4b7f      	ldr	r3, [pc, #508]	; (800459c <HAL_RCC_OscConfig+0x264>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a7e      	ldr	r2, [pc, #504]	; (800459c <HAL_RCC_OscConfig+0x264>)
 80043a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e02d      	b.n	8004408 <HAL_RCC_OscConfig+0xd0>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10c      	bne.n	80043ce <HAL_RCC_OscConfig+0x96>
 80043b4:	4b79      	ldr	r3, [pc, #484]	; (800459c <HAL_RCC_OscConfig+0x264>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a78      	ldr	r2, [pc, #480]	; (800459c <HAL_RCC_OscConfig+0x264>)
 80043ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	4b76      	ldr	r3, [pc, #472]	; (800459c <HAL_RCC_OscConfig+0x264>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a75      	ldr	r2, [pc, #468]	; (800459c <HAL_RCC_OscConfig+0x264>)
 80043c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	e01c      	b.n	8004408 <HAL_RCC_OscConfig+0xd0>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b05      	cmp	r3, #5
 80043d4:	d10c      	bne.n	80043f0 <HAL_RCC_OscConfig+0xb8>
 80043d6:	4b71      	ldr	r3, [pc, #452]	; (800459c <HAL_RCC_OscConfig+0x264>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a70      	ldr	r2, [pc, #448]	; (800459c <HAL_RCC_OscConfig+0x264>)
 80043dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	4b6e      	ldr	r3, [pc, #440]	; (800459c <HAL_RCC_OscConfig+0x264>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a6d      	ldr	r2, [pc, #436]	; (800459c <HAL_RCC_OscConfig+0x264>)
 80043e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	e00b      	b.n	8004408 <HAL_RCC_OscConfig+0xd0>
 80043f0:	4b6a      	ldr	r3, [pc, #424]	; (800459c <HAL_RCC_OscConfig+0x264>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a69      	ldr	r2, [pc, #420]	; (800459c <HAL_RCC_OscConfig+0x264>)
 80043f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	4b67      	ldr	r3, [pc, #412]	; (800459c <HAL_RCC_OscConfig+0x264>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a66      	ldr	r2, [pc, #408]	; (800459c <HAL_RCC_OscConfig+0x264>)
 8004402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d013      	beq.n	8004438 <HAL_RCC_OscConfig+0x100>
 8004410:	f7ff faec 	bl	80039ec <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0xf2>
 8004418:	f7ff fae8 	bl	80039ec <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b64      	cmp	r3, #100	; 0x64
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0xf2>
 8004426:	2303      	movs	r3, #3
 8004428:	e2ad      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 800442a:	4b5c      	ldr	r3, [pc, #368]	; (800459c <HAL_RCC_OscConfig+0x264>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0xe0>
 8004436:	e014      	b.n	8004462 <HAL_RCC_OscConfig+0x12a>
 8004438:	f7ff fad8 	bl	80039ec <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x11a>
 8004440:	f7ff fad4 	bl	80039ec <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	; 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x11a>
 800444e:	2303      	movs	r3, #3
 8004450:	e299      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 8004452:	4b52      	ldr	r3, [pc, #328]	; (800459c <HAL_RCC_OscConfig+0x264>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x108>
 800445e:	e000      	b.n	8004462 <HAL_RCC_OscConfig+0x12a>
 8004460:	bf00      	nop
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d05a      	beq.n	8004524 <HAL_RCC_OscConfig+0x1ec>
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	2b04      	cmp	r3, #4
 8004472:	d005      	beq.n	8004480 <HAL_RCC_OscConfig+0x148>
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2b0c      	cmp	r3, #12
 8004478:	d119      	bne.n	80044ae <HAL_RCC_OscConfig+0x176>
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d116      	bne.n	80044ae <HAL_RCC_OscConfig+0x176>
 8004480:	4b46      	ldr	r3, [pc, #280]	; (800459c <HAL_RCC_OscConfig+0x264>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCC_OscConfig+0x160>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d001      	beq.n	8004498 <HAL_RCC_OscConfig+0x160>
 8004494:	2301      	movs	r3, #1
 8004496:	e276      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 8004498:	4b40      	ldr	r3, [pc, #256]	; (800459c <HAL_RCC_OscConfig+0x264>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	493d      	ldr	r1, [pc, #244]	; (800459c <HAL_RCC_OscConfig+0x264>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]
 80044ac:	e03a      	b.n	8004524 <HAL_RCC_OscConfig+0x1ec>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d020      	beq.n	80044f8 <HAL_RCC_OscConfig+0x1c0>
 80044b6:	4b3a      	ldr	r3, [pc, #232]	; (80045a0 <HAL_RCC_OscConfig+0x268>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	f7ff fa96 	bl	80039ec <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x19e>
 80044c4:	f7ff fa92 	bl	80039ec <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x19e>
 80044d2:	2303      	movs	r3, #3
 80044d4:	e257      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 80044d6:	4b31      	ldr	r3, [pc, #196]	; (800459c <HAL_RCC_OscConfig+0x264>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0x18c>
 80044e2:	4b2e      	ldr	r3, [pc, #184]	; (800459c <HAL_RCC_OscConfig+0x264>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	021b      	lsls	r3, r3, #8
 80044f0:	492a      	ldr	r1, [pc, #168]	; (800459c <HAL_RCC_OscConfig+0x264>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	604b      	str	r3, [r1, #4]
 80044f6:	e015      	b.n	8004524 <HAL_RCC_OscConfig+0x1ec>
 80044f8:	4b29      	ldr	r3, [pc, #164]	; (80045a0 <HAL_RCC_OscConfig+0x268>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	f7ff fa75 	bl	80039ec <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x1e0>
 8004506:	f7ff fa71 	bl	80039ec <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x1e0>
 8004514:	2303      	movs	r3, #3
 8004516:	e236      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 8004518:	4b20      	ldr	r3, [pc, #128]	; (800459c <HAL_RCC_OscConfig+0x264>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f0      	bne.n	8004506 <HAL_RCC_OscConfig+0x1ce>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0310 	and.w	r3, r3, #16
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80b8 	beq.w	80046a2 <HAL_RCC_OscConfig+0x36a>
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d170      	bne.n	800461a <HAL_RCC_OscConfig+0x2e2>
 8004538:	4b18      	ldr	r3, [pc, #96]	; (800459c <HAL_RCC_OscConfig+0x264>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004540:	2b00      	cmp	r3, #0
 8004542:	d005      	beq.n	8004550 <HAL_RCC_OscConfig+0x218>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_RCC_OscConfig+0x218>
 800454c:	2301      	movs	r3, #1
 800454e:	e21a      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1a      	ldr	r2, [r3, #32]
 8004554:	4b11      	ldr	r3, [pc, #68]	; (800459c <HAL_RCC_OscConfig+0x264>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800455c:	429a      	cmp	r2, r3
 800455e:	d921      	bls.n	80045a4 <HAL_RCC_OscConfig+0x26c>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fbf1 	bl	8004d4c <RCC_SetFlashLatencyFromMSIRange>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_RCC_OscConfig+0x23c>
 8004570:	2301      	movs	r3, #1
 8004572:	e208      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 8004574:	4b09      	ldr	r3, [pc, #36]	; (800459c <HAL_RCC_OscConfig+0x264>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	4906      	ldr	r1, [pc, #24]	; (800459c <HAL_RCC_OscConfig+0x264>)
 8004582:	4313      	orrs	r3, r2
 8004584:	604b      	str	r3, [r1, #4]
 8004586:	4b05      	ldr	r3, [pc, #20]	; (800459c <HAL_RCC_OscConfig+0x264>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	061b      	lsls	r3, r3, #24
 8004594:	4901      	ldr	r1, [pc, #4]	; (800459c <HAL_RCC_OscConfig+0x264>)
 8004596:	4313      	orrs	r3, r2
 8004598:	604b      	str	r3, [r1, #4]
 800459a:	e020      	b.n	80045de <HAL_RCC_OscConfig+0x2a6>
 800459c:	40023800 	.word	0x40023800
 80045a0:	42470000 	.word	0x42470000
 80045a4:	4ba4      	ldr	r3, [pc, #656]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	49a1      	ldr	r1, [pc, #644]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	604b      	str	r3, [r1, #4]
 80045b6:	4ba0      	ldr	r3, [pc, #640]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	061b      	lsls	r3, r3, #24
 80045c4:	499c      	ldr	r1, [pc, #624]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	604b      	str	r3, [r1, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fbbc 	bl	8004d4c <RCC_SetFlashLatencyFromMSIRange>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_RCC_OscConfig+0x2a6>
 80045da:	2301      	movs	r3, #1
 80045dc:	e1d3      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	0b5b      	lsrs	r3, r3, #13
 80045e4:	3301      	adds	r3, #1
 80045e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	4a92      	ldr	r2, [pc, #584]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 80045f0:	6892      	ldr	r2, [r2, #8]
 80045f2:	0912      	lsrs	r2, r2, #4
 80045f4:	f002 020f 	and.w	r2, r2, #15
 80045f8:	4990      	ldr	r1, [pc, #576]	; (800483c <HAL_RCC_OscConfig+0x504>)
 80045fa:	5c8a      	ldrb	r2, [r1, r2]
 80045fc:	40d3      	lsrs	r3, r2
 80045fe:	4a90      	ldr	r2, [pc, #576]	; (8004840 <HAL_RCC_OscConfig+0x508>)
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	4b90      	ldr	r3, [pc, #576]	; (8004844 <HAL_RCC_OscConfig+0x50c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff f9a4 	bl	8003954 <HAL_InitTick>
 800460c:	4603      	mov	r3, r0
 800460e:	73fb      	strb	r3, [r7, #15]
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d045      	beq.n	80046a2 <HAL_RCC_OscConfig+0x36a>
 8004616:	7bfb      	ldrb	r3, [r7, #15]
 8004618:	e1b5      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d029      	beq.n	8004676 <HAL_RCC_OscConfig+0x33e>
 8004622:	4b89      	ldr	r3, [pc, #548]	; (8004848 <HAL_RCC_OscConfig+0x510>)
 8004624:	2201      	movs	r2, #1
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	f7ff f9e0 	bl	80039ec <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x30a>
 8004630:	f7ff f9dc 	bl	80039ec <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x30a>
 800463e:	2303      	movs	r3, #3
 8004640:	e1a1      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 8004642:	4b7d      	ldr	r3, [pc, #500]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0x2f8>
 800464e:	4b7a      	ldr	r3, [pc, #488]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	4977      	ldr	r1, [pc, #476]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 800465c:	4313      	orrs	r3, r2
 800465e:	604b      	str	r3, [r1, #4]
 8004660:	4b75      	ldr	r3, [pc, #468]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	061b      	lsls	r3, r3, #24
 800466e:	4972      	ldr	r1, [pc, #456]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 8004670:	4313      	orrs	r3, r2
 8004672:	604b      	str	r3, [r1, #4]
 8004674:	e015      	b.n	80046a2 <HAL_RCC_OscConfig+0x36a>
 8004676:	4b74      	ldr	r3, [pc, #464]	; (8004848 <HAL_RCC_OscConfig+0x510>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	f7ff f9b6 	bl	80039ec <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x35e>
 8004684:	f7ff f9b2 	bl	80039ec <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x35e>
 8004692:	2303      	movs	r3, #3
 8004694:	e177      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 8004696:	4b68      	ldr	r3, [pc, #416]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f0      	bne.n	8004684 <HAL_RCC_OscConfig+0x34c>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d030      	beq.n	8004710 <HAL_RCC_OscConfig+0x3d8>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d016      	beq.n	80046e4 <HAL_RCC_OscConfig+0x3ac>
 80046b6:	4b65      	ldr	r3, [pc, #404]	; (800484c <HAL_RCC_OscConfig+0x514>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	f7ff f996 	bl	80039ec <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x39e>
 80046c4:	f7ff f992 	bl	80039ec <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x39e>
 80046d2:	2303      	movs	r3, #3
 80046d4:	e157      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 80046d6:	4b58      	ldr	r3, [pc, #352]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 80046d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0x38c>
 80046e2:	e015      	b.n	8004710 <HAL_RCC_OscConfig+0x3d8>
 80046e4:	4b59      	ldr	r3, [pc, #356]	; (800484c <HAL_RCC_OscConfig+0x514>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	f7ff f97f 	bl	80039ec <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x3cc>
 80046f2:	f7ff f97b 	bl	80039ec <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x3cc>
 8004700:	2303      	movs	r3, #3
 8004702:	e140      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 8004704:	4b4c      	ldr	r3, [pc, #304]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 8004706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1f0      	bne.n	80046f2 <HAL_RCC_OscConfig+0x3ba>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 80b5 	beq.w	8004888 <HAL_RCC_OscConfig+0x550>
 800471e:	2300      	movs	r3, #0
 8004720:	77fb      	strb	r3, [r7, #31]
 8004722:	4b45      	ldr	r3, [pc, #276]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10d      	bne.n	800474a <HAL_RCC_OscConfig+0x412>
 800472e:	4b42      	ldr	r3, [pc, #264]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	4a41      	ldr	r2, [pc, #260]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 8004734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004738:	6253      	str	r3, [r2, #36]	; 0x24
 800473a:	4b3f      	ldr	r3, [pc, #252]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004742:	60bb      	str	r3, [r7, #8]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2301      	movs	r3, #1
 8004748:	77fb      	strb	r3, [r7, #31]
 800474a:	4b41      	ldr	r3, [pc, #260]	; (8004850 <HAL_RCC_OscConfig+0x518>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d118      	bne.n	8004788 <HAL_RCC_OscConfig+0x450>
 8004756:	4b3e      	ldr	r3, [pc, #248]	; (8004850 <HAL_RCC_OscConfig+0x518>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a3d      	ldr	r2, [pc, #244]	; (8004850 <HAL_RCC_OscConfig+0x518>)
 800475c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	f7ff f943 	bl	80039ec <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x444>
 800476a:	f7ff f93f 	bl	80039ec <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b64      	cmp	r3, #100	; 0x64
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x444>
 8004778:	2303      	movs	r3, #3
 800477a:	e104      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 800477c:	4b34      	ldr	r3, [pc, #208]	; (8004850 <HAL_RCC_OscConfig+0x518>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x432>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d106      	bne.n	800479e <HAL_RCC_OscConfig+0x466>
 8004790:	4b29      	ldr	r3, [pc, #164]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 8004792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004794:	4a28      	ldr	r2, [pc, #160]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 8004796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800479a:	6353      	str	r3, [r2, #52]	; 0x34
 800479c:	e02d      	b.n	80047fa <HAL_RCC_OscConfig+0x4c2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCC_OscConfig+0x488>
 80047a6:	4b24      	ldr	r3, [pc, #144]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 80047a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047aa:	4a23      	ldr	r2, [pc, #140]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 80047ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047b0:	6353      	str	r3, [r2, #52]	; 0x34
 80047b2:	4b21      	ldr	r3, [pc, #132]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 80047b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b6:	4a20      	ldr	r2, [pc, #128]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 80047b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047bc:	6353      	str	r3, [r2, #52]	; 0x34
 80047be:	e01c      	b.n	80047fa <HAL_RCC_OscConfig+0x4c2>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b05      	cmp	r3, #5
 80047c6:	d10c      	bne.n	80047e2 <HAL_RCC_OscConfig+0x4aa>
 80047c8:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 80047ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047cc:	4a1a      	ldr	r2, [pc, #104]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 80047ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047d2:	6353      	str	r3, [r2, #52]	; 0x34
 80047d4:	4b18      	ldr	r3, [pc, #96]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 80047d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d8:	4a17      	ldr	r2, [pc, #92]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 80047da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047de:	6353      	str	r3, [r2, #52]	; 0x34
 80047e0:	e00b      	b.n	80047fa <HAL_RCC_OscConfig+0x4c2>
 80047e2:	4b15      	ldr	r3, [pc, #84]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 80047e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e6:	4a14      	ldr	r2, [pc, #80]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 80047e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ec:	6353      	str	r3, [r2, #52]	; 0x34
 80047ee:	4b12      	ldr	r3, [pc, #72]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 80047f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f2:	4a11      	ldr	r2, [pc, #68]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 80047f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047f8:	6353      	str	r3, [r2, #52]	; 0x34
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d015      	beq.n	800482e <HAL_RCC_OscConfig+0x4f6>
 8004802:	f7ff f8f3 	bl	80039ec <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]
 8004808:	e00a      	b.n	8004820 <HAL_RCC_OscConfig+0x4e8>
 800480a:	f7ff f8ef 	bl	80039ec <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	f241 3288 	movw	r2, #5000	; 0x1388
 8004818:	4293      	cmp	r3, r2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x4e8>
 800481c:	2303      	movs	r3, #3
 800481e:	e0b2      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 8004820:	4b05      	ldr	r3, [pc, #20]	; (8004838 <HAL_RCC_OscConfig+0x500>)
 8004822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0ee      	beq.n	800480a <HAL_RCC_OscConfig+0x4d2>
 800482c:	e023      	b.n	8004876 <HAL_RCC_OscConfig+0x53e>
 800482e:	f7ff f8dd 	bl	80039ec <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]
 8004834:	e019      	b.n	800486a <HAL_RCC_OscConfig+0x532>
 8004836:	bf00      	nop
 8004838:	40023800 	.word	0x40023800
 800483c:	08006ac8 	.word	0x08006ac8
 8004840:	20000008 	.word	0x20000008
 8004844:	20000098 	.word	0x20000098
 8004848:	42470020 	.word	0x42470020
 800484c:	42470680 	.word	0x42470680
 8004850:	40007000 	.word	0x40007000
 8004854:	f7ff f8ca 	bl	80039ec <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x532>
 8004866:	2303      	movs	r3, #3
 8004868:	e08d      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 800486a:	4b49      	ldr	r3, [pc, #292]	; (8004990 <HAL_RCC_OscConfig+0x658>)
 800486c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1ee      	bne.n	8004854 <HAL_RCC_OscConfig+0x51c>
 8004876:	7ffb      	ldrb	r3, [r7, #31]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d105      	bne.n	8004888 <HAL_RCC_OscConfig+0x550>
 800487c:	4b44      	ldr	r3, [pc, #272]	; (8004990 <HAL_RCC_OscConfig+0x658>)
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	4a43      	ldr	r2, [pc, #268]	; (8004990 <HAL_RCC_OscConfig+0x658>)
 8004882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004886:	6253      	str	r3, [r2, #36]	; 0x24
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	2b00      	cmp	r3, #0
 800488e:	d079      	beq.n	8004984 <HAL_RCC_OscConfig+0x64c>
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	2b0c      	cmp	r3, #12
 8004894:	d056      	beq.n	8004944 <HAL_RCC_OscConfig+0x60c>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	2b02      	cmp	r3, #2
 800489c:	d13b      	bne.n	8004916 <HAL_RCC_OscConfig+0x5de>
 800489e:	4b3d      	ldr	r3, [pc, #244]	; (8004994 <HAL_RCC_OscConfig+0x65c>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	f7ff f8a2 	bl	80039ec <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x586>
 80048ac:	f7ff f89e 	bl	80039ec <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x586>
 80048ba:	2303      	movs	r3, #3
 80048bc:	e063      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 80048be:	4b34      	ldr	r3, [pc, #208]	; (8004990 <HAL_RCC_OscConfig+0x658>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0x574>
 80048ca:	4b31      	ldr	r3, [pc, #196]	; (8004990 <HAL_RCC_OscConfig+0x658>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	4319      	orrs	r1, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e0:	430b      	orrs	r3, r1
 80048e2:	492b      	ldr	r1, [pc, #172]	; (8004990 <HAL_RCC_OscConfig+0x658>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	608b      	str	r3, [r1, #8]
 80048e8:	4b2a      	ldr	r3, [pc, #168]	; (8004994 <HAL_RCC_OscConfig+0x65c>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	f7ff f87d 	bl	80039ec <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x5d0>
 80048f6:	f7ff f879 	bl	80039ec <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x5d0>
 8004904:	2303      	movs	r3, #3
 8004906:	e03e      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 8004908:	4b21      	ldr	r3, [pc, #132]	; (8004990 <HAL_RCC_OscConfig+0x658>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCC_OscConfig+0x5be>
 8004914:	e036      	b.n	8004984 <HAL_RCC_OscConfig+0x64c>
 8004916:	4b1f      	ldr	r3, [pc, #124]	; (8004994 <HAL_RCC_OscConfig+0x65c>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	f7ff f866 	bl	80039ec <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x5fe>
 8004924:	f7ff f862 	bl	80039ec <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x5fe>
 8004932:	2303      	movs	r3, #3
 8004934:	e027      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 8004936:	4b16      	ldr	r3, [pc, #88]	; (8004990 <HAL_RCC_OscConfig+0x658>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0x5ec>
 8004942:	e01f      	b.n	8004984 <HAL_RCC_OscConfig+0x64c>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_RCC_OscConfig+0x618>
 800494c:	2301      	movs	r3, #1
 800494e:	e01a      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 8004950:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <HAL_RCC_OscConfig+0x658>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	617b      	str	r3, [r7, #20]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004960:	429a      	cmp	r2, r3
 8004962:	d10d      	bne.n	8004980 <HAL_RCC_OscConfig+0x648>
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496e:	429a      	cmp	r2, r3
 8004970:	d106      	bne.n	8004980 <HAL_RCC_OscConfig+0x648>
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497c:	429a      	cmp	r2, r3
 800497e:	d001      	beq.n	8004984 <HAL_RCC_OscConfig+0x64c>
 8004980:	2301      	movs	r3, #1
 8004982:	e000      	b.n	8004986 <HAL_RCC_OscConfig+0x64e>
 8004984:	2300      	movs	r3, #0
 8004986:	4618      	mov	r0, r3
 8004988:	3720      	adds	r7, #32
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40023800 	.word	0x40023800
 8004994:	42470060 	.word	0x42470060

08004998 <HAL_RCC_ClockConfig>:
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_RCC_ClockConfig+0x14>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e11a      	b.n	8004be2 <HAL_RCC_ClockConfig+0x24a>
 80049ac:	4b8f      	ldr	r3, [pc, #572]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d919      	bls.n	80049ee <HAL_RCC_ClockConfig+0x56>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d105      	bne.n	80049cc <HAL_RCC_ClockConfig+0x34>
 80049c0:	4b8a      	ldr	r3, [pc, #552]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a89      	ldr	r2, [pc, #548]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 80049c6:	f043 0304 	orr.w	r3, r3, #4
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	4b87      	ldr	r3, [pc, #540]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f023 0201 	bic.w	r2, r3, #1
 80049d4:	4985      	ldr	r1, [pc, #532]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	4313      	orrs	r3, r2
 80049da:	600b      	str	r3, [r1, #0]
 80049dc:	4b83      	ldr	r3, [pc, #524]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d001      	beq.n	80049ee <HAL_RCC_ClockConfig+0x56>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e0f9      	b.n	8004be2 <HAL_RCC_ClockConfig+0x24a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d008      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x74>
 80049fa:	4b7d      	ldr	r3, [pc, #500]	; (8004bf0 <HAL_RCC_ClockConfig+0x258>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	497a      	ldr	r1, [pc, #488]	; (8004bf0 <HAL_RCC_ClockConfig+0x258>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	608b      	str	r3, [r1, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 808e 	beq.w	8004b36 <HAL_RCC_ClockConfig+0x19e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d107      	bne.n	8004a32 <HAL_RCC_ClockConfig+0x9a>
 8004a22:	4b73      	ldr	r3, [pc, #460]	; (8004bf0 <HAL_RCC_ClockConfig+0x258>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d121      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xda>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e0d7      	b.n	8004be2 <HAL_RCC_ClockConfig+0x24a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d107      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xb2>
 8004a3a:	4b6d      	ldr	r3, [pc, #436]	; (8004bf0 <HAL_RCC_ClockConfig+0x258>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d115      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xda>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e0cb      	b.n	8004be2 <HAL_RCC_ClockConfig+0x24a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d107      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xca>
 8004a52:	4b67      	ldr	r3, [pc, #412]	; (8004bf0 <HAL_RCC_ClockConfig+0x258>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d109      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xda>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e0bf      	b.n	8004be2 <HAL_RCC_ClockConfig+0x24a>
 8004a62:	4b63      	ldr	r3, [pc, #396]	; (8004bf0 <HAL_RCC_ClockConfig+0x258>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xda>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e0b7      	b.n	8004be2 <HAL_RCC_ClockConfig+0x24a>
 8004a72:	4b5f      	ldr	r3, [pc, #380]	; (8004bf0 <HAL_RCC_ClockConfig+0x258>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f023 0203 	bic.w	r2, r3, #3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	495c      	ldr	r1, [pc, #368]	; (8004bf0 <HAL_RCC_ClockConfig+0x258>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	608b      	str	r3, [r1, #8]
 8004a84:	f7fe ffb2 	bl	80039ec <HAL_GetTick>
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d112      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0x120>
 8004a92:	e00a      	b.n	8004aaa <HAL_RCC_ClockConfig+0x112>
 8004a94:	f7fe ffaa 	bl	80039ec <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_ClockConfig+0x112>
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e09b      	b.n	8004be2 <HAL_RCC_ClockConfig+0x24a>
 8004aaa:	4b51      	ldr	r3, [pc, #324]	; (8004bf0 <HAL_RCC_ClockConfig+0x258>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 030c 	and.w	r3, r3, #12
 8004ab2:	2b08      	cmp	r3, #8
 8004ab4:	d1ee      	bne.n	8004a94 <HAL_RCC_ClockConfig+0xfc>
 8004ab6:	e03e      	b.n	8004b36 <HAL_RCC_ClockConfig+0x19e>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d112      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0x14e>
 8004ac0:	e00a      	b.n	8004ad8 <HAL_RCC_ClockConfig+0x140>
 8004ac2:	f7fe ff93 	bl	80039ec <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_ClockConfig+0x140>
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e084      	b.n	8004be2 <HAL_RCC_ClockConfig+0x24a>
 8004ad8:	4b45      	ldr	r3, [pc, #276]	; (8004bf0 <HAL_RCC_ClockConfig+0x258>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f003 030c 	and.w	r3, r3, #12
 8004ae0:	2b0c      	cmp	r3, #12
 8004ae2:	d1ee      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0x12a>
 8004ae4:	e027      	b.n	8004b36 <HAL_RCC_ClockConfig+0x19e>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d11d      	bne.n	8004b2a <HAL_RCC_ClockConfig+0x192>
 8004aee:	e00a      	b.n	8004b06 <HAL_RCC_ClockConfig+0x16e>
 8004af0:	f7fe ff7c 	bl	80039ec <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_ClockConfig+0x16e>
 8004b02:	2303      	movs	r3, #3
 8004b04:	e06d      	b.n	8004be2 <HAL_RCC_ClockConfig+0x24a>
 8004b06:	4b3a      	ldr	r3, [pc, #232]	; (8004bf0 <HAL_RCC_ClockConfig+0x258>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 030c 	and.w	r3, r3, #12
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d1ee      	bne.n	8004af0 <HAL_RCC_ClockConfig+0x158>
 8004b12:	e010      	b.n	8004b36 <HAL_RCC_ClockConfig+0x19e>
 8004b14:	f7fe ff6a 	bl	80039ec <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_ClockConfig+0x192>
 8004b26:	2303      	movs	r3, #3
 8004b28:	e05b      	b.n	8004be2 <HAL_RCC_ClockConfig+0x24a>
 8004b2a:	4b31      	ldr	r3, [pc, #196]	; (8004bf0 <HAL_RCC_ClockConfig+0x258>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1ee      	bne.n	8004b14 <HAL_RCC_ClockConfig+0x17c>
 8004b36:	4b2d      	ldr	r3, [pc, #180]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d219      	bcs.n	8004b78 <HAL_RCC_ClockConfig+0x1e0>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d105      	bne.n	8004b56 <HAL_RCC_ClockConfig+0x1be>
 8004b4a:	4b28      	ldr	r3, [pc, #160]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a27      	ldr	r2, [pc, #156]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 8004b50:	f043 0304 	orr.w	r3, r3, #4
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	4b25      	ldr	r3, [pc, #148]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f023 0201 	bic.w	r2, r3, #1
 8004b5e:	4923      	ldr	r1, [pc, #140]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	600b      	str	r3, [r1, #0]
 8004b66:	4b21      	ldr	r3, [pc, #132]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d001      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x1e0>
 8004b74:	2301      	movs	r3, #1
 8004b76:	e034      	b.n	8004be2 <HAL_RCC_ClockConfig+0x24a>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x1fe>
 8004b84:	4b1a      	ldr	r3, [pc, #104]	; (8004bf0 <HAL_RCC_ClockConfig+0x258>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	4917      	ldr	r1, [pc, #92]	; (8004bf0 <HAL_RCC_ClockConfig+0x258>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d009      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0x21e>
 8004ba2:	4b13      	ldr	r3, [pc, #76]	; (8004bf0 <HAL_RCC_ClockConfig+0x258>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	490f      	ldr	r1, [pc, #60]	; (8004bf0 <HAL_RCC_ClockConfig+0x258>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	608b      	str	r3, [r1, #8]
 8004bb6:	f000 f823 	bl	8004c00 <HAL_RCC_GetSysClockFreq>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <HAL_RCC_ClockConfig+0x258>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	091b      	lsrs	r3, r3, #4
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	490b      	ldr	r1, [pc, #44]	; (8004bf4 <HAL_RCC_ClockConfig+0x25c>)
 8004bc8:	5ccb      	ldrb	r3, [r1, r3]
 8004bca:	fa22 f303 	lsr.w	r3, r2, r3
 8004bce:	4a0a      	ldr	r2, [pc, #40]	; (8004bf8 <HAL_RCC_ClockConfig+0x260>)
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <HAL_RCC_ClockConfig+0x264>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fe febc 	bl	8003954 <HAL_InitTick>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	72fb      	strb	r3, [r7, #11]
 8004be0:	7afb      	ldrb	r3, [r7, #11]
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40023c00 	.word	0x40023c00
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	08006ac8 	.word	0x08006ac8
 8004bf8:	20000008 	.word	0x20000008
 8004bfc:	20000098 	.word	0x20000098

08004c00 <HAL_RCC_GetSysClockFreq>:
 8004c00:	b5b0      	push	{r4, r5, r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	4b4d      	ldr	r3, [pc, #308]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x13c>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b0c      	cmp	r3, #12
 8004c14:	d00c      	beq.n	8004c30 <HAL_RCC_GetSysClockFreq+0x30>
 8004c16:	2b0c      	cmp	r3, #12
 8004c18:	d87c      	bhi.n	8004d14 <HAL_RCC_GetSysClockFreq+0x114>
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d002      	beq.n	8004c24 <HAL_RCC_GetSysClockFreq+0x24>
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d003      	beq.n	8004c2a <HAL_RCC_GetSysClockFreq+0x2a>
 8004c22:	e077      	b.n	8004d14 <HAL_RCC_GetSysClockFreq+0x114>
 8004c24:	4b46      	ldr	r3, [pc, #280]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x140>)
 8004c26:	613b      	str	r3, [r7, #16]
 8004c28:	e082      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x130>
 8004c2a:	4b46      	ldr	r3, [pc, #280]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x144>)
 8004c2c:	613b      	str	r3, [r7, #16]
 8004c2e:	e07f      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x130>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	0c9b      	lsrs	r3, r3, #18
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	4a43      	ldr	r2, [pc, #268]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x148>)
 8004c3a:	5cd3      	ldrb	r3, [r2, r3]
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	0d9b      	lsrs	r3, r3, #22
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	3301      	adds	r3, #1
 8004c48:	607b      	str	r3, [r7, #4]
 8004c4a:	4b3c      	ldr	r3, [pc, #240]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x13c>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d01a      	beq.n	8004c8c <HAL_RCC_GetSysClockFreq+0x8c>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	4939      	ldr	r1, [pc, #228]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x144>)
 8004c60:	fb01 f003 	mul.w	r0, r1, r3
 8004c64:	2100      	movs	r1, #0
 8004c66:	fb01 f102 	mul.w	r1, r1, r2
 8004c6a:	1844      	adds	r4, r0, r1
 8004c6c:	4935      	ldr	r1, [pc, #212]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x144>)
 8004c6e:	fba2 0101 	umull	r0, r1, r2, r1
 8004c72:	1863      	adds	r3, r4, r1
 8004c74:	4619      	mov	r1, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	f7fb fa7d 	bl	800017c <__aeabi_uldivmod>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4613      	mov	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	e040      	b.n	8004d0e <HAL_RCC_GetSysClockFreq+0x10e>
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	461c      	mov	r4, r3
 8004c90:	f04f 0500 	mov.w	r5, #0
 8004c94:	4620      	mov	r0, r4
 8004c96:	4629      	mov	r1, r5
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	014b      	lsls	r3, r1, #5
 8004ca2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ca6:	0142      	lsls	r2, r0, #5
 8004ca8:	4610      	mov	r0, r2
 8004caa:	4619      	mov	r1, r3
 8004cac:	1b00      	subs	r0, r0, r4
 8004cae:	eb61 0105 	sbc.w	r1, r1, r5
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	018b      	lsls	r3, r1, #6
 8004cbc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004cc0:	0182      	lsls	r2, r0, #6
 8004cc2:	1a12      	subs	r2, r2, r0
 8004cc4:	eb63 0301 	sbc.w	r3, r3, r1
 8004cc8:	f04f 0000 	mov.w	r0, #0
 8004ccc:	f04f 0100 	mov.w	r1, #0
 8004cd0:	00d9      	lsls	r1, r3, #3
 8004cd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cd6:	00d0      	lsls	r0, r2, #3
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	1912      	adds	r2, r2, r4
 8004cde:	eb45 0303 	adc.w	r3, r5, r3
 8004ce2:	f04f 0000 	mov.w	r0, #0
 8004ce6:	f04f 0100 	mov.w	r1, #0
 8004cea:	0299      	lsls	r1, r3, #10
 8004cec:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004cf0:	0290      	lsls	r0, r2, #10
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	f7fb fa3b 	bl	800017c <__aeabi_uldivmod>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	e00d      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x130>
 8004d14:	4b09      	ldr	r3, [pc, #36]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x13c>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	0b5b      	lsrs	r3, r3, #13
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	603b      	str	r3, [r7, #0]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	3301      	adds	r3, #1
 8004d24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	bf00      	nop
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	4618      	mov	r0, r3
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bdb0      	pop	{r4, r5, r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	00f42400 	.word	0x00f42400
 8004d44:	016e3600 	.word	0x016e3600
 8004d48:	08006abc 	.word	0x08006abc

08004d4c <RCC_SetFlashLatencyFromMSIRange>:
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	2300      	movs	r3, #0
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	4b29      	ldr	r3, [pc, #164]	; (8004e00 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d12c      	bne.n	8004dbe <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004d64:	4b26      	ldr	r3, [pc, #152]	; (8004e00 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <RCC_SetFlashLatencyFromMSIRange+0x30>
 8004d70:	4b24      	ldr	r3, [pc, #144]	; (8004e04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	e016      	b.n	8004daa <RCC_SetFlashLatencyFromMSIRange+0x5e>
 8004d7c:	4b20      	ldr	r3, [pc, #128]	; (8004e00 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	4a1f      	ldr	r2, [pc, #124]	; (8004e00 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d86:	6253      	str	r3, [r2, #36]	; 0x24
 8004d88:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4b1b      	ldr	r3, [pc, #108]	; (8004e04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	4b18      	ldr	r3, [pc, #96]	; (8004e00 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	4a17      	ldr	r2, [pc, #92]	; (8004e00 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004da8:	6253      	str	r3, [r2, #36]	; 0x24
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004db0:	d105      	bne.n	8004dbe <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004db8:	d101      	bne.n	8004dbe <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	613b      	str	r3, [r7, #16]
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d105      	bne.n	8004dd0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004dc4:	4b10      	ldr	r3, [pc, #64]	; (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a0f      	ldr	r2, [pc, #60]	; (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dca:	f043 0304 	orr.w	r3, r3, #4
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	4b0d      	ldr	r3, [pc, #52]	; (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f023 0201 	bic.w	r2, r3, #1
 8004dd8:	490b      	ldr	r1, [pc, #44]	; (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	600b      	str	r3, [r1, #0]
 8004de0:	4b09      	ldr	r3, [pc, #36]	; (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d001      	beq.n	8004df2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
 8004dee:	2301      	movs	r3, #1
 8004df0:	e000      	b.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
 8004df2:	2300      	movs	r3, #0
 8004df4:	4618      	mov	r0, r3
 8004df6:	371c      	adds	r7, #28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bc80      	pop	{r7}
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40023800 	.word	0x40023800
 8004e04:	40007000 	.word	0x40007000
 8004e08:	40023c00 	.word	0x40023c00

08004e0c <HAL_SPI_Init>:
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_SPI_Init+0x12>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e07b      	b.n	8004f16 <HAL_SPI_Init+0x10a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d108      	bne.n	8004e38 <HAL_SPI_Init+0x2c>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e2e:	d009      	beq.n	8004e44 <HAL_SPI_Init+0x38>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	61da      	str	r2, [r3, #28]
 8004e36:	e005      	b.n	8004e44 <HAL_SPI_Init+0x38>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	611a      	str	r2, [r3, #16]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	615a      	str	r2, [r3, #20]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	629a      	str	r2, [r3, #40]	; 0x28
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <HAL_SPI_Init+0x58>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7fd f94c 	bl	80020fc <HAL_SPI_MspInit>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec8:	ea42 0103 	orr.w	r1, r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	0c1b      	lsrs	r3, r3, #16
 8004ee2:	f003 0104 	and.w	r1, r3, #4
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	f003 0210 	and.w	r2, r3, #16
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69da      	ldr	r2, [r3, #28]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f04:	61da      	str	r2, [r3, #28]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	655a      	str	r2, [r3, #84]	; 0x54
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004f14:	2300      	movs	r3, #0
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <HAL_SPI_Transmit>:
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b088      	sub	sp, #32
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	60f8      	str	r0, [r7, #12]
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	603b      	str	r3, [r7, #0]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	80fb      	strh	r3, [r7, #6]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	77fb      	strb	r3, [r7, #31]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_SPI_Transmit+0x22>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	e126      	b.n	800518e <HAL_SPI_Transmit+0x270>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004f48:	f7fe fd50 	bl	80039ec <HAL_GetTick>
 8004f4c:	61b8      	str	r0, [r7, #24]
 8004f4e:	88fb      	ldrh	r3, [r7, #6]
 8004f50:	82fb      	strh	r3, [r7, #22]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d002      	beq.n	8004f64 <HAL_SPI_Transmit+0x46>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	77fb      	strb	r3, [r7, #31]
 8004f62:	e10b      	b.n	800517c <HAL_SPI_Transmit+0x25e>
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <HAL_SPI_Transmit+0x52>
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d102      	bne.n	8004f76 <HAL_SPI_Transmit+0x58>
 8004f70:	2301      	movs	r3, #1
 8004f72:	77fb      	strb	r3, [r7, #31]
 8004f74:	e102      	b.n	800517c <HAL_SPI_Transmit+0x25e>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2203      	movs	r2, #3
 8004f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	655a      	str	r2, [r3, #84]	; 0x54
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	631a      	str	r2, [r3, #48]	; 0x30
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	88fa      	ldrh	r2, [r7, #6]
 8004f8e:	869a      	strh	r2, [r3, #52]	; 0x34
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	88fa      	ldrh	r2, [r7, #6]
 8004f94:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	639a      	str	r2, [r3, #56]	; 0x38
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	645a      	str	r2, [r3, #68]	; 0x44
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	641a      	str	r2, [r3, #64]	; 0x40
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fbc:	d10f      	bne.n	8004fde <HAL_SPI_Transmit+0xc0>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe8:	2b40      	cmp	r3, #64	; 0x40
 8004fea:	d007      	beq.n	8004ffc <HAL_SPI_Transmit+0xde>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005004:	d14b      	bne.n	800509e <HAL_SPI_Transmit+0x180>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <HAL_SPI_Transmit+0xf6>
 800500e:	8afb      	ldrh	r3, [r7, #22]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d13e      	bne.n	8005092 <HAL_SPI_Transmit+0x174>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005018:	881a      	ldrh	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	60da      	str	r2, [r3, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	1c9a      	adds	r2, r3, #2
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	631a      	str	r2, [r3, #48]	; 0x30
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	86da      	strh	r2, [r3, #54]	; 0x36
 8005038:	e02b      	b.n	8005092 <HAL_SPI_Transmit+0x174>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b02      	cmp	r3, #2
 8005046:	d112      	bne.n	800506e <HAL_SPI_Transmit+0x150>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	881a      	ldrh	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	60da      	str	r2, [r3, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	1c9a      	adds	r2, r3, #2
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	631a      	str	r2, [r3, #48]	; 0x30
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	86da      	strh	r2, [r3, #54]	; 0x36
 800506c:	e011      	b.n	8005092 <HAL_SPI_Transmit+0x174>
 800506e:	f7fe fcbd 	bl	80039ec <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	d803      	bhi.n	8005086 <HAL_SPI_Transmit+0x168>
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d102      	bne.n	800508c <HAL_SPI_Transmit+0x16e>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d102      	bne.n	8005092 <HAL_SPI_Transmit+0x174>
 800508c:	2303      	movs	r3, #3
 800508e:	77fb      	strb	r3, [r7, #31]
 8005090:	e074      	b.n	800517c <HAL_SPI_Transmit+0x25e>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1ce      	bne.n	800503a <HAL_SPI_Transmit+0x11c>
 800509c:	e04c      	b.n	8005138 <HAL_SPI_Transmit+0x21a>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <HAL_SPI_Transmit+0x18e>
 80050a6:	8afb      	ldrh	r3, [r7, #22]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d140      	bne.n	800512e <HAL_SPI_Transmit+0x210>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	330c      	adds	r3, #12
 80050b6:	7812      	ldrb	r2, [r2, #0]
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	631a      	str	r2, [r3, #48]	; 0x30
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80050d2:	e02c      	b.n	800512e <HAL_SPI_Transmit+0x210>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d113      	bne.n	800510a <HAL_SPI_Transmit+0x1ec>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	330c      	adds	r3, #12
 80050ec:	7812      	ldrb	r2, [r2, #0]
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	631a      	str	r2, [r3, #48]	; 0x30
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	86da      	strh	r2, [r3, #54]	; 0x36
 8005108:	e011      	b.n	800512e <HAL_SPI_Transmit+0x210>
 800510a:	f7fe fc6f 	bl	80039ec <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d803      	bhi.n	8005122 <HAL_SPI_Transmit+0x204>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005120:	d102      	bne.n	8005128 <HAL_SPI_Transmit+0x20a>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d102      	bne.n	800512e <HAL_SPI_Transmit+0x210>
 8005128:	2303      	movs	r3, #3
 800512a:	77fb      	strb	r3, [r7, #31]
 800512c:	e026      	b.n	800517c <HAL_SPI_Transmit+0x25e>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005132:	b29b      	uxth	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1cd      	bne.n	80050d4 <HAL_SPI_Transmit+0x1b6>
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	6839      	ldr	r1, [r7, #0]
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 fa55 	bl	80055ec <SPI_EndRxTxTransaction>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <HAL_SPI_Transmit+0x230>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2220      	movs	r2, #32
 800514c:	655a      	str	r2, [r3, #84]	; 0x54
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10a      	bne.n	800516c <HAL_SPI_Transmit+0x24e>
 8005156:	2300      	movs	r3, #0
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	613b      	str	r3, [r7, #16]
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <HAL_SPI_Transmit+0x25c>
 8005174:	2301      	movs	r3, #1
 8005176:	77fb      	strb	r3, [r7, #31]
 8005178:	e000      	b.n	800517c <HAL_SPI_Transmit+0x25e>
 800517a:	bf00      	nop
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800518c:	7ffb      	ldrb	r3, [r7, #31]
 800518e:	4618      	mov	r0, r3
 8005190:	3720      	adds	r7, #32
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_SPI_TransmitReceive>:
 8005196:	b580      	push	{r7, lr}
 8005198:	b08c      	sub	sp, #48	; 0x30
 800519a:	af00      	add	r7, sp, #0
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	607a      	str	r2, [r7, #4]
 80051a2:	807b      	strh	r3, [r7, #2]
 80051a4:	2301      	movs	r3, #1
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051a8:	2300      	movs	r3, #0
 80051aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_SPI_TransmitReceive+0x26>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e18a      	b.n	80054d2 <HAL_SPI_TransmitReceive+0x33c>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80051c4:	f7fe fc12 	bl	80039ec <HAL_GetTick>
 80051c8:	6278      	str	r0, [r7, #36]	; 0x24
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	61fb      	str	r3, [r7, #28]
 80051da:	887b      	ldrh	r3, [r7, #2]
 80051dc:	837b      	strh	r3, [r7, #26]
 80051de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d00f      	beq.n	8005206 <HAL_SPI_TransmitReceive+0x70>
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ec:	d107      	bne.n	80051fe <HAL_SPI_TransmitReceive+0x68>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d103      	bne.n	80051fe <HAL_SPI_TransmitReceive+0x68>
 80051f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d003      	beq.n	8005206 <HAL_SPI_TransmitReceive+0x70>
 80051fe:	2302      	movs	r3, #2
 8005200:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005204:	e15b      	b.n	80054be <HAL_SPI_TransmitReceive+0x328>
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d005      	beq.n	8005218 <HAL_SPI_TransmitReceive+0x82>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <HAL_SPI_TransmitReceive+0x82>
 8005212:	887b      	ldrh	r3, [r7, #2]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d103      	bne.n	8005220 <HAL_SPI_TransmitReceive+0x8a>
 8005218:	2301      	movs	r3, #1
 800521a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800521e:	e14e      	b.n	80054be <HAL_SPI_TransmitReceive+0x328>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b04      	cmp	r3, #4
 800522a:	d003      	beq.n	8005234 <HAL_SPI_TransmitReceive+0x9e>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2205      	movs	r2, #5
 8005230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	655a      	str	r2, [r3, #84]	; 0x54
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	639a      	str	r2, [r3, #56]	; 0x38
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	887a      	ldrh	r2, [r7, #2]
 8005244:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	887a      	ldrh	r2, [r7, #2]
 800524a:	879a      	strh	r2, [r3, #60]	; 0x3c
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	631a      	str	r2, [r3, #48]	; 0x30
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	887a      	ldrh	r2, [r7, #2]
 8005256:	86da      	strh	r2, [r3, #54]	; 0x36
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	887a      	ldrh	r2, [r7, #2]
 800525c:	869a      	strh	r2, [r3, #52]	; 0x34
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	641a      	str	r2, [r3, #64]	; 0x40
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	645a      	str	r2, [r3, #68]	; 0x44
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005274:	2b40      	cmp	r3, #64	; 0x40
 8005276:	d007      	beq.n	8005288 <HAL_SPI_TransmitReceive+0xf2>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005290:	d178      	bne.n	8005384 <HAL_SPI_TransmitReceive+0x1ee>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <HAL_SPI_TransmitReceive+0x10a>
 800529a:	8b7b      	ldrh	r3, [r7, #26]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d166      	bne.n	800536e <HAL_SPI_TransmitReceive+0x1d8>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a4:	881a      	ldrh	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60da      	str	r2, [r3, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	1c9a      	adds	r2, r3, #2
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	631a      	str	r2, [r3, #48]	; 0x30
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80052c4:	e053      	b.n	800536e <HAL_SPI_TransmitReceive+0x1d8>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d11b      	bne.n	800530c <HAL_SPI_TransmitReceive+0x176>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d016      	beq.n	800530c <HAL_SPI_TransmitReceive+0x176>
 80052de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d113      	bne.n	800530c <HAL_SPI_TransmitReceive+0x176>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e8:	881a      	ldrh	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60da      	str	r2, [r3, #12]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	1c9a      	adds	r2, r3, #2
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	631a      	str	r2, [r3, #48]	; 0x30
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052fe:	b29b      	uxth	r3, r3
 8005300:	3b01      	subs	r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	86da      	strh	r2, [r3, #54]	; 0x36
 8005308:	2300      	movs	r3, #0
 800530a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b01      	cmp	r3, #1
 8005318:	d119      	bne.n	800534e <HAL_SPI_TransmitReceive+0x1b8>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800531e:	b29b      	uxth	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d014      	beq.n	800534e <HAL_SPI_TransmitReceive+0x1b8>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532e:	b292      	uxth	r2, r2
 8005330:	801a      	strh	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005336:	1c9a      	adds	r2, r3, #2
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	639a      	str	r2, [r3, #56]	; 0x38
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005340:	b29b      	uxth	r3, r3
 8005342:	3b01      	subs	r3, #1
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	87da      	strh	r2, [r3, #62]	; 0x3e
 800534a:	2301      	movs	r3, #1
 800534c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800534e:	f7fe fb4d 	bl	80039ec <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800535a:	429a      	cmp	r2, r3
 800535c:	d807      	bhi.n	800536e <HAL_SPI_TransmitReceive+0x1d8>
 800535e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005364:	d003      	beq.n	800536e <HAL_SPI_TransmitReceive+0x1d8>
 8005366:	2303      	movs	r3, #3
 8005368:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800536c:	e0a7      	b.n	80054be <HAL_SPI_TransmitReceive+0x328>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005372:	b29b      	uxth	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1a6      	bne.n	80052c6 <HAL_SPI_TransmitReceive+0x130>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800537c:	b29b      	uxth	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1a1      	bne.n	80052c6 <HAL_SPI_TransmitReceive+0x130>
 8005382:	e07c      	b.n	800547e <HAL_SPI_TransmitReceive+0x2e8>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <HAL_SPI_TransmitReceive+0x1fc>
 800538c:	8b7b      	ldrh	r3, [r7, #26]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d16b      	bne.n	800546a <HAL_SPI_TransmitReceive+0x2d4>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	330c      	adds	r3, #12
 800539c:	7812      	ldrb	r2, [r2, #0]
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	631a      	str	r2, [r3, #48]	; 0x30
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80053b8:	e057      	b.n	800546a <HAL_SPI_TransmitReceive+0x2d4>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d11c      	bne.n	8005402 <HAL_SPI_TransmitReceive+0x26c>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d017      	beq.n	8005402 <HAL_SPI_TransmitReceive+0x26c>
 80053d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d114      	bne.n	8005402 <HAL_SPI_TransmitReceive+0x26c>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	330c      	adds	r3, #12
 80053e2:	7812      	ldrb	r2, [r2, #0]
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80053fe:	2300      	movs	r3, #0
 8005400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b01      	cmp	r3, #1
 800540e:	d119      	bne.n	8005444 <HAL_SPI_TransmitReceive+0x2ae>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005414:	b29b      	uxth	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d014      	beq.n	8005444 <HAL_SPI_TransmitReceive+0x2ae>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	701a      	strb	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	639a      	str	r2, [r3, #56]	; 0x38
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005436:	b29b      	uxth	r3, r3
 8005438:	3b01      	subs	r3, #1
 800543a:	b29a      	uxth	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005440:	2301      	movs	r3, #1
 8005442:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005444:	f7fe fad2 	bl	80039ec <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005450:	429a      	cmp	r2, r3
 8005452:	d803      	bhi.n	800545c <HAL_SPI_TransmitReceive+0x2c6>
 8005454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545a:	d102      	bne.n	8005462 <HAL_SPI_TransmitReceive+0x2cc>
 800545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545e:	2b00      	cmp	r3, #0
 8005460:	d103      	bne.n	800546a <HAL_SPI_TransmitReceive+0x2d4>
 8005462:	2303      	movs	r3, #3
 8005464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005468:	e029      	b.n	80054be <HAL_SPI_TransmitReceive+0x328>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1a2      	bne.n	80053ba <HAL_SPI_TransmitReceive+0x224>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005478:	b29b      	uxth	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d19d      	bne.n	80053ba <HAL_SPI_TransmitReceive+0x224>
 800547e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005480:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 f8b2 	bl	80055ec <SPI_EndRxTxTransaction>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d006      	beq.n	800549c <HAL_SPI_TransmitReceive+0x306>
 800548e:	2301      	movs	r3, #1
 8005490:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	655a      	str	r2, [r3, #84]	; 0x54
 800549a:	e010      	b.n	80054be <HAL_SPI_TransmitReceive+0x328>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10b      	bne.n	80054bc <HAL_SPI_TransmitReceive+0x326>
 80054a4:	2300      	movs	r3, #0
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	e000      	b.n	80054be <HAL_SPI_TransmitReceive+0x328>
 80054bc:	bf00      	nop
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80054ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054d2:	4618      	mov	r0, r3
 80054d4:	3730      	adds	r7, #48	; 0x30
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <SPI_WaitFlagStateUntilTimeout>:
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	603b      	str	r3, [r7, #0]
 80054e8:	4613      	mov	r3, r2
 80054ea:	71fb      	strb	r3, [r7, #7]
 80054ec:	f7fe fa7e 	bl	80039ec <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	1a9b      	subs	r3, r3, r2
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	4413      	add	r3, r2
 80054fa:	61fb      	str	r3, [r7, #28]
 80054fc:	f7fe fa76 	bl	80039ec <HAL_GetTick>
 8005500:	61b8      	str	r0, [r7, #24]
 8005502:	4b39      	ldr	r3, [pc, #228]	; (80055e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	015b      	lsls	r3, r3, #5
 8005508:	0d1b      	lsrs	r3, r3, #20
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	fb02 f303 	mul.w	r3, r2, r3
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	e054      	b.n	80055be <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551a:	d050      	beq.n	80055be <SPI_WaitFlagStateUntilTimeout+0xe2>
 800551c:	f7fe fa66 	bl	80039ec <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	429a      	cmp	r2, r3
 800552a:	d902      	bls.n	8005532 <SPI_WaitFlagStateUntilTimeout+0x56>
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d13d      	bne.n	80055ae <SPI_WaitFlagStateUntilTimeout+0xd2>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005540:	605a      	str	r2, [r3, #4]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800554a:	d111      	bne.n	8005570 <SPI_WaitFlagStateUntilTimeout+0x94>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005554:	d004      	beq.n	8005560 <SPI_WaitFlagStateUntilTimeout+0x84>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800555e:	d107      	bne.n	8005570 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005578:	d10f      	bne.n	800559a <SPI_WaitFlagStateUntilTimeout+0xbe>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80055aa:	2303      	movs	r3, #3
 80055ac:	e017      	b.n	80055de <SPI_WaitFlagStateUntilTimeout+0x102>
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
 80055b4:	2300      	movs	r3, #0
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	3b01      	subs	r3, #1
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4013      	ands	r3, r2
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	bf0c      	ite	eq
 80055ce:	2301      	moveq	r3, #1
 80055d0:	2300      	movne	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d19b      	bne.n	8005514 <SPI_WaitFlagStateUntilTimeout+0x38>
 80055dc:	2300      	movs	r3, #0
 80055de:	4618      	mov	r0, r3
 80055e0:	3720      	adds	r7, #32
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20000008 	.word	0x20000008

080055ec <SPI_EndRxTxTransaction>:
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	4b1b      	ldr	r3, [pc, #108]	; (8005668 <SPI_EndRxTxTransaction+0x7c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a1b      	ldr	r2, [pc, #108]	; (800566c <SPI_EndRxTxTransaction+0x80>)
 80055fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005602:	0d5b      	lsrs	r3, r3, #21
 8005604:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005608:	fb02 f303 	mul.w	r3, r2, r3
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005616:	d112      	bne.n	800563e <SPI_EndRxTxTransaction+0x52>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2200      	movs	r2, #0
 8005620:	2180      	movs	r1, #128	; 0x80
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f7ff ff5a 	bl	80054dc <SPI_WaitFlagStateUntilTimeout>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d016      	beq.n	800565c <SPI_EndRxTxTransaction+0x70>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005632:	f043 0220 	orr.w	r2, r3, #32
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	655a      	str	r2, [r3, #84]	; 0x54
 800563a:	2303      	movs	r3, #3
 800563c:	e00f      	b.n	800565e <SPI_EndRxTxTransaction+0x72>
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00a      	beq.n	800565a <SPI_EndRxTxTransaction+0x6e>
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	3b01      	subs	r3, #1
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005654:	2b80      	cmp	r3, #128	; 0x80
 8005656:	d0f2      	beq.n	800563e <SPI_EndRxTxTransaction+0x52>
 8005658:	e000      	b.n	800565c <SPI_EndRxTxTransaction+0x70>
 800565a:	bf00      	nop
 800565c:	2300      	movs	r3, #0
 800565e:	4618      	mov	r0, r3
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20000008 	.word	0x20000008
 800566c:	165e9f81 	.word	0x165e9f81

08005670 <HAL_TIM_Base_Init>:
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_TIM_Base_Init+0x12>
 800567e:	2301      	movs	r3, #1
 8005680:	e031      	b.n	80056e6 <HAL_TIM_Base_Init+0x76>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <HAL_TIM_Base_Init+0x2c>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fc fdf8 	bl	800228c <HAL_TIM_Base_MspInit>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3304      	adds	r3, #4
 80056ac:	4619      	mov	r1, r3
 80056ae:	4610      	mov	r0, r2
 80056b0:	f000 faa4 	bl	8005bfc <TIM_Base_SetConfig>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80056e4:	2300      	movs	r3, #0
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <HAL_TIM_Base_Start>:
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	d001      	beq.n	8005708 <HAL_TIM_Base_Start+0x18>
 8005704:	2301      	movs	r3, #1
 8005706:	e032      	b.n	800576e <HAL_TIM_Base_Start+0x7e>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005718:	d00e      	beq.n	8005738 <HAL_TIM_Base_Start+0x48>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a16      	ldr	r2, [pc, #88]	; (8005778 <HAL_TIM_Base_Start+0x88>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d009      	beq.n	8005738 <HAL_TIM_Base_Start+0x48>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a14      	ldr	r2, [pc, #80]	; (800577c <HAL_TIM_Base_Start+0x8c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d004      	beq.n	8005738 <HAL_TIM_Base_Start+0x48>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a13      	ldr	r2, [pc, #76]	; (8005780 <HAL_TIM_Base_Start+0x90>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d111      	bne.n	800575c <HAL_TIM_Base_Start+0x6c>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 0307 	and.w	r3, r3, #7
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b06      	cmp	r3, #6
 8005748:	d010      	beq.n	800576c <HAL_TIM_Base_Start+0x7c>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f042 0201 	orr.w	r2, r2, #1
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	e007      	b.n	800576c <HAL_TIM_Base_Start+0x7c>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0201 	orr.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	2300      	movs	r3, #0
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr
 8005778:	40000400 	.word	0x40000400
 800577c:	40000800 	.word	0x40000800
 8005780:	40010800 	.word	0x40010800

08005784 <HAL_TIM_Base_Start_IT>:
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b01      	cmp	r3, #1
 8005796:	d001      	beq.n	800579c <HAL_TIM_Base_Start_IT+0x18>
 8005798:	2301      	movs	r3, #1
 800579a:	e03a      	b.n	8005812 <HAL_TIM_Base_Start_IT+0x8e>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	60da      	str	r2, [r3, #12]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057bc:	d00e      	beq.n	80057dc <HAL_TIM_Base_Start_IT+0x58>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a16      	ldr	r2, [pc, #88]	; (800581c <HAL_TIM_Base_Start_IT+0x98>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d009      	beq.n	80057dc <HAL_TIM_Base_Start_IT+0x58>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a14      	ldr	r2, [pc, #80]	; (8005820 <HAL_TIM_Base_Start_IT+0x9c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d004      	beq.n	80057dc <HAL_TIM_Base_Start_IT+0x58>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a13      	ldr	r2, [pc, #76]	; (8005824 <HAL_TIM_Base_Start_IT+0xa0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d111      	bne.n	8005800 <HAL_TIM_Base_Start_IT+0x7c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b06      	cmp	r3, #6
 80057ec:	d010      	beq.n	8005810 <HAL_TIM_Base_Start_IT+0x8c>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 0201 	orr.w	r2, r2, #1
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	e007      	b.n	8005810 <HAL_TIM_Base_Start_IT+0x8c>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0201 	orr.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	2300      	movs	r3, #0
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	bc80      	pop	{r7}
 800581a:	4770      	bx	lr
 800581c:	40000400 	.word	0x40000400
 8005820:	40000800 	.word	0x40000800
 8005824:	40010800 	.word	0x40010800

08005828 <HAL_TIM_Base_Stop_IT>:
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68da      	ldr	r2, [r3, #12]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0201 	bic.w	r2, r2, #1
 800583e:	60da      	str	r2, [r3, #12]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6a1a      	ldr	r2, [r3, #32]
 8005846:	f241 1311 	movw	r3, #4369	; 0x1111
 800584a:	4013      	ands	r3, r2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d107      	bne.n	8005860 <HAL_TIM_Base_Stop_IT+0x38>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0201 	bic.w	r2, r2, #1
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005868:	2300      	movs	r3, #0
 800586a:	4618      	mov	r0, r3
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	bc80      	pop	{r7}
 8005872:	4770      	bx	lr

08005874 <HAL_TIM_IRQHandler>:
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b02      	cmp	r3, #2
 8005888:	d122      	bne.n	80058d0 <HAL_TIM_IRQHandler+0x5c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b02      	cmp	r3, #2
 8005896:	d11b      	bne.n	80058d0 <HAL_TIM_IRQHandler+0x5c>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f06f 0202 	mvn.w	r2, #2
 80058a0:	611a      	str	r2, [r3, #16]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	761a      	strb	r2, [r3, #24]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_TIM_IRQHandler+0x4a>
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f985 	bl	8005bc6 <HAL_TIM_IC_CaptureCallback>
 80058bc:	e005      	b.n	80058ca <HAL_TIM_IRQHandler+0x56>
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f978 	bl	8005bb4 <HAL_TIM_OC_DelayElapsedCallback>
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f987 	bl	8005bd8 <HAL_TIM_PWM_PulseFinishedCallback>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	761a      	strb	r2, [r3, #24]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	f003 0304 	and.w	r3, r3, #4
 80058da:	2b04      	cmp	r3, #4
 80058dc:	d122      	bne.n	8005924 <HAL_TIM_IRQHandler+0xb0>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	d11b      	bne.n	8005924 <HAL_TIM_IRQHandler+0xb0>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f06f 0204 	mvn.w	r2, #4
 80058f4:	611a      	str	r2, [r3, #16]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2202      	movs	r2, #2
 80058fa:	761a      	strb	r2, [r3, #24]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <HAL_TIM_IRQHandler+0x9e>
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f95b 	bl	8005bc6 <HAL_TIM_IC_CaptureCallback>
 8005910:	e005      	b.n	800591e <HAL_TIM_IRQHandler+0xaa>
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f94e 	bl	8005bb4 <HAL_TIM_OC_DelayElapsedCallback>
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f95d 	bl	8005bd8 <HAL_TIM_PWM_PulseFinishedCallback>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	761a      	strb	r2, [r3, #24]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f003 0308 	and.w	r3, r3, #8
 800592e:	2b08      	cmp	r3, #8
 8005930:	d122      	bne.n	8005978 <HAL_TIM_IRQHandler+0x104>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f003 0308 	and.w	r3, r3, #8
 800593c:	2b08      	cmp	r3, #8
 800593e:	d11b      	bne.n	8005978 <HAL_TIM_IRQHandler+0x104>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f06f 0208 	mvn.w	r2, #8
 8005948:	611a      	str	r2, [r3, #16]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2204      	movs	r2, #4
 800594e:	761a      	strb	r2, [r3, #24]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_TIM_IRQHandler+0xf2>
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f931 	bl	8005bc6 <HAL_TIM_IC_CaptureCallback>
 8005964:	e005      	b.n	8005972 <HAL_TIM_IRQHandler+0xfe>
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f924 	bl	8005bb4 <HAL_TIM_OC_DelayElapsedCallback>
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f933 	bl	8005bd8 <HAL_TIM_PWM_PulseFinishedCallback>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	761a      	strb	r2, [r3, #24]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f003 0310 	and.w	r3, r3, #16
 8005982:	2b10      	cmp	r3, #16
 8005984:	d122      	bne.n	80059cc <HAL_TIM_IRQHandler+0x158>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f003 0310 	and.w	r3, r3, #16
 8005990:	2b10      	cmp	r3, #16
 8005992:	d11b      	bne.n	80059cc <HAL_TIM_IRQHandler+0x158>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f06f 0210 	mvn.w	r2, #16
 800599c:	611a      	str	r2, [r3, #16]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2208      	movs	r2, #8
 80059a2:	761a      	strb	r2, [r3, #24]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_TIM_IRQHandler+0x146>
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f907 	bl	8005bc6 <HAL_TIM_IC_CaptureCallback>
 80059b8:	e005      	b.n	80059c6 <HAL_TIM_IRQHandler+0x152>
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f8fa 	bl	8005bb4 <HAL_TIM_OC_DelayElapsedCallback>
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f909 	bl	8005bd8 <HAL_TIM_PWM_PulseFinishedCallback>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	761a      	strb	r2, [r3, #24]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d10e      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x184>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d107      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x184>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0201 	mvn.w	r2, #1
 80059f0:	611a      	str	r2, [r3, #16]
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7fb fac8 	bl	8000f88 <HAL_TIM_PeriodElapsedCallback>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b40      	cmp	r3, #64	; 0x40
 8005a04:	d10e      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x1b0>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a10:	2b40      	cmp	r3, #64	; 0x40
 8005a12:	d107      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x1b0>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a1c:	611a      	str	r2, [r3, #16]
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f8e3 	bl	8005bea <HAL_TIM_TriggerCallback>
 8005a24:	bf00      	nop
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_TIM_ConfigClockSource>:
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d101      	bne.n	8005a44 <HAL_TIM_ConfigClockSource+0x18>
 8005a40:	2302      	movs	r3, #2
 8005a42:	e0b3      	b.n	8005bac <HAL_TIM_ConfigClockSource+0x180>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	609a      	str	r2, [r3, #8]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a7c:	d03e      	beq.n	8005afc <HAL_TIM_ConfigClockSource+0xd0>
 8005a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a82:	f200 8087 	bhi.w	8005b94 <HAL_TIM_ConfigClockSource+0x168>
 8005a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8a:	f000 8085 	beq.w	8005b98 <HAL_TIM_ConfigClockSource+0x16c>
 8005a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a92:	d87f      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x168>
 8005a94:	2b70      	cmp	r3, #112	; 0x70
 8005a96:	d01a      	beq.n	8005ace <HAL_TIM_ConfigClockSource+0xa2>
 8005a98:	2b70      	cmp	r3, #112	; 0x70
 8005a9a:	d87b      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x168>
 8005a9c:	2b60      	cmp	r3, #96	; 0x60
 8005a9e:	d050      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x116>
 8005aa0:	2b60      	cmp	r3, #96	; 0x60
 8005aa2:	d877      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x168>
 8005aa4:	2b50      	cmp	r3, #80	; 0x50
 8005aa6:	d03c      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0xf6>
 8005aa8:	2b50      	cmp	r3, #80	; 0x50
 8005aaa:	d873      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x168>
 8005aac:	2b40      	cmp	r3, #64	; 0x40
 8005aae:	d058      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0x136>
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d86f      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x168>
 8005ab4:	2b30      	cmp	r3, #48	; 0x30
 8005ab6:	d064      	beq.n	8005b82 <HAL_TIM_ConfigClockSource+0x156>
 8005ab8:	2b30      	cmp	r3, #48	; 0x30
 8005aba:	d86b      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x168>
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	d060      	beq.n	8005b82 <HAL_TIM_ConfigClockSource+0x156>
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	d867      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x168>
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d05c      	beq.n	8005b82 <HAL_TIM_ConfigClockSource+0x156>
 8005ac8:	2b10      	cmp	r3, #16
 8005aca:	d05a      	beq.n	8005b82 <HAL_TIM_ConfigClockSource+0x156>
 8005acc:	e062      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x168>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6818      	ldr	r0, [r3, #0]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	6899      	ldr	r1, [r3, #8]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f000 f974 	bl	8005dca <TIM_ETR_SetConfig>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	609a      	str	r2, [r3, #8]
 8005afa:	e04e      	b.n	8005b9a <HAL_TIM_ConfigClockSource+0x16e>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6818      	ldr	r0, [r3, #0]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	6899      	ldr	r1, [r3, #8]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f000 f95d 	bl	8005dca <TIM_ETR_SetConfig>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b1e:	609a      	str	r2, [r3, #8]
 8005b20:	e03b      	b.n	8005b9a <HAL_TIM_ConfigClockSource+0x16e>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6859      	ldr	r1, [r3, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f000 f8d4 	bl	8005cdc <TIM_TI1_ConfigInputStage>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2150      	movs	r1, #80	; 0x50
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 f92b 	bl	8005d96 <TIM_ITRx_SetConfig>
 8005b40:	e02b      	b.n	8005b9a <HAL_TIM_ConfigClockSource+0x16e>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	6859      	ldr	r1, [r3, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f000 f8f2 	bl	8005d38 <TIM_TI2_ConfigInputStage>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2160      	movs	r1, #96	; 0x60
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 f91b 	bl	8005d96 <TIM_ITRx_SetConfig>
 8005b60:	e01b      	b.n	8005b9a <HAL_TIM_ConfigClockSource+0x16e>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	6859      	ldr	r1, [r3, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f000 f8b4 	bl	8005cdc <TIM_TI1_ConfigInputStage>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2140      	movs	r1, #64	; 0x40
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 f90b 	bl	8005d96 <TIM_ITRx_SetConfig>
 8005b80:	e00b      	b.n	8005b9a <HAL_TIM_ConfigClockSource+0x16e>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	f000 f902 	bl	8005d96 <TIM_ITRx_SetConfig>
 8005b92:	e002      	b.n	8005b9a <HAL_TIM_ConfigClockSource+0x16e>
 8005b94:	bf00      	nop
 8005b96:	e000      	b.n	8005b9a <HAL_TIM_ConfigClockSource+0x16e>
 8005b98:	bf00      	nop
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005baa:	2300      	movs	r3, #0
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_TIM_OC_DelayElapsedCallback>:
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bc80      	pop	{r7}
 8005bc4:	4770      	bx	lr

08005bc6 <HAL_TIM_IC_CaptureCallback>:
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bc80      	pop	{r7}
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bc80      	pop	{r7}
 8005be8:	4770      	bx	lr

08005bea <HAL_TIM_TriggerCallback>:
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc80      	pop	{r7}
 8005bfa:	4770      	bx	lr

08005bfc <TIM_Base_SetConfig>:
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c12:	d00f      	beq.n	8005c34 <TIM_Base_SetConfig+0x38>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a2b      	ldr	r2, [pc, #172]	; (8005cc4 <TIM_Base_SetConfig+0xc8>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00b      	beq.n	8005c34 <TIM_Base_SetConfig+0x38>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a2a      	ldr	r2, [pc, #168]	; (8005cc8 <TIM_Base_SetConfig+0xcc>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d007      	beq.n	8005c34 <TIM_Base_SetConfig+0x38>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a29      	ldr	r2, [pc, #164]	; (8005ccc <TIM_Base_SetConfig+0xd0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d003      	beq.n	8005c34 <TIM_Base_SetConfig+0x38>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a28      	ldr	r2, [pc, #160]	; (8005cd0 <TIM_Base_SetConfig+0xd4>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d108      	bne.n	8005c46 <TIM_Base_SetConfig+0x4a>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4c:	d017      	beq.n	8005c7e <TIM_Base_SetConfig+0x82>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a1c      	ldr	r2, [pc, #112]	; (8005cc4 <TIM_Base_SetConfig+0xc8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d013      	beq.n	8005c7e <TIM_Base_SetConfig+0x82>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a1b      	ldr	r2, [pc, #108]	; (8005cc8 <TIM_Base_SetConfig+0xcc>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00f      	beq.n	8005c7e <TIM_Base_SetConfig+0x82>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a1a      	ldr	r2, [pc, #104]	; (8005ccc <TIM_Base_SetConfig+0xd0>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00b      	beq.n	8005c7e <TIM_Base_SetConfig+0x82>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a19      	ldr	r2, [pc, #100]	; (8005cd0 <TIM_Base_SetConfig+0xd4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d007      	beq.n	8005c7e <TIM_Base_SetConfig+0x82>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a18      	ldr	r2, [pc, #96]	; (8005cd4 <TIM_Base_SetConfig+0xd8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d003      	beq.n	8005c7e <TIM_Base_SetConfig+0x82>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a17      	ldr	r2, [pc, #92]	; (8005cd8 <TIM_Base_SetConfig+0xdc>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d108      	bne.n	8005c90 <TIM_Base_SetConfig+0x94>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	629a      	str	r2, [r3, #40]	; 0x28
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	615a      	str	r2, [r3, #20]
 8005cba:	bf00      	nop
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bc80      	pop	{r7}
 8005cc2:	4770      	bx	lr
 8005cc4:	40000400 	.word	0x40000400
 8005cc8:	40000800 	.word	0x40000800
 8005ccc:	40000c00 	.word	0x40000c00
 8005cd0:	40010800 	.word	0x40010800
 8005cd4:	40010c00 	.word	0x40010c00
 8005cd8:	40011000 	.word	0x40011000

08005cdc <TIM_TI1_ConfigInputStage>:
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	617b      	str	r3, [r7, #20]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f023 0201 	bic.w	r2, r3, #1
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	621a      	str	r2, [r3, #32]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	613b      	str	r3, [r7, #16]
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d06:	613b      	str	r3, [r7, #16]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f023 030a 	bic.w	r3, r3, #10
 8005d18:	617b      	str	r3, [r7, #20]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	619a      	str	r2, [r3, #24]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	621a      	str	r2, [r3, #32]
 8005d2e:	bf00      	nop
 8005d30:	371c      	adds	r7, #28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bc80      	pop	{r7}
 8005d36:	4770      	bx	lr

08005d38 <TIM_TI2_ConfigInputStage>:
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	f023 0210 	bic.w	r2, r3, #16
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	621a      	str	r2, [r3, #32]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	613b      	str	r3, [r7, #16]
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	031b      	lsls	r3, r3, #12
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d74:	613b      	str	r3, [r7, #16]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	619a      	str	r2, [r3, #24]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	621a      	str	r2, [r3, #32]
 8005d8c:	bf00      	nop
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bc80      	pop	{r7}
 8005d94:	4770      	bx	lr

08005d96 <TIM_ITRx_SetConfig>:
 8005d96:	b480      	push	{r7}
 8005d98:	b085      	sub	sp, #20
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	6039      	str	r1, [r7, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	f043 0307 	orr.w	r3, r3, #7
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	609a      	str	r2, [r3, #8]
 8005dc0:	bf00      	nop
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr

08005dca <TIM_ETR_SetConfig>:
 8005dca:	b480      	push	{r7}
 8005dcc:	b087      	sub	sp, #28
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	607a      	str	r2, [r7, #4]
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	617b      	str	r3, [r7, #20]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005de4:	617b      	str	r3, [r7, #20]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	021a      	lsls	r2, r3, #8
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	431a      	orrs	r2, r3
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	609a      	str	r2, [r3, #8]
 8005dfe:	bf00      	nop
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bc80      	pop	{r7}
 8005e06:	4770      	bx	lr

08005e08 <HAL_TIMEx_MasterConfigSynchronization>:
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e046      	b.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	60bb      	str	r3, [r7, #8]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	605a      	str	r2, [r3, #4]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e62:	d00e      	beq.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a13      	ldr	r2, [pc, #76]	; (8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d009      	beq.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a12      	ldr	r2, [pc, #72]	; (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d004      	beq.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a10      	ldr	r2, [pc, #64]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d10c      	bne.n	8005e9c <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e88:	60bb      	str	r3, [r7, #8]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60bb      	str	r3, [r7, #8]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	609a      	str	r2, [r3, #8]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005eac:	2300      	movs	r3, #0
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bc80      	pop	{r7}
 8005eb6:	4770      	bx	lr
 8005eb8:	40000400 	.word	0x40000400
 8005ebc:	40000800 	.word	0x40000800
 8005ec0:	40010800 	.word	0x40010800

08005ec4 <MX_FATFS_Init>:
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	4904      	ldr	r1, [pc, #16]	; (8005edc <MX_FATFS_Init+0x18>)
 8005eca:	4805      	ldr	r0, [pc, #20]	; (8005ee0 <MX_FATFS_Init+0x1c>)
 8005ecc:	f000 fd8a 	bl	80069e4 <FATFS_LinkDriver>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	4b03      	ldr	r3, [pc, #12]	; (8005ee4 <MX_FATFS_Init+0x20>)
 8005ed6:	701a      	strb	r2, [r3, #0]
 8005ed8:	bf00      	nop
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	20001b68 	.word	0x20001b68
 8005ee0:	200000a0 	.word	0x200000a0
 8005ee4:	20001b6c 	.word	0x20001b6c

08005ee8 <USER_initialize>:
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	71fb      	strb	r3, [r7, #7]
 8005ef2:	79fb      	ldrb	r3, [r7, #7]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 f9d9 	bl	80062ac <USER_SPI_initialize>
 8005efa:	4603      	mov	r3, r0
 8005efc:	4618      	mov	r0, r3
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <USER_status>:
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	71fb      	strb	r3, [r7, #7]
 8005f0e:	79fb      	ldrb	r3, [r7, #7]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 fab7 	bl	8006484 <USER_SPI_status>
 8005f16:	4603      	mov	r3, r0
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <USER_read>:
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	607a      	str	r2, [r7, #4]
 8005f2a:	603b      	str	r3, [r7, #0]
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	73fb      	strb	r3, [r7, #15]
 8005f30:	7bf8      	ldrb	r0, [r7, #15]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	68b9      	ldr	r1, [r7, #8]
 8005f38:	f000 fab8 	bl	80064ac <USER_SPI_read>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <USER_write>:
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	603b      	str	r3, [r7, #0]
 8005f52:	4603      	mov	r3, r0
 8005f54:	73fb      	strb	r3, [r7, #15]
 8005f56:	7bf8      	ldrb	r0, [r7, #15]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	68b9      	ldr	r1, [r7, #8]
 8005f5e:	f000 fb0b 	bl	8006578 <USER_SPI_write>
 8005f62:	4603      	mov	r3, r0
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <USER_ioctl>:
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	603a      	str	r2, [r7, #0]
 8005f76:	71fb      	strb	r3, [r7, #7]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	71bb      	strb	r3, [r7, #6]
 8005f7c:	79b9      	ldrb	r1, [r7, #6]
 8005f7e:	79fb      	ldrb	r3, [r7, #7]
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 fb74 	bl	8006670 <USER_SPI_ioctl>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <SPI_Timer_On>:
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	f7fd fd26 	bl	80039ec <HAL_GetTick>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	4a04      	ldr	r2, [pc, #16]	; (8005fb4 <SPI_Timer_On+0x20>)
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	4a04      	ldr	r2, [pc, #16]	; (8005fb8 <SPI_Timer_On+0x24>)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	bf00      	nop
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	20001fd0 	.word	0x20001fd0
 8005fb8:	20001fd4 	.word	0x20001fd4

08005fbc <SPI_Timer_Status>:
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	f7fd fd14 	bl	80039ec <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	4b06      	ldr	r3, [pc, #24]	; (8005fe0 <SPI_Timer_Status+0x24>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	1ad2      	subs	r2, r2, r3
 8005fcc:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <SPI_Timer_Status+0x28>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	bf34      	ite	cc
 8005fd4:	2301      	movcc	r3, #1
 8005fd6:	2300      	movcs	r3, #0
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	4618      	mov	r0, r3
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20001fd0 	.word	0x20001fd0
 8005fe4:	20001fd4 	.word	0x20001fd4

08005fe8 <xchg_spi>:
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af02      	add	r7, sp, #8
 8005fee:	4603      	mov	r3, r0
 8005ff0:	71fb      	strb	r3, [r7, #7]
 8005ff2:	f107 020f 	add.w	r2, r7, #15
 8005ff6:	1df9      	adds	r1, r7, #7
 8005ff8:	2332      	movs	r3, #50	; 0x32
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	4804      	ldr	r0, [pc, #16]	; (8006010 <xchg_spi+0x28>)
 8006000:	f7ff f8c9 	bl	8005196 <HAL_SPI_TransmitReceive>
 8006004:	7bfb      	ldrb	r3, [r7, #15]
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	200017d8 	.word	0x200017d8

08006014 <rcvr_spi_multi>:
 8006014:	b590      	push	{r4, r7, lr}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	e00a      	b.n	800603a <rcvr_spi_multi+0x26>
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	18d4      	adds	r4, r2, r3
 800602a:	20ff      	movs	r0, #255	; 0xff
 800602c:	f7ff ffdc 	bl	8005fe8 <xchg_spi>
 8006030:	4603      	mov	r3, r0
 8006032:	7023      	strb	r3, [r4, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	3301      	adds	r3, #1
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	429a      	cmp	r2, r3
 8006040:	d3f0      	bcc.n	8006024 <rcvr_spi_multi+0x10>
 8006042:	bf00      	nop
 8006044:	bf00      	nop
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	bd90      	pop	{r4, r7, pc}

0800604c <xmit_spi_multi>:
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
 8006056:	2300      	movs	r3, #0
 8006058:	60fb      	str	r3, [r7, #12]
 800605a:	e009      	b.n	8006070 <xmit_spi_multi+0x24>
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4413      	add	r3, r2
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff ffbf 	bl	8005fe8 <xchg_spi>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3301      	adds	r3, #1
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	429a      	cmp	r2, r3
 8006076:	d3f1      	bcc.n	800605c <xmit_spi_multi+0x10>
 8006078:	bf00      	nop
 800607a:	bf00      	nop
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <wait_ready>:
 8006082:	b580      	push	{r7, lr}
 8006084:	b086      	sub	sp, #24
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	f7fd fcaf 	bl	80039ec <HAL_GetTick>
 800608e:	6178      	str	r0, [r7, #20]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	20ff      	movs	r0, #255	; 0xff
 8006096:	f7ff ffa7 	bl	8005fe8 <xchg_spi>
 800609a:	4603      	mov	r3, r0
 800609c:	73fb      	strb	r3, [r7, #15]
 800609e:	7bfb      	ldrb	r3, [r7, #15]
 80060a0:	2bff      	cmp	r3, #255	; 0xff
 80060a2:	d007      	beq.n	80060b4 <wait_ready+0x32>
 80060a4:	f7fd fca2 	bl	80039ec <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d8ef      	bhi.n	8006094 <wait_ready+0x12>
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
 80060b6:	2bff      	cmp	r3, #255	; 0xff
 80060b8:	bf0c      	ite	eq
 80060ba:	2301      	moveq	r3, #1
 80060bc:	2300      	movne	r3, #0
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <despiselect>:
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	2201      	movs	r2, #1
 80060ce:	2101      	movs	r1, #1
 80060d0:	4803      	ldr	r0, [pc, #12]	; (80060e0 <despiselect+0x18>)
 80060d2:	f7fe f900 	bl	80042d6 <HAL_GPIO_WritePin>
 80060d6:	20ff      	movs	r0, #255	; 0xff
 80060d8:	f7ff ff86 	bl	8005fe8 <xchg_spi>
 80060dc:	bf00      	nop
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	40020c00 	.word	0x40020c00

080060e4 <spiselect>:
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	2200      	movs	r2, #0
 80060ea:	2101      	movs	r1, #1
 80060ec:	4809      	ldr	r0, [pc, #36]	; (8006114 <spiselect+0x30>)
 80060ee:	f7fe f8f2 	bl	80042d6 <HAL_GPIO_WritePin>
 80060f2:	20ff      	movs	r0, #255	; 0xff
 80060f4:	f7ff ff78 	bl	8005fe8 <xchg_spi>
 80060f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80060fc:	f7ff ffc1 	bl	8006082 <wait_ready>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <spiselect+0x26>
 8006106:	2301      	movs	r3, #1
 8006108:	e002      	b.n	8006110 <spiselect+0x2c>
 800610a:	f7ff ffdd 	bl	80060c8 <despiselect>
 800610e:	2300      	movs	r3, #0
 8006110:	4618      	mov	r0, r3
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40020c00 	.word	0x40020c00

08006118 <rcvr_datablock>:
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
 8006122:	20c8      	movs	r0, #200	; 0xc8
 8006124:	f7ff ff36 	bl	8005f94 <SPI_Timer_On>
 8006128:	20ff      	movs	r0, #255	; 0xff
 800612a:	f7ff ff5d 	bl	8005fe8 <xchg_spi>
 800612e:	4603      	mov	r3, r0
 8006130:	73fb      	strb	r3, [r7, #15]
 8006132:	7bfb      	ldrb	r3, [r7, #15]
 8006134:	2bff      	cmp	r3, #255	; 0xff
 8006136:	d104      	bne.n	8006142 <rcvr_datablock+0x2a>
 8006138:	f7ff ff40 	bl	8005fbc <SPI_Timer_Status>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1f2      	bne.n	8006128 <rcvr_datablock+0x10>
 8006142:	7bfb      	ldrb	r3, [r7, #15]
 8006144:	2bfe      	cmp	r3, #254	; 0xfe
 8006146:	d001      	beq.n	800614c <rcvr_datablock+0x34>
 8006148:	2300      	movs	r3, #0
 800614a:	e00a      	b.n	8006162 <rcvr_datablock+0x4a>
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7ff ff60 	bl	8006014 <rcvr_spi_multi>
 8006154:	20ff      	movs	r0, #255	; 0xff
 8006156:	f7ff ff47 	bl	8005fe8 <xchg_spi>
 800615a:	20ff      	movs	r0, #255	; 0xff
 800615c:	f7ff ff44 	bl	8005fe8 <xchg_spi>
 8006160:	2301      	movs	r3, #1
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <xmit_datablock>:
 800616a:	b580      	push	{r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	460b      	mov	r3, r1
 8006174:	70fb      	strb	r3, [r7, #3]
 8006176:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800617a:	f7ff ff82 	bl	8006082 <wait_ready>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <xmit_datablock+0x1e>
 8006184:	2300      	movs	r3, #0
 8006186:	e01e      	b.n	80061c6 <xmit_datablock+0x5c>
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	4618      	mov	r0, r3
 800618c:	f7ff ff2c 	bl	8005fe8 <xchg_spi>
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	2bfd      	cmp	r3, #253	; 0xfd
 8006194:	d016      	beq.n	80061c4 <xmit_datablock+0x5a>
 8006196:	f44f 7100 	mov.w	r1, #512	; 0x200
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff ff56 	bl	800604c <xmit_spi_multi>
 80061a0:	20ff      	movs	r0, #255	; 0xff
 80061a2:	f7ff ff21 	bl	8005fe8 <xchg_spi>
 80061a6:	20ff      	movs	r0, #255	; 0xff
 80061a8:	f7ff ff1e 	bl	8005fe8 <xchg_spi>
 80061ac:	20ff      	movs	r0, #255	; 0xff
 80061ae:	f7ff ff1b 	bl	8005fe8 <xchg_spi>
 80061b2:	4603      	mov	r3, r0
 80061b4:	73fb      	strb	r3, [r7, #15]
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
 80061b8:	f003 031f 	and.w	r3, r3, #31
 80061bc:	2b05      	cmp	r3, #5
 80061be:	d001      	beq.n	80061c4 <xmit_datablock+0x5a>
 80061c0:	2300      	movs	r3, #0
 80061c2:	e000      	b.n	80061c6 <xmit_datablock+0x5c>
 80061c4:	2301      	movs	r3, #1
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <send_cmd>:
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	4603      	mov	r3, r0
 80061d6:	6039      	str	r1, [r7, #0]
 80061d8:	71fb      	strb	r3, [r7, #7]
 80061da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	da0e      	bge.n	8006200 <send_cmd+0x32>
 80061e2:	79fb      	ldrb	r3, [r7, #7]
 80061e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061e8:	71fb      	strb	r3, [r7, #7]
 80061ea:	2100      	movs	r1, #0
 80061ec:	2037      	movs	r0, #55	; 0x37
 80061ee:	f7ff ffee 	bl	80061ce <send_cmd>
 80061f2:	4603      	mov	r3, r0
 80061f4:	73bb      	strb	r3, [r7, #14]
 80061f6:	7bbb      	ldrb	r3, [r7, #14]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d901      	bls.n	8006200 <send_cmd+0x32>
 80061fc:	7bbb      	ldrb	r3, [r7, #14]
 80061fe:	e051      	b.n	80062a4 <send_cmd+0xd6>
 8006200:	79fb      	ldrb	r3, [r7, #7]
 8006202:	2b0c      	cmp	r3, #12
 8006204:	d008      	beq.n	8006218 <send_cmd+0x4a>
 8006206:	f7ff ff5f 	bl	80060c8 <despiselect>
 800620a:	f7ff ff6b 	bl	80060e4 <spiselect>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <send_cmd+0x4a>
 8006214:	23ff      	movs	r3, #255	; 0xff
 8006216:	e045      	b.n	80062a4 <send_cmd+0xd6>
 8006218:	79fb      	ldrb	r3, [r7, #7]
 800621a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800621e:	b2db      	uxtb	r3, r3
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff fee1 	bl	8005fe8 <xchg_spi>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	0e1b      	lsrs	r3, r3, #24
 800622a:	b2db      	uxtb	r3, r3
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff fedb 	bl	8005fe8 <xchg_spi>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	0c1b      	lsrs	r3, r3, #16
 8006236:	b2db      	uxtb	r3, r3
 8006238:	4618      	mov	r0, r3
 800623a:	f7ff fed5 	bl	8005fe8 <xchg_spi>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	0a1b      	lsrs	r3, r3, #8
 8006242:	b2db      	uxtb	r3, r3
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff fecf 	bl	8005fe8 <xchg_spi>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	b2db      	uxtb	r3, r3
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff feca 	bl	8005fe8 <xchg_spi>
 8006254:	2301      	movs	r3, #1
 8006256:	73fb      	strb	r3, [r7, #15]
 8006258:	79fb      	ldrb	r3, [r7, #7]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <send_cmd+0x94>
 800625e:	2395      	movs	r3, #149	; 0x95
 8006260:	73fb      	strb	r3, [r7, #15]
 8006262:	79fb      	ldrb	r3, [r7, #7]
 8006264:	2b08      	cmp	r3, #8
 8006266:	d101      	bne.n	800626c <send_cmd+0x9e>
 8006268:	2387      	movs	r3, #135	; 0x87
 800626a:	73fb      	strb	r3, [r7, #15]
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff feba 	bl	8005fe8 <xchg_spi>
 8006274:	79fb      	ldrb	r3, [r7, #7]
 8006276:	2b0c      	cmp	r3, #12
 8006278:	d102      	bne.n	8006280 <send_cmd+0xb2>
 800627a:	20ff      	movs	r0, #255	; 0xff
 800627c:	f7ff feb4 	bl	8005fe8 <xchg_spi>
 8006280:	230a      	movs	r3, #10
 8006282:	73fb      	strb	r3, [r7, #15]
 8006284:	20ff      	movs	r0, #255	; 0xff
 8006286:	f7ff feaf 	bl	8005fe8 <xchg_spi>
 800628a:	4603      	mov	r3, r0
 800628c:	73bb      	strb	r3, [r7, #14]
 800628e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006292:	2b00      	cmp	r3, #0
 8006294:	da05      	bge.n	80062a2 <send_cmd+0xd4>
 8006296:	7bfb      	ldrb	r3, [r7, #15]
 8006298:	3b01      	subs	r3, #1
 800629a:	73fb      	strb	r3, [r7, #15]
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1f0      	bne.n	8006284 <send_cmd+0xb6>
 80062a2:	7bbb      	ldrb	r3, [r7, #14]
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <USER_SPI_initialize>:
 80062ac:	b590      	push	{r4, r7, lr}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	4603      	mov	r3, r0
 80062b4:	71fb      	strb	r3, [r7, #7]
 80062b6:	79fb      	ldrb	r3, [r7, #7]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <USER_SPI_initialize+0x14>
 80062bc:	2301      	movs	r3, #1
 80062be:	e0d6      	b.n	800646e <USER_SPI_initialize+0x1c2>
 80062c0:	4b6d      	ldr	r3, [pc, #436]	; (8006478 <USER_SPI_initialize+0x1cc>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <USER_SPI_initialize+0x2a>
 80062ce:	4b6a      	ldr	r3, [pc, #424]	; (8006478 <USER_SPI_initialize+0x1cc>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	e0cb      	b.n	800646e <USER_SPI_initialize+0x1c2>
 80062d6:	4b69      	ldr	r3, [pc, #420]	; (800647c <USER_SPI_initialize+0x1d0>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80062e0:	4b66      	ldr	r3, [pc, #408]	; (800647c <USER_SPI_initialize+0x1d0>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	230a      	movs	r3, #10
 80062ec:	73fb      	strb	r3, [r7, #15]
 80062ee:	e005      	b.n	80062fc <USER_SPI_initialize+0x50>
 80062f0:	20ff      	movs	r0, #255	; 0xff
 80062f2:	f7ff fe79 	bl	8005fe8 <xchg_spi>
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	73fb      	strb	r3, [r7, #15]
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1f6      	bne.n	80062f0 <USER_SPI_initialize+0x44>
 8006302:	2300      	movs	r3, #0
 8006304:	737b      	strb	r3, [r7, #13]
 8006306:	2100      	movs	r1, #0
 8006308:	2000      	movs	r0, #0
 800630a:	f7ff ff60 	bl	80061ce <send_cmd>
 800630e:	4603      	mov	r3, r0
 8006310:	2b01      	cmp	r3, #1
 8006312:	f040 808b 	bne.w	800642c <USER_SPI_initialize+0x180>
 8006316:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800631a:	f7ff fe3b 	bl	8005f94 <SPI_Timer_On>
 800631e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006322:	2008      	movs	r0, #8
 8006324:	f7ff ff53 	bl	80061ce <send_cmd>
 8006328:	4603      	mov	r3, r0
 800632a:	2b01      	cmp	r3, #1
 800632c:	d151      	bne.n	80063d2 <USER_SPI_initialize+0x126>
 800632e:	2300      	movs	r3, #0
 8006330:	73fb      	strb	r3, [r7, #15]
 8006332:	e00d      	b.n	8006350 <USER_SPI_initialize+0xa4>
 8006334:	7bfc      	ldrb	r4, [r7, #15]
 8006336:	20ff      	movs	r0, #255	; 0xff
 8006338:	f7ff fe56 	bl	8005fe8 <xchg_spi>
 800633c:	4603      	mov	r3, r0
 800633e:	461a      	mov	r2, r3
 8006340:	f107 0310 	add.w	r3, r7, #16
 8006344:	4423      	add	r3, r4
 8006346:	f803 2c08 	strb.w	r2, [r3, #-8]
 800634a:	7bfb      	ldrb	r3, [r7, #15]
 800634c:	3301      	adds	r3, #1
 800634e:	73fb      	strb	r3, [r7, #15]
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	2b03      	cmp	r3, #3
 8006354:	d9ee      	bls.n	8006334 <USER_SPI_initialize+0x88>
 8006356:	7abb      	ldrb	r3, [r7, #10]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d167      	bne.n	800642c <USER_SPI_initialize+0x180>
 800635c:	7afb      	ldrb	r3, [r7, #11]
 800635e:	2baa      	cmp	r3, #170	; 0xaa
 8006360:	d164      	bne.n	800642c <USER_SPI_initialize+0x180>
 8006362:	bf00      	nop
 8006364:	f7ff fe2a 	bl	8005fbc <SPI_Timer_Status>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d007      	beq.n	800637e <USER_SPI_initialize+0xd2>
 800636e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006372:	20a9      	movs	r0, #169	; 0xa9
 8006374:	f7ff ff2b 	bl	80061ce <send_cmd>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1f2      	bne.n	8006364 <USER_SPI_initialize+0xb8>
 800637e:	f7ff fe1d 	bl	8005fbc <SPI_Timer_Status>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d051      	beq.n	800642c <USER_SPI_initialize+0x180>
 8006388:	2100      	movs	r1, #0
 800638a:	203a      	movs	r0, #58	; 0x3a
 800638c:	f7ff ff1f 	bl	80061ce <send_cmd>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d14a      	bne.n	800642c <USER_SPI_initialize+0x180>
 8006396:	2300      	movs	r3, #0
 8006398:	73fb      	strb	r3, [r7, #15]
 800639a:	e00d      	b.n	80063b8 <USER_SPI_initialize+0x10c>
 800639c:	7bfc      	ldrb	r4, [r7, #15]
 800639e:	20ff      	movs	r0, #255	; 0xff
 80063a0:	f7ff fe22 	bl	8005fe8 <xchg_spi>
 80063a4:	4603      	mov	r3, r0
 80063a6:	461a      	mov	r2, r3
 80063a8:	f107 0310 	add.w	r3, r7, #16
 80063ac:	4423      	add	r3, r4
 80063ae:	f803 2c08 	strb.w	r2, [r3, #-8]
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	3301      	adds	r3, #1
 80063b6:	73fb      	strb	r3, [r7, #15]
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d9ee      	bls.n	800639c <USER_SPI_initialize+0xf0>
 80063be:	7a3b      	ldrb	r3, [r7, #8]
 80063c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <USER_SPI_initialize+0x120>
 80063c8:	230c      	movs	r3, #12
 80063ca:	e000      	b.n	80063ce <USER_SPI_initialize+0x122>
 80063cc:	2304      	movs	r3, #4
 80063ce:	737b      	strb	r3, [r7, #13]
 80063d0:	e02c      	b.n	800642c <USER_SPI_initialize+0x180>
 80063d2:	2100      	movs	r1, #0
 80063d4:	20a9      	movs	r0, #169	; 0xa9
 80063d6:	f7ff fefa 	bl	80061ce <send_cmd>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d804      	bhi.n	80063ea <USER_SPI_initialize+0x13e>
 80063e0:	2302      	movs	r3, #2
 80063e2:	737b      	strb	r3, [r7, #13]
 80063e4:	23a9      	movs	r3, #169	; 0xa9
 80063e6:	73bb      	strb	r3, [r7, #14]
 80063e8:	e003      	b.n	80063f2 <USER_SPI_initialize+0x146>
 80063ea:	2301      	movs	r3, #1
 80063ec:	737b      	strb	r3, [r7, #13]
 80063ee:	2301      	movs	r3, #1
 80063f0:	73bb      	strb	r3, [r7, #14]
 80063f2:	bf00      	nop
 80063f4:	f7ff fde2 	bl	8005fbc <SPI_Timer_Status>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d007      	beq.n	800640e <USER_SPI_initialize+0x162>
 80063fe:	7bbb      	ldrb	r3, [r7, #14]
 8006400:	2100      	movs	r1, #0
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff fee3 	bl	80061ce <send_cmd>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1f2      	bne.n	80063f4 <USER_SPI_initialize+0x148>
 800640e:	f7ff fdd5 	bl	8005fbc <SPI_Timer_Status>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d007      	beq.n	8006428 <USER_SPI_initialize+0x17c>
 8006418:	f44f 7100 	mov.w	r1, #512	; 0x200
 800641c:	2010      	movs	r0, #16
 800641e:	f7ff fed6 	bl	80061ce <send_cmd>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <USER_SPI_initialize+0x180>
 8006428:	2300      	movs	r3, #0
 800642a:	737b      	strb	r3, [r7, #13]
 800642c:	4a14      	ldr	r2, [pc, #80]	; (8006480 <USER_SPI_initialize+0x1d4>)
 800642e:	7b7b      	ldrb	r3, [r7, #13]
 8006430:	7013      	strb	r3, [r2, #0]
 8006432:	f7ff fe49 	bl	80060c8 <despiselect>
 8006436:	7b7b      	ldrb	r3, [r7, #13]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d012      	beq.n	8006462 <USER_SPI_initialize+0x1b6>
 800643c:	4b0f      	ldr	r3, [pc, #60]	; (800647c <USER_SPI_initialize+0x1d0>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006446:	4b0d      	ldr	r3, [pc, #52]	; (800647c <USER_SPI_initialize+0x1d0>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0210 	orr.w	r2, r2, #16
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	4b09      	ldr	r3, [pc, #36]	; (8006478 <USER_SPI_initialize+0x1cc>)
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	b2db      	uxtb	r3, r3
 8006456:	f023 0301 	bic.w	r3, r3, #1
 800645a:	b2da      	uxtb	r2, r3
 800645c:	4b06      	ldr	r3, [pc, #24]	; (8006478 <USER_SPI_initialize+0x1cc>)
 800645e:	701a      	strb	r2, [r3, #0]
 8006460:	e002      	b.n	8006468 <USER_SPI_initialize+0x1bc>
 8006462:	4b05      	ldr	r3, [pc, #20]	; (8006478 <USER_SPI_initialize+0x1cc>)
 8006464:	2201      	movs	r2, #1
 8006466:	701a      	strb	r2, [r3, #0]
 8006468:	4b03      	ldr	r3, [pc, #12]	; (8006478 <USER_SPI_initialize+0x1cc>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	b2db      	uxtb	r3, r3
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	bd90      	pop	{r4, r7, pc}
 8006476:	bf00      	nop
 8006478:	200000b4 	.word	0x200000b4
 800647c:	200017d8 	.word	0x200017d8
 8006480:	200016a8 	.word	0x200016a8

08006484 <USER_SPI_status>:
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	4603      	mov	r3, r0
 800648c:	71fb      	strb	r3, [r7, #7]
 800648e:	79fb      	ldrb	r3, [r7, #7]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <USER_SPI_status+0x14>
 8006494:	2301      	movs	r3, #1
 8006496:	e002      	b.n	800649e <USER_SPI_status+0x1a>
 8006498:	4b03      	ldr	r3, [pc, #12]	; (80064a8 <USER_SPI_status+0x24>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	4618      	mov	r0, r3
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bc80      	pop	{r7}
 80064a6:	4770      	bx	lr
 80064a8:	200000b4 	.word	0x200000b4

080064ac <USER_SPI_read>:
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60b9      	str	r1, [r7, #8]
 80064b4:	607a      	str	r2, [r7, #4]
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	4603      	mov	r3, r0
 80064ba:	73fb      	strb	r3, [r7, #15]
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d102      	bne.n	80064c8 <USER_SPI_read+0x1c>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <USER_SPI_read+0x20>
 80064c8:	2304      	movs	r3, #4
 80064ca:	e04d      	b.n	8006568 <USER_SPI_read+0xbc>
 80064cc:	4b28      	ldr	r3, [pc, #160]	; (8006570 <USER_SPI_read+0xc4>)
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <USER_SPI_read+0x32>
 80064da:	2303      	movs	r3, #3
 80064dc:	e044      	b.n	8006568 <USER_SPI_read+0xbc>
 80064de:	4b25      	ldr	r3, [pc, #148]	; (8006574 <USER_SPI_read+0xc8>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	f003 0308 	and.w	r3, r3, #8
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d102      	bne.n	80064f0 <USER_SPI_read+0x44>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	025b      	lsls	r3, r3, #9
 80064ee:	607b      	str	r3, [r7, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d111      	bne.n	800651a <USER_SPI_read+0x6e>
 80064f6:	6879      	ldr	r1, [r7, #4]
 80064f8:	2011      	movs	r0, #17
 80064fa:	f7ff fe68 	bl	80061ce <send_cmd>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d129      	bne.n	8006558 <USER_SPI_read+0xac>
 8006504:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006508:	68b8      	ldr	r0, [r7, #8]
 800650a:	f7ff fe05 	bl	8006118 <rcvr_datablock>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d021      	beq.n	8006558 <USER_SPI_read+0xac>
 8006514:	2300      	movs	r3, #0
 8006516:	603b      	str	r3, [r7, #0]
 8006518:	e01e      	b.n	8006558 <USER_SPI_read+0xac>
 800651a:	6879      	ldr	r1, [r7, #4]
 800651c:	2012      	movs	r0, #18
 800651e:	f7ff fe56 	bl	80061ce <send_cmd>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d117      	bne.n	8006558 <USER_SPI_read+0xac>
 8006528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800652c:	68b8      	ldr	r0, [r7, #8]
 800652e:	f7ff fdf3 	bl	8006118 <rcvr_datablock>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00a      	beq.n	800654e <USER_SPI_read+0xa2>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800653e:	60bb      	str	r3, [r7, #8]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	3b01      	subs	r3, #1
 8006544:	603b      	str	r3, [r7, #0]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1ed      	bne.n	8006528 <USER_SPI_read+0x7c>
 800654c:	e000      	b.n	8006550 <USER_SPI_read+0xa4>
 800654e:	bf00      	nop
 8006550:	2100      	movs	r1, #0
 8006552:	200c      	movs	r0, #12
 8006554:	f7ff fe3b 	bl	80061ce <send_cmd>
 8006558:	f7ff fdb6 	bl	80060c8 <despiselect>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	bf14      	ite	ne
 8006562:	2301      	movne	r3, #1
 8006564:	2300      	moveq	r3, #0
 8006566:	b2db      	uxtb	r3, r3
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	200000b4 	.word	0x200000b4
 8006574:	200016a8 	.word	0x200016a8

08006578 <USER_SPI_write>:
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	607a      	str	r2, [r7, #4]
 8006582:	603b      	str	r3, [r7, #0]
 8006584:	4603      	mov	r3, r0
 8006586:	73fb      	strb	r3, [r7, #15]
 8006588:	7bfb      	ldrb	r3, [r7, #15]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d102      	bne.n	8006594 <USER_SPI_write+0x1c>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <USER_SPI_write+0x20>
 8006594:	2304      	movs	r3, #4
 8006596:	e063      	b.n	8006660 <USER_SPI_write+0xe8>
 8006598:	4b33      	ldr	r3, [pc, #204]	; (8006668 <USER_SPI_write+0xf0>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	b2db      	uxtb	r3, r3
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <USER_SPI_write+0x32>
 80065a6:	2303      	movs	r3, #3
 80065a8:	e05a      	b.n	8006660 <USER_SPI_write+0xe8>
 80065aa:	4b2f      	ldr	r3, [pc, #188]	; (8006668 <USER_SPI_write+0xf0>)
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <USER_SPI_write+0x44>
 80065b8:	2302      	movs	r3, #2
 80065ba:	e051      	b.n	8006660 <USER_SPI_write+0xe8>
 80065bc:	4b2b      	ldr	r3, [pc, #172]	; (800666c <USER_SPI_write+0xf4>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	f003 0308 	and.w	r3, r3, #8
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d102      	bne.n	80065ce <USER_SPI_write+0x56>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	025b      	lsls	r3, r3, #9
 80065cc:	607b      	str	r3, [r7, #4]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d110      	bne.n	80065f6 <USER_SPI_write+0x7e>
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	2018      	movs	r0, #24
 80065d8:	f7ff fdf9 	bl	80061ce <send_cmd>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d136      	bne.n	8006650 <USER_SPI_write+0xd8>
 80065e2:	21fe      	movs	r1, #254	; 0xfe
 80065e4:	68b8      	ldr	r0, [r7, #8]
 80065e6:	f7ff fdc0 	bl	800616a <xmit_datablock>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d02f      	beq.n	8006650 <USER_SPI_write+0xd8>
 80065f0:	2300      	movs	r3, #0
 80065f2:	603b      	str	r3, [r7, #0]
 80065f4:	e02c      	b.n	8006650 <USER_SPI_write+0xd8>
 80065f6:	4b1d      	ldr	r3, [pc, #116]	; (800666c <USER_SPI_write+0xf4>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	f003 0306 	and.w	r3, r3, #6
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <USER_SPI_write+0x92>
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	2097      	movs	r0, #151	; 0x97
 8006606:	f7ff fde2 	bl	80061ce <send_cmd>
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	2019      	movs	r0, #25
 800660e:	f7ff fdde 	bl	80061ce <send_cmd>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d11b      	bne.n	8006650 <USER_SPI_write+0xd8>
 8006618:	21fc      	movs	r1, #252	; 0xfc
 800661a:	68b8      	ldr	r0, [r7, #8]
 800661c:	f7ff fda5 	bl	800616a <xmit_datablock>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00a      	beq.n	800663c <USER_SPI_write+0xc4>
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800662c:	60bb      	str	r3, [r7, #8]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	3b01      	subs	r3, #1
 8006632:	603b      	str	r3, [r7, #0]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1ee      	bne.n	8006618 <USER_SPI_write+0xa0>
 800663a:	e000      	b.n	800663e <USER_SPI_write+0xc6>
 800663c:	bf00      	nop
 800663e:	21fd      	movs	r1, #253	; 0xfd
 8006640:	2000      	movs	r0, #0
 8006642:	f7ff fd92 	bl	800616a <xmit_datablock>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <USER_SPI_write+0xd8>
 800664c:	2301      	movs	r3, #1
 800664e:	603b      	str	r3, [r7, #0]
 8006650:	f7ff fd3a 	bl	80060c8 <despiselect>
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	bf14      	ite	ne
 800665a:	2301      	movne	r3, #1
 800665c:	2300      	moveq	r3, #0
 800665e:	b2db      	uxtb	r3, r3
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	200000b4 	.word	0x200000b4
 800666c:	200016a8 	.word	0x200016a8

08006670 <USER_SPI_ioctl>:
 8006670:	b580      	push	{r7, lr}
 8006672:	b08c      	sub	sp, #48	; 0x30
 8006674:	af00      	add	r7, sp, #0
 8006676:	4603      	mov	r3, r0
 8006678:	603a      	str	r2, [r7, #0]
 800667a:	71fb      	strb	r3, [r7, #7]
 800667c:	460b      	mov	r3, r1
 800667e:	71bb      	strb	r3, [r7, #6]
 8006680:	79fb      	ldrb	r3, [r7, #7]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <USER_SPI_ioctl+0x1a>
 8006686:	2304      	movs	r3, #4
 8006688:	e15a      	b.n	8006940 <USER_SPI_ioctl+0x2d0>
 800668a:	4baf      	ldr	r3, [pc, #700]	; (8006948 <USER_SPI_ioctl+0x2d8>)
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	b2db      	uxtb	r3, r3
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <USER_SPI_ioctl+0x2c>
 8006698:	2303      	movs	r3, #3
 800669a:	e151      	b.n	8006940 <USER_SPI_ioctl+0x2d0>
 800669c:	2301      	movs	r3, #1
 800669e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80066a2:	79bb      	ldrb	r3, [r7, #6]
 80066a4:	2b04      	cmp	r3, #4
 80066a6:	f200 8136 	bhi.w	8006916 <USER_SPI_ioctl+0x2a6>
 80066aa:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <USER_SPI_ioctl+0x40>)
 80066ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b0:	080066c5 	.word	0x080066c5
 80066b4:	080066d9 	.word	0x080066d9
 80066b8:	08006917 	.word	0x08006917
 80066bc:	08006785 	.word	0x08006785
 80066c0:	0800687b 	.word	0x0800687b
 80066c4:	f7ff fd0e 	bl	80060e4 <spiselect>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 8127 	beq.w	800691e <USER_SPI_ioctl+0x2ae>
 80066d0:	2300      	movs	r3, #0
 80066d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80066d6:	e122      	b.n	800691e <USER_SPI_ioctl+0x2ae>
 80066d8:	2100      	movs	r1, #0
 80066da:	2009      	movs	r0, #9
 80066dc:	f7ff fd77 	bl	80061ce <send_cmd>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f040 811d 	bne.w	8006922 <USER_SPI_ioctl+0x2b2>
 80066e8:	f107 030c 	add.w	r3, r7, #12
 80066ec:	2110      	movs	r1, #16
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff fd12 	bl	8006118 <rcvr_datablock>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f000 8113 	beq.w	8006922 <USER_SPI_ioctl+0x2b2>
 80066fc:	7b3b      	ldrb	r3, [r7, #12]
 80066fe:	099b      	lsrs	r3, r3, #6
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b01      	cmp	r3, #1
 8006704:	d111      	bne.n	800672a <USER_SPI_ioctl+0xba>
 8006706:	7d7b      	ldrb	r3, [r7, #21]
 8006708:	461a      	mov	r2, r3
 800670a:	7d3b      	ldrb	r3, [r7, #20]
 800670c:	021b      	lsls	r3, r3, #8
 800670e:	4413      	add	r3, r2
 8006710:	461a      	mov	r2, r3
 8006712:	7cfb      	ldrb	r3, [r7, #19]
 8006714:	041b      	lsls	r3, r3, #16
 8006716:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800671a:	4413      	add	r3, r2
 800671c:	3301      	adds	r3, #1
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	029a      	lsls	r2, r3, #10
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	e028      	b.n	800677c <USER_SPI_ioctl+0x10c>
 800672a:	7c7b      	ldrb	r3, [r7, #17]
 800672c:	f003 030f 	and.w	r3, r3, #15
 8006730:	b2da      	uxtb	r2, r3
 8006732:	7dbb      	ldrb	r3, [r7, #22]
 8006734:	09db      	lsrs	r3, r3, #7
 8006736:	b2db      	uxtb	r3, r3
 8006738:	4413      	add	r3, r2
 800673a:	b2da      	uxtb	r2, r3
 800673c:	7d7b      	ldrb	r3, [r7, #21]
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	b2db      	uxtb	r3, r3
 8006742:	f003 0306 	and.w	r3, r3, #6
 8006746:	b2db      	uxtb	r3, r3
 8006748:	4413      	add	r3, r2
 800674a:	b2db      	uxtb	r3, r3
 800674c:	3302      	adds	r3, #2
 800674e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006752:	7d3b      	ldrb	r3, [r7, #20]
 8006754:	099b      	lsrs	r3, r3, #6
 8006756:	b2db      	uxtb	r3, r3
 8006758:	461a      	mov	r2, r3
 800675a:	7cfb      	ldrb	r3, [r7, #19]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	441a      	add	r2, r3
 8006760:	7cbb      	ldrb	r3, [r7, #18]
 8006762:	029b      	lsls	r3, r3, #10
 8006764:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006768:	4413      	add	r3, r2
 800676a:	3301      	adds	r3, #1
 800676c:	61fb      	str	r3, [r7, #28]
 800676e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006772:	3b09      	subs	r3, #9
 8006774:	69fa      	ldr	r2, [r7, #28]
 8006776:	409a      	lsls	r2, r3
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	2300      	movs	r3, #0
 800677e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006782:	e0ce      	b.n	8006922 <USER_SPI_ioctl+0x2b2>
 8006784:	4b71      	ldr	r3, [pc, #452]	; (800694c <USER_SPI_ioctl+0x2dc>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	f003 0304 	and.w	r3, r3, #4
 800678c:	2b00      	cmp	r3, #0
 800678e:	d031      	beq.n	80067f4 <USER_SPI_ioctl+0x184>
 8006790:	2100      	movs	r1, #0
 8006792:	208d      	movs	r0, #141	; 0x8d
 8006794:	f7ff fd1b 	bl	80061ce <send_cmd>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	f040 80c3 	bne.w	8006926 <USER_SPI_ioctl+0x2b6>
 80067a0:	20ff      	movs	r0, #255	; 0xff
 80067a2:	f7ff fc21 	bl	8005fe8 <xchg_spi>
 80067a6:	f107 030c 	add.w	r3, r7, #12
 80067aa:	2110      	movs	r1, #16
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7ff fcb3 	bl	8006118 <rcvr_datablock>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 80b6 	beq.w	8006926 <USER_SPI_ioctl+0x2b6>
 80067ba:	2330      	movs	r3, #48	; 0x30
 80067bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80067c0:	e007      	b.n	80067d2 <USER_SPI_ioctl+0x162>
 80067c2:	20ff      	movs	r0, #255	; 0xff
 80067c4:	f7ff fc10 	bl	8005fe8 <xchg_spi>
 80067c8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80067cc:	3b01      	subs	r3, #1
 80067ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80067d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1f3      	bne.n	80067c2 <USER_SPI_ioctl+0x152>
 80067da:	7dbb      	ldrb	r3, [r7, #22]
 80067dc:	091b      	lsrs	r3, r3, #4
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	461a      	mov	r2, r3
 80067e2:	2310      	movs	r3, #16
 80067e4:	fa03 f202 	lsl.w	r2, r3, r2
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	2300      	movs	r3, #0
 80067ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80067f2:	e098      	b.n	8006926 <USER_SPI_ioctl+0x2b6>
 80067f4:	2100      	movs	r1, #0
 80067f6:	2009      	movs	r0, #9
 80067f8:	f7ff fce9 	bl	80061ce <send_cmd>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f040 8091 	bne.w	8006926 <USER_SPI_ioctl+0x2b6>
 8006804:	f107 030c 	add.w	r3, r7, #12
 8006808:	2110      	movs	r1, #16
 800680a:	4618      	mov	r0, r3
 800680c:	f7ff fc84 	bl	8006118 <rcvr_datablock>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	f000 8087 	beq.w	8006926 <USER_SPI_ioctl+0x2b6>
 8006818:	4b4c      	ldr	r3, [pc, #304]	; (800694c <USER_SPI_ioctl+0x2dc>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	f003 0302 	and.w	r3, r3, #2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d012      	beq.n	800684a <USER_SPI_ioctl+0x1da>
 8006824:	7dbb      	ldrb	r3, [r7, #22]
 8006826:	005b      	lsls	r3, r3, #1
 8006828:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800682c:	7dfa      	ldrb	r2, [r7, #23]
 800682e:	09d2      	lsrs	r2, r2, #7
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	4413      	add	r3, r2
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	7e7b      	ldrb	r3, [r7, #25]
 8006838:	099b      	lsrs	r3, r3, #6
 800683a:	b2db      	uxtb	r3, r3
 800683c:	3b01      	subs	r3, #1
 800683e:	fa02 f303 	lsl.w	r3, r2, r3
 8006842:	461a      	mov	r2, r3
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	e013      	b.n	8006872 <USER_SPI_ioctl+0x202>
 800684a:	7dbb      	ldrb	r3, [r7, #22]
 800684c:	109b      	asrs	r3, r3, #2
 800684e:	b29b      	uxth	r3, r3
 8006850:	f003 031f 	and.w	r3, r3, #31
 8006854:	3301      	adds	r3, #1
 8006856:	7dfa      	ldrb	r2, [r7, #23]
 8006858:	00d2      	lsls	r2, r2, #3
 800685a:	f002 0218 	and.w	r2, r2, #24
 800685e:	7df9      	ldrb	r1, [r7, #23]
 8006860:	0949      	lsrs	r1, r1, #5
 8006862:	b2c9      	uxtb	r1, r1
 8006864:	440a      	add	r2, r1
 8006866:	3201      	adds	r2, #1
 8006868:	fb02 f303 	mul.w	r3, r2, r3
 800686c:	461a      	mov	r2, r3
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	2300      	movs	r3, #0
 8006874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006878:	e055      	b.n	8006926 <USER_SPI_ioctl+0x2b6>
 800687a:	4b34      	ldr	r3, [pc, #208]	; (800694c <USER_SPI_ioctl+0x2dc>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	f003 0306 	and.w	r3, r3, #6
 8006882:	2b00      	cmp	r3, #0
 8006884:	d051      	beq.n	800692a <USER_SPI_ioctl+0x2ba>
 8006886:	f107 020c 	add.w	r2, r7, #12
 800688a:	79fb      	ldrb	r3, [r7, #7]
 800688c:	210b      	movs	r1, #11
 800688e:	4618      	mov	r0, r3
 8006890:	f7ff feee 	bl	8006670 <USER_SPI_ioctl>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d149      	bne.n	800692e <USER_SPI_ioctl+0x2be>
 800689a:	7b3b      	ldrb	r3, [r7, #12]
 800689c:	099b      	lsrs	r3, r3, #6
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d104      	bne.n	80068ae <USER_SPI_ioctl+0x23e>
 80068a4:	7dbb      	ldrb	r3, [r7, #22]
 80068a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d041      	beq.n	8006932 <USER_SPI_ioctl+0x2c2>
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	623b      	str	r3, [r7, #32]
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
 80068be:	4b23      	ldr	r3, [pc, #140]	; (800694c <USER_SPI_ioctl+0x2dc>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	f003 0308 	and.w	r3, r3, #8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d105      	bne.n	80068d6 <USER_SPI_ioctl+0x266>
 80068ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068cc:	025b      	lsls	r3, r3, #9
 80068ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	025b      	lsls	r3, r3, #9
 80068d4:	627b      	str	r3, [r7, #36]	; 0x24
 80068d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068d8:	2020      	movs	r0, #32
 80068da:	f7ff fc78 	bl	80061ce <send_cmd>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d128      	bne.n	8006936 <USER_SPI_ioctl+0x2c6>
 80068e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068e6:	2021      	movs	r0, #33	; 0x21
 80068e8:	f7ff fc71 	bl	80061ce <send_cmd>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d121      	bne.n	8006936 <USER_SPI_ioctl+0x2c6>
 80068f2:	2100      	movs	r1, #0
 80068f4:	2026      	movs	r0, #38	; 0x26
 80068f6:	f7ff fc6a 	bl	80061ce <send_cmd>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d11a      	bne.n	8006936 <USER_SPI_ioctl+0x2c6>
 8006900:	f247 5030 	movw	r0, #30000	; 0x7530
 8006904:	f7ff fbbd 	bl	8006082 <wait_ready>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d013      	beq.n	8006936 <USER_SPI_ioctl+0x2c6>
 800690e:	2300      	movs	r3, #0
 8006910:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006914:	e00f      	b.n	8006936 <USER_SPI_ioctl+0x2c6>
 8006916:	2304      	movs	r3, #4
 8006918:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800691c:	e00c      	b.n	8006938 <USER_SPI_ioctl+0x2c8>
 800691e:	bf00      	nop
 8006920:	e00a      	b.n	8006938 <USER_SPI_ioctl+0x2c8>
 8006922:	bf00      	nop
 8006924:	e008      	b.n	8006938 <USER_SPI_ioctl+0x2c8>
 8006926:	bf00      	nop
 8006928:	e006      	b.n	8006938 <USER_SPI_ioctl+0x2c8>
 800692a:	bf00      	nop
 800692c:	e004      	b.n	8006938 <USER_SPI_ioctl+0x2c8>
 800692e:	bf00      	nop
 8006930:	e002      	b.n	8006938 <USER_SPI_ioctl+0x2c8>
 8006932:	bf00      	nop
 8006934:	e000      	b.n	8006938 <USER_SPI_ioctl+0x2c8>
 8006936:	bf00      	nop
 8006938:	f7ff fbc6 	bl	80060c8 <despiselect>
 800693c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006940:	4618      	mov	r0, r3
 8006942:	3730      	adds	r7, #48	; 0x30
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	200000b4 	.word	0x200000b4
 800694c:	200016a8 	.word	0x200016a8

08006950 <FATFS_LinkDriverEx>:
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	4613      	mov	r3, r2
 800695c:	71fb      	strb	r3, [r7, #7]
 800695e:	2301      	movs	r3, #1
 8006960:	75fb      	strb	r3, [r7, #23]
 8006962:	2300      	movs	r3, #0
 8006964:	75bb      	strb	r3, [r7, #22]
 8006966:	4b1e      	ldr	r3, [pc, #120]	; (80069e0 <FATFS_LinkDriverEx+0x90>)
 8006968:	7a5b      	ldrb	r3, [r3, #9]
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d131      	bne.n	80069d4 <FATFS_LinkDriverEx+0x84>
 8006970:	4b1b      	ldr	r3, [pc, #108]	; (80069e0 <FATFS_LinkDriverEx+0x90>)
 8006972:	7a5b      	ldrb	r3, [r3, #9]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	461a      	mov	r2, r3
 8006978:	4b19      	ldr	r3, [pc, #100]	; (80069e0 <FATFS_LinkDriverEx+0x90>)
 800697a:	2100      	movs	r1, #0
 800697c:	5499      	strb	r1, [r3, r2]
 800697e:	4b18      	ldr	r3, [pc, #96]	; (80069e0 <FATFS_LinkDriverEx+0x90>)
 8006980:	7a5b      	ldrb	r3, [r3, #9]
 8006982:	b2db      	uxtb	r3, r3
 8006984:	4a16      	ldr	r2, [pc, #88]	; (80069e0 <FATFS_LinkDriverEx+0x90>)
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	605a      	str	r2, [r3, #4]
 800698e:	4b14      	ldr	r3, [pc, #80]	; (80069e0 <FATFS_LinkDriverEx+0x90>)
 8006990:	7a5b      	ldrb	r3, [r3, #9]
 8006992:	b2db      	uxtb	r3, r3
 8006994:	461a      	mov	r2, r3
 8006996:	4b12      	ldr	r3, [pc, #72]	; (80069e0 <FATFS_LinkDriverEx+0x90>)
 8006998:	4413      	add	r3, r2
 800699a:	79fa      	ldrb	r2, [r7, #7]
 800699c:	721a      	strb	r2, [r3, #8]
 800699e:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <FATFS_LinkDriverEx+0x90>)
 80069a0:	7a5b      	ldrb	r3, [r3, #9]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	b2d1      	uxtb	r1, r2
 80069a8:	4a0d      	ldr	r2, [pc, #52]	; (80069e0 <FATFS_LinkDriverEx+0x90>)
 80069aa:	7251      	strb	r1, [r2, #9]
 80069ac:	75bb      	strb	r3, [r7, #22]
 80069ae:	7dbb      	ldrb	r3, [r7, #22]
 80069b0:	3330      	adds	r3, #48	; 0x30
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	701a      	strb	r2, [r3, #0]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	3301      	adds	r3, #1
 80069bc:	223a      	movs	r2, #58	; 0x3a
 80069be:	701a      	strb	r2, [r3, #0]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	3302      	adds	r3, #2
 80069c4:	222f      	movs	r2, #47	; 0x2f
 80069c6:	701a      	strb	r2, [r3, #0]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	3303      	adds	r3, #3
 80069cc:	2200      	movs	r2, #0
 80069ce:	701a      	strb	r2, [r3, #0]
 80069d0:	2300      	movs	r3, #0
 80069d2:	75fb      	strb	r3, [r7, #23]
 80069d4:	7dfb      	ldrb	r3, [r7, #23]
 80069d6:	4618      	mov	r0, r3
 80069d8:	371c      	adds	r7, #28
 80069da:	46bd      	mov	sp, r7
 80069dc:	bc80      	pop	{r7}
 80069de:	4770      	bx	lr
 80069e0:	200016ac 	.word	0x200016ac

080069e4 <FATFS_LinkDriver>:
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
 80069ee:	2200      	movs	r2, #0
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7ff ffac 	bl	8006950 <FATFS_LinkDriverEx>
 80069f8:	4603      	mov	r3, r0
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
	...

08006a04 <__libc_init_array>:
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	2600      	movs	r6, #0
 8006a08:	4d0c      	ldr	r5, [pc, #48]	; (8006a3c <__libc_init_array+0x38>)
 8006a0a:	4c0d      	ldr	r4, [pc, #52]	; (8006a40 <__libc_init_array+0x3c>)
 8006a0c:	1b64      	subs	r4, r4, r5
 8006a0e:	10a4      	asrs	r4, r4, #2
 8006a10:	42a6      	cmp	r6, r4
 8006a12:	d109      	bne.n	8006a28 <__libc_init_array+0x24>
 8006a14:	f000 f822 	bl	8006a5c <_init>
 8006a18:	2600      	movs	r6, #0
 8006a1a:	4d0a      	ldr	r5, [pc, #40]	; (8006a44 <__libc_init_array+0x40>)
 8006a1c:	4c0a      	ldr	r4, [pc, #40]	; (8006a48 <__libc_init_array+0x44>)
 8006a1e:	1b64      	subs	r4, r4, r5
 8006a20:	10a4      	asrs	r4, r4, #2
 8006a22:	42a6      	cmp	r6, r4
 8006a24:	d105      	bne.n	8006a32 <__libc_init_array+0x2e>
 8006a26:	bd70      	pop	{r4, r5, r6, pc}
 8006a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a2c:	4798      	blx	r3
 8006a2e:	3601      	adds	r6, #1
 8006a30:	e7ee      	b.n	8006a10 <__libc_init_array+0xc>
 8006a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a36:	4798      	blx	r3
 8006a38:	3601      	adds	r6, #1
 8006a3a:	e7f2      	b.n	8006a22 <__libc_init_array+0x1e>
 8006a3c:	08006b20 	.word	0x08006b20
 8006a40:	08006b20 	.word	0x08006b20
 8006a44:	08006b20 	.word	0x08006b20
 8006a48:	08006b24 	.word	0x08006b24

08006a4c <memset>:
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	4402      	add	r2, r0
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d100      	bne.n	8006a56 <memset+0xa>
 8006a54:	4770      	bx	lr
 8006a56:	f803 1b01 	strb.w	r1, [r3], #1
 8006a5a:	e7f9      	b.n	8006a50 <memset+0x4>

08006a5c <_init>:
 8006a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5e:	bf00      	nop
 8006a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a62:	bc08      	pop	{r3}
 8006a64:	469e      	mov	lr, r3
 8006a66:	4770      	bx	lr

08006a68 <_fini>:
 8006a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6a:	bf00      	nop
 8006a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a6e:	bc08      	pop	{r3}
 8006a70:	469e      	mov	lr, r3
 8006a72:	4770      	bx	lr
